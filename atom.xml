<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jpruby的blog</title>
  
  <subtitle>安安静静写博客</subtitle>
  <link href="https://jpruby888.github.io/atom.xml" rel="self"/>
  
  <link href="https://jpruby888.github.io/"/>
  <updated>2022-03-21T03:28:02.897Z</updated>
  <id>https://jpruby888.github.io/</id>
  
  <author>
    <name>jpruby</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前后端分离项目笔记</title>
    <link href="https://jpruby888.github.io/post/3eb4351b.html"/>
    <id>https://jpruby888.github.io/post/3eb4351b.html</id>
    <published>2022-03-20T14:24:12.000Z</published>
    <updated>2022-03-21T03:28:02.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前后端分离项目"><a href="#前后端分离项目" class="headerlink" title="前后端分离项目"></a>前后端分离项目</h2><p>文章总体分为2大部分，Java后端接口和vue前端页面，比较长，因为不想分开发布，真正想你4小时学会，哈哈。</p><p>先看效果：</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/6e25b3a7df92467ea08888f72d28a205.png" alt="图片"></p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/354dd5cafdb94e94a9f3553eef95e0b2.png" alt="图片"></p><p>不多说，开始敲代码。</p><h2 id="Java后端接口开发"><a href="#Java后端接口开发" class="headerlink" title="Java后端接口开发"></a>Java后端接口开发</h2><h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>从零开始搭建一个项目骨架，最好选择合适，熟悉的技术，并且在未来易拓展，适合微服务化体系等。所以一般以Springboot作为我们的框架基础，这是离不开的了。</p><p>然后数据层，我们常用的是Mybatis，易上手，方便维护。但是单表操作比较困难，特别是添加字段或减少字段的时候，比较繁琐，所以这里我推荐使用Mybatis Plus（<a href="https://mp.baomidou.com/%EF%BC%89%EF%BC%8C%E4%B8%BA%E7%AE%80%E5%8C%96%E5%BC%80%E5%8F%91%E8%80%8C%E7%94%9F%EF%BC%8C%E5%8F%AA%E9%9C%80%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%8D%B3%E5%8F%AF%E5%BF%AB%E9%80%9F%E8%BF%9B%E8%A1%8C">https://mp.baomidou.com/），为简化开发而生，只需简单配置，即可快速进行</a> CRUD 操作，从而节省大量时间。</p><p>作为一个项目骨架，权限也是我们不能忽略的，Shiro配置简单，使用也简单，所以使用Shiro作为我们的的权限。</p><p>考虑到项目可能需要部署多台，这时候我们的会话等信息需要共享，Redis是现在主流的缓存中间件，也适合我们的项目。</p><p>然后因为前后端分离，所以我们使用jwt作为我们用户身份凭证。</p><p>ok，我们现在就开始搭建我们的项目脚手架！</p><p>技术栈：</p><ul><li>SpringBoot</li><li>mybatis plus</li><li>shiro</li><li>lombok</li><li>redis</li><li>hibernate validatior</li><li>jwt</li></ul><p>导图：<a href="https://www.markerhub.com/map/131">https://www.markerhub.com/map/131</a></p><h3 id="2、新建Springboot项目"><a href="#2、新建Springboot项目" class="headerlink" title="2、新建Springboot项目"></a>2、新建Springboot项目</h3><p>这里，我们使用IDEA来开发我们项目，新建步骤比较简单，我们就不截图了。</p><p>开发工具与环境：</p><ul><li>idea</li><li>mysql</li><li>jdk 8</li><li>maven3.3.9</li></ul><p>新建好的项目结构如下，SpringBoot版本使用的目前最新的2.2.6.RELEASE版本</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/be1226b48ef24b2bbe00d75996bd7f89.png" alt="图片"></p><p>pom的jar包导入如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li><p>devtools：项目的热加载重启插件</p></li><li><p>lombok：简化代码的工具</p><h3 id="3、整合mybatis-plus"><a href="#3、整合mybatis-plus" class="headerlink" title="3、整合mybatis plus"></a>3、整合mybatis plus</h3></li></ul><p>接下来，我们来整合mybatis plus，让项目能完成基本的增删改查操作。步骤很简单：可以去官网看看：<a href="https://mp.baomidou.com/guide/install.html">https://mp.baomidou.com/guide/install.html</a></p><p><strong>第一步：导入jar包</strong></p><p>pom中导入mybatis plus的jar包，因为后面会涉及到代码生成，所以我们还需要导入页面模板引擎，这里我们用的是freemarker。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mp--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--mp代码生成器--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>第二步：然后去写配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># DataSource Config</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/vueblog?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">    username: root</span><br><span class="line">    password: admin</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath*:/mapper/**Mapper.xml</span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br></pre></td></tr></table></figure><p>上面除了配置数据库的信息，还配置了myabtis plus的mapper的xml文件的扫描路径，这一步不要忘记了。<br><strong>第三步：开启mapper接口扫描，添加分页插件</strong></p><p>新建一个包：通过<a href="https://github.com/mapperScan">@mapperScan</a>注解指定要变成实现类的接口所在的包，然后包下面的所有接口在编译之后都会生成相应的实现类。PaginationInterceptor是一个分页插件。</p><ul><li>com.markerhub.config.MybatisPlusConfig</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@MapperScan(&quot;com.markerhub.mapper&quot;)</span><br><span class="line">public class MybatisPlusConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public PaginationInterceptor paginationInterceptor() &#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();</span><br><span class="line">        return paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第四步：代码生成</strong></p><p>如果你没再用其他插件，那么现在就已经可以使用mybatis plus了，官方给我们提供了一个代码生成器，然后我写上自己的参数之后，就可以直接根据数据库表信息生成entity、service、mapper等接口和实现类。</p><ul><li>com.markerhub.CodeGenerator</li></ul><p>因为代码比较长，就不贴出来了，在代码仓库上看哈！</p><p>首先我在数据库中新建了一个user表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `m_user` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `created` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `last_login` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `UK_USERNAME` (`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `m_blog` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext,</span><br><span class="line">  `created` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `status` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `vueblog`.`m_user` (`id`, `username`, `avatar`, `email`, `password`, `status`, `created`, `last_login`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;markerhub&#x27;</span>, <span class="string">&#x27;https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/5a9f48118166308daba8b6da7e466aab.jpg&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;96e79218965eb72c92a549dd5a330112&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;2020-04-20 10:44:01&#x27;</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p>运行CodeGenerator的main方法，输入表名：m_user，生成结果如下：</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/47682f628eae4c3588f6729e1df322af.png" alt="图片"></p><p>得到：</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/f5e4daec518044619c0d374daa844f40.png" alt="图片"></p><p>简洁！方便！经过上面的步骤，基本上我们已经把mybatis plus框架集成到项目中了。</p><p>ps：额，注意一下m_blog表的代码也生成一下哈。</p><p>在UserController中写个测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    @GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">    public Object test(@PathVariable(&quot;id&quot;) Long id) &#123;</span><br><span class="line">        return userService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8080/user/1">http://localhost:8080/user/1</a> 获得结果如下，整合成功！<br><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/ecb8c3a623694595a22980a26821ccb6.png" alt="图片"></p><h3 id="3、统一结果封装"><a href="#3、统一结果封装" class="headerlink" title="3、统一结果封装"></a>3、统一结果封装</h3><p>这里我们用到了一个Result的类，这个用于我们的异步统一返回的结果封装。一般来说，结果里面有几个要素必要的</p><ul><li>是否成功，可用code表示（如200表示成功，400表示异常）</li><li>结果消息</li><li>结果数据</li></ul><p>所以可得到封装如下：</p><ul><li>com.markerhub.common.lang.Result</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class Result implements Serializable &#123;</span><br><span class="line">    private String code;</span><br><span class="line">    private String msg;</span><br><span class="line">    private Object data;</span><br><span class="line">    public static Result succ(Object data) &#123;</span><br><span class="line">        Result m = new Result();</span><br><span class="line">        m.setCode(&quot;0&quot;);</span><br><span class="line">        m.setData(data);</span><br><span class="line">        m.setMsg(&quot;操作成功&quot;);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Result succ(String mess, Object data) &#123;</span><br><span class="line">        Result m = new Result();</span><br><span class="line">        m.setCode(&quot;0&quot;);</span><br><span class="line">        m.setData(data);</span><br><span class="line">        m.setMsg(mess);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Result fail(String mess) &#123;</span><br><span class="line">        Result m = new Result();</span><br><span class="line">        m.setCode(&quot;-1&quot;);</span><br><span class="line">        m.setData(null);</span><br><span class="line">        m.setMsg(mess);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Result fail(String mess, Object data) &#123;</span><br><span class="line">        Result m = new Result();</span><br><span class="line">        m.setCode(&quot;-1&quot;);</span><br><span class="line">        m.setData(data);</span><br><span class="line">        m.setMsg(mess);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、整合shiro-jwt，并会话共享"><a href="#4、整合shiro-jwt，并会话共享" class="headerlink" title="4、整合shiro+jwt，并会话共享"></a>4、整合shiro+jwt，并会话共享</h3><p>考虑到后面可能需要做集群、负载均衡等，所以就需要会话共享，而shiro的缓存和会话信息，我们一般考虑使用redis来存储这些数据，所以，我们不仅仅需要整合shiro，同时也需要整合redis。在开源的项目中，我们找到了一个starter可以快速整合shiro-redis，配置简单，这里也推荐大家使用。</p><p>而因为我们需要做的是前后端分离项目的骨架，所以一般我们会采用token或者jwt作为跨域身份验证解决方案。所以整合shiro的过程中，我们需要引入jwt的身份验证过程。</p><p>那么我们就开始整合：</p><p>我们使用一个shiro-redis-spring-boot-starter的jar包，具体教程可以看官方文档：<a href="https://github.com/alexxiyang/shiro-redis/blob/master/docs/README.md#spring-boot-starter">https://github.com/alexxiyang/shiro-redis/blob/master/docs/README.md#spring-boot-starter</a></p><p>第一步：导入shiro-redis的starter包：还有jwt的工具包，以及为了简化开发，我引入了hutool工具包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.crazycake&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-redis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- hutool工具类--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.3.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- jwt --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>第二步：编写配置：</p><h4 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h4><ul><li>com.markerhub.config.ShiroConfig</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * shiro启用注解拦截控制器</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    JwtFilter jwtFilter;</span><br><span class="line">    @Bean</span><br><span class="line">    public SessionManager sessionManager(RedisSessionDAO redisSessionDAO) &#123;</span><br><span class="line">        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();</span><br><span class="line">        sessionManager.setSessionDAO(redisSessionDAO);</span><br><span class="line">        return sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultWebSecurityManager securityManager(AccountRealm accountRealm,</span><br><span class="line">                                                     SessionManager sessionManager,</span><br><span class="line">                                                     RedisCacheManager redisCacheManager) &#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(accountRealm);</span><br><span class="line">        securityManager.setSessionManager(sessionManager);</span><br><span class="line">        securityManager.setCacheManager(redisCacheManager);</span><br><span class="line">        /*</span><br><span class="line">         * 关闭shiro自带的session，详情见文档</span><br><span class="line">         */</span><br><span class="line">        DefaultSubjectDAO subjectDAO = new DefaultSubjectDAO();</span><br><span class="line">        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = new DefaultSessionStorageEvaluator();</span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(false);</span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        securityManager.setSubjectDAO(subjectDAO);</span><br><span class="line">        return securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterChainDefinition shiroFilterChainDefinition() &#123;</span><br><span class="line">        DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition();</span><br><span class="line">        Map&lt;String, String&gt; filterMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">        filterMap.put(&quot;/**&quot;, &quot;jwt&quot;); // 主要通过注解方式校验权限</span><br><span class="line">        chainDefinition.addPathDefinitions(filterMap);</span><br><span class="line">        return chainDefinition;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean(&quot;shiroFilterFactoryBean&quot;)</span><br><span class="line">    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager,</span><br><span class="line">                                                         ShiroFilterChainDefinition shiroFilterChainDefinition) &#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilter.setSecurityManager(securityManager);</span><br><span class="line">        Map&lt;String, Filter&gt; filters = new HashMap&lt;&gt;();</span><br><span class="line">        filters.put(&quot;jwt&quot;, jwtFilter);</span><br><span class="line">        shiroFilter.setFilters(filters);</span><br><span class="line">        Map&lt;String, String&gt; filterMap = shiroFilterChainDefinition.getFilterChainMap();</span><br><span class="line">        shiroFilter.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        return shiroFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 开启注解代理（默认好像已经开启，可以不要）</span><br><span class="line">    @Bean</span><br><span class="line">    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager)&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        return authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public static DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() &#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator creator = new DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        return creator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面ShiroConfig，我们主要做了几件事情：</p><ol><li>引入RedisSessionDAO和RedisCacheManager，为了解决shiro的权限数据和会话信息能保存到redis中，实现会话共享。</li><li>重写了SessionManager和DefaultWebSecurityManager，同时在DefaultWebSecurityManager中为了关闭shiro自带的session方式，我们需要设置为false，这样用户就不再能通过session方式登录shiro。后面将采用jwt凭证登录。</li><li>在ShiroFilterChainDefinition中，我们不再通过编码形式拦截Controller访问路径，而是所有的路由都需要经过JwtFilter这个过滤器，然后判断请求头中是否含有jwt的信息，有就登录，没有就跳过。跳过之后，有Controller中的shiro注解进行再次拦截，比如<a href="https://github.com/RequiresAuthentication">@RequiresAuthentication</a>，这样控制权限访问。</li></ol><p>那么，接下来，我们聊聊ShiroConfig中出现的AccountRealm，还有JwtFilter。</p><h4 id="AccountRealm"><a href="#AccountRealm" class="headerlink" title="AccountRealm"></a>AccountRealm</h4><p>AccountRealm是shiro进行登录或者权限校验的逻辑所在，算是核心了，我们需要重写3个方法，分别是</p><ul><li>supports：为了让realm支持jwt的凭证校验</li><li>doGetAuthorizationInfo：权限校验</li><li>doGetAuthenticationInfo：登录认证校验</li></ul><p>我们先来总体看看AccountRealm的代码，然后逐个分析：</p><ul><li>com.markerhub.shiro.AccountRealm</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class AccountRealm extends AuthorizingRealm &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    JwtUtils jwtUtils;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(AuthenticationToken token) &#123;</span><br><span class="line">        return token instanceof JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line">        JwtToken jwt = (JwtToken) token;</span><br><span class="line">        log.info(&quot;jwt-----------------&gt;&#123;&#125;&quot;, jwt);</span><br><span class="line">        String userId = jwtUtils.getClaimByToken((String) jwt.getPrincipal()).getSubject();</span><br><span class="line">        User user = userService.getById(Long.parseLong(userId));</span><br><span class="line">        if(user == null) &#123;</span><br><span class="line">            throw new UnknownAccountException(&quot;账户不存在！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(user.getStatus() == -1) &#123;</span><br><span class="line">            throw new LockedAccountException(&quot;账户已被锁定！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        AccountProfile profile = new AccountProfile();</span><br><span class="line">        BeanUtil.copyProperties(user, profile);</span><br><span class="line">        log.info(&quot;profile-----------------&gt;&#123;&#125;&quot;, profile.toString());</span><br><span class="line">        return new SimpleAuthenticationInfo(profile, jwt.getCredentials(), getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实主要就是doGetAuthenticationInfo登录认证这个方法，可以看到我们通过jwt获取到用户信息，判断用户的状态，最后异常就抛出对应的异常信息，否者封装成SimpleAuthenticationInfo返回给shiro。<br>接下来我们逐步分析里面出现的新类：</p><p>1、shiro默认supports的是UsernamePasswordToken，而我们现在采用了jwt的方式，所以这里我们自定义一个JwtToken，来完成shiro的supports方法。</p><h4 id="JwtToken"><a href="#JwtToken" class="headerlink" title="JwtToken"></a>JwtToken</h4><ul><li>com.markerhub.shiro.JwtToken</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class JwtToken implements AuthenticationToken &#123;</span><br><span class="line">    private String token;</span><br><span class="line">    public JwtToken(String token) &#123;</span><br><span class="line">        this.token = token;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Object getPrincipal() &#123;</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Object getCredentials() &#123;</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、JwtUtils是个生成和校验jwt的工具类，其中有些jwt相关的密钥信息是从项目配置文件中配置的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;markerhub.jwt&quot;)</span><br><span class="line">public class JwtUtils &#123;</span><br><span class="line">    private String secret;</span><br><span class="line">    private long expire;</span><br><span class="line">    private String header;</span><br><span class="line">    /**</span><br><span class="line">     * 生成jwt token</span><br><span class="line">     */</span><br><span class="line">    public String generateToken(long userId) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取jwt的信息</span><br><span class="line">    public Claims getClaimByToken(String token) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * token是否过期</span><br><span class="line">     * @return  true：过期</span><br><span class="line">     */</span><br><span class="line">    public boolean isTokenExpired(Date expiration) &#123;</span><br><span class="line">        return expiration.before(new Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、而在AccountRealm我们还用到了AccountProfile，这是为了登录成功之后返回的一个用户信息的载体，</p><h4 id="AccountProfile"><a href="#AccountProfile" class="headerlink" title="AccountProfile"></a>AccountProfile</h4><ul><li>com.markerhub.shiro.AccountProfile</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class AccountProfile implements Serializable &#123;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String avatar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步，ok，基本的校验的路线完成之后，我们需要少量的基本信息配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">shiro-redis:</span><br><span class="line">  enabled: true</span><br><span class="line">  redis-manager:</span><br><span class="line">    host: 127.0.0.1:6379</span><br><span class="line">markerhub:</span><br><span class="line">  jwt:</span><br><span class="line">    # 加密秘钥</span><br><span class="line">    secret: f4e2e52034348f86b67cde581c0f9eb5</span><br><span class="line">    # token有效时长，7天，单位秒</span><br><span class="line">    expire: 604800</span><br><span class="line">    header: token</span><br></pre></td></tr></table></figure><p>第四步：另外，如果你项目有使用spring-boot-devtools，需要添加一个配置文件，在resources目录下新建文件夹META-INF，然后新建文件spring-devtools.properties，这样热重启时候才不会报错。</p><ul><li>resources&#x2F;META-INF&#x2F;spring-devtools.properties</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restart.include.shiro-redis=/shiro-[\\w-\\.]+jar</span><br></pre></td></tr></table></figure><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/f227ba4a47614a6ea2f849a56fcb352d.png" alt="图片"></p><h4 id="JwtFilter"><a href="#JwtFilter" class="headerlink" title="JwtFilter"></a>JwtFilter</h4><p>第五步：定义jwt的过滤器JwtFilter。</p><p>这个过滤器是我们的重点，这里我们继承的是Shiro内置的AuthenticatingFilter，一个可以内置了可以自动登录方法的的过滤器，有些同学继承BasicHttpAuthenticationFilter也是可以的。</p><p>我们需要重写几个方法：</p><ol><li>createToken：实现登录，我们需要生成我们自定义支持的JwtToken</li><li>onAccessDenied：拦截校验，当头部没有Authorization时候，我们直接通过，不需要自动登录；当带有的时候，首先我们校验jwt的有效性，没问题我们就直接执行executeLogin方法实现自动登录</li><li>onLoginFailure：登录异常时候进入的方法，我们直接把异常信息封装然后抛出</li><li>preHandle：拦截器的前置拦截，因为我们是前后端分析项目，项目中除了需要跨域全局配置之外，我们再拦截器中也需要提供跨域支持。这样，拦截器才不会在进入Controller之前就被限制了。</li></ol><p>下面我们看看总体的代码：</p><ul><li>com.markerhub.shiro.JwtFilter</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class JwtFilter extends AuthenticatingFilter &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    JwtUtils jwtUtils;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationToken createToken(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception &#123;</span><br><span class="line">        // 获取 token</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        String jwt = request.getHeader(&quot;Authorization&quot;);</span><br><span class="line">        if(StringUtils.isEmpty(jwt))&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return new JwtToken(jwt);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onAccessDenied(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception &#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        String token = request.getHeader(&quot;Authorization&quot;);</span><br><span class="line">        if(StringUtils.isEmpty(token)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 判断是否已过期</span><br><span class="line">            Claims claim = jwtUtils.getClaimByToken(token);</span><br><span class="line">            if(claim == null || jwtUtils.isTokenExpired(claim.getExpiration())) &#123;</span><br><span class="line">                throw new ExpiredCredentialsException(&quot;token已失效，请重新登录！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 执行自动登录</span><br><span class="line">        return executeLogin(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">        try &#123;</span><br><span class="line">            //处理登录失败的异常</span><br><span class="line">            Throwable throwable = e.getCause() == null ? e : e.getCause();</span><br><span class="line">            Result r = Result.fail(throwable.getMessage());</span><br><span class="line">            String json = JSONUtil.toJsonStr(r);</span><br><span class="line">            httpResponse.getWriter().print(json);</span><br><span class="line">        &#125; catch (IOException e1) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 对跨域提供支持</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = WebUtils.toHttp(request);</span><br><span class="line">        HttpServletResponse httpServletResponse = WebUtils.toHttp(response);</span><br><span class="line">        httpServletResponse.setHeader(&quot;Access-control-Allow-Origin&quot;, httpServletRequest.getHeader(&quot;Origin&quot;));</span><br><span class="line">        httpServletResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET,POST,OPTIONS,PUT,DELETE&quot;);</span><br><span class="line">        httpServletResponse.setHeader(&quot;Access-Control-Allow-Headers&quot;, httpServletRequest.getHeader(&quot;Access-Control-Request-Headers&quot;));</span><br><span class="line">        // 跨域时会首先发送一个OPTIONS请求，这里我们给OPTIONS请求直接返回正常状态</span><br><span class="line">        if (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(org.springframework.http.HttpStatus.OK.value());</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么到这里，我们的shiro就已经完成整合进来了，并且使用了jwt进行身份校验。</p><h3 id="5、异常处理"><a href="#5、异常处理" class="headerlink" title="5、异常处理"></a>5、异常处理</h3><p>有时候不可避免服务器报错的情况，如果不配置异常处理机制，就会默认返回tomcat或者nginx的5XX页面，对普通用户来说，不太友好，用户也不懂什么情况。这时候需要我们程序员设计返回一个友好简单的格式给前端。</p><p>处理办法如下：通过使用<a href="https://github.com/ControllerAdvice">@ControllerAdvice</a>来进行统一异常处理，<a href="https://github.com/ExceptionHandler">@ExceptionHandler</a>(value &#x3D; RuntimeException.class)来指定捕获的Exception各个类型异常 ，这个异常的处理，是全局的，所有类似的异常，都会跑到这个地方处理。</p><ul><li>com.markerhub.common.exception.GlobalExceptionHandler</li></ul><p>步骤二、定义全局异常处理，<a href="https://github.com/ControllerAdvice">@ControllerAdvice</a>表示定义全局控制器异常处理，<a href="https://github.com/ExceptionHandler">@ExceptionHandler</a>表示针对性异常处理，可对每种异常针对性处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 全局异常处理</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@RestControllerAdvice</span><br><span class="line">public class GlobalExcepitonHandler &#123;</span><br><span class="line">    // 捕捉shiro的异常</span><br><span class="line">    @ResponseStatus(HttpStatus.UNAUTHORIZED)</span><br><span class="line">    @ExceptionHandler(ShiroException.class)</span><br><span class="line">    public Result handle401(ShiroException e) &#123;</span><br><span class="line">        return Result.fail(401, e.getMessage(), null);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 处理Assert的异常</span><br><span class="line">     */</span><br><span class="line">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class="line">    @ExceptionHandler(value = IllegalArgumentException.class)</span><br><span class="line">    public Result handler(IllegalArgumentException e) throws IOException &#123;</span><br><span class="line">        log.error(&quot;Assert异常:--------------&gt;&#123;&#125;&quot;,e.getMessage());</span><br><span class="line">        return Result.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @Validated 校验错误异常处理</span><br><span class="line">     */</span><br><span class="line">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class="line">    @ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br><span class="line">    public Result handler(MethodArgumentNotValidException e) throws IOException &#123;</span><br><span class="line">        log.error(&quot;运行时异常:--------------&gt;&quot;,e);</span><br><span class="line">        BindingResult bindingResult = e.getBindingResult();</span><br><span class="line">        ObjectError objectError = bindingResult.getAllErrors().stream().findFirst().get();</span><br><span class="line">        return Result.fail(objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class="line">    @ExceptionHandler(value = RuntimeException.class)</span><br><span class="line">    public Result handler(RuntimeException e) throws IOException &#123;</span><br><span class="line">        log.error(&quot;运行时异常:--------------&gt;&quot;,e);</span><br><span class="line">        return Result.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们捕捉了几个异常：</p><ul><li>ShiroException：shiro抛出的异常，比如没有权限，用户登录异常</li><li>IllegalArgumentException：处理Assert的异常</li><li>MethodArgumentNotValidException：处理实体校验的异常</li><li>RuntimeException：捕捉其他异常</li></ul><h3 id="6、实体校验"><a href="#6、实体校验" class="headerlink" title="6、实体校验"></a>6、实体校验</h3><p>当我们表单数据提交的时候，前端的校验我们可以使用一些类似于jQuery Validate等js插件实现，而后端我们可以使用Hibernate validatior来做校验。</p><p>我们使用springboot框架作为基础，那么就已经自动集成了Hibernate validatior。</p><p>那么用起来啥样子的呢？</p><p>第一步：首先在实体的属性上添加对应的校验规则，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@TableName(&quot;m_user&quot;)</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    @TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br><span class="line">    private Long id;</span><br><span class="line">    @NotBlank(message = &quot;昵称不能为空&quot;)</span><br><span class="line">    private String username;</span><br><span class="line">    @NotBlank(message = &quot;邮箱不能为空&quot;)</span><br><span class="line">    @Email(message = &quot;邮箱格式不正确&quot;)</span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步 ：这里我们使用<a href="https://github.com/Validated">@Validated</a>注解方式，如果实体不符合要求，系统会抛出异常，那么我们的异常处理中就捕获到MethodArgumentNotValidException。</p><ul><li>com.markerhub.controller.UserController</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试实体校验</span><br><span class="line"> * @param user</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/save&quot;)</span><br><span class="line">public Object testUser(@Validated @RequestBody User user) &#123;</span><br><span class="line">    return user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、跨域问题"><a href="#7、跨域问题" class="headerlink" title="7、跨域问题"></a>7、跨域问题</h3><p>因为是前后端分析，所以跨域问题是避免不了的，我们直接在后台进行全局跨域处理：</p><ul><li>com.markerhub.config.CorsConfig</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 解决跨域问题</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class CorsConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">        registry.addMapping(&quot;/**&quot;)</span><br><span class="line">                .allowedOrigins(&quot;*&quot;)</span><br><span class="line">                .allowedMethods(&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;)</span><br><span class="line">                .allowCredentials(true)</span><br><span class="line">                .maxAge(3600)</span><br><span class="line">                .allowedHeaders(&quot;*&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，因为我们系统开发的接口比较简单，所以我就不集成swagger2啦，也比较简单而已。下面我们就直接进入我们的正题，进行编写登录接口。</p><h3 id="8、登录接口开发"><a href="#8、登录接口开发" class="headerlink" title="8、登录接口开发"></a>8、登录接口开发</h3><p>登录的逻辑其实很简答，只需要接受账号密码，然后把用户的id生成jwt，返回给前段，为了后续的jwt的延期，所以我们把jwt放在header上。具体代码如下：</p><ul><li>com.markerhub.controller.AccountController</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class AccountController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    JwtUtils jwtUtils;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    /**</span><br><span class="line">     * 默认账号密码：markerhub / 111111</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    @CrossOrigin</span><br><span class="line">    @PostMapping(&quot;/login&quot;)</span><br><span class="line">    public Result login(@Validated @RequestBody LoginDto loginDto, HttpServletResponse response) &#123;</span><br><span class="line">        User user = userService.getOne(new QueryWrapper&lt;User&gt;().eq(&quot;username&quot;, loginDto.getUsername()));</span><br><span class="line">        Assert.notNull(user, &quot;用户不存在&quot;);</span><br><span class="line">        if(!user.getPassword().equals(SecureUtil.md5(loginDto.getPassword()))) &#123;</span><br><span class="line">            return Result.fail(&quot;密码错误！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String jwt = jwtUtils.generateToken(user.getId());</span><br><span class="line">        response.setHeader(&quot;Authorization&quot;, jwt);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Expose-Headers&quot;, &quot;Authorization&quot;);</span><br><span class="line">        // 用户可以另一个接口</span><br><span class="line">        return Result.succ(MapUtil.builder()</span><br><span class="line">                .put(&quot;id&quot;, user.getId())</span><br><span class="line">                .put(&quot;username&quot;, user.getUsername())</span><br><span class="line">                .put(&quot;avatar&quot;, user.getAvatar())</span><br><span class="line">                .put(&quot;email&quot;, user.getEmail())</span><br><span class="line">                .map()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 退出</span><br><span class="line">    @GetMapping(&quot;/logout&quot;)</span><br><span class="line">    @RequiresAuthentication</span><br><span class="line">    public Result logout() &#123;</span><br><span class="line">        SecurityUtils.getSubject().logout();</span><br><span class="line">        return Result.succ(null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口测试：<br><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/5000047b0a874b09850c4ffde0053c8d.png" alt="图片"></p><h3 id="9、博客接口开发"><a href="#9、博客接口开发" class="headerlink" title="9、博客接口开发"></a>9、博客接口开发</h3><p>我们的骨架已经完成，接下来，我们就可以添加我们的业务接口了，下面我以一个简单的博客列表、博客详情页为例子开发：</p><ul><li>com.markerhub.controller.BlogController</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class BlogController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    BlogService blogService;</span><br><span class="line">    @GetMapping(&quot;/blogs&quot;)</span><br><span class="line">    public Result blogs(Integer currentPage) &#123;</span><br><span class="line">        if(currentPage == null || currentPage &lt; 1) currentPage = 1;</span><br><span class="line">        Page page = new Page(currentPage, 5)</span><br><span class="line">        IPage pageData = blogService.page(page, new QueryWrapper&lt;Blog&gt;().orderByDesc(&quot;created&quot;));</span><br><span class="line">        return Result.succ(pageData);</span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(&quot;/blog/&#123;id&#125;&quot;)</span><br><span class="line">    public Result detail(@PathVariable(name = &quot;id&quot;) Long id) &#123;</span><br><span class="line">        Blog blog = blogService.getById(id);</span><br><span class="line">        Assert.notNull(blog, &quot;该博客已删除！&quot;);</span><br><span class="line">        return Result.succ(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequiresAuthentication</span><br><span class="line">@PostMapping(&quot;/blog/edit&quot;)</span><br><span class="line">public Result edit(@Validated @RequestBody Blog blog) &#123;</span><br><span class="line">    System.out.println(blog.toString());</span><br><span class="line">    Blog temp = null;</span><br><span class="line">    if(blog.getId() != null) &#123;</span><br><span class="line">        temp = blogService.getById(blog.getId());</span><br><span class="line">        Assert.isTrue(temp.getUserId() == ShiroUtil.getProfile().getId(), &quot;没有权限编辑&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        temp = new Blog();</span><br><span class="line">        temp.setUserId(ShiroUtil.getProfile().getId());</span><br><span class="line">        temp.setCreated(LocalDateTime.now());</span><br><span class="line">        temp.setStatus(0);</span><br><span class="line">    &#125;</span><br><span class="line">    BeanUtil.copyProperties(blog, temp, &quot;id&quot;, &quot;userId&quot;, &quot;created&quot;, &quot;status&quot;);</span><br><span class="line">    blogService.saveOrUpdate(temp);</span><br><span class="line">    return Result.succ(&quot;操作成功&quot;, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<a href="https://github.com/RequiresAuthentication">@RequiresAuthentication</a>说明需要登录之后才能访问的接口，其他需要权限的接口可以添加shiro的相关注解。<br>接口比较简单，我们就不多说了，基本增删改查而已。注意的是edit方法是需要登录才能操作的受限资源。</p><p>接口测试：</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/f9269851970c43d096d3c777730fffde.png" alt="图片"></p><h3 id="10、后端总结"><a href="#10、后端总结" class="headerlink" title="10、后端总结"></a>10、后端总结</h3><p>好了，一篇文章搞定一个基本骨架，好像有点赶，但是基本的东西这里已经有了。后面我们就要去开发我们的前端接口了。</p><p>项目代码：<a href="https://github.com/MarkerHub/vueblog">https://github.com/MarkerHub/vueblog</a></p><p>项目视频：<a href="https://www.bilibili.com/video/BV1PQ4y1P7hZ/">https://www.bilibili.com/video/BV1PQ4y1P7hZ/</a></p><h2 id="Vue前端页面开发"><a href="#Vue前端页面开发" class="headerlink" title="Vue前端页面开发"></a>Vue前端页面开发</h2><h3 id="1、前言-1"><a href="#1、前言-1" class="headerlink" title="1、前言"></a>1、前言</h3><p>接下来，我们来完成vueblog前端的部分功能。可能会使用的到技术如下：</p><ul><li>vue</li><li>element-ui</li><li>axios</li><li>mavon-editor</li><li>markdown-it</li><li>github-markdown-css</li></ul><p>本项目实践需要一点点vue的基础，希望你对vue的一些指令有所了解，这样我们讲解起来就简单多了哈。</p><h3 id="2、项目演示"><a href="#2、项目演示" class="headerlink" title="2、项目演示"></a>2、项目演示</h3><p>我们先来看下我们需要完成的项目长什么样子，考虑到很多同学的样式的掌握程度不够，所以我尽量使用了element-ui的原生组件的样式来完成整个博客的界面。不多说，直接上图：</p><p>在线体验：<a href="https://markerhub.com:8083/">https://markerhub.com:8083</a></p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/068bbd1dcddb40b79c54b02cc5516dfd.png" alt="图片"></p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/c1fe32b559cf4b39a2be26b3990b884a.png" alt="图片"></p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/b66dbd5169fd4f8f94109aa1bd65f48f.png" alt="图片"></p><h3 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h3><p>万丈高楼平地起，我们下面一步一步来完成，首先我们安装vue的环境，我实践的环境是windows 10哈。</p><p>1、首先我们上node.js官网(<a href="https://nodejs.org/zh-cn/)%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84%E9%95%BF%E6%9C%9F%E7%89%88%E6%9C%AC%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8C%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E5%B7%B2%E7%BB%8F%E5%85%B7%E5%A4%87%E4%BA%86node%E5%92%8Cnpm%E7%9A%84%E7%8E%AF%E5%A2%83%E5%95%A6%E3%80%82">https://nodejs.org/zh-cn/)，下载最新的长期版本，直接运行安装完成之后，我们就已经具备了node和npm的环境啦。</a></p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/5a30fecdf00d47619f99e4d15ed5c983.png" alt="图片"></p><p>安装完成之后检查下版本信息：</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/babbc453e8c94bf2b413d370e8ad8989.png" alt="图片"></p><p>2、接下来，我们安装vue的环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装淘宝npm</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"># vue-cli 安装依赖包</span><br><span class="line">cnpm install --g vue-cli</span><br></pre></td></tr></table></figure><h3 id="4、新建项目"><a href="#4、新建项目" class="headerlink" title="4、新建项目"></a>4、新建项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 打开vue的可视化管理工具界面</span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>上面我们分别安装了淘宝npm，cnpm是为了提高我们安装依赖的速度。vue ui是<a href="https://github.com/vue">@vue</a>&#x2F;cli3.0增加一个可视化项目管理工具，可以运行项目、打包项目，检查等操作。对于初学者来说，可以少记一些命令，哈哈。<br>3、创建vueblog-vue项目</p><p>运行vue ui之后，会为我们打开一个<a href="http://localhost:8080/">http://localhost:8080</a> 的页面：</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/154ae9db3c0c4d9e9218bc74da7cddec.png" alt="图片"></p><p>然后切换到【创建】，注意创建的目录最好是和你运行vue ui同一级。这样方便管理和切换。然后点击按钮【在此创建新羡慕】</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/9e5178bc47cf406fa6a982032fb4e25d.png" alt="图片"></p><p>下一步中，项目文件夹中输入项目名称“vueblog-vue”，其他不用改，点击下一步，选择【手动】，再点击下一步，如图点击按钮，勾选上路由Router、状态管理Vuex，去掉js的校验。</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/b6d1d354fa3942458212ca24ed8316d4.png" alt="图片"></p><p>下一步中，也选上【Use history mode for router】，点击创建项目，然后弹窗中选择按钮【创建项目，不保存预设】，就进入项目创建啦。</p><p>稍等片刻之后，项目就初始化完成了。上面的步骤中，我们创建了一个vue项目，并且安装了Router、Vuex。这样我们后面就可以直接使用。</p><p>我们来看下整个vueblog-vue的项目结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">├── README.md            项目介绍</span><br><span class="line">├── index.html           入口页面</span><br><span class="line">├── build              构建脚本目录</span><br><span class="line">│  ├── build-server.js         运行本地构建服务器，可以访问构建后的页面</span><br><span class="line">│  ├── build.js            生产环境构建脚本</span><br><span class="line">│  ├── dev-client.js          开发服务器热重载脚本，主要用来实现开发阶段的页面自动刷新</span><br><span class="line">│  ├── dev-server.js          运行本地开发服务器</span><br><span class="line">│  ├── utils.js            构建相关工具方法</span><br><span class="line">│  ├── webpack.base.conf.js      wabpack基础配置</span><br><span class="line">│  ├── webpack.dev.conf.js       wabpack开发环境配置</span><br><span class="line">│  └── webpack.prod.conf.js      wabpack生产环境配置</span><br><span class="line">├── config             项目配置</span><br><span class="line">│  ├── dev.env.js           开发环境变量</span><br><span class="line">│  ├── index.js            项目配置文件</span><br><span class="line">│  ├── prod.env.js           生产环境变量</span><br><span class="line">│  └── test.env.js           测试环境变量</span><br><span class="line">├── mock              mock数据目录</span><br><span class="line">│  └── hello.js</span><br><span class="line">├── package.json          npm包配置文件，里面定义了项目的npm脚本，依赖包等信息</span><br><span class="line">├── src               源码目录 </span><br><span class="line">│  ├── main.js             入口js文件</span><br><span class="line">│  ├── app.vue             根组件</span><br><span class="line">│  ├── components           公共组件目录</span><br><span class="line">│  │  └── title.vue</span><br><span class="line">│  ├── assets             资源目录，这里的资源会被wabpack构建</span><br><span class="line">│  │  └── images</span><br><span class="line">│  │    └── logo.png</span><br><span class="line">│  ├── routes             前端路由</span><br><span class="line">│  │  └── index.js</span><br><span class="line">│  ├── store              应用级数据（state）状态管理</span><br><span class="line">│  │  └── index.js</span><br><span class="line">│  └── views              页面目录</span><br><span class="line">│    ├── hello.vue</span><br><span class="line">│    └── notfound.vue</span><br><span class="line">├── static             纯静态资源，不会被wabpack构建。</span><br><span class="line">└── test              测试文件目录（unit&amp;e2e）</span><br><span class="line">  └── unit              单元测试</span><br><span class="line">    ├── index.js            入口脚本</span><br><span class="line">    ├── karma.conf.js          karma配置文件</span><br><span class="line">    └── specs              单测case目录</span><br><span class="line">      └── Hello.spec.js</span><br></pre></td></tr></table></figure><h3 id="5、安装element-ui"><a href="#5、安装element-ui" class="headerlink" title="5、安装element-ui"></a>5、安装element-ui</h3><p>接下来我们引入element-ui组件（<a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn</a>），这样我们就可以获得好看的vue组件，开发好看的博客界面。</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/b98ecc8a8cd84e3bbbe382424d25ad27.png" alt="图片"></p><p>命令很简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 切换到项目根目录</span><br><span class="line">cd vueblog-vue</span><br><span class="line"># 安装element-ui</span><br><span class="line">cnpm install element-ui --save</span><br></pre></td></tr></table></figure><p>然后我们打开项目src目录下的main.js，引入element-ui依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Element from &#x27;element-ui&#x27;</span><br><span class="line">import &quot;element-ui/lib/theme-chalk/index.css&quot;</span><br><span class="line">Vue.use(Element)</span><br></pre></td></tr></table></figure><p>这样我们就可以愉快得在官网上选择组件复制代码到我们项目中直接使用啦。</p><h3 id="6、安装axios"><a href="#6、安装axios" class="headerlink" title="6、安装axios"></a>6、安装axios</h3><p>接下来，我们来安装axios（<a href="http://www.axios-js.com/%EF%BC%89%EF%BC%8Caxios%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E">http://www.axios-js.com/），axios是一个基于</a> promise 的 HTTP 库，这样我们进行前后端对接的时候，使用这个工具可以提高我们的开发效率。</p><p>安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install axios --save</span><br></pre></td></tr></table></figure><p>然后同样我们在main.js中全局引入axios。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">Vue.prototype.$axios = axios //</span><br></pre></td></tr></table></figure><p>组件中，我们就可以通过this.$axios.get()来发起我们的请求了哈。</p><h3 id="7、页面路由"><a href="#7、页面路由" class="headerlink" title="7、页面路由"></a>7、页面路由</h3><p>接下来，我们先定义好路由和页面，因为我们只是做一个简单的博客项目，页面比较少，所以我们可以直接先定义好，然后在慢慢开发，这样需要用到链接的地方我们就可以直接可以使用：</p><p>我们在views文件夹下定义几个页面：</p><ul><li>BlogDetail.vue（博客详情页）</li><li>BlogEdit.vue（编辑博客）</li><li>Blogs.vue（博客列表）</li><li>Login.vue（登录页面）</li></ul><p>然后再路由中心配置：</p><ul><li>router\index.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">import Login from &#x27;../views/Login.vue&#x27;</span><br><span class="line">import BlogDetail from &#x27;../views/BlogDetail.vue&#x27;</span><br><span class="line">import BlogEdit from &#x27;../views/BlogEdit.vue&#x27;</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    name: &#x27;Index&#x27;,</span><br><span class="line">    redirect: &#123; name: &#x27;Blogs&#x27; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/login&#x27;,</span><br><span class="line">    name: &#x27;Login&#x27;,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/blogs&#x27;,</span><br><span class="line">    name: &#x27;Blogs&#x27;,</span><br><span class="line">    // 懒加载</span><br><span class="line">    component: () =&gt; import(&#x27;../views/Blogs.vue&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/blog/add&#x27;, // 注意放在 path: &#x27;/blog/:blogId&#x27;之前</span><br><span class="line">    name: &#x27;BlogAdd&#x27;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      requireAuth: true</span><br><span class="line">    &#125;,</span><br><span class="line">    component: BlogEdit</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/blog/:blogId&#x27;,</span><br><span class="line">    name: &#x27;BlogDetail&#x27;,</span><br><span class="line">    component: BlogDetail</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/blog/:blogId/edit&#x27;,</span><br><span class="line">    name: &#x27;BlogEdit&#x27;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      requireAuth: true</span><br><span class="line">    &#125;,</span><br><span class="line">    component: BlogEdit</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><p>接下来我们去开发我们的页面。其中，带有meta：requireAuth: true说明是需要登录字后才能访问的受限资源，后面我们路由权限拦截时候会用到。</p><h3 id="8、登录页面"><a href="#8、登录页面" class="headerlink" title="8、登录页面"></a>8、登录页面</h3><p>接下来，我们来搞一个登陆页面，表单组件我们直接在element-ui的官网上找就行了，登陆页面就两个输入框和一个提交按钮，相对简单，然后我们最好带页面的js校验。emmm，我直接贴代码了~~</p><ul><li>views&#x2F;Login.vue</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/blogs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.markerhub.com/dist/images/logo/markerhub-logo.png&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">&quot;height: 60%; margin-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">status-icon</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;12&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.password&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Login&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      var validatePass = (rule, value, callback) =&gt; &#123;</span><br><span class="line">        if (value === &#x27;&#x27;) &#123;</span><br><span class="line">          callback(new Error(&#x27;请输入密码&#x27;));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          callback();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      return &#123;</span><br><span class="line">        ruleForm: &#123;</span><br><span class="line">          password: &#x27;111111&#x27;,</span><br><span class="line">          username: &#x27;markerhub&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        rules: &#123;</span><br><span class="line">          password: [</span><br><span class="line">            &#123;validator: validatePass, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">          ],</span><br><span class="line">          username: [</span><br><span class="line">            &#123;required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">            &#123;min: 3, max: 12, message: &#x27;长度在 3 到 12 个字符&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      submitForm(formName) &#123;</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$refs[formName].validate((valid) =&gt; &#123;</span><br><span class="line">          if (valid) &#123;</span><br><span class="line">            // 提交逻辑</span><br><span class="line">            this.$axios.post(&#x27;http://localhost:8081/login&#x27;, this.ruleForm).then((res)=&gt;&#123;</span><br><span class="line">              const token = res.headers[&#x27;authorization&#x27;]</span><br><span class="line">              _this.$store.commit(&#x27;SET_TOKEN&#x27;, token)</span><br><span class="line">              _this.$store.commit(&#x27;SET_USERINFO&#x27;, res.data.data)</span><br><span class="line">              _this.$router.push(&quot;/blogs&quot;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            console.log(&#x27;error submit!!&#x27;);</span><br><span class="line">            return false;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      resetForm(formName) &#123;</span><br><span class="line">        this.$refs[formName].resetFields();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.$notify(&#123;</span><br><span class="line">        title: &#x27;看这里：&#x27;,</span><br><span class="line">        message: &#x27;关注公众号：MarkerHub，回复【vueblog】，领取项目资料与源码&#x27;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>找不到啥好的方式讲解了，之后先贴代码，然后再讲解。<br>上面代码中，其实主要做了两件事情</p><p>1、表单校验</p><p>2、登录按钮的点击登录事件</p><p>表单校验规则还好，比较固定写法，查一下element-ui的组件就知道了，我们来分析一下发起登录之后的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const token = res.headers[&#x27;authorization&#x27;]</span><br><span class="line">_this.$store.commit(&#x27;SET_TOKEN&#x27;, token)</span><br><span class="line">_this.$store.commit(&#x27;SET_USERINFO&#x27;, res.data.data)</span><br><span class="line">_this.$router.push(&quot;/blogs&quot;)</span><br></pre></td></tr></table></figure><p>从返回的结果请求头中获取到token的信息，然后使用store提交token和用户信息的状态。完成操作之后，我们调整到了&#x2F;blogs路由，即博客列表页面。</p><h4 id="token的状态同步"><a href="#token的状态同步" class="headerlink" title="token的状态同步"></a>token的状态同步</h4><p>所以在store&#x2F;index.js中，代码是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    token: &#x27;&#x27;,</span><br><span class="line">    userInfo: JSON.parse(sessionStorage.getItem(&quot;userInfo&quot;))</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_TOKEN: (state, token) =&gt; &#123;</span><br><span class="line">      state.token = token</span><br><span class="line">      localStorage.setItem(&quot;token&quot;, token)</span><br><span class="line">    &#125;,</span><br><span class="line">    SET_USERINFO: (state, userInfo) =&gt; &#123;</span><br><span class="line">      state.userInfo = userInfo</span><br><span class="line">      sessionStorage.setItem(&quot;userInfo&quot;, JSON.stringify(userInfo))</span><br><span class="line">    &#125;,</span><br><span class="line">    REMOVE_INFO: (state) =&gt; &#123;</span><br><span class="line">      localStorage.setItem(&quot;token&quot;, &#x27;&#x27;)</span><br><span class="line">      sessionStorage.setItem(&quot;userInfo&quot;, JSON.stringify(&#x27;&#x27;))</span><br><span class="line">      state.userInfo = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    getUser: state =&gt; &#123;</span><br><span class="line">      return state.userInfo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>存储token，我们用的是localStorage，存储用户信息，我们用的是sessionStorage。毕竟用户信息我们不需要长久保存，保存了token信息，我们随时都可以初始化用户信息。当然了因为本项目是个比较简单的项目，考虑到初学者，所以很多相对复杂的封装和功能我没有做，当然了，学了这个项目之后，自己想再继续深入，完成可以自行学习和改造哈。</p><h4 id="定义全局axios拦截器"><a href="#定义全局axios拦截器" class="headerlink" title="定义全局axios拦截器"></a>定义全局axios拦截器</h4><p>点击登录按钮发起登录请求，成功时候返回了数据，如果是密码错误，我们是不是也应该弹窗消息提示。为了让这个错误弹窗能运用到所有的地方，所以我对axios做了个后置拦截器，就是返回数据时候，如果结果的code或者status不正常，那么我对应弹窗提示。</p><p>在src目录下创建一个文件axios.js（与main.js同级），定义axios的拦截：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import Element from &quot;element-ui&quot;;</span><br><span class="line">import store from &quot;./store&quot;;</span><br><span class="line">import router from &quot;./router&quot;;</span><br><span class="line">axios.defaults.baseURL=&#x27;http://localhost:8081&#x27;</span><br><span class="line">axios.interceptors.request.use(config =&gt; &#123;</span><br><span class="line">  console.log(&quot;前置拦截&quot;)</span><br><span class="line">  // 可以统一设置请求头</span><br><span class="line">  return config</span><br><span class="line">&#125;)</span><br><span class="line">axios.interceptors.response.use(response =&gt; &#123;</span><br><span class="line">    const res = response.data;</span><br><span class="line">    console.log(&quot;后置拦截&quot;)</span><br><span class="line">    // 当结果的code是否为200的情况</span><br><span class="line">    if (res.code === 200) &#123;</span><br><span class="line">      return response</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 弹窗异常信息</span><br><span class="line">      Element.Message(&#123;</span><br><span class="line">        message: response.data.msg,</span><br><span class="line">        type: &#x27;error&#x27;,</span><br><span class="line">        duration: 2 * 1000</span><br><span class="line">      &#125;)</span><br><span class="line">      // 直接拒绝往下面返回结果信息</span><br><span class="line">      return Promise.reject(response.data.msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    console.log(&#x27;err&#x27; + error)// for debug</span><br><span class="line">    if(error.response.data) &#123;</span><br><span class="line">      error.message = error.response.data.msg</span><br><span class="line">    &#125;</span><br><span class="line">    // 根据请求状态觉得是否登录或者提示其他</span><br><span class="line">    if (error.response.status === 401) &#123;</span><br><span class="line">      store.commit(&#x27;REMOVE_INFO&#x27;);</span><br><span class="line">      router.push(&#123;</span><br><span class="line">        path: &#x27;/login&#x27;</span><br><span class="line">      &#125;);</span><br><span class="line">      error.message = &#x27;请重新登录&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (error.response.status === 403) &#123;</span><br><span class="line">      error.message = &#x27;权限不足，无法访问&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    Element.Message(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      type: &#x27;error&#x27;,</span><br><span class="line">      duration: 3 * 1000</span><br><span class="line">    &#125;)</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>前置拦截，其实可以统一为所有需要权限的请求装配上header的token信息，这样不需要在使用是再配置，我的小项目比较小，所以，还是免了吧~</p><p>然后再main.js中导入axios.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./axios.js&#x27; // 请求拦截</span><br></pre></td></tr></table></figure><p>后端因为返回的实体是Result，succ时候code为200，fail时候返回的是400，所以可以根据这里判断结果是否是正常的。另外权限不足时候可以通过请求结果的状态码来判断结果是否正常。这里都做了简单的处理。</p><p>登录异常时候的效果如下：</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/84587fc9e3444debacf84ccc726f4058.png" alt="图片"></p><h3 id="9、博客列表"><a href="#9、博客列表" class="headerlink" title="9、博客列表"></a>9、博客列表</h3><p>登录完成之后直接进入博客列表页面，然后加载博客列表的数据渲染出来。同时页面头部我们需要把用户的信息展示出来，因为很多地方都用到这个模块，所以我们把页面头部的用户信息单独抽取出来作为一个组件。</p><h4 id="头部用户信息"><a href="#头部用户信息" class="headerlink" title="头部用户信息"></a>头部用户信息</h4><p>那么，我们先来完成头部的用户信息，应该包含三部分信息：id，头像、用户名，而这些信息我们是在登录之后就已经存在了sessionStorage。因此，我们可以通过store的getters获取到用户信息。</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/6d33d6a010324a91a48537e975a4b1a0.png" alt="图片"></p><p>看起来不是很复杂，我们贴出代码：</p><ul><li>components\Header.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;m-content&quot;&gt;</span><br><span class="line">    &lt;h3&gt;欢迎来到MarkerHub的博客&lt;/h3&gt;</span><br><span class="line">    &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">      &lt;el-avatar :size=&quot;50&quot; :src=&quot;user.avatar&quot;&gt;&lt;/el-avatar&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; user.username &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;maction&quot;&gt;</span><br><span class="line">      &lt;el-link href=&quot;/blogs&quot;&gt;主页&lt;/el-link&gt;</span><br><span class="line">      &lt;el-divider direction=&quot;vertical&quot;&gt;&lt;/el-divider&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">          &lt;el-link type=&quot;success&quot; href=&quot;/blog/add&quot; :disabled=&quot;!hasLogin&quot;&gt;发表文章&lt;/el-link&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;el-divider direction=&quot;vertical&quot;&gt;&lt;/el-divider&gt;</span><br><span class="line">      &lt;span v-show=&quot;!hasLogin&quot;&gt;</span><br><span class="line">          &lt;el-link type=&quot;primary&quot; href=&quot;/login&quot;&gt;登陆&lt;/el-link&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;span v-show=&quot;hasLogin&quot;&gt;</span><br><span class="line">          &lt;el-link type=&quot;danger&quot; @click=&quot;logout&quot;&gt;退出&lt;/el-link&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Header&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        hasLogin: false,</span><br><span class="line">        user: &#123;</span><br><span class="line">          username: &#x27;请先登录&#x27;,</span><br><span class="line">          avatar: &quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        blogs: &#123;&#125;,</span><br><span class="line">        currentPage: 1,</span><br><span class="line">        total: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      logout() &#123;</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$axios.get(&#x27;http://localhost:8081/logout&#x27;, &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            &quot;Authorization&quot;: localStorage.getItem(&quot;token&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then((res) =&gt; &#123;</span><br><span class="line">          _this.$store.commit(&#x27;REMOVE_INFO&#x27;)</span><br><span class="line">          _this.$router.push(&#x27;/login&#x27;)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      if(this.$store.getters.getUser.username) &#123;</span><br><span class="line">        this.user.username = this.$store.getters.getUser.username</span><br><span class="line">        this.user.avatar = this.$store.getters.getUser.avatar</span><br><span class="line">        this.hasLogin = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面代码created()中初始化用户的信息，通过hasLogin的状态来控制登录和退出按钮的切换，以及发表文章链接的disabled，这样用户的信息就能展示出来了。<br>然后这里有个退出按钮，在methods中有个logout()方法，逻辑比较简单，直接访问&#x2F;logout，因为之前axios.js中我们已经设置axios请求的baseURL，所以这里我们不再需要链接的前缀了哈。因为是登录之后才能访问的受限资源，所以在header中带上了Authorization。返回结果清楚store中的用户信息和token信息，跳转到登录页面。</p><p>然后需要头部用户信息的页面只需要几个步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Header from &quot;@/components/Header&quot;;</span><br><span class="line">data() &#123;</span><br><span class="line">  components: &#123;Header&#125;</span><br><span class="line">&#125;</span><br><span class="line"># 然后模板中调用组件</span><br><span class="line">&lt;Header&gt;&lt;/Header&gt;</span><br></pre></td></tr></table></figure><h4 id="博客分页"><a href="#博客分页" class="headerlink" title="博客分页"></a>博客分页</h4><p>接下来就是列表页面，需要做分页，列表我们在element-ui中直接使用<strong>时间线</strong>组件来作为我们的列表样式，还是挺好看的。还有我们的分页组件。</p><p>需要几部分信息：</p><ul><li>分页信息</li><li>博客列表内容，包括id、标题、摘要、创建时间</li><li>views\Blogs.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;m-container&quot;&gt;</span><br><span class="line">    &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">    &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">      &lt;el-timeline&gt;</span><br><span class="line">        &lt;el-timeline-item v-bind:timestamp=&quot;blog.created&quot; placement=&quot;top&quot; v-for=&quot;blog in blogs&quot;&gt;</span><br><span class="line">          &lt;el-card&gt;</span><br><span class="line">            &lt;h4&gt;&lt;router-link :to=&quot;&#123;name: &#x27;BlogDetail&#x27;, params: &#123;blogId: blog.id&#125;&#125;&quot;&gt;&#123;&#123;blog.title&#125;&#125;&lt;/router-link&gt;&lt;/h4&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;blog.description&#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;/el-card&gt;</span><br><span class="line">        &lt;/el-timeline-item&gt;</span><br><span class="line">      &lt;/el-timeline&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;el-pagination class=&quot;mpage&quot;</span><br><span class="line">      background</span><br><span class="line">      layout=&quot;prev, pager, next&quot;</span><br><span class="line">      :current-page=currentPage</span><br><span class="line">      :page-size=pageSize</span><br><span class="line">      @current-change=page</span><br><span class="line">      :total=&quot;total&quot;&gt;</span><br><span class="line">    &lt;/el-pagination&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  import Header from &quot;@/components/Header&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Blogs&quot;,</span><br><span class="line">    components: &#123;Header&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        blogs: &#123;&#125;,</span><br><span class="line">        currentPage: 1,</span><br><span class="line">        total: 0,</span><br><span class="line">        pageSize: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      page(currentPage) &#123;</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$axios.get(&#x27;http://localhost:8081/blogs?currentPage=&#x27; + currentPage).then((res) =&gt; &#123;</span><br><span class="line">          console.log(res.data.data.records)</span><br><span class="line">          _this.blogs = res.data.data.records</span><br><span class="line">          _this.currentPage = res.data.data.current</span><br><span class="line">          _this.total = res.data.data.total</span><br><span class="line">          _this.pageSize = res.data.data.size</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      this.page(1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>data()中直接定义博客列表blogs、以及一些分页信息。methods()中定义分页的调用接口page（currentPage），参数是需要调整的页码currentPage，得到结果之后直接赋值即可。然后初始化时候，直接在mounted()方法中调用第一页this.page(1)。完美。使用element-ui组件就是简单快捷哈哈！<br>注意标题这里我们添加了链接，使用的是<router-link>标签。</p><h3 id="10、博客编辑（发表）"><a href="#10、博客编辑（发表）" class="headerlink" title="10、博客编辑（发表）"></a>10、博客编辑（发表）</h3><p>我们点击发表博客链接调整到&#x2F;blog&#x2F;add页面，这里我们需要用到一个markdown编辑器，在vue组件中，比较好用的是mavon-editor，那么我们直接使用哈。先来安装mavon-editor相关组件：</p><h4 id="安装mavon-editor"><a href="#安装mavon-editor" class="headerlink" title="安装mavon-editor"></a>安装mavon-editor</h4><p>基于Vue的markdown编辑器mavon-editor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install mavon-editor --save</span><br></pre></td></tr></table></figure><p>然后在main.js中全局注册：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mavonEditor <span class="keyword">from</span> <span class="string">&#x27;mavon-editor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;mavon-editor/dist/css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// use</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(mavonEditor)</span><br></pre></td></tr></table></figure><p>ok，那么我们去定义我们的博客表单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;m-container&quot;&gt;</span><br><span class="line">    &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">    &lt;div class=&quot;m-content&quot;&gt;</span><br><span class="line">      &lt;el-form ref=&quot;editForm&quot; status-icon :model=&quot;editForm&quot; :rules=&quot;rules&quot; label-width=&quot;80px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;标题&quot; prop=&quot;title&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;editForm.title&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;摘要&quot; prop=&quot;description&quot;&gt;</span><br><span class="line">          &lt;el-input type=&quot;textarea&quot; v-model=&quot;editForm.description&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;内容&quot; prop=&quot;content&quot;&gt;</span><br><span class="line">          &lt;mavon-editor v-model=&quot;editForm.content&quot;/&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm()&quot;&gt;立即创建&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  import Header from &quot;@/components/Header&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;BlogEdit&quot;,</span><br><span class="line">    components: &#123;Header&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        editForm: &#123;</span><br><span class="line">          id: null,</span><br><span class="line">          title: &#x27;&#x27;,</span><br><span class="line">          description: &#x27;&#x27;,</span><br><span class="line">          content: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        rules: &#123;</span><br><span class="line">          title: [</span><br><span class="line">            &#123;required: true, message: &#x27;请输入标题&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">            &#123;min: 3, max: 50, message: &#x27;长度在 3 到 50 个字符&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">          ],</span><br><span class="line">          description: [</span><br><span class="line">            &#123;required: true, message: &#x27;请输入摘要&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      const blogId = this.$route.params.blogId</span><br><span class="line">      const _this = this</span><br><span class="line">      if(blogId) &#123;</span><br><span class="line">        this.$axios.get(&#x27;/blog/&#x27; + blogId).then((res) =&gt; &#123;</span><br><span class="line">          const blog = res.data.data</span><br><span class="line">          _this.editForm.id = blog.id</span><br><span class="line">          _this.editForm.title = blog.title</span><br><span class="line">          _this.editForm.description = blog.description</span><br><span class="line">          _this.editForm.content = blog.content</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      submitForm() &#123;</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$refs.editForm.validate((valid) =&gt; &#123;</span><br><span class="line">          if (valid) &#123;</span><br><span class="line">            this.$axios.post(&#x27;/blog/edit&#x27;, this.editForm, &#123;</span><br><span class="line">              headers: &#123;</span><br><span class="line">                &quot;Authorization&quot;: localStorage.getItem(&quot;token&quot;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;).then((res) =&gt; &#123;</span><br><span class="line">              _this.$alert(&#x27;操作成功&#x27;, &#x27;提示&#x27;, &#123;</span><br><span class="line">                confirmButtonText: &#x27;确定&#x27;,</span><br><span class="line">                callback: action =&gt; &#123;</span><br><span class="line">                  _this.$router.push(&quot;/blogs&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            console.log(&#x27;error submit!!&#x27;);</span><br><span class="line">            return false;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>逻辑依然简单，校验表单，然后点击按钮提交表单，注意头部加上Authorization信息，返回结果弹窗提示操作成功，然后跳转到博客列表页面。emm，和写ajax没啥区别。熟悉一下vue的一些指令使用即可。<br>然后因为编辑和添加是同一个页面，所以有了create()方法，比如从编辑连接&#x2F;blog&#x2F;7&#x2F;edit中获取blogId为7的这个id。然后回显博客信息。获取方式是const blogId &#x3D; this.$route.params.blogId。</p><p>对了，mavon-editor因为已经全局注册，所以我们直接使用组件即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mavon-editor v-model=&quot;editForm.content&quot;/&gt;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/61c514b1b68c4cf1b07a87b51eacd8bf.png" alt="图片"></p><h3 id="11、博客详情"><a href="#11、博客详情" class="headerlink" title="11、博客详情"></a>11、博客详情</h3><p>博客详情中需要回显博客信息，然后有个问题就是，后端传过来的是博客内容是markdown格式的内容，我们需要进行渲染然后显示出来，这里我们使用一个插件markdown-it，用于解析md文档，然后导入github-markdown-c，所谓md的样式。</p><p>方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用于解析md文档</span><br><span class="line">cnpm install markdown-it --save</span><br><span class="line"># md样式</span><br><span class="line">cnpm install github-markdown-css</span><br></pre></td></tr></table></figure><p>然后就可以在需要渲染的地方使用：</p><ul><li>views\BlogDetail.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;m-container&quot;&gt;</span><br><span class="line">    &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">    &lt;div class=&quot;mblog&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123; blog.title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;el-link icon=&quot;el-icon-edit&quot; v-if=&quot;ownBlog&quot;&gt;&lt;router-link :to=&quot;&#123;name: &#x27;BlogEdit&#x27;, params: &#123;blogId: blog.id&#125;&#125;&quot;&gt;编辑&lt;/router-link&gt;&lt;/el-link&gt;</span><br><span class="line">      &lt;el-divider&gt;&lt;/el-divider&gt;</span><br><span class="line">      &lt;div class=&quot;content markdown-body&quot; v-html=&quot;blog.content&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  import &#x27;github-markdown-css/github-markdown.css&#x27; // 然后添加样式markdown-body</span><br><span class="line">  import Header from &quot;@/components/Header&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;BlogDetail&quot;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Header</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        blog: &#123;</span><br><span class="line">          userId: null,</span><br><span class="line">          title: &quot;&quot;,</span><br><span class="line">          description: &quot;&quot;,</span><br><span class="line">          content: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        ownBlog: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getBlog() &#123;</span><br><span class="line">        const blogId = this.$route.params.blogId</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$axios.get(&#x27;/blog/&#x27; + blogId).then((res) =&gt; &#123;</span><br><span class="line">          console.log(res)</span><br><span class="line">          console.log(res.data.data)</span><br><span class="line">          _this.blog = res.data.data</span><br><span class="line">          var MarkdownIt = require(&#x27;markdown-it&#x27;),</span><br><span class="line">            md = new MarkdownIt();</span><br><span class="line">          var result = md.render(_this.blog.content);</span><br><span class="line">          _this.blog.content = result</span><br><span class="line">          // 判断是否是自己的文章，能否编辑</span><br><span class="line">          _this.ownBlog =  (_this.blog.userId === _this.$store.getters.getUser.id)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      this.getBlog()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>具体逻辑还是挺简单，初始化create()方法中调用getBlog()方法，请求博客详情接口，返回的博客详情content通过markdown-it工具进行渲染。</p><p>再导入样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;github-markdown.css&#x27;</span><br></pre></td></tr></table></figure><p>然后在content的div中添加class为markdown-body即可哈。<br>效果如下：</p><p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/7244e11b1cbe456daf043f815b9877f8.png" alt="图片"></p><p>另外标题下添加了个小小的编辑按钮，通过ownBlog （判断博文作者与登录用户是否同一人）来判断按钮是否显示出来。</p><h3 id="12、路由权限拦截"><a href="#12、路由权限拦截" class="headerlink" title="12、路由权限拦截"></a>12、路由权限拦截</h3><p>页面已经开发完毕之后，我们来控制一下哪些页面是需要登录之后才能跳转的，如果未登录访问就直接重定向到登录页面，因此我们在src目录下定义一个js文件：</p><ul><li>src\permission.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import router from &quot;./router&quot;;</span><br><span class="line">// 路由判断登录 根据路由配置文件的参数</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.matched.some(record =&gt; record.meta.requireAuth)) &#123; // 判断该路由是否需要登录权限</span><br><span class="line">    const token = localStorage.getItem(&quot;token&quot;)</span><br><span class="line">    console.log(&quot;------------&quot; + token)</span><br><span class="line">    if (token) &#123; // 判断当前的token是否存在 ； 登录存入的token</span><br><span class="line">      if (to.path === &#x27;/login&#x27;) &#123;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next(&#123;</span><br><span class="line">        path: &#x27;/login&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过之前我们再定义页面路由时候的的meta信息，指定requireAuth: true，需要登录才能访问，因此这里我们在每次路由之前（router.beforeEach）判断token的状态，觉得是否需要跳转到登录页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/blog/add&#x27;, // 注意放在 path: &#x27;/blog/:blogId&#x27;之前</span><br><span class="line">  name: &#x27;BlogAdd&#x27;,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    requireAuth: true</span><br><span class="line">  &#125;,</span><br><span class="line">  component: BlogEdit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再main.js中import我们的permission.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./permission.js&#x27; // 路由拦截</span><br></pre></td></tr></table></figure><h3 id="13、前端总结"><a href="#13、前端总结" class="headerlink" title="13、前端总结"></a>13、前端总结</h3><p>ok，基本所有页面就已经开发完毕啦，css样式信息我未贴出来，大家直接上github上clone下来查看。</p><h2 id="项目大总结"><a href="#项目大总结" class="headerlink" title="项目大总结"></a>项目大总结</h2><p>好啦，项目先到这里，花了3天半录制了一套对应的视频，记得去看，给我三连哇。</p><p>项目代码：<a href="https://github.com/MarkerHub/vueblog">https://github.com/MarkerHub/vueblog</a></p><p>项目视频：<a href="https://www.bilibili.com/video/BV1PQ4y1P7hZ/">https://www.bilibili.com/video/BV1PQ4y1P7hZ/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前后端分离项目&quot;&gt;&lt;a href=&quot;#前后端分离项目&quot; class=&quot;headerlink&quot; title=&quot;前后端分离项目&quot;&gt;&lt;/a&gt;前后端分离项目&lt;/h2&gt;&lt;p&gt;文章总体分为2大部分，Java后端接口和vue前端页面，比较长，因为不想分开发布，真正想你4小时学会</summary>
      
    
    
    
    
    <category term="java" scheme="https://jpruby888.github.io/tags/java/"/>
    
    <category term="vue" scheme="https://jpruby888.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>反射工具包JOOR、Hutool与原生反射对比</title>
    <link href="https://jpruby888.github.io/post/a9c4edf1.html"/>
    <id>https://jpruby888.github.io/post/a9c4edf1.html</id>
    <published>2021-08-16T02:34:45.000Z</published>
    <updated>2022-03-17T03:33:34.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三者代码量的比较"><a href="#三者代码量的比较" class="headerlink" title="三者代码量的比较"></a>三者代码量的比较</h2><p>在分析比较三者之前，我们先比较直观的通过代码量来看看三者之间的区别。</p><p>我们首先看一段反射的例子。</p><p><strong>原生反射实现</strong><br><img src="https://img-blog.csdnimg.cn/ecbde742fdec40f4bec378ebe447997d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>JOOR实现</strong><br><img src="https://img-blog.csdnimg.cn/d5a0e9f564d747a887949b605688cf5e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>Hutool实现</strong><br><img src="https://img-blog.csdnimg.cn/c47fe5491a44416c9395708695895392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>首先从主观上来看JOOR和Hutool在api层面都精简了很多，并且对异常进行了封装，不强制捕获，而JOOR在Hutool的基础上又支持了链式编程。</p><span id="more"></span><h2 id="JOOR主要API"><a href="#JOOR主要API" class="headerlink" title="JOOR主要API"></a>JOOR主要API</h2><p>那么我们来看下JOOR的主要API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoorExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Kale kale;</span><br><span class="line">        <span class="comment">// 【创建类】</span></span><br><span class="line">        kale = Reflect.onClass(Kale.class).create().get(); <span class="comment">// 无参数</span></span><br><span class="line"><span class="comment">//        kale = Reflect.on(Kale.class).create(&quot;kale class name&quot;).get();// 有参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&gt; class name = &quot;</span> + kale.getClass());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 【调用方法】</span></span><br><span class="line">        Reflect.on(kale).call(<span class="string">&quot;setName&quot;</span>,<span class="string">&quot;调用setName&quot;</span>);<span class="comment">// 多参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用方法：name = &quot;</span> + Reflect.on(kale).call(<span class="string">&quot;getName&quot;</span>));<span class="comment">// 无参数</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 【得到变量】</span></span><br><span class="line">        name = Reflect.on(kale).field(<span class="string">&quot;name&quot;</span>).get();<span class="comment">// 复杂</span></span><br><span class="line">        name = Reflect.on(kale).get(<span class="string">&quot;name&quot;</span>);<span class="comment">// 简单</span></span><br><span class="line">        System.out.println(<span class="string">&quot;得到变量值： name = &quot;</span> + name);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 【设置变量的值】</span></span><br><span class="line">        Reflect.on(kale).set(<span class="string">&quot;className&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;设置变量的值： name = &quot;</span> + kale.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;设置变量的值： name = &quot;</span> + Reflect.on(kale).set(<span class="string">&quot;className&quot;</span>, <span class="string">&quot;hello2&quot;</span>).get(<span class="string">&quot;className&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/097662c90f8349a498d612666e371537.png" alt="在这里插入图片描述"></p><p>可以看出JOOR内置了set和get方法供我们调用，可以直接获得某些属性的值，而链式编程也极大地简化了开发。</p><h2 id="JOOR是否支持java原生的几种方式-全类名，对象实例，类的class对象-获得反射对象呢？"><a href="#JOOR是否支持java原生的几种方式-全类名，对象实例，类的class对象-获得反射对象呢？" class="headerlink" title="JOOR是否支持java原生的几种方式(全类名，对象实例，类的class对象)获得反射对象呢？"></a>JOOR是否支持java原生的几种方式(全类名，对象实例，类的class对象)获得反射对象呢？</h2><p>由上面的例子我们已知JOOR支持根据对象的实例获得反射对象。</p><p>再来看看下面的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">world</span> <span class="operator">=</span> onClass(<span class="string">&quot;java.lang.String&quot;</span>)  <span class="comment">// on后面放入类的全名，这里是String类</span></span><br><span class="line">        .create(<span class="string">&quot;Hello World&quot;</span>) <span class="comment">// 将字符串“Hello World”，传入构造方法中</span></span><br><span class="line">        .call(<span class="string">&quot;substring&quot;</span>, <span class="number">6</span>)  <span class="comment">// 执行subString这个方法，并且传入6作为参数</span></span><br><span class="line">        .call(<span class="string">&quot;toString&quot;</span>)      <span class="comment">// 执行toString方法</span></span><br><span class="line">        .get();                <span class="comment">// 得到包装好的类，这里是一个String对象</span></span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> onClass(<span class="string">&quot;java.lang.String&quot;</span>)</span><br><span class="line">        .create(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">        .as(StringProxy.class) <span class="comment">// 为包装类建立一个代理</span></span><br><span class="line">        .substring(<span class="number">6</span>);         <span class="comment">// 访问代理方法</span></span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> onClass(String.class)</span><br><span class="line">        .create(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">        .as(StringProxy.class) <span class="comment">// 为包装类建立一个代理</span></span><br><span class="line">        .substring(<span class="number">6</span>);         <span class="comment">// 访问代理方法</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">System.out.println(world);</span><br><span class="line">System.out.println(substring);</span><br><span class="line">System.out.println(string);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/979e078e05b4467f846ac334d0550caf.png" alt="在这里插入图片描述"></p><p>我们可以看出，通过全类名和类的class对象均可以获得反射对象，同时还支持访问jdk的代理方法。</p><h2 id="JOOR实现代理"><a href="#JOOR实现代理" class="headerlink" title="JOOR实现代理"></a>JOOR实现代理</h2><p>我们首先来写一个静态代理，包含代理类和普通类，Waiter是ZhangSan的代理类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Restaurant</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhangSan</span> <span class="keyword">implements</span> <span class="title class_">Restaurant</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃吃吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Waiter</span> <span class="keyword">implements</span> <span class="title class_">Restaurant</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ZhangSan zhangSan;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Waiter</span><span class="params">(ZhangSan zhangSan)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.zhangSan = zhangSan;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;做饭&quot;</span>);</span><br><span class="line">        zhangSan.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;洗碗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现代理的测试<br><img src="https://img-blog.csdnimg.cn/cd6635b2d992443da7dcfe5df8dfcb12.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里代理对象必须以构造方法的形式传入对象，对其增强，通过代理实现增强的方法。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上案例可以看出，JOOR由于其链式编程的特性，对代码的简化和可扩展性要强于另外两个，且其包含了一些高级应用，如代理，虽然代码不如原生的精简，但是通俗易懂。</p><p>如需使用，则只需引入下列的包，即可使用JOOR或Hutool中的反射封装类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//JOOR</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jooq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joor-java-8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">//Hutool</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体如何使用可根据实际情况灵活选择。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;三者代码量的比较&quot;&gt;&lt;a href=&quot;#三者代码量的比较&quot; class=&quot;headerlink&quot; title=&quot;三者代码量的比较&quot;&gt;&lt;/a&gt;三者代码量的比较&lt;/h2&gt;&lt;p&gt;在分析比较三者之前，我们先比较直观的通过代码量来看看三者之间的区别。&lt;/p&gt;
&lt;p&gt;我们首先看一段反射的例子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原生反射实现&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/ecbde742fdec40f4bec378ebe447997d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JOOR实现&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/d5a0e9f564d747a887949b605688cf5e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hutool实现&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/c47fe5491a44416c9395708695895392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先从主观上来看JOOR和Hutool在api层面都精简了很多，并且对异常进行了封装，不强制捕获，而JOOR在Hutool的基础上又支持了链式编程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://jpruby888.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用CODEX为你的项目编制一套代码库目录/索引</title>
    <link href="https://jpruby888.github.io/post/d232be0e.html"/>
    <id>https://jpruby888.github.io/post/d232be0e.html</id>
    <published>2021-08-16T02:33:53.000Z</published>
    <updated>2022-03-17T03:33:34.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h2><p>本文来自一片项目重构文章的启发，该文章作者一整年经历了 3 个代码十分混乱的项目，最大的收获就是摸索出了一个梳理烂代码的最佳实践——CODEX。</p><p>原文路径：<a href="https://mp.weixin.qq.com/s/JXRruyOvVtj6ykV1J6arSQ">一个技术总监的忠告：精通那么多技术为何还是做不好一个项目？</a>.</p><p>文章作者的本意是重构项目时便于梳理项目结构提出的一个活的源代码索引。</p><p>然而对于一些实践，借鉴了前者的经验，整理了一套基于idea的CODEX，可以在编写代码的时候按照规范将注释以特定形式输入，达成一个自动生成索引的功能，方便定位代码功能与位置。</p><span id="more"></span><h2 id="增加索引标签"><a href="#增加索引标签" class="headerlink" title="增加索引标签"></a>增加索引标签</h2><p>首先，我们可以为索引增加一个特定的标签，类似于todo，并且统一约定这个标签，随着开发者将注释随着代码进行提交的时候，将标签也会一同带上，这样另一个人在拉取代码的时候就会很清楚的了解到这个项目结构目录。<br><img src="https://img-blog.csdnimg.cn/dba33e9c57ca4cc6879d2f47834126d7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后基于每个功能的分解步骤进行注释的编写<br><img src="https://img-blog.csdnimg.cn/d942829899144aa2a5da614f4457185b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后查看下方的todo列表<br><img src="https://img-blog.csdnimg.cn/a22a13e6462f4a2198c3570a2eeac85c.png" alt="在这里插入图片描述"><br>过滤todo信息<br><img src="https://img-blog.csdnimg.cn/e3ac5dda206945c3b4e32387dcaaab66.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/09364792184649e683eb47beae58a46e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就可以看到完整的codex项目索引了。</p><p>这种方式可以快速的查询到问题，一方面可以使新人快速了解各个结构之间的关系和功能分布，另一方面可以在出现问题的时候快速定位代码位置，便于修改。</p><h2 id="生成markdown"><a href="#生成markdown" class="headerlink" title="生成markdown"></a>生成markdown</h2><p>进一步的，如果在 CODEX 中添加 Markdown 关键字，甚至可以将导出的 CODEX 简单加工后，变成一张业务逻辑的 Sequence 序列图，如下所示。<br><img src="https://img-blog.csdnimg.cn/4e3361b90ac948a9879196aa37043db4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>结合业务逻辑，我们再来看一下，只需将每一步操作记录下来，简单的处理下便可得到一个项目结构图。<br><img src="https://img-blog.csdnimg.cn/1e7d2949af8340c692e8f3978cdb8320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上图为例，我们将必要注释记录清楚稍作加工便可形成下图所示图形。<br><img src="https://img-blog.csdnimg.cn/fc1ac18eee1742ff9321db0899aef53e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这样就可以极大的方便了我们梳理项目结构和接手新项目的学习成本。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;灵感来源&quot;&gt;&lt;a href=&quot;#灵感来源&quot; class=&quot;headerlink&quot; title=&quot;灵感来源&quot;&gt;&lt;/a&gt;灵感来源&lt;/h2&gt;&lt;p&gt;本文来自一片项目重构文章的启发，该文章作者一整年经历了 3 个代码十分混乱的项目，最大的收获就是摸索出了一个梳理烂代码的最佳实践——CODEX。&lt;/p&gt;
&lt;p&gt;原文路径：&lt;a href=&quot;https://mp.weixin.qq.com/s/JXRruyOvVtj6ykV1J6arSQ&quot;&gt;一个技术总监的忠告：精通那么多技术为何还是做不好一个项目？&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;文章作者的本意是重构项目时便于梳理项目结构提出的一个活的源代码索引。&lt;/p&gt;
&lt;p&gt;然而对于一些实践，借鉴了前者的经验，整理了一套基于idea的CODEX，可以在编写代码的时候按照规范将注释以特定形式输入，达成一个自动生成索引的功能，方便定位代码功能与位置。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂谈" scheme="https://jpruby888.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>screw 一颗螺丝钉的使命</title>
    <link href="https://jpruby888.github.io/post/9e3b75c0.html"/>
    <id>https://jpruby888.github.io/post/9e3b75c0.html</id>
    <published>2021-08-16T02:32:21.000Z</published>
    <updated>2022-03-17T03:33:34.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="screw介绍"><a href="#screw介绍" class="headerlink" title="screw介绍"></a>screw介绍</h1><p>对于screw，我们来看看作者是怎么定义它的。</p><blockquote><p>关于名字，想一个太难了，好在我这个聪明的小脑瓜灵感一现，怎么突出它的小，但重要呢？从小就学过雷锋的螺丝钉精神，摘自雷锋日记：虽然是细小的螺丝钉，是个细微的小齿轮，然而如果缺了它，那整个的机器就无法运转了，慢说是缺了它，即使是一枚小螺丝钉没拧紧，一个小齿轮略有破损，也要使机器的运转发生故障的…，感觉自己写的这个工具，很有这意味，虽然很小、但是开发中缺了它还不行，于是便起名为screw（螺丝钉）。</p></blockquote><h1 id="screw的特点"><a href="#screw的特点" class="headerlink" title="screw的特点"></a>screw的特点</h1><blockquote><p>简洁、轻量、设计良好<br>多数据库支持<br>多种格式文档<br>灵活扩展<br>支持自定义模板</p></blockquote><span id="more"></span><h1 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h1><blockquote><p>MySQL<br> MariaDB<br> TIDB<br> Oracle<br> SqlServer<br> PostgreSQL<br> Cache DB（2016）<br> H2 （开发中）<br> DB2 （开发中）<br> HSQL （开发中）<br> SQLite（开发中）<br> 瀚高（开发中）<br> 达梦 （开发中）<br> 虚谷 （开发中）<br> 人大金仓（开发中）<br>文档生成支持<br> html<br> word<br> markdown</p></blockquote><h1 id="screw的简单使用"><a href="#screw的简单使用" class="headerlink" title="screw的简单使用"></a>screw的简单使用</h1><blockquote><p>通过maven插件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- HikariCP --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--mysql driver--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--username--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>&gt;</span>username<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--password--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--driver--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--jdbc url--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">jdbcUrl</span>&gt;</span>jdbc:mysql://(数据库ip):3306/(数据库名)<span class="tag">&lt;/<span class="name">jdbcUrl</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--生成文件类型--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileType</span>&gt;</span>WORD/MD/HTML(三选一)<span class="tag">&lt;/<span class="name">fileType</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--打开文件输出目录--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">openOutputDir</span>&gt;</span>true<span class="tag">&lt;/<span class="name">openOutputDir</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--生成模板--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">produceType</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">produceType</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--文档名称 为空时:将采用[数据库名称-描述-版本号]作为文档名称--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileName</span>&gt;</span>测试文档名称<span class="tag">&lt;/<span class="name">fileName</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>&gt;</span>数据库文档生成<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据库文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>插件执行</p></blockquote><p><img src="https://img-blog.csdnimg.cn/6fe7b69b26d141d6840d35b10927b4d9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>生成完成后自动跳转到文件目录<br><img src="https://img-blog.csdnimg.cn/7d4081b706634600bf9339c1a5d4cda0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如需自定义格式等复杂功能可参考链接<br><a href="https://gitee.com/leshalv/screw#https://www.bilibili.com/video/av456302504/">screw</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;screw介绍&quot;&gt;&lt;a href=&quot;#screw介绍&quot; class=&quot;headerlink&quot; title=&quot;screw介绍&quot;&gt;&lt;/a&gt;screw介绍&lt;/h1&gt;&lt;p&gt;对于screw，我们来看看作者是怎么定义它的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于名字，想一个太难了，好在我这个聪明的小脑瓜灵感一现，怎么突出它的小，但重要呢？从小就学过雷锋的螺丝钉精神，摘自雷锋日记：虽然是细小的螺丝钉，是个细微的小齿轮，然而如果缺了它，那整个的机器就无法运转了，慢说是缺了它，即使是一枚小螺丝钉没拧紧，一个小齿轮略有破损，也要使机器的运转发生故障的…，感觉自己写的这个工具，很有这意味，虽然很小、但是开发中缺了它还不行，于是便起名为screw（螺丝钉）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;screw的特点&quot;&gt;&lt;a href=&quot;#screw的特点&quot; class=&quot;headerlink&quot; title=&quot;screw的特点&quot;&gt;&lt;/a&gt;screw的特点&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;简洁、轻量、设计良好&lt;br&gt;多数据库支持&lt;br&gt;多种格式文档&lt;br&gt;灵活扩展&lt;br&gt;支持自定义模板&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="杂谈" scheme="https://jpruby888.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>如何优化代码中的if-else/switch</title>
    <link href="https://jpruby888.github.io/post/1a3a1ad3.html"/>
    <id>https://jpruby888.github.io/post/1a3a1ad3.html</id>
    <published>2021-08-16T02:30:27.000Z</published>
    <updated>2022-03-17T03:33:34.299Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h3><p><strong>示例（包含异步+并发+线程池+反射+枚举+工厂模式+策略模式+单例模式+代理模式）</strong></p><blockquote><p>模拟场景：有一群人分别属于A,B两个部门，此时A和B部门对于成年的标准不同，A部门认为大于18岁算成年，B部门认为大于等于18岁算成年，找出所有成年人。</p></blockquote><blockquote><p>抽象场景：根据前端系统提供的一个策略执行一套组合操作，由于各个组合之间千变万化，且耗时较长，应采取并发进行不同的单步操作，且可能存在不同线程之间的结果依赖，最终需要满足可配置性，可扩展性，需满足开闭原则，且需要对单步结果和汇总结果进行统计处理，熔断降级，并记录成功状态或失败原因等情况。</p></blockquote><blockquote><p>话不多说，直接上代码~~~</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写工具类获取SpringApplicationContext</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        SpringContextUtil.applicationContext = applicationContext;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>线程池</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolUtil</span> &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> ThreadPoolExecutor threadPool;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        threadPool = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">5</span>,</span><br><span class="line">                Runtime.getRuntime().availableProcessors(),</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()    <span class="comment">//如果队列满了，还有线程进来，就不处理，抛出异常</span></span><br><span class="line"><span class="comment">//                new ThreadPoolExecutor.CallerRunsPolicy()    //哪来的去哪里，一般由main线程执行</span></span><br><span class="line"><span class="comment">//                new ThreadPoolExecutor.DiscardPolicy()    //队列满了不抛出异常，丢掉任务</span></span><br><span class="line"><span class="comment">//                new ThreadPoolExecutor.DiscardOldestPolicy()    //队列满了尝试跟最早的竞争，不会抛出异常</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//允许核心线程使用完关闭</span></span><br><span class="line">        threadPool.allowCoreThreadTimeOut(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title function_">getThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一些准备的工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">findManByDepartment</span><span class="params">(Person person)</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//B部门认为大于等于18岁算成年</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Department</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findManByDepartment</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person.getAge() &gt;= <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//A部门认为大于18岁算成年</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findManByDepartment</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person.getAge() &gt; <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DepartmentFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line">    INSTANCE;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Department <span class="title function_">creatInstance</span><span class="params">(Class&lt;? extends Department&gt; clazz)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PersonEnum</span> &#123;</span><br><span class="line"> </span><br><span class="line">        XIAOMING(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;A&quot;</span>),</span><br><span class="line">        XIAOHUA(<span class="string">&quot;小华&quot;</span>, <span class="string">&quot;B&quot;</span>),</span><br><span class="line">        XIAOGONG(<span class="string">&quot;小红&quot;</span>, <span class="string">&quot;A&quot;</span>),</span><br><span class="line">        DAMING(<span class="string">&quot;大明&quot;</span>, <span class="string">&quot;B&quot;</span>),</span><br><span class="line">        CHAOMING(<span class="string">&quot;超明&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> String code;</span><br><span class="line">        <span class="keyword">private</span> String msg;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 枚举类型转换</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> code 需要转换的类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 转换后的类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMsgByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (PersonEnum ele : values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ele.getCode().equals(code)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ele.getMsg();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>supplyAsync是供给型接口，无需传入参数，有返回值，其他的可以类比，此处的whenComplete则是并发处理完成后异步回调需要做的处理。allOf则是等待所有并发完成，join()和get()方法都是用来获取CompletableFuture异步之后的返回值。join()方法抛出的是uncheck异常（即未经检查的异常),不会强制开发者抛出。get()方法抛出的是经过检查的异常，ExecutionException, InterruptedException 需要用户手动处理。<br>此时就可以巧妙地通过一个中间map来进行结果传递。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果采用一发一查的异步查询模式可将整过过程异步处理，或者使用定时任务定时扫表进行数据库结果记录等方式提高效率</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">METHOD</span> <span class="operator">=</span> <span class="string">&quot;findManByDepartment&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;小明&quot;</span>).age(<span class="number">18</span>).build());</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;小华&quot;</span>).age(<span class="number">17</span>).build());</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;小红&quot;</span>).age(<span class="number">16</span>).build());</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;大明&quot;</span>).age(<span class="number">19</span>).build());</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;超明&quot;</span>).age(<span class="number">20</span>).build());</span><br><span class="line">        System.out.println(persons);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------------奇怪的分割线-------------------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//优化前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;优化前：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">            <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;小明&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> a.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;小华&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> b.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;小红&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> a.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;大明&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> b.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;超明&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> a.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------------奇怪的分割线-------------------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//优化后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;优化后：&quot;</span>);</span><br><span class="line">        <span class="comment">//并发找出所有成年人,并存入map中</span></span><br><span class="line">        ArrayList&lt;CompletableFuture&lt;Boolean&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ConcurrentHashMap&lt;Person, Boolean&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">            resList.add(CompletableFuture.supplyAsync(() -&gt; findMan(person), ThreadPoolUtil.getThreadPool()).whenComplete((r, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == e) &#123;</span><br><span class="line">                    map.put(person, r);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从map中获取结果</span></span><br><span class="line">        CompletableFuture.allOf(resList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[resList.size()])).whenComplete((r, e) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == e) &#123;</span><br><span class="line">                map.forEach((key, value) -&gt; &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> value ? (key + <span class="string">&quot;已成年&quot;</span>) : (key + <span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).join();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------------奇怪的分割线-------------------------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">findMan</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            ApplicationContext applicationContext = SpringContextUtil.getApplicationContext();</span></span><br><span class="line">            Class&lt;? <span class="keyword">extends</span> <span class="title class_">Department</span>&gt; clazz = (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Department</span>&gt;) Class.forName(PersonEnum.getMsgByCode(person.getName()));</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(METHOD, person.getClass());</span><br><span class="line"><span class="comment">//            flag = (boolean) method.invoke(applicationContext.getBean(clazz), person);</span></span><br><span class="line">            <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> DepartmentFactory.INSTANCE.creatInstance(clazz);</span><br><span class="line">            flag = (<span class="type">boolean</span>) method.invoke(department, person);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210716131521628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;场景分析&quot;&gt;&lt;a href=&quot;#场景分析&quot; class=&quot;headerlink&quot; title=&quot;场景分析&quot;&gt;&lt;/a&gt;场景分析&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;示例（包含异步+并发+线程池+反射+枚举+工厂模式+策略模式+单例模式+代理模式）&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模拟场景：有一群人分别属于A,B两个部门，此时A和B部门对于成年的标准不同，A部门认为大于18岁算成年，B部门认为大于等于18岁算成年，找出所有成年人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;抽象场景：根据前端系统提供的一个策略执行一套组合操作，由于各个组合之间千变万化，且耗时较长，应采取并发进行不同的单步操作，且可能存在不同线程之间的结果依赖，最终需要满足可配置性，可扩展性，需满足开闭原则，且需要对单步结果和汇总结果进行统计处理，熔断降级，并记录成功状态或失败原因等情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;话不多说，直接上代码~~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//编写工具类获取SpringApplicationContext&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SpringContextUtil&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ApplicationContextAware&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;applicationContext&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setApplicationContext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SpringContextUtil.applicationContext = applicationContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ApplicationContext &lt;span class=&quot;title function_&quot;&gt;getApplicationContext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; applicationContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="设计模式" scheme="https://jpruby888.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ESB的体系结构</title>
    <link href="https://jpruby888.github.io/post/f3355887.html"/>
    <id>https://jpruby888.github.io/post/f3355887.html</id>
    <published>2021-08-16T02:28:40.000Z</published>
    <updated>2022-03-17T03:33:34.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ESB"><a href="#什么是ESB" class="headerlink" title="什么是ESB"></a>什么是ESB</h2><blockquote><p>企业服务总线，即ESB全称为Enterprise Service Bus，指的是传统中间件技术与XML、Web服务等技术结合的产物。ESB提供了网络中最基本的连接中枢，是构筑企业神经系统的必要元素。<br>面向服务的体系结构已经逐渐成为IT集成的主流技术。面向服务的体系结构(service-oriented architecture，SOA)是一种软件系统设计方法，通过已经发布的和可发现的接口为终端用户应用程序或其它服务提供服务。</p></blockquote><h2 id="ESB的产生"><a href="#ESB的产生" class="headerlink" title="ESB的产生"></a>ESB的产生</h2><blockquote><p>ESB的产生即是为了解决企业中数据的多样性和协议的复杂性问题。如下图所示，系统与系统之间的数据传输是复杂的，同时又涉及到系统的交互，谁来适配谁就成了一个难题，因此ESB应运而生。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210714144810940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="ESB能够解决的问题"><a href="#ESB能够解决的问题" class="headerlink" title="ESB能够解决的问题"></a>ESB能够解决的问题</h2><blockquote><p>如果使用原生的服务调用，谁来适配谁成了一个大难题，谁来主导这次交互就会争论不休，如图所示。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210714145247890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><span id="more"></span><blockquote><p>如果一个系统接入外部系统，可能接入协议不同，则需要每个写一套适配流程，为了解决这个问题，且最大限度的复用代码，ESB采取了SOA架构，为每个请求方分配一个端口，为每个服务端提供的服务分配一个服务码和场景码供前端调用，此时前端将原来的几套适配流程转为只需要按照ESB的规定进行适配即可。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210714145756739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>我们来看一个简易的ESB流程在整个项目链路中的位置，前端接入自己的系统需要通过ESB，此时我们作为服务方，我们接入其他系统也需要经过ESB，此时我们作为渠道端，即ESB可以理解为沟通整个企业所有系统的一个总线系统。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210714145943534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="ESB的内部结构"><a href="#ESB的内部结构" class="headerlink" title="ESB的内部结构"></a>ESB的内部结构</h2><blockquote><p>ESB的内部结构就是通过拆组包，对一种报文进行拆分，拆分成一个个字段，再讲字段定向路由重组发送给后端系统，得到返回后将特定报文在进行拆分成一个个字段，并将字段重组成所需的报文组合返回给前端。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210714150738296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>ESB的内部结构即一个IN端用来处理和前端交互的数据，OUT端用于处理和后端交互的数据，此时多个前端可以复用后端提供给ESB的接口功能，IN和OUT的重合部分则是一个router，正因为有这个router，可以使前端不需要知道后端系统是谁，只需要根据ESB提供的接口调用ESB，然后ESB将数据返回即可。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210714151056848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>正是因为ESB的拆组包的灵活性和适配流程的多样性使得ESB可以适配不同的协议，不同的数据格式，使企业中每个系统通过总线连接起来，实现数据互通。</p></blockquote><h2 id="ESB的瓶颈与弊端"><a href="#ESB的瓶颈与弊端" class="headerlink" title="ESB的瓶颈与弊端"></a>ESB的瓶颈与弊端</h2><blockquote><p>当然ESB也存在一些缺点，虽然它在设计之初定义了不处理业务数据，只进行数据的拆分与组装，但是随着接入系统的增多与业务的复杂性，难免会根据不同的业务对同一系统拆分出不同的适配流程，虽然适配流程可以自由组合，但是也会导致系统越来越臃肿与庞大，难免会进行一些简单的转换操作，这种以一个微服务来管理所有为服务的思想是否可行仍需要等待时间的验证。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2021071415034911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>而且所有系统都接入ESB会导致系统排错比较困难，如上图，任何一个链路挂掉都需要通过ESB进行排查问题。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是ESB&quot;&gt;&lt;a href=&quot;#什么是ESB&quot; class=&quot;headerlink&quot; title=&quot;什么是ESB&quot;&gt;&lt;/a&gt;什么是ESB&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;企业服务总线，即ESB全称为Enterprise Service Bus，指的是传统中间件技术与XML、Web服务等技术结合的产物。ESB提供了网络中最基本的连接中枢，是构筑企业神经系统的必要元素。&lt;br&gt;面向服务的体系结构已经逐渐成为IT集成的主流技术。面向服务的体系结构(service-oriented architecture，SOA)是一种软件系统设计方法，通过已经发布的和可发现的接口为终端用户应用程序或其它服务提供服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ESB的产生&quot;&gt;&lt;a href=&quot;#ESB的产生&quot; class=&quot;headerlink&quot; title=&quot;ESB的产生&quot;&gt;&lt;/a&gt;ESB的产生&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ESB的产生即是为了解决企业中数据的多样性和协议的复杂性问题。如下图所示，系统与系统之间的数据传输是复杂的，同时又涉及到系统的交互，谁来适配谁就成了一个难题，因此ESB应运而生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210714144810940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ESB能够解决的问题&quot;&gt;&lt;a href=&quot;#ESB能够解决的问题&quot; class=&quot;headerlink&quot; title=&quot;ESB能够解决的问题&quot;&gt;&lt;/a&gt;ESB能够解决的问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;如果使用原生的服务调用，谁来适配谁成了一个大难题，谁来主导这次交互就会争论不休，如图所示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210714145247890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂谈" scheme="https://jpruby888.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>编写自定义的 SpringBoot starter 实现自动装配</title>
    <link href="https://jpruby888.github.io/post/891bfe8a.html"/>
    <id>https://jpruby888.github.io/post/891bfe8a.html</id>
    <published>2021-07-30T08:47:15.000Z</published>
    <updated>2022-03-16T14:38:41.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><em>记得几年前我在刚开始接触 SpringBoot&#x2F;SpringCloud，就对SpringBoot 如何实现自动装配产生了很大的好奇。但是当时技术能力尚浅，没能对这一方面了解的很透彻，只是在想如果有朝一日我也能写一个 Starter 提供给别人用就好了。最近我准备写一个 Starter。所以这篇博客就来总结一下，什么是 SpringBoot 自动装配以及如何实现自己的 Starter。</em></p><span id="more"></span><h2 id="什么是-Spring-Boot-的-AutoConfiguration"><a href="#什么是-Spring-Boot-的-AutoConfiguration" class="headerlink" title="什么是 Spring Boot 的 AutoConfiguration"></a>什么是 <strong>Spring Boot 的 AutoConfiguration</strong></h2><h4 id="什么是-SpringBoot-的自动装配"><a href="#什么是-SpringBoot-的自动装配" class="headerlink" title="什么是 SpringBoot 的自动装配"></a>什么是 SpringBoot 的自动装配</h4><p>实际上是类似于 SPI(Java Service Provider Interface) 机制， SpringBoot 在启动的时候会扫描 <code>classpath</code>下面的这个文件 <code>META-INF/spring.factories</code>， 包括所有依赖中的该文件都能够被 SpringBoot 扫描到。然后将文件中配置的类加载到 Spring 容器中，并执行类中定义的操作，比如按需创建更多的 Bean。如下，这是<code>spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories</code> <a href="https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories#L25">🔗</a>中的片段：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration</span></span><br></pre></td></tr></table></figure><p>该文件中，key 为<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>, value 为<code>org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</code>。 SpringBoot 会去扫描该文件并加载RabbitAutoConfiguration 。这就是 SpringBoot 的自动装配机制。</p><p>想要更加深入了解<code>EnableAutoConfiguration</code>是如何工作的、如何读取加载<code>spring.factories</code>，请查看其源码，这里不再详述。</p><h4 id="如何实现按需加载"><a href="#如何实现按需加载" class="headerlink" title="如何实现按需加载"></a>如何实现按需加载</h4><p>用<code>RabbitAutoConfiguration</code>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; RabbitTemplate.class, Channel.class &#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RabbitProperties.class)</span></span><br><span class="line"><span class="meta">@Import(RabbitAnnotationDrivenConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitAutoConfiguration</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p><code>@ConditionalOnClass</code>注解标记了，当加载了<code>RabbitTemplate.class, Channel.class</code>的时候（也就是说当你的 SpringBoot 项目中引入了 Rabbit 的依赖的时候），才去创建该 bean&#x2F;configuration<code>RabbitAutoConfiguration。</code></p><p>在 SpringBoot 中，有很多<a href="https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition">类似的注解</a>，可以实现条件加载 bean 的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span></span><br><span class="line"><span class="meta">@ConditionalOnCloudPlatform</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression</span></span><br><span class="line"><span class="meta">@ConditionalOnJava</span></span><br><span class="line"><span class="meta">@ConditionalOnJndi</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span></span><br><span class="line"><span class="meta">@ConditionalOnNotWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span></span><br><span class="line"><span class="meta">@ConditionalOnResource</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate</span></span><br><span class="line"><span class="meta">@ConditionalOnWarDeployment</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br></pre></td></tr></table></figure><h2 id="实现自己的-SpringBoot-Starter"><a href="#实现自己的-SpringBoot-Starter" class="headerlink" title="实现自己的 SpringBoot Starter"></a>实现自己的 SpringBoot Starter</h2><p><em>现在我们了解了SpringBoot 的自动装配和按需加载，已经可以开始尝试写一个自定义的 starter 了。</em></p><h4 id="首先使用gradle创建一个SpringBoot-项目，引入依赖"><a href="#首先使用gradle创建一个SpringBoot-项目，引入依赖" class="headerlink" title="首先使用gradle创建一个SpringBoot 项目，引入依赖"></a>首先使用gradle创建一个SpringBoot 项目，引入依赖</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter:2.5.3&#x27;</span></span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:2.5.3&#x27;</span></span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.boot:spring-boot-autoconfigure:2.5.3&#x27;</span></span><br><span class="line"></span><br><span class="line">  implementation <span class="string">&#x27;net.logstash.logback:logstash-logback-encoder:6.+&#x27;</span></span><br><span class="line"></span><br><span class="line">  testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.5.2&#x27;</span></span><br><span class="line">  testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.5.2&#x27;</span></span><br><span class="line">  testImplementation(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-test:2.5.3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  annotationProcessor <span class="string">&quot;org.springframework.boot:spring-boot-configuration-processor:2.5.3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code> annotationProcessor &#39;org.springframework.boot:spring-boot-configuration-processor:2.5.3&#39;</code> 可以生成你自定义的 Properties 的 Metadata，这样你就可以在引入这个自定义 starter 之后，在<code>application.properties</code>中像写其他配置一样写自己的自定义配置。参考[这里](<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#configuration-metadata-annotation-processor">Spring Boot Reference Guide</a>)。<a href="https://github.com/Fatezhang/Barrier/blob/master/build.gradle">源码查看</a>。</p><h4 id="编写一个spring-factories文件"><a href="#编写一个spring-factories文件" class="headerlink" title="编写一个spring.factories文件"></a>编写一个<code>spring.factories</code>文件</h4><p>在自己的 starter 中编写文件 <code>src/main/resources/META-INF/spring.factories</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.barrier.configuration.BarrierAutoConfiguration</span></span><br></pre></td></tr></table></figure><p>上面的代码声明了，在 SpringBoot 加载的时候，加载自定义自动配置类<code>BarrierAutoConfiguration</code>。</p><p><code>BarrierAutoConfiguration</code> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(Marker.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;BarrierProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BarrierAutoConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>@ConditionalOnBean(Marker.class)</code> 标记了这个 configuration 只有在 bean <code>Marker</code> 存在的时候才被加载到 Spring Context 中。那么 Marker 类是什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnableBarrierMarkerConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Marker <span class="title function_">barrierMarker</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Marker</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Marker</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Marker</span><span class="params">()</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;BarrierAutoConfiguration: enableBarrierMarkerBean creating...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Marker 类是一个标记类，在<code>EnableBarrierMarkerConfiguration</code>中被创建出来，加入到 SpringContext 中去的。那么何时这个 configuration 才会被加载呢？或者说我们如何控制该 configuration 被加载？</p><h4 id="创建一个注解实现按需开启-starter"><a href="#创建一个注解实现按需开启-starter" class="headerlink" title="创建一个注解实现按需开启 starter"></a>创建一个注解实现按需开启 starter</h4><p>Spring 提供了一个注解 <code>@Import</code>，可以提供使用者动态的去加载指定的 bean，尤其是去加载 configuration。</p><p>首先你要了解一个前提，SpringBoot 或者 Spring 是无法加载一个外部依赖中的 bean 的。所以我们在自己的 SpringBoot 项目中使用这个 starter 中，在SpringBoot 启动类中这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(EnableBarrierMarkerConfiguration.class)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们在自己的项目中就能够注入 Marker 这个 bean 了，也就间接地开启了<code>BarrierAutoConfiguration</code>。</p><p>但是这样写不够优雅，我们可以创建一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;EnableBarrierMarkerConfiguration.class&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="meta">@interface</span> EnableBarrier &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在注解中使用<code>@Import</code>，导入这个 configuration。 </p><h4 id="在-SpringBoot-项目中使用"><a href="#在-SpringBoot-项目中使用" class="headerlink" title="在 SpringBoot 项目中使用"></a>在 SpringBoot 项目中使用</h4><p>这样，在 SpringBoot 项目中，引入我们自定义的 starter 之后，使用<code>@EnableBarrier</code>就能开启我们自己的 starter 的功能了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBarrier</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>最后，自定义 starter 的源码可以看<a href="https://github.com/Fatezhang/Barrier">这里</a>。</strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;em&gt;记得几年前我在刚开始接触 SpringBoot&amp;#x2F;SpringCloud，就对SpringBoot 如何实现自动装配产生了很大的好奇。但是当时技术能力尚浅，没能对这一方面了解的很透彻，只是在想如果有朝一日我也能写一个 Starter 提供给别人用就好了。最近我准备写一个 Starter。所以这篇博客就来总结一下，什么是 SpringBoot 自动装配以及如何实现自己的 Starter。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://jpruby888.github.io/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="https://jpruby888.github.io/tags/SpringBoot/"/>
    
    <category term="SpringBoot starter" scheme="https://jpruby888.github.io/tags/SpringBoot-starter/"/>
    
  </entry>
  
  <entry>
    <title>我的无奈的来源，正是他</title>
    <link href="https://jpruby888.github.io/post/c7f9efd1.html"/>
    <id>https://jpruby888.github.io/post/c7f9efd1.html</id>
    <published>2021-07-26T12:06:19.000Z</published>
    <updated>2022-03-16T14:38:42.041Z</updated>
    
    <content type="html"><![CDATA[<p>多年以前，我遇到了这么一个人。在长期的相处于磨合中，我渐渐的了解他，又渐渐的开始厌恶他。</p><p>在我看来他存在懒惰、不上进等诸多问题。我厌恶他的没有担当，面对一切事物只会去逃避。</p><p>我厌恶他做事情犹豫不决，不愿意向自己渴望的东西迈出脚步，痴望着上天能够怜悯他，将他喜欢的事物和人送到他手中。</p><p>性格上的懦弱、怯惧，以至于平平挫折，却自视为被生活沉重打击。</p><p>他把年华用以虚度的拙劣手段，对于青春与未来的人生所持有消极的态度，也曾令我屡屡失望、但同时我也是怜悯他的，我经历过他不被重视时的落寞，不被需要时的孤独，这种体验很糟糕，清楚的提醒着我，他正在难过。</p><p>他很脆弱，对于旁人的冷笑和嘲讽极度敏感。</p><p>我来到这个世界并无多么重大的意义，生活赋予我的第一要务就是要照顾好他。</p><p>于是我必须细心的感知他的大脑波动，替他整理悲苦、负面的情绪害怕他迷失，害怕他放弃只能一遍又一遍的安慰，一遍又一遍的强调。</p><p>在明知无望的情况下，还是想他能够逐渐的快乐起来。</p><p>但是我好无奈。</p><p>我无奈的来源于：我正是他。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;多年以前，我遇到了这么一个人。在长期的相处于磨合中，我渐渐的了解他，又渐渐的开始厌恶他。&lt;/p&gt;
&lt;p&gt;在我看来他存在懒惰、不上进等诸多问题。我厌恶他的没有担当，面对一切事物只会去逃避。&lt;/p&gt;
&lt;p&gt;我厌恶他做事情犹豫不决，不愿意向自己渴望的东西迈出脚步，痴望着上天能够怜</summary>
      
    
    
    
    <category term="随笔" scheme="https://jpruby888.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://jpruby888.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>NestJS 实践记录（一）：项目创建</title>
    <link href="https://jpruby888.github.io/post/ccdb51fd.html"/>
    <id>https://jpruby888.github.io/post/ccdb51fd.html</id>
    <published>2021-07-24T11:02:26.000Z</published>
    <updated>2021-07-24T11:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近想写一些功能接口给自己用，平常写前端比较多，我自己可怜的小服务器用 java 资源不是很充足，所以准备还是用 Node.js 来实现后端，选用 NestJS 作为本次开发的后端框架。</p><span id="more"></span><blockquote><p>Nest (NestJS) 是一个用于构建高效、可扩展的 Node.js 服务器端应用程序的开发框架。它利用 JavaScript 的渐进增强的能力，使用并完全支持 TypeScript （仍然允许开发者使用纯 JavaScript 进行开发），并结合了 OOP （面向对象编程）、FP （函数式编程）和 FRP （函数响应式编程）。</p><p>在底层，Nest 构建在强大的 HTTP 服务器框架上，例如 Express （默认），并且还可以通过配置从而使用 Fastify ！</p><p>Nest 在这些常见的 Node.js 框架 (Express&#x2F;Fastify) 之上提高了一个抽象级别，但仍然向开发者直接暴露了底层框架的 API。这使得开发者可以自由地使用适用于底层平台的无数的第三方模块。</p></blockquote><p>NestJS 是我最近才了解到的一个非常流行的 Node.js 框架，用起来很有一种在编写 Spring Boot 的熟悉感，又能使用我更加熟悉的 JavaScript 来进行编写，是对我来说比较理想的后端框架。在此记录下实践的过程。</p><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>本机环境：</p><ul><li>Node.js: 14.17.0</li><li>npm: 7.11.2</li><li>NestJS: 8.0.0</li><li>TypeScirpt: 4.3.5</li></ul><p>在安装好 Node.js 后，在全局安装 <code>NestJS cli</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @nestjs/cli</span><br></pre></td></tr></table></figure><p>运行如下命令创建项目，<code>nest-cli</code>会根据参数初始化项目文件。接着会让你选择想用的包管理器，<code>npm</code>或<code>yarn</code>，我选择了<code>yarn</code>，因为我感觉国内即使换了源，<code>yarn</code> 似乎也更快一些。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest new project-name</span><br></pre></td></tr></table></figure><p>完成安装后就会显示如下信息。</p><p><img src="https://img.iszy.xyz/20210724195818.png"></p><p>目录结构可以参考 <a href="https://github.com/nestjs/typescript-starter">Nest framework TypeScript starter repository</a>，项目就是基于这个创建的。我们可以看到这个模板使用了 TypeScript 语言，NestJS 也是可以基于 JavaScript 运行的，创建时加上参数配置如下所示即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest new project-name -l JavaScript</span><br></pre></td></tr></table></figure><p>更多参数可以参考 cli 的帮助，<code>nest new --help</code>。</p><p><img src="https://img.iszy.xyz/20210724201411.png"></p><p>运行<code>yarn start</code>后，NestJS 就会开始运行，当显示<code>Nest application successfully started</code>时，即表示启动完成。</p><p><img src="https://img.iszy.xyz/20210724201050.png"></p><p>此时可以访问 <a href="http://localhost:3000/">http://localhost:3000</a>，就能看到默认返回的 <code>Hello World!</code> 了。</p><p><img src="https://img.iszy.xyz/20210724201226.png"></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>初始项目结构如下，我们主要关注 <code>src</code> 目录</p><p><img src="https://img.iszy.xyz/20210725123352.png"></p><p>初始内容由一个入口文件 <code>main.ts</code>、用于定义路由的 controller 文件<code>app.controller.ts</code>、用于具体方法实现的 provider 文件 <code>app.service.ts</code>、以及一个将 controller 和 service 文件关联在一起的 module 文件组成。</p><p>打开入口文件<code>src/main.ts</code>，内容如下。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./app.module&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure><p>可以看到使用 Nest 工厂函数创建了 <code>AppModule</code>，然后将应用监听到了 3000 端口，现在应用将在 3000 端口接受 HTTP 请求。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./app.controller&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./app.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>在根模组 AppModule 中，注册了 AppController 和 AppService。<strong>值得注意的是，provider 需要在 module 中注册后才能为其他 provider 或者 controller 提供服务。</strong></p><p>在 AppController 中，添加了默认的 Get 路由 getHello，通过引入的 provider AppService 来实际提供逻辑代码。因为没有指定路由的路径，那就是默认的根路径，也就是我们访问的<code>http://localhost:3000/</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.controller.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./app.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">appService</span>.<span class="title function_">getHello</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 provider AppService 中，我们可以看到这个<code>getHello</code>方法就是返回了一个<code>Hello World!</code>，也是就我们之前访问<code>http://localhost:3000/</code>看到的内容。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppService</span> &#123;</span><br><span class="line">  <span class="title function_">getHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里基本可以了解了 NestJS 的设计理念，主要就是由<code>Controller</code>、<code>Provider</code>和<code>Module</code>组成成模组来提供服务。</p><ul><li>Controller: 控制器，提供 Api 接口，定义路由等，不实际处理业务。</li><li>Provider: 也就是<code>Service</code>，为<code>Controller</code>或其他<code>Provider</code>提供服务，在这里编写实际的处理代码。</li><li>Module: 负责连接<code>Provider</code>和<code>Controller</code>，类似于命名空间的概念，在同一个<code>Module</code>中注册过的 <code>Provider</code>才能引入并提供服务。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近想写一些功能接口给自己用，平常写前端比较多，我自己可怜的小服务器用 java 资源不是很充足，所以准备还是用 Node.js 来实现后端，选用 NestJS 作为本次开发的后端框架。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://jpruby888.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JavaScript" scheme="https://jpruby888.github.io/tags/JavaScript/"/>
    
    <category term="NestJS" scheme="https://jpruby888.github.io/tags/NestJS/"/>
    
    <category term="TypeScript" scheme="https://jpruby888.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>写博客有什么用？</title>
    <link href="https://jpruby888.github.io/post/1e5ae654.html"/>
    <id>https://jpruby888.github.io/post/1e5ae654.html</id>
    <published>2021-07-21T15:11:21.000Z</published>
    <updated>2022-03-16T14:38:41.962Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写过一篇正经的技术博客了，也好久没有静下心来敲几行工作之外的代码了。</p><p>今天打开自己的博客看了一眼，突然有些反胃！😫我好像对自己的博客审美疲劳了。</p><p>产生的影响就是自己越来越不想写博客，没有整理笔记的欲望了。但是看了几个朋友分享的一些不错主题的他人博客，觉得也许换一种博客主题可能写博客的热情会高一点。</p><p>但是一想到换个主题，自己又要再新主题上魔改无数，又头大了。谢特！我真纠结。</p><p>说到写博客，突然想问自己一句，写了有人看吗？真的有人会看别人的博客吗？</p><p>或者换个问题，写了是给自己看的还是希望分享给别人？其实整理笔记、写博客都是巩固自己学习内容的方式吧，想要 develop others，属实想多了。</p><p>最近逛技术论坛，例如掘金，得到一个结论：当前国内互联网公司压榨下的搬砖码农，根本没时间好好看看别人写的东西，看了也不会思考。看完别人写的博客，在博客底下评论一句：“学到了”、“收藏了”。没有一个人站出来讨论一下，更不用说指出博客中的错误了。好像大家都一起进入了一个夸夸群。</p><p>我觉得对于我来说，没有经过自己验证的理论，我是永远持怀疑态度的。我永远都不会直接接受别人的想法，也许嘴上同意，心里也不会这样想！我甚至很反感那些莫名其妙就想要强加给你一个自己觉得对的理论的人，没有说服我的理由，只会让我更加讨厌。</p><p>一想到在网络上或者生活中看到别人很轻易地就能对别人说的东西去附和，我就觉得这个世界不适合我。每个人都活的太虚伪。</p><p>你要是说什么就是什么，那我的存在岂不是很没有意义？</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没写过一篇正经的技术博客了，也好久没有静下心来敲几行工作之外的代码了。&lt;/p&gt;
&lt;p&gt;今天打开自己的博客看了一眼，突然有些反胃！😫我好像对自己的博客审美疲劳了。&lt;/p&gt;
&lt;p&gt;产生的影响就是自己越来越不想写博客，没有整理笔记的欲望了。但是看了几个朋友分享的一些不错主题的他人博客，觉得也许换一种博客主题可能写博客的热情会高一点。&lt;/p&gt;
&lt;p&gt;但是一想到换个主题，自己又要再新主题上魔改无数，又头大了。谢特！我真纠结。&lt;/p&gt;
&lt;p&gt;说到写博客，突然想问自己一句，写了有人看吗？真的有人会看别人的博客吗？&lt;/p&gt;
&lt;p&gt;或者换个问题，写了是给自己看的还是希望分享给别人？其实整理笔记、写博客都是巩固自己学习内容的方式吧，想要 develop others，属实想多了。&lt;/p&gt;
&lt;p&gt;最近逛技术论坛，例如掘金，得到一个结论：当前国内互联网公司压榨下的搬砖码农，根本没时间好好看看别人写的东西，看了也不会思考。看完别人写的博客，在博客底下评论一句：“学到了”、“收藏了”。没有一个人站出来讨论一下，更不用说指出博客中的错误了。好像大家都一起进入了一个夸夸群。&lt;/p&gt;
&lt;p&gt;我觉得对于我来说，没有经过自己验证的理论，我是永远持怀疑态度的。我永远都不会直接接受别人的想法，也许嘴上同意，心里也不会这样想！我甚至很反感那些莫名其妙就想要强加给你一个自己觉得对的理论的人，没有说服我的理由，只会让我更加讨厌。&lt;/p&gt;
&lt;p&gt;一想到在网络上或者生活中看到别人很轻易地就能对别人说的东西去附和，我就觉得这个世界不适合我。每个人都活的太虚伪。&lt;/p&gt;
&lt;p&gt;你要是说什么就是什么，那我的存在岂不是很没有意义？&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://jpruby888.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://jpruby888.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>你还不会用Hystrix实现服务降级吗?</title>
    <link href="https://jpruby888.github.io/post/921e143f.html"/>
    <id>https://jpruby888.github.io/post/921e143f.html</id>
    <published>2021-06-29T08:54:35.000Z</published>
    <updated>2022-03-17T03:33:34.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：需求分析"><a href="#一：需求分析" class="headerlink" title="一：需求分析"></a>一：需求分析</h1><p>如果一个服务不可用，例如网络延迟或者流量激增，则会影响依赖于这个服务的其他服务，导致雪崩效应。为了解决这种雪崩效应，使用熔断器Hystrix, 实现服务降级，服务限流的功能，并且为client提供健康的页面状态。</p><h1 id="二：解决方案"><a href="#二：解决方案" class="headerlink" title="二：解决方案"></a>二：解决方案</h1><p>使用熔断器或者服务降级，使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。</p><h2 id="fallback和fallbackFactory区别"><a href="#fallback和fallbackFactory区别" class="headerlink" title="fallback和fallbackFactory区别"></a>fallback和fallbackFactory区别</h2><p>需要得到导致回退触发的原因需要使用fallbackFactory</p><h2 id="配置中心开启Hystrix功能"><a href="#配置中心开启Hystrix功能" class="headerlink" title="配置中心开启Hystrix功能"></a>配置中心开启Hystrix功能</h2><p>在application.yml 或者Apollo中开启Hystrix功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  OkToRetryOnAllOperations: <span class="literal">false</span> #对所有操作请求都进行重试,默认<span class="literal">false</span></span><br><span class="line">  ReadTimeout: <span class="number">5000</span>   #负载均衡超时时间，默认值<span class="number">5000</span></span><br><span class="line">  ConnectTimeout: <span class="number">2000</span> #ribbon请求连接的超时时间，默认值<span class="number">2000</span></span><br><span class="line">  MaxAutoRetries: <span class="number">0</span>     #对当前实例的重试次数，默认<span class="number">0</span></span><br><span class="line">  MaxAutoRetriesNextServer: <span class="number">1</span> #对切换实例的重试次数，默认<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    <span class="keyword">default</span>: #<span class="keyword">default</span>全局有效，service id指定应用有效</span><br><span class="line">      execution:</span><br><span class="line">        timeout:</span><br><span class="line">          #如果enabled设置为<span class="literal">false</span>，则请求超时交给ribbon控制,为<span class="literal">true</span>,则超时作为熔断根据</span><br><span class="line">          enabled: <span class="literal">true</span></span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: <span class="number">1000</span> #断路器超时时间，默认1000ms</span><br><span class="line"></span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>如果hystrix.command.default.execution.timeout.enabled为true,则会有两个执行方法超时的配置,一个就是ribbon的ReadTimeout,一个就是熔断器hystrix的timeoutInMilliseconds, 此时谁的值小谁生效</li><li>如果hystrix.command.default.execution.timeout.enabled为false,则熔断器不进行超时熔断,而是根据ribbon的ReadTimeout抛出的异常而熔断,也就是取决于ribbon</li><li>ribbon的ConnectTimeout,配置的是请求服务的超时时间,除非服务找不到,或者网络原因,这个时间才会生效</li><li>ribbon还有MaxAutoRetries对当前实例的重试次数,MaxAutoRetriesNextServer对切换实例的重试次数, 如果ribbon的ReadTimeout超时,或者ConnectTimeout连接超时,会进行重试操作</li><li>由于ribbon的重试机制,通常熔断的超时时间需要配置的比ReadTimeout长,ReadTimeout比ConnectTimeout长,否则还未重试,就熔断了</li><li>为了确保重试机制的正常运作,理论上（以实际情况为准）建议hystrix的超时时间为:(1 + MaxAutoRetries + MaxAutoRetriesNextServer) * ReadTimeout</li><li>(以上太长可不看，如果按ribbon默认的推荐设置看，算出来是10s，但不使用ribbon重试机制的话则为5s，但hystrix默认为1s，因此建议测试环境5s，生产环境机器性能各方面相对较高可设置为3s左右)</li></ul></blockquote><span id="more"></span><h2 id="添加fallback属性"><a href="#添加fallback属性" class="headerlink" title="添加fallback属性"></a>添加fallback属性</h2><p>在接口中的<code>@FeignClient</code>注解上添加fallback属性来配置指定的处理类。</p><p>在热点服务上添加指定fallback类，返回指定内容:</p><p>在RPC调用的类上添加指定fallback类，在服务熔断的时候返回fallback类中的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CIM-BASE-ZUUL&quot;, url = &quot;$&#123;feign.url.cim-base-zuul&#125;&quot;, fallbackFactory = CimBaseZuulServiceFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CimBaseZuulService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有设备</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cim/api-service/find/deviceTypes&quot;)</span></span><br><span class="line">    CimBaseZuulResponse&lt;List&lt;DeviceBaseInfoBO&gt;&gt; <span class="title function_">getAllDeviceInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建回调类"><a href="#创建回调类" class="headerlink" title="创建回调类"></a>创建回调类</h2><p>热点服务的回掉类继承FallbackFactory：</p><p>创建<code>UgmdpServiceFallback</code>类继承于FallbackFactory<T>实现回调的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CimBaseZuulServiceFallback</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;CimBaseZuulService&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_CIM</span> <span class="operator">=</span> <span class="string">&quot;cim&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GET_ALL_DEVICE_INFO</span> <span class="operator">=</span> <span class="string">&quot;/cim/api-service/find/deviceTypes&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CimBaseZuulService <span class="title function_">create</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CimBaseZuulService</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> CimBaseZuulResponse&lt;List&lt;DeviceBaseInfoBO&gt;&gt; <span class="title function_">getAllDeviceInfo</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> HystrixTimeoutException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>(ResponseCode.FEIGN_TIMEOUT, SYSTEM_CIM, GET_ALL_DEVICE_INFO);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>(ResponseCode.DEGRADATION);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeoutException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeoutException</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeoutException</span><span class="params">(ResponseCode exception)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(exception.getMsg());</span><br><span class="line">        <span class="built_in">this</span>.code = exception.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = exception.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeoutException</span><span class="params">(ResponseCode exception,String... str)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(exception.getMsg());</span><br><span class="line">        <span class="built_in">this</span>.code = exception.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = String.format(exception.getMsg(),str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局异常捕获"><a href="#全局异常捕获" class="headerlink" title="全局异常捕获"></a>全局异常捕获</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;HystrixRuntimeException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> RdfaResult&lt;Serializable&gt; <span class="title function_">timeoutException</span><span class="params">(HystrixRuntimeException exception)</span> &#123;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">cause</span> <span class="operator">=</span> (Exception) exception.getFallbackException().getCause().getCause();</span><br><span class="line">        log.warn(<span class="string">&quot;服务调用超时&quot;</span>, cause);</span><br><span class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> TimeoutException)&#123;</span><br><span class="line">            <span class="type">TimeoutException</span> <span class="variable">e</span> <span class="operator">=</span> (TimeoutException)cause;</span><br><span class="line">            <span class="keyword">return</span> RdfaResult.fail(e.getCode(), e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RdfaResult.fail(ResponseCode.FAILURE.getCode(), exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三：测试熔断"><a href="#三：测试熔断" class="headerlink" title="三：测试熔断"></a>三：测试熔断</h1><p><img src="https://img-blog.csdnimg.cn/20210629113553759.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一：需求分析&quot;&gt;&lt;a href=&quot;#一：需求分析&quot; class=&quot;headerlink&quot; title=&quot;一：需求分析&quot;&gt;&lt;/a&gt;一：需求分析&lt;/h1&gt;&lt;p&gt;如果一个服务不可用，例如网络延迟或者流量激增，则会影响依赖于这个服务的其他服务，导致雪崩效应。为了解决这种雪崩效应，使用熔断器Hystrix, 实现服务降级，服务限流的功能，并且为client提供健康的页面状态。&lt;/p&gt;
&lt;h1 id=&quot;二：解决方案&quot;&gt;&lt;a href=&quot;#二：解决方案&quot; class=&quot;headerlink&quot; title=&quot;二：解决方案&quot;&gt;&lt;/a&gt;二：解决方案&lt;/h1&gt;&lt;p&gt;使用熔断器或者服务降级，使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。&lt;/p&gt;
&lt;h2 id=&quot;fallback和fallbackFactory区别&quot;&gt;&lt;a href=&quot;#fallback和fallbackFactory区别&quot; class=&quot;headerlink&quot; title=&quot;fallback和fallbackFactory区别&quot;&gt;&lt;/a&gt;fallback和fallbackFactory区别&lt;/h2&gt;&lt;p&gt;需要得到导致回退触发的原因需要使用fallbackFactory&lt;/p&gt;
&lt;h2 id=&quot;配置中心开启Hystrix功能&quot;&gt;&lt;a href=&quot;#配置中心开启Hystrix功能&quot; class=&quot;headerlink&quot; title=&quot;配置中心开启Hystrix功能&quot;&gt;&lt;/a&gt;配置中心开启Hystrix功能&lt;/h2&gt;&lt;p&gt;在application.yml 或者Apollo中开启Hystrix功能&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ribbon:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  OkToRetryOnAllOperations: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; #对所有操作请求都进行重试,默认&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ReadTimeout: &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;   #负载均衡超时时间，默认值&lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ConnectTimeout: &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt; #ribbon请求连接的超时时间，默认值&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MaxAutoRetries: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;     #对当前实例的重试次数，默认&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MaxAutoRetriesNextServer: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; #对切换实例的重试次数，默认&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hystrix:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  command:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: #&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;全局有效，service id指定应用有效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      execution:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeout:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          #如果enabled设置为&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;，则请求超时交给ribbon控制,为&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,则超时作为熔断根据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          enabled: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isolation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          thread:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            timeoutInMilliseconds: &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; #断路器超时时间，默认1000ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;feign:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hystrix:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enabled: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果hystrix.command.default.execution.timeout.enabled为true,则会有两个执行方法超时的配置,一个就是ribbon的ReadTimeout,一个就是熔断器hystrix的timeoutInMilliseconds, 此时谁的值小谁生效&lt;/li&gt;
&lt;li&gt;如果hystrix.command.default.execution.timeout.enabled为false,则熔断器不进行超时熔断,而是根据ribbon的ReadTimeout抛出的异常而熔断,也就是取决于ribbon&lt;/li&gt;
&lt;li&gt;ribbon的ConnectTimeout,配置的是请求服务的超时时间,除非服务找不到,或者网络原因,这个时间才会生效&lt;/li&gt;
&lt;li&gt;ribbon还有MaxAutoRetries对当前实例的重试次数,MaxAutoRetriesNextServer对切换实例的重试次数, 如果ribbon的ReadTimeout超时,或者ConnectTimeout连接超时,会进行重试操作&lt;/li&gt;
&lt;li&gt;由于ribbon的重试机制,通常熔断的超时时间需要配置的比ReadTimeout长,ReadTimeout比ConnectTimeout长,否则还未重试,就熔断了&lt;/li&gt;
&lt;li&gt;为了确保重试机制的正常运作,理论上（以实际情况为准）建议hystrix的超时时间为:(1 + MaxAutoRetries + MaxAutoRetriesNextServer) * ReadTimeout&lt;/li&gt;
&lt;li&gt;(以上太长可不看，如果按ribbon默认的推荐设置看，算出来是10s，但不使用ribbon重试机制的话则为5s，但hystrix默认为1s，因此建议测试环境5s，生产环境机器性能各方面相对较高可设置为3s左右)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Springcloud" scheme="https://jpruby888.github.io/tags/Springcloud/"/>
    
  </entry>
  
  <entry>
    <title>为什么并不是所有人都有自由意志？</title>
    <link href="https://jpruby888.github.io/post/bb2f6bb7.html"/>
    <id>https://jpruby888.github.io/post/bb2f6bb7.html</id>
    <published>2021-06-20T06:41:15.000Z</published>
    <updated>2022-03-16T14:38:41.929Z</updated>
    
    <content type="html"><![CDATA[<div style="width: 100%">  <iframe src="//player.bilibili.com/player.html?aid=461048579&bvid=BV1Z5411M7hG&cid=351951244&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="350px"> </iframe></div><center> <p style="font-size: 11px; color: gray"><u>Loki - About free will</u></p> </center><p>这两天看了一个新的美剧——《Loki》。是漫威系列的多元宇宙时间线背景的科幻加奇幻片。一开始是抱着看爆米花剧的心态再加上自己一直以来都对漫威的电影很感兴趣，所以翻墙找了资源🤫。剧情虽然离谱但是很对我的胃口，故事大致讲的是在复仇者联盟穿越回 2012 年寻找宇宙魔方（空间宝石）的时候，Loki 偷走了空间宝石。而因为扰乱了漫威宇宙的神圣时间线，被时间管理局逮捕。</p><span id="more"></span><p>剧中的时间管理局的工作者可以说是三位神圣的时间守护者创造出来管理时间线的没有生命的机器人。他们无法自由的出现在神圣时间线中，也就是无法干涉现实的人类生活，否则会扰乱神圣时间线从而导致出现时间线分支，衍生出多元宇宙。只能够待在时间管理局这样一个超脱时间存在的地方，日复一日的工作。</p><p>而 Loki，阿斯加德的诡计之神，一个不会听命于所有人，想要统治整个宇宙，自己建立规则的自由的神，在剧中与这位时间管理局的分析师——莫比乌斯，有了一段上述视频中的对话。只是一段小的插曲，却让我反复看了好几遍。</p><p>莫比乌斯收藏了一份摩托艇杂志，和洛基谈起来的时候神采飞扬像是非常了解摩托艇并极其热爱，但是当洛基问他有没有坐过的时候他的答案却是“no”。时间管理局的人没有权利去享受现实世界的任何事物，因为会引出另一个时间分支。他每天都看摩托艇杂志只是为了提醒自己为什么活着，为何而战！他不去想有什么意义，只是去一味的遵守既定设定。这让洛基对此非常不解。他反问洛基是被谁创造出来的，并说不论是谁，都没有意义，而且<code>Exist is chaos.</code>存在即混乱。当我们试着去理解这一切的时候，它们都会变得毫无意义！所以他相信这一切都是真的，并且按照这个设定去完成自己的“光荣使命”。</p><p>但是作为诡计之神的洛基，却不愿意遵守规则。他觉得这种过去、现在、将来被设定好的一切都是不正确的，时间就应该拥有不确定性，每个人也都是自由的，都拥有自由意志，能够按照记得的想法去做自己想做的事情。以至于那三个神圣的时间守护者，洛基有句话可能也有暗示：“There no one bad is truly bad, and no one good is ever truly good”。如果相信并且遵循固定的一切，那么自由意志将不复存在。</p><p>关于所谓的自由意志，我想每个人都用于不同的认识。我所理解的自由意志，是指<u>每个人都对自己的行为的产生，拥有自主决定性。不光指行动上的行为，还有思考，而且主要是指思考。每个人都是自己行为的主人，不受任何外界因素的影响</u>，这才叫拥有自由意志。</p><p>然而，现实世界有多少人拥有自由意志呢？每个人的成长过程中，都在经受着社会环境影响，每个人都拥有不同的人格，环境中一丁点的差别都会造就出两个完全不同的人。也许两个人在同一时间点读了不同的书，下一回就是几年后二者战场上兵戎相见、各为其主。</p><p>自由意志早已被那些所谓“爱你的人”、“管理你的人”、“你爱的人”、“你为之效忠的***”淹没在无底深渊。当你的自由意志想要反抗着挣扎着出来的时候，上述那些就像拥有着魔法一样将之再次压制回去。</p><p>不过其实自由意志也不需要完全的反抗，你只需要懂得辩证的思考。在你接受一个观点的时候，站在这个观点的对立面去思考问题，从多个角度看待一件事物的影响，尽可能的减少外界带给你的一些“判断依据”，那么自由意志就会产生，你才会自主的决定自己的行为，和对一件事物的思考。</p><p>其实我发现自己身边的人，并不懂得辩证的思考问题，在一个网站看到一个帖子，觉得说的正确，就急于将之分享给别人，变成自己的想法滔滔不绝的灌输给别人，完全缺乏多角度的思考。</p><p>不过有时候多角度思考问题，轻则形成一个犹豫不决的人格，或者让你很难去接受别人的想法，严重更会容易导致人格分裂，我感觉的的心里就住了两个自己，每次做出选择的时候脑子里就会有另一个声音发出反对意见，我是不是要去看一下心理医生… …</p><p>最后凭借着这个话题，想到一个最近看到的一句话：如果循规蹈矩的生活并没有给你带来预期的幸福，反而让你在神采飞扬的大好年华过的卑微而苍白，那么就试着放飞自我，随心所欲一次！</p><p><strong>自由、自由意志万岁！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_5839.JPG" alt="IMG_5839"></p>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;width: 100%&quot;&gt;
  &lt;iframe src=&quot;//player.bilibili.com/player.html?aid=461048579&amp;bvid=BV1Z5411M7hG&amp;cid=351951244&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; width=&quot;100%&quot; height=&quot;350px&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;center&gt; &lt;p style=&quot;font-size: 11px; color: gray&quot;&gt;&lt;u&gt;Loki - About free will&lt;/u&gt;&lt;/p&gt; &lt;/center&gt;



&lt;p&gt;这两天看了一个新的美剧——《Loki》。是漫威系列的多元宇宙时间线背景的科幻加奇幻片。一开始是抱着看爆米花剧的心态再加上自己一直以来都对漫威的电影很感兴趣，所以翻墙找了资源🤫。剧情虽然离谱但是很对我的胃口，故事大致讲的是在复仇者联盟穿越回 2012 年寻找宇宙魔方（空间宝石）的时候，Loki 偷走了空间宝石。而因为扰乱了漫威宇宙的神圣时间线，被时间管理局逮捕。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://jpruby888.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://jpruby888.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>给数组原型对象添加方法</title>
    <link href="https://jpruby888.github.io/post/cef58ddb.html"/>
    <id>https://jpruby888.github.io/post/cef58ddb.html</id>
    <published>2021-06-15T02:24:35.000Z</published>
    <updated>2021-06-15T02:24:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天使用<code>for...in</code>方法的时候发现枚举到了意料之外的<code>prototype</code>内的方法，发现是没有正确为数组原型对象添加方法，在此记录。</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一般我们如何给一个数组原型对象添加方法呢，比如我们添加一个去重方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unique</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> n = &#123;&#125;,</span><br><span class="line">    r = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!n[<span class="variable language_">this</span>[i]]) &#123;</span><br><span class="line">      n[<span class="variable language_">this</span>[i]] = <span class="literal">true</span>;</span><br><span class="line">      r.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我看不少文章里这样就好了，这就会出现我刚刚说到的问题。在你使用<code>for...in</code>方法遍历数组时就会拿到<code>unique</code>这个 key 值，这个是不符合我们预期的。</p><p>其实出现这样的情况是因为<code>Array.prototype</code>对象的<code>unique</code>属性的描述值<code>enumerable</code>为<code>true</code>，也就是可枚举，在枚举对象属性时会被枚举到（<code>for...in</code>或<code>Object.keys</code>方法）。</p><p>根据<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">MDN Web Docs</a>说明，可枚举属性是指那些内部 <code>可枚举</code> 标志设置为 <code>true</code> 的属性，对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 <code>true</code>，对于通过 <code>Object.defineProperty</code> 等定义的属性，该标识值默认为 <code>false</code>。可枚举的属性可以通过 <code>for...in</code> 循环进行遍历（除非该属性名是一个 <code>Symbol</code>）。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>正确的方法如下，忽略方法内容。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>先添加方法，再通过 <code>Object.defineProperty</code> 设置为不可枚举。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unique</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;unique&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>或者直接通过 <code>Object.defineProperty</code> 方法添加。此时<code>enumerable</code>默认为<code>false</code>，不用特别指定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;unique&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天使用&lt;code&gt;for...in&lt;/code&gt;方法的时候发现枚举到了意料之外的&lt;code&gt;prototype&lt;/code&gt;内的方法，发现是没有正确为数组原型对象添加方法，在此记录。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://jpruby888.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JavaScript" scheme="https://jpruby888.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>并发编程的数据一致性问题</title>
    <link href="https://jpruby888.github.io/post/8b8560e1.html"/>
    <id>https://jpruby888.github.io/post/8b8560e1.html</id>
    <published>2021-05-27T02:32:38.000Z</published>
    <updated>2022-03-17T03:33:34.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU的优化之路"><a href="#CPU的优化之路" class="headerlink" title="CPU的优化之路"></a>CPU的优化之路</h2><blockquote><p>我们需要了解数据一次性问题，首先需要知道CPU为了更好的性能做了哪些优化。</p></blockquote><h3 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h3><p>要了解数据一致性问题产生的原因，我们首先要了解数据的传输路径，我们首先来看下以下这张图。</p><p><img src="https://img-blog.csdnimg.cn/20210526140041842.png" alt="在这里插入图片描述"><br>因为CPU的计算速率远大于IO等数据传输的速率，为了让CPU能持续稳定的007工作，使宝贵的CPU资源得到有效地利用，因此引入了缓存的概念，CPU与内存的交互也由此发生了改变。<br><img src="https://img-blog.csdnimg.cn/2021052614121012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><span id="more"></span><h3 id="MESI协议与可见性"><a href="#MESI协议与可见性" class="headerlink" title="MESI协议与可见性"></a>MESI协议与可见性</h3><p>在多核情况下，存在多个L1和L2缓存，那么如何保证线程之间以及线程与主存数据的一致性呢？<br>因此引入了MESI协议来解决数据的可见性问题。<br><img src="https://img-blog.csdnimg.cn/20210526145738582.png" alt="在这里插入图片描述"></p><blockquote><p>在MESI协议中，每个Cache line有4个状态，可用2个bit表示，它们分别是：<br>M(Modified)：这行数据有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中；<br>E(Exclusive)：这行数据有效，数据和内存中的数据一致，数据只存在于本Cache中；<br>S(Shared)：这行数据有效，数据和内存中的数据一致，数据存在于很多Cache中；<br>I(Invalid)：这行数据无效。</p></blockquote><p>简单来说就是CacheA缓存了主存中的数据，状态为E，CacheB缓存了相同数据，此时CacheA和CacheB状态均修改为S，存在于不同CacheLine中，然后CacheA修改了数据，A变为M，B变为I。这样CPU就可以通过CacheLine的状态，来决定是删除缓存，还是直接读取什么的。</p><h3 id="伪共享与缓存填充"><a href="#伪共享与缓存填充" class="headerlink" title="伪共享与缓存填充"></a>伪共享与缓存填充</h3><p>使用MESI协议对缓存一致性进行优化以后又会出现新的问题，数据的伪共享问题。<br>我们的缓存行是以64字节为一行的，因为系统认为你读取了一个数据后，可能会在不久之后用到与之相邻的一些数据，因此一次读取64字节,由于MESI协议，会造成可能几个CPU同时修改同一块缓存内容，大量造成缓存失效，从而影响性能。<br>这样就出现了一个问题，b 和 a 完全不相干，每次却要因为 a 的更新需要从主内存重新读取，它被缓存未命中给拖慢了。</p><p><img src="https://img-blog.csdnimg.cn/20210526165854414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时，为了优化缓存行的效率，从而引入了缓存填充的概念，使同一个变量独占一个缓存行，而其他位置使用一些不相干的数据进行填充，使其占满64字节，从而提高系统效率。<br><img src="https://img-blog.csdnimg.cn/20210526170603796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>例如一个long类型数据占8字节，为了占满64字节，通常会在周围填充7个无意义的long类型数据使其占满64字节，即缓存填充。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> p1, p2, p3, p4, p5, p6, p7; <span class="comment">// cache line padding</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">long</span> <span class="variable">key</span> <span class="operator">=</span> VALUE;</span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> p8, p9, p10, p11, p12, p13, p14; <span class="comment">// cache line padding</span></span><br></pre></td></tr></table></figure><h3 id="异步处理与指令重排"><a href="#异步处理与指令重排" class="headerlink" title="异步处理与指令重排"></a>异步处理与指令重排</h3><p>由于MESI协议，导致线程间通信的时候会有一段时间同步等待的交互时间，为了进一步压榨CPU剩余价值，会采取一种异步的方式来进行操作。<br><img src="https://img-blog.csdnimg.cn/20210526171719567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由于缓存刷新是异步操作，会导致CPU会在没接收到刷新命令之前进行一些其他命令，这种设计在提高性能的同时会导致另一个问题，指令重排，在单线程的时候，指令重排对程序运行最终结果没有任何影响，但是如果在多线程情况下，则会对结果产生影响。</p><h2 id="解决CPU优化所带来的问题"><a href="#解决CPU优化所带来的问题" class="headerlink" title="解决CPU优化所带来的问题"></a>解决CPU优化所带来的问题</h2><p>由上文可知，CPU的性能优化导致了很多问题，比如缓存一致性问题，可见性问题，指令重排的问题。<br>那么如何有效的解决问题这些问题呢？</p><h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><p>JMM（Java Memory Model的缩写）是一种java内存模型。它类似于缓存一致性协议，用于定义数据读写的规则。<br>JMM定义了线程工作内存和主内存的一种抽象关系，线程中的共享对象存在于主内存中，每个线程都有一块私有的本地内存。<br>解决共享对象可见性问题，即线程中修改数据立马同步到主线程中，其它线程复制时可以得到最新的数据：volilate和synchronize关键词。<br>JMM数据同步模型如下图。<br><img src="https://img-blog.csdnimg.cn/20201016161234764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="volatile关键词"><a href="#volatile关键词" class="headerlink" title="volatile关键词"></a>volatile关键词</h3><p>volatile关键字可以保持可见性，不能保证原子性，由于内存屏障，可以保证避免指令重排的现象产生！</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>两个线程，同时对单一对象进行操作时，均为从对象中复制一份，然后对复制的对象进行操作，然后合并。<br>可见性指的是当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，保证修改的数据为最新的数据。</p><blockquote><p>可见性测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisibilityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201125112333343.png#pic_center" alt="在这里插入图片描述"><br>此时线程陷入死循环，无法感知到main线程已经对数据进行了修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisibilityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201125112534705.png#pic_center" alt="在这里插入图片描述"><br>此时可以感知到main线程的变化，退出循环。</p><h4 id="非原子性"><a href="#非原子性" class="headerlink" title="非原子性"></a>非原子性</h4><blockquote><p>原子性测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020112510260580.png#pic_center" alt="在这里插入图片描述"><br> Num++不是原子操作，因为其可以分为：读取Num的值，将Num的值+1，写入最新的Num的值。<br> 对于Num++;操作，线程1和线程2都执行一次，最后输出Num的值可能是：1或者2。</p><p> 输出结果1的解释：当线程1执行Num++;语句时，先是读入Num的值为0，倘若此时让出CPU执行权，线程获得执行，线程2会重新从主内存中，读入Num的值还是0，然后线程2执行+1操作，最后把Num&#x3D;1刷新到主内存中； 线程2执行完后，线程1已经开始执行，但之前已经读取的Num的值0，所以它还是在0的基础上执行+1操作，也就是还是等于1，并刷新到主内存中。所以最终的结果是1。</p><blockquote><p>解决方案：使用CAS，通过自旋锁解决原子性问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line"><span class="comment">//                num++;</span></span><br><span class="line">                atomicInteger.getAndIncrement();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line"><span class="comment">//                num++;</span></span><br><span class="line">                atomicInteger.getAndIncrement();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        System.out.println(num);</span></span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201125110156343.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>CAS应用场景</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2020</span>);</span><br><span class="line"><span class="comment">//        int andIncrement = atomicInteger.getAndIncrement();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        public final boolean compareAndSet(int expect, int update)</span></span><br><span class="line"><span class="comment">//        如果期望的值达到了，那么就更新，否则，就不更新，CAS 是 CPU 的并发原型</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2021</span>, <span class="number">2020</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">6666</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201125095750332.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>常见示例：自旋锁实现</p></blockquote><p><strong>CAS是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步</strong><br>当第一个线程进入myLock时while条件为false，可以加锁，当第二个线程进入时while条件为true，进入循环，直到myUnLock执行结束，第二个线程跳出while循环，加锁成功。<br>自旋锁是指对一个内容无限循环，当达成条件的时候对其加锁，底层使用的是CAS。</p><p><strong>自定义自旋锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLock</span> &#123;</span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="literal">null</span>,thread))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; myLock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myUnLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        atomicReference.compareAndSet(thread,<span class="literal">null</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; myUnLock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;自旋锁测试&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">SpinLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpinLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201124093623770.png#pic_center" alt="在这里插入图片描述"><br>线程T1占用时，线程T2会一直在循环中无法出来。只有当线程T1解锁，线程T2才会跳出循环，最终才会触发T2解锁。</p><blockquote><p>常用示例：利用CAS解决ABA问题</p></blockquote><p>CAS是java利用unsafe类通过对计算机底层的调用来进行数据的操作。底层实现为自旋锁。<br>CAS对数据修改时，可能会出现对数据修改两次，修改后值与之前相同的情况，因此会认定为未修改，此类问题被称为ABA问题，为了解决此类问题可以使用乐观锁，对每次记录新增一个记录，每次修改记录+1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ABADemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();   <span class="comment">//获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;a1 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">2</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;a2 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">2</span>, <span class="number">1</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;a3 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();   <span class="comment">//获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;b1 =&gt;&quot;</span>+stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">6</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;b2 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果分析</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020112020130879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="避免指令重排"><a href="#避免指令重排" class="headerlink" title="避免指令重排"></a>避免指令重排</h4><blockquote><p>指令重排测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderSort</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> a, b, x, y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Set&lt;String&gt; stringSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">            b = <span class="number">0</span>;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    x = <span class="number">1</span>;</span><br><span class="line">                    a = y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    y = <span class="number">1</span>;</span><br><span class="line">                    b = x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">            stringSet.add(<span class="string">&quot;a:&quot;</span> + a + <span class="string">&quot;,b:&quot;</span> + b);</span><br><span class="line">            num++;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+num+<span class="string">&quot;次：&quot;</span>+stringSet);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+num+<span class="string">&quot;次结果为：a = 0，b = 0&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210527140642934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>指令重排指的是，一段代码写出来的顺序可能为1&#x3D;&gt;2&#x3D;&gt;3&#x3D;&gt;4&#x3D;&gt;5,但是经过编译器以后的顺序并不一定严格按照这种顺序，可能在不影响结果的情况下改变为1&#x3D;&gt;3&#x3D;&gt;2&#x3D;&gt;4&#x3D;&gt;5。这种情况在单线程的情况下不会有任何问题，但是在多线程的情况下则会出现问题。而volatile关键词可以增加一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障。</p><blockquote><p>常用示例：DCL懒汉式(双重检测锁模式)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双重检测锁模式的懒汉式单例 DCL懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();    <span class="comment">//不是一个原子性操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时当第一次创建对象时会进行加锁，但是由于指令重排可能会造成以下情况，所以需要对对象加上volatile关键词防止指令重排</p><blockquote><p>&#x2F;**<br>                  * 1、分配内存空间<br>                  * 2、执行构造方法，初始化对象<br>                  * 3、把这个对象指向这个空间<br>                  *<br>                  * 此时程序执行顺序可能为<br>                  * 1-&gt;2-&gt;3<br>                  * 1-&gt;3-&gt;2<br>                  * 若为1-&gt;3-&gt;2则可能发生以下情境<br>                  *<br>                  * A线程执行完1-&gt;3时，B线程执行，此时对象有指向的内存空间，但是并未初始化<br>                  * 当B进行判断时 lazyMan &#x3D;&#x3D; null 为 false，则会直接返回未初始化的对象。<br>                  * 因此在声明对象时必须加上 volatile 关键词来防止指令重排<br>                  *&#x2F;</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CPU的优化之路&quot;&gt;&lt;a href=&quot;#CPU的优化之路&quot; class=&quot;headerlink&quot; title=&quot;CPU的优化之路&quot;&gt;&lt;/a&gt;CPU的优化之路&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们需要了解数据一次性问题，首先需要知道CPU为了更好的性能做了哪些优化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;缓存优化&quot;&gt;&lt;a href=&quot;#缓存优化&quot; class=&quot;headerlink&quot; title=&quot;缓存优化&quot;&gt;&lt;/a&gt;缓存优化&lt;/h3&gt;&lt;p&gt;要了解数据一致性问题产生的原因，我们首先要了解数据的传输路径，我们首先来看下以下这张图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210526140041842.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;因为CPU的计算速率远大于IO等数据传输的速率，为了让CPU能持续稳定的007工作，使宝贵的CPU资源得到有效地利用，因此引入了缓存的概念，CPU与内存的交互也由此发生了改变。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2021052614121012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="并发" scheme="https://jpruby888.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>带你轻松搞定UML类图</title>
    <link href="https://jpruby888.github.io/post/3ebcfc76.html"/>
    <id>https://jpruby888.github.io/post/3ebcfc76.html</id>
    <published>2021-05-25T02:07:13.000Z</published>
    <updated>2022-03-17T03:33:34.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是UML类图"><a href="#什么是UML类图" class="headerlink" title="什么是UML类图"></a>什么是UML类图</h2><p>UML类图即是一种表现类与类之间关系的一种示意图，由于java是一种面向对象的语言，且万物皆对象，因此对象与对象之间，类与类之间，总是存在的某种不清不楚，不明不白的联系，类图就是一种可以让我们一眼看清这种复杂联系的简单示意图(其实一点都不简单~~~),然而面对复杂的各种符号，可能很多人摸不着头脑，比如下面一张图，很生动的表示了一些类之间的关系，可能第一次看会有点一脸懵逼，似懂非懂的感觉，然而看完本篇的讲解，再回过头来看这张图，肯定会有一目了然的感觉。<br><img src="https://img-blog.csdnimg.cn/20210515175207709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="单个类的符号含义"><a href="#单个类的符号含义" class="headerlink" title="单个类的符号含义"></a>单个类的符号含义</h2><blockquote><p>-表示private<br>#表示protected<br>~表示default,也就是包权限<br>_下划线表示static<br>斜体表示抽象<br>如果是接口则使用&lt;&lt; interface &gt;&gt;来标注</p></blockquote><span id="more"></span><h2 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h2><p><img src="https://img-blog.csdnimg.cn/20210515180026755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一般的关系由被拥有者指向拥有者。</p><hr><ul><li>继承与实现<br>这一组指向由三角箭头表示，继承一般子类可以拥有父类方法，相对属于比较实的关系，而实现本身是无法获得接口方法的，属于比较虚的关系，因此继承是实线，实现是虚线。</li></ul><hr><ul><li>聚合和组合<br>这一组是由菱形箭头表示，但组合是必须拥有相同的生命周期，类似于身体不同器官，一荣俱荣，一损俱损，不可单独存在，属于比较实的关系，而聚合则没有相同工作周期，比如公交车司机和工作服，属于比较虚的关系，因此组合是实心，聚合是空心。</li></ul><hr><ul><li>关联和依赖<br>这一对是由箭头表示，关联更像是一种拥有，比如一个类里面拥有的属性包含另一个类，属于比较实的关系，而依赖更像临时借用，比如set进去一个属性，属于比较虚的关系，因此关联是实线，依赖是虚线。</li></ul><h2 id="UML类图总结"><a href="#UML类图总结" class="headerlink" title="UML类图总结"></a>UML类图总结</h2><p>UML类图就是通过图形展示类之间的关系，了解了类的符号含义和类之间的符号含义之后，再来看开头的类图是不是就一目了然了呢？<br>可以类比下面的图片进行进一步理解。<br><img src="https://img-blog.csdnimg.cn/20210515184213926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是UML类图&quot;&gt;&lt;a href=&quot;#什么是UML类图&quot; class=&quot;headerlink&quot; title=&quot;什么是UML类图&quot;&gt;&lt;/a&gt;什么是UML类图&lt;/h2&gt;&lt;p&gt;UML类图即是一种表现类与类之间关系的一种示意图，由于java是一种面向对象的语言，且万物皆对象，因此对象与对象之间，类与类之间，总是存在的某种不清不楚，不明不白的联系，类图就是一种可以让我们一眼看清这种复杂联系的简单示意图(其实一点都不简单~~~),然而面对复杂的各种符号，可能很多人摸不着头脑，比如下面一张图，很生动的表示了一些类之间的关系，可能第一次看会有点一脸懵逼，似懂非懂的感觉，然而看完本篇的讲解，再回过头来看这张图，肯定会有一目了然的感觉。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210515175207709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;单个类的符号含义&quot;&gt;&lt;a href=&quot;#单个类的符号含义&quot; class=&quot;headerlink&quot; title=&quot;单个类的符号含义&quot;&gt;&lt;/a&gt;单个类的符号含义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;-表示private&lt;br&gt;#表示protected&lt;br&gt;~表示default,也就是包权限&lt;br&gt;_下划线表示static&lt;br&gt;斜体表示抽象&lt;br&gt;如果是接口则使用&amp;lt;&amp;lt; interface &amp;gt;&amp;gt;来标注&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="杂谈" scheme="https://jpruby888.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>解决阿里云服务器无法ping通的问题</title>
    <link href="https://jpruby888.github.io/post/6ebdde31.html"/>
    <id>https://jpruby888.github.io/post/6ebdde31.html</id>
    <published>2021-05-25T02:04:32.000Z</published>
    <updated>2022-03-17T03:33:34.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加安全组策略"><a href="#添加安全组策略" class="headerlink" title="添加安全组策略"></a>添加安全组策略</h2><p>若想通过本地ping通阿里云服务器，则需要添加如下安全组策略。</p><ul><li><p>入方向添加ICMP协议<br><img src="https://img-blog.csdnimg.cn/20210508143535157.png" alt="在这里插入图片描述"></p></li><li><p>出方向添加ICMP协议<br><img src="https://img-blog.csdnimg.cn/20210508143614519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><span id="more"></span><h2 id="设置客户端对本服务器ping"><a href="#设置客户端对本服务器ping" class="headerlink" title="设置客户端对本服务器ping"></a>设置客户端对本服务器ping</h2><blockquote><p>设置允许客户端对本服务器ping</p></blockquote><p>将icmp_echo_ignore_all的1改成0，即可本地ping或客户端对服务器的ping</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@jiangxj /]# cat /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br><span class="line">1</span><br><span class="line">[root@jiangxj /]# echo 0 &gt;/proc/sys/net/ipv4/</span><br><span class="line">[root@jiangxj /]#  cat /proc/sys/net/ipv4/icmp_echo_ignore_all   </span><br><span class="line">0</span><br><span class="line">[root@jiangxj /]# ping 127.0.0.1</span><br><span class="line">PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.049 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.050 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.051 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.049 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.049 ms</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;添加安全组策略&quot;&gt;&lt;a href=&quot;#添加安全组策略&quot; class=&quot;headerlink&quot; title=&quot;添加安全组策略&quot;&gt;&lt;/a&gt;添加安全组策略&lt;/h2&gt;&lt;p&gt;若想通过本地ping通阿里云服务器，则需要添加如下安全组策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;入方向添加ICMP协议&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210508143535157.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出方向添加ICMP协议&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210508143614519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://jpruby888.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>奥利奥生成器与Canvas绘制图片不显示问题</title>
    <link href="https://jpruby888.github.io/post/4928b204.html"/>
    <id>https://jpruby888.github.io/post/4928b204.html</id>
    <published>2021-05-17T06:28:42.000Z</published>
    <updated>2021-05-17T06:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近尝试在 Vue 中实现奥利奥生成器的效果，遇到使用 Canvas 的 drawImage 方法绘制图片不显示的问题，在此记录下解决过程。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎体验</p><p><a href="https://tools.iszy.xyz/others/oreooo">奥利奥生成器</a></p><p><img src="https://img.iszy.xyz/20210523144733.png"><img src="https://img.iszy.xyz/20210523144706.png"></p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>奥利奥的原理，就是根据不同的字符串组合，对应不同的图片，然后按顺序将图片绘制到 canvas 上，最终生成图片。</p><p>canvas 的 drawImage 有几种用法。</p><ul><li>在画布上定位图像: <code>ctx.drawImage(img,x,y);</code></li><li>在画布上定位图像，并规定图像的宽度和高度: <code>ctx.drawImage(img,x,y,width,height);</code></li><li>剪切图像，并在画布上定位被剪切的部分: <code>ctx.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</code></li></ul><p>我们这里只需要使用第二种方法，控制下图片的大小即可。</p><p>参数值</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>img</td><td>规定要使用的图像、画布或视频。</td></tr><tr><td>sx 可选。</td><td>开始剪切的 x 坐标位置。</td></tr><tr><td>sy 可选。</td><td>开始剪切的 y 坐标位置。</td></tr><tr><td>swidth 可选。</td><td>被剪切图像的宽度。</td></tr><tr><td>sheight 可选。</td><td>被剪切图像的高度。</td></tr><tr><td>x</td><td>在画布上放置图像的 x 坐标位置。</td></tr><tr><td>y</td><td>在画布上放置图像的 y 坐标位置。</td></tr><tr><td>width 可选。</td><td>要使用的图像的宽度（伸展或缩小图像）。</td></tr><tr><td>height 可选。</td><td>要使用的图像的高度（伸展或缩小图像）。</td></tr></tbody></table><p>一般情况下，都按照下面的示例来使用。把绘制写到 img 的 onload 事件里，是因为如果图片还没有加载完成，drawImage 是不生效的，这样能够保证图片已经加载完成。不过因为我们需要多次调用同一张图片，绘制多次，这样的方法就不是很方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;scream&quot;</span>);</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(img, <span class="number">10</span>, <span class="number">10</span>, <span class="number">150</span>, <span class="number">180</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>于是尝试将加载的图片缓存一下，方便调用，使用的是下面的方法。sources 中是图片名称和图片地址的键值对，使用 Image 对象设置 src 的方式加载图片；在 onload 事件中，记录加载完成的次数；当全部加载完成时，将存储了这些 Image 对象的 cacheImages 对象存储下来以便调用。</p><p>在原版 oreooo 的页面中，我可以看到这个方法是有效的。但是我在 Vue 3 + Vite 2 的环境下，虽然 cacheImages 成功存储了，也能在 Networks 里面看到网络请求，但是 canvas 绘制出来的图形一直是空白的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">loadImages</span>: <span class="keyword">function</span> (<span class="params">sources, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cacheImages = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> attCount = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(sources).<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (imgItem <span class="keyword">in</span> sources) &#123;</span><br><span class="line">        cacheImages[imgItem] = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        cacheImages[imgItem].<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (index == attCount) &#123;</span><br><span class="line">                images = cacheImages;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cacheImages[imgItem].<span class="property">src</span> = sources[imgItem];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或许是需要实际存在的 img 标签才有用，我如果页面上实际就有这个图片，我测试了下，确实就能获取到图片绘制出来了。于是我换了种写法，通过在页面实际加载图片，然后在绘制时获取图片 DOM 的 image，只要图片已经加载完成了，绘制时就能正常出图了。下面是在 Vue 里的一个大概示例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;imgContainer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;assets.O&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;O&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;assets.R&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;R&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;assets.Ob&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;Ob&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;output-image&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">&quot;oreo_canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">      您的浏览器不支持 HTML5 canvas 标签。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> O <span class="keyword">from</span> <span class="string">&quot;./assets/image/O.png&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> R <span class="keyword">from</span> <span class="string">&quot;./assets/image/R.png&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Ob</span> <span class="keyword">from</span> <span class="string">&quot;./assets/image/Ob.png&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">assets</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        O,</span></span><br><span class="line"><span class="language-javascript">        R,</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Ob</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;),</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">generateImage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> canvas = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">oreo_canvas</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">O</span>.<span class="property">image</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">240</span>, <span class="number">160</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.imgContainer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Canvas 的 drawImage 在图片还未加载完成时是不会生效的，由于这个特性，需要保证在调用 drawImage 时图片已经加载完成，否则就会有不显示的现象。解决的方案有下面两种。</p><ul><li>将 drawImage 事件写在图片的 onload 事件中，这样可以保证图片已经加载。</li><li>可以在页面上写上 img 标签实际加载图片，然后 drawImage 时调用 img 的 DOM 下的 image 属性进行绘制。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近尝试在 Vue 中实现奥利奥生成器的效果，遇到使用 Canvas 的 drawImage 方法绘制图片不显示的问题，在此记录下解决过程。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://jpruby888.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JavaScript" scheme="https://jpruby888.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://jpruby888.github.io/tags/Vue/"/>
    
    <category term="Canvas" scheme="https://jpruby888.github.io/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Vuex数据持久化</title>
    <link href="https://jpruby888.github.io/post/53638891.html"/>
    <id>https://jpruby888.github.io/post/53638891.html</id>
    <published>2021-05-13T12:51:26.000Z</published>
    <updated>2021-05-13T12:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，Vuex 的数据是存储在内存中的，刷新一下网页这些数据就会丢失。而有些数据我们希望刷新后仍然能够留存，这就需要把数据存储下来。这里就记录一下，使用 localStorage 来持久化 Vuex 中的数据。</p><span id="more"></span><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>因为 state 中的数据理论上只能通过 mutation 来进行更新，所以可以监听 mutation 事件，在每次事件执行后，将此时整个 state 的数据转为字符串后存储进 localStorage。</li><li>在页面初始化 state 时，读取 localStorage 值，重新转为 JSON 后，合并进当前 state。</li><li>这种方法只是一个简单的实现，只适用于简单对象，对复杂对象来说，重新转为 JSON 可能会失去对应的事件和方法，后面可以考虑以其他方式存储。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (options = &#123;&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> storage = options.<span class="property">storage</span> || (<span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">localStorage</span>);</span><br><span class="line">  <span class="keyword">const</span> key = options.<span class="property">key</span> || <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取state的值</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getState</span> = (<span class="params">key, storage</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> value = storage.<span class="title function_">getItem</span>(key);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value !== <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(value) : <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置state的值</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setState</span> = (<span class="params">key, state, storage</span>) =&gt;</span><br><span class="line">    storage.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">store</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化时获取数据，如果有的话，把原来的vuex的state替换掉</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">Object</span>.<span class="title function_">assign</span>(store.<span class="property">state</span>, <span class="title function_">getState</span>(key, storage));</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      store.<span class="title function_">replaceState</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅 store 的 mutation。handler 会在每个 mutation 完成后调用，接收 mutation 和经过 mutation 后的状态作为参数</span></span><br><span class="line">    store.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setState</span>(key, state, storage);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>调用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VuexPersist</span> <span class="keyword">from</span> <span class="string">&quot;@/plugins/VuexPersist&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title class_">VuexPersist</span>()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;众所周知，Vuex 的数据是存储在内存中的，刷新一下网页这些数据就会丢失。而有些数据我们希望刷新后仍然能够留存，这就需要把数据存储下来。这里就记录一下，使用 localStorage 来持久化 Vuex 中的数据。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://jpruby888.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JavaScript" scheme="https://jpruby888.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://jpruby888.github.io/tags/Vue/"/>
    
    <category term="Vuex" scheme="https://jpruby888.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>在Vue中使用CodeMirror实现编写JSON编辑器</title>
    <link href="https://jpruby888.github.io/post/636e2d18.html"/>
    <id>https://jpruby888.github.io/post/636e2d18.html</id>
    <published>2021-05-11T12:51:26.000Z</published>
    <updated>2021-05-11T12:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近写了个 JSON 编辑器给自己用，用 CodeMirror 来实现代码编辑器的功能，这边来记录下。</p><span id="more"></span><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save codemirror</span><br><span class="line">npm install --save jsonlint-mod</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add codemirror</span><br><span class="line">yarn add jsonlint-mod</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这边用的环境时 <code>Vue 3 + Vite 2</code></p><p><strong>要点:</strong></p><ul><li>不要将准备被渲染的 textarea 标签放在 template 顶层，在 vue 组件 unbind 时，由 CodeMirror 添加的 DOM 无法自动被移除。</li><li>根据需要引入对应的样式和 js</li><li>JSON 编辑器的 lint 需要引入外部插件<code>jsonlint-mod</code>，不要直接使用<code>jsonlint</code>，不支持通过 import 导入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;codePanel&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ref</span>=<span class="string">&quot;codemirror&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入CodeMirror和基础样式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">CodeMirror</span> <span class="keyword">from</span> <span class="string">&quot;codemirror&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/lib/codemirror.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// JSON代码高亮需要由JavaScript插件支持</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/mode/javascript/javascript.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 选择IDEA主题样式，还有其他很多主题可选</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/theme/idea.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持使用Sublime快捷键</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/keymap/sublime.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 搜索功能的依赖</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/dialog/dialog.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/dialog/dialog.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持搜索功能</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/search/search&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/search/searchcursor.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持各种代码折叠</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/foldgutter.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/foldcode.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/foldgutter.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/brace-fold.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/comment-fold.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持代码区域全屏功能</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/display/fullscreen.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/display/fullscreen.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持括号自动匹配</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/edit/matchbrackets.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/edit/closebrackets.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持代码自动补全</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/hint/show-hint.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/hint/show-hint.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/hint/anyword-hint.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 行注释</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/comment/comment.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// JSON错误检查</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/lint/lint.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/lint/lint.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 需要依赖全局的jsonlint，不是很优雅</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/lint/json-lint.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入jsonlint</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> jsonlint <span class="keyword">from</span> <span class="string">&quot;jsonlint-mod&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">jsonlint</span> = jsonlint;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> codemirror;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;JSON编辑器&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">code</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;),</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 防止转为监听对象，vue3中如果CodeMirror对象被转为监听对象，会无法正常使用</span></span></span><br><span class="line"><span class="language-javascript">      codemirror = <span class="title function_">markRaw</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用ref获取需要渲染的textarea的DOM</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">CodeMirror</span>.<span class="title function_">fromTextArea</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">codemirror</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// JS高亮显示</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">mode</span>: <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">indentUnit</span>: <span class="number">2</span>, <span class="comment">// 缩进单位，默认2</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">smartIndent</span>: <span class="literal">true</span>, <span class="comment">// 是否智能缩进</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 显示行号</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">styleActiveLine</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lineNumbers</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 设置主题</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">theme</span>: <span class="string">&quot;idea&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 绑定sublime快捷键</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">keyMap</span>: <span class="string">&quot;sublime&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 开启代码折叠</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lineWrapping</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">foldGutter</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">gutters</span>: [</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;CodeMirror-linenumbers&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;CodeMirror-foldgutter&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;CodeMirror-lint-markers&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// CodeMirror-lint-markers是实现语法报错功能</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lint</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 全屏模式</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fullScreen</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 括号匹配</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">matchBrackets</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">autoCloseBrackets</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 额外快捷键</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">extraKeys</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">F11</span>: <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              cm.<span class="title function_">setOption</span>(<span class="string">&quot;fullScreen&quot;</span>, !cm.<span class="title function_">getOption</span>(<span class="string">&quot;fullScreen&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Esc</span>: <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (cm.<span class="title function_">getOption</span>(<span class="string">&quot;fullScreen&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                cm.<span class="title function_">setOption</span>(<span class="string">&quot;fullScreen&quot;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将编辑器中的值存储下来</span></span></span><br><span class="line"><span class="language-javascript">      codemirror.<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>, <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">code</span> = cm.<span class="title function_">getValue</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">destroy</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取代表编辑器的DOM</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> element = codemirror.<span class="property">doc</span>.<span class="property">cm</span>.<span class="title function_">getWrapperElement</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 删除编辑器实例</span></span></span><br><span class="line"><span class="language-javascript">        element &amp;&amp; element.<span class="property">remove</span> &amp;&amp; element.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近写了个 JSON 编辑器给自己用，用 CodeMirror 来实现代码编辑器的功能，这边来记录下。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://jpruby888.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JavaScript" scheme="https://jpruby888.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://jpruby888.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>哔哩哔哩AV号、BV号转换</title>
    <link href="https://jpruby888.github.io/post/49fa7865.html"/>
    <id>https://jpruby888.github.io/post/49fa7865.html</id>
    <published>2021-05-10T12:32:24.000Z</published>
    <updated>2021-05-10T12:32:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>哔哩哔哩把以前 <code>av</code> + 数字的稿件地址格式更换为 <code>BV</code> + 字母数字的格式，类似 Youtube 的稿件编码方式已经有一段时间了。最近闲来无聊，搜了下，发现大佬们已经破解了转换的方法，并给出了 Python 测试代码。正好最近在写小工具合集，写着玩，就用 js 写了一个，留作备用。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://tools.iszy.xyz/anime/bilibiliBv2av">哔哩哔哩 AV、BV 号转换</a></p><p>网上应该已经有了类似工具，不过还是喜欢用自己写的，有问题也好改。有需要的可以用一下。</p><h2 id="原文-来自知乎mcfx-的答案"><a href="#原文-来自知乎mcfx-的答案" class="headerlink" title="原文(来自知乎mcfx 的答案"></a>原文(来自知乎<a href="https://www.zhihu.com/question/381784377/answer/1099438784">mcfx 的答案</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">table=<span class="string">&#x27;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&#x27;</span></span><br><span class="line">tr=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>):</span><br><span class="line">    tr[table[i]]=i</span><br><span class="line">s=[<span class="number">11</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">xor=<span class="number">177451812</span></span><br><span class="line">add=<span class="number">8728348608</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">x</span>):</span><br><span class="line">    r=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        r+=tr[x[s[i]]]*<span class="number">58</span>**i</span><br><span class="line">    <span class="keyword">return</span> (r-add)^xor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">x</span>):</span><br><span class="line">    x=(x^xor)+add</span><br><span class="line">    r=<span class="built_in">list</span>(<span class="string">&#x27;BV1  4 1 7  &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        r[s[i]]=table[x//<span class="number">58</span>**i%<span class="number">58</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(r)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dec(<span class="string">&#x27;BV17x411w7KC&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dec(<span class="string">&#x27;BV1Q541167Qg&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dec(<span class="string">&#x27;BV1mK4y1C7Bz&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(enc(<span class="number">170001</span>))</span><br><span class="line"><span class="built_in">print</span>(enc(<span class="number">455017605</span>))</span><br><span class="line"><span class="built_in">print</span>(enc(<span class="number">882584971</span>))</span><br></pre></td></tr></table></figure><p>互相转换脚本，如果算法没猜错，可以保证在 av 号 $&lt; 2^{27}$ 时正确，同时应该在 $&lt; 2^{30}$ 时也是正确的。此代码以 WTFPL 开源。</p><p>UPD：之前的代码中，所有数位都被用到是乱凑的，实际上并不需要，目前只要低 6 位就足够了。（更大的 av 号需要 64 位整数存储，但是 b 站现在使用的应该还是 32 位整数，所以应该还要很久）</p><p>发现的方法：</p><p>首先从各种渠道的信息来看，应该是 base58 编码的。设 x 是一个钦定的 av 号，查询 $58k+x,58^{2}k+x,58^{3}k+x,58^{4}k+x(k \in Z)$ 这些 av 号对应的 bv 号，发现 bv 号的第 12、11、4、9、5 位分别会变化。所以猜测这些是 58 进制下的相应位。</p><p>但是直接 base58 是不行的，所以猜测异或了一个大数，并且 base58 的字符表可能打乱了。经过实验，bv 号最低位相同的数，av 号的奇偶性相同，这一定程度上印证了之前的猜想。</p><p>接下来找了一些 av 号 $x$，满足 $x$ 和 $x+1$ 对应 bv 号的第 11 位不同。设异或的数为 $X$，那么 $\left [\frac{X\oplus x}{58} \right]\neq \left [\frac{X\oplus (x+1)}{58} \right]$（ $\oplus$ 表示异或）。</p><p>由于 av 号（除了最新的少量视频）最多只有 27 bits，所以可以设 $X&#x3D;2^{27}a+b(0\leq b\leq 2^{27})$ 。然后可以发现 $X$ 只和 $2^{27}a\ mod\ 58$ 和 $b$ 有关，那么可以枚举这两个值（一共 $2^{27} \cdot 58&#x3D;7784628224$ 种情况）然后使用上面的式子检查，就能得到若干可能的 $X$ 只和 $2^{27}a\ mod\ 58$ 和 $b$。</p><p>这里我得到的可能值如下：（左边是 $2^{27}a\ mod\ 58$，右边是 $b$）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">22 90983642</span><br><span class="line">22 90983643</span><br><span class="line">50 43234084</span><br><span class="line">50 43234085</span><br></pre></td></tr></table></figure><p>有奇有偶是因为异或 $1$ 之后也能找到轮换表。而 $90983642+43234085&#x3D;2^{27}-1$ 则使得模 $58$ 的余数刚好变成 $2^{27}-1$ 减它。</p><p>我取了 <code>b=43234084</code>，然后处理最低位，可以得到一个字符表，即 <code>fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF</code>。</p><p>对于更高位，实际上还需要知道 $2^{27}a\ mod\ 58^{2},2^{27}a\ mod\ 58^{3},…$，这些值也可以 枚举 58 次得到，最后我得到的值是 $2^{27}a\ mod\ 58^{4}&#x3D;1749968$ 。</p><p>这时我发现，每一位的字符表是相同的（实际上只对 <code>b=43234084</code> 是这样的），然后再微调一下参数（上面代码中的两个 magic number 就相当于这里的 $a,b$），最后处理了一下 $\geq 2^{27}$ 的情况就得到了这份代码。</p><h2 id="Vue-JS-实现"><a href="#Vue-JS-实现" class="headerlink" title="Vue + JS 实现"></a>Vue + JS 实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;bilibiliBv2av&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">aid</span>: <span class="string">&quot;19390801&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">bvid</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">table</span>: <span class="string">&quot;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tr</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">s</span>: [<span class="number">11</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">xor</span>: <span class="number">177451812</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">add</span>: <span class="number">8728348608</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;),</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">58</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">tr</span>[<span class="variable language_">this</span>.<span class="property">table</span>[i]] = i;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">enc</span>(<span class="variable language_">this</span>.<span class="property">aid</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">dec</span>(<span class="params">x</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> r = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">          r += <span class="variable language_">this</span>.<span class="property">tr</span>[x[<span class="variable language_">this</span>.<span class="property">s</span>[i]]] * <span class="number">58</span> ** i;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">aid</span> = (r - <span class="variable language_">this</span>.<span class="property">add</span>) ^ <span class="variable language_">this</span>.<span class="property">xor</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">aid</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">enc</span>(<span class="params">x</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        x = <span class="built_in">parseInt</span>(x);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(x)) &#123;</span></span><br><span class="line"><span class="language-javascript">          x = (x ^ <span class="variable language_">this</span>.<span class="property">xor</span>) + <span class="variable language_">this</span>.<span class="property">add</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> r = [</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;B&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;V&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;4&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;7&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          ];</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            r[<span class="variable language_">this</span>.<span class="property">s</span>[i]] = <span class="variable language_">this</span>.<span class="property">table</span>[<span class="title class_">Math</span>.<span class="title function_">floor</span>(x / <span class="number">58</span> ** i) % <span class="number">58</span>];</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">bvid</span> = r.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">bvid</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">bvid</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;哔哩哔哩把以前 &lt;code&gt;av&lt;/code&gt; + 数字的稿件地址格式更换为 &lt;code&gt;BV&lt;/code&gt; + 字母数字的格式，类似 Youtube 的稿件编码方式已经有一段时间了。最近闲来无聊，搜了下，发现大佬们已经破解了转换的方法，并给出了 Python 测试代码。正好最近在写小工具合集，写着玩，就用 js 写了一个，留作备用。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://jpruby888.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JavaScript" scheme="https://jpruby888.github.io/tags/JavaScript/"/>
    
    <category term="Python" scheme="https://jpruby888.github.io/tags/Python/"/>
    
    <category term="Vue" scheme="https://jpruby888.github.io/tags/Vue/"/>
    
    <category term="Bilibili" scheme="https://jpruby888.github.io/tags/Bilibili/"/>
    
    <category term="哔哩哔哩" scheme="https://jpruby888.github.io/tags/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9/"/>
    
  </entry>
  
</feed>
