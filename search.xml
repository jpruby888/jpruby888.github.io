<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前后端分离项目笔记</title>
    <url>/post/3eb4351b.html</url>
    <content><![CDATA[<h2 id="前后端分离项目"><a href="#前后端分离项目" class="headerlink" title="前后端分离项目"></a>前后端分离项目</h2><p>文章总体分为2大部分，Java后端接口和vue前端页面，比较长，因为不想分开发布，真正想你4小时学会，哈哈。</p>
<p>先看效果：</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/6e25b3a7df92467ea08888f72d28a205.png" alt="图片"></p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/354dd5cafdb94e94a9f3553eef95e0b2.png" alt="图片"></p>
<p>不多说，开始敲代码。</p>
<h2 id="Java后端接口开发"><a href="#Java后端接口开发" class="headerlink" title="Java后端接口开发"></a>Java后端接口开发</h2><h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>从零开始搭建一个项目骨架，最好选择合适，熟悉的技术，并且在未来易拓展，适合微服务化体系等。所以一般以Springboot作为我们的框架基础，这是离不开的了。</p>
<p>然后数据层，我们常用的是Mybatis，易上手，方便维护。但是单表操作比较困难，特别是添加字段或减少字段的时候，比较繁琐，所以这里我推荐使用Mybatis Plus（<a href="https://mp.baomidou.com/%EF%BC%89%EF%BC%8C%E4%B8%BA%E7%AE%80%E5%8C%96%E5%BC%80%E5%8F%91%E8%80%8C%E7%94%9F%EF%BC%8C%E5%8F%AA%E9%9C%80%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%8D%B3%E5%8F%AF%E5%BF%AB%E9%80%9F%E8%BF%9B%E8%A1%8C">https://mp.baomidou.com/），为简化开发而生，只需简单配置，即可快速进行</a> CRUD 操作，从而节省大量时间。</p>
<p>作为一个项目骨架，权限也是我们不能忽略的，Shiro配置简单，使用也简单，所以使用Shiro作为我们的的权限。</p>
<p>考虑到项目可能需要部署多台，这时候我们的会话等信息需要共享，Redis是现在主流的缓存中间件，也适合我们的项目。</p>
<p>然后因为前后端分离，所以我们使用jwt作为我们用户身份凭证。</p>
<p>ok，我们现在就开始搭建我们的项目脚手架！</p>
<p>技术栈：</p>
<ul>
<li>SpringBoot</li>
<li>mybatis plus</li>
<li>shiro</li>
<li>lombok</li>
<li>redis</li>
<li>hibernate validatior</li>
<li>jwt</li>
</ul>
<p>导图：<a href="https://www.markerhub.com/map/131">https://www.markerhub.com/map/131</a></p>
<h3 id="2、新建Springboot项目"><a href="#2、新建Springboot项目" class="headerlink" title="2、新建Springboot项目"></a>2、新建Springboot项目</h3><p>这里，我们使用IDEA来开发我们项目，新建步骤比较简单，我们就不截图了。</p>
<p>开发工具与环境：</p>
<ul>
<li>idea</li>
<li>mysql</li>
<li>jdk 8</li>
<li>maven3.3.9</li>
</ul>
<p>新建好的项目结构如下，SpringBoot版本使用的目前最新的2.2.6.RELEASE版本</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/be1226b48ef24b2bbe00d75996bd7f89.png" alt="图片"></p>
<p>pom的jar包导入如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>devtools：项目的热加载重启插件</p>
</li>
<li><p>lombok：简化代码的工具</p>
<h3 id="3、整合mybatis-plus"><a href="#3、整合mybatis-plus" class="headerlink" title="3、整合mybatis plus"></a>3、整合mybatis plus</h3></li>
</ul>
<p>接下来，我们来整合mybatis plus，让项目能完成基本的增删改查操作。步骤很简单：可以去官网看看：<a href="https://mp.baomidou.com/guide/install.html">https://mp.baomidou.com/guide/install.html</a></p>
<p><strong>第一步：导入jar包</strong></p>
<p>pom中导入mybatis plus的jar包，因为后面会涉及到代码生成，所以我们还需要导入页面模板引擎，这里我们用的是freemarker。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--mp--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--mp代码生成器--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p><strong>第二步：然后去写配置文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># DataSource Config</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/vueblog?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">    username: root</span><br><span class="line">    password: admin</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath*:/mapper/**Mapper.xml</span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br></pre></td></tr></table></figure>

<p>上面除了配置数据库的信息，还配置了myabtis plus的mapper的xml文件的扫描路径，这一步不要忘记了。<br><strong>第三步：开启mapper接口扫描，添加分页插件</strong></p>
<p>新建一个包：通过<a href="https://github.com/mapperScan">@mapperScan</a>注解指定要变成实现类的接口所在的包，然后包下面的所有接口在编译之后都会生成相应的实现类。PaginationInterceptor是一个分页插件。</p>
<ul>
<li>com.markerhub.config.MybatisPlusConfig</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@MapperScan(&quot;com.markerhub.mapper&quot;)</span><br><span class="line">public class MybatisPlusConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public PaginationInterceptor paginationInterceptor() &#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();</span><br><span class="line">        return paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第四步：代码生成</strong></p>
<p>如果你没再用其他插件，那么现在就已经可以使用mybatis plus了，官方给我们提供了一个代码生成器，然后我写上自己的参数之后，就可以直接根据数据库表信息生成entity、service、mapper等接口和实现类。</p>
<ul>
<li>com.markerhub.CodeGenerator</li>
</ul>
<p>因为代码比较长，就不贴出来了，在代码仓库上看哈！</p>
<p>首先我在数据库中新建了一个user表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `m_user` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `created` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `last_login` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `UK_USERNAME` (`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `m_blog` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext,</span><br><span class="line">  `created` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `status` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `vueblog`.`m_user` (`id`, `username`, `avatar`, `email`, `password`, `status`, `created`, `last_login`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;markerhub&#x27;</span>, <span class="string">&#x27;https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/5a9f48118166308daba8b6da7e466aab.jpg&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;96e79218965eb72c92a549dd5a330112&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;2020-04-20 10:44:01&#x27;</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>

<p>运行CodeGenerator的main方法，输入表名：m_user，生成结果如下：</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/47682f628eae4c3588f6729e1df322af.png" alt="图片"></p>
<p>得到：</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/f5e4daec518044619c0d374daa844f40.png" alt="图片"></p>
<p>简洁！方便！经过上面的步骤，基本上我们已经把mybatis plus框架集成到项目中了。</p>
<p>ps：额，注意一下m_blog表的代码也生成一下哈。</p>
<p>在UserController中写个测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    @GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">    public Object test(@PathVariable(&quot;id&quot;) Long id) &#123;</span><br><span class="line">        return userService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:8080/user/1">http://localhost:8080/user/1</a> 获得结果如下，整合成功！<br><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/ecb8c3a623694595a22980a26821ccb6.png" alt="图片"></p>
<h3 id="3、统一结果封装"><a href="#3、统一结果封装" class="headerlink" title="3、统一结果封装"></a>3、统一结果封装</h3><p>这里我们用到了一个Result的类，这个用于我们的异步统一返回的结果封装。一般来说，结果里面有几个要素必要的</p>
<ul>
<li>是否成功，可用code表示（如200表示成功，400表示异常）</li>
<li>结果消息</li>
<li>结果数据</li>
</ul>
<p>所以可得到封装如下：</p>
<ul>
<li>com.markerhub.common.lang.Result</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class Result implements Serializable &#123;</span><br><span class="line">    private String code;</span><br><span class="line">    private String msg;</span><br><span class="line">    private Object data;</span><br><span class="line">    public static Result succ(Object data) &#123;</span><br><span class="line">        Result m = new Result();</span><br><span class="line">        m.setCode(&quot;0&quot;);</span><br><span class="line">        m.setData(data);</span><br><span class="line">        m.setMsg(&quot;操作成功&quot;);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Result succ(String mess, Object data) &#123;</span><br><span class="line">        Result m = new Result();</span><br><span class="line">        m.setCode(&quot;0&quot;);</span><br><span class="line">        m.setData(data);</span><br><span class="line">        m.setMsg(mess);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Result fail(String mess) &#123;</span><br><span class="line">        Result m = new Result();</span><br><span class="line">        m.setCode(&quot;-1&quot;);</span><br><span class="line">        m.setData(null);</span><br><span class="line">        m.setMsg(mess);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Result fail(String mess, Object data) &#123;</span><br><span class="line">        Result m = new Result();</span><br><span class="line">        m.setCode(&quot;-1&quot;);</span><br><span class="line">        m.setData(data);</span><br><span class="line">        m.setMsg(mess);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、整合shiro-jwt，并会话共享"><a href="#4、整合shiro-jwt，并会话共享" class="headerlink" title="4、整合shiro+jwt，并会话共享"></a>4、整合shiro+jwt，并会话共享</h3><p>考虑到后面可能需要做集群、负载均衡等，所以就需要会话共享，而shiro的缓存和会话信息，我们一般考虑使用redis来存储这些数据，所以，我们不仅仅需要整合shiro，同时也需要整合redis。在开源的项目中，我们找到了一个starter可以快速整合shiro-redis，配置简单，这里也推荐大家使用。</p>
<p>而因为我们需要做的是前后端分离项目的骨架，所以一般我们会采用token或者jwt作为跨域身份验证解决方案。所以整合shiro的过程中，我们需要引入jwt的身份验证过程。</p>
<p>那么我们就开始整合：</p>
<p>我们使用一个shiro-redis-spring-boot-starter的jar包，具体教程可以看官方文档：<a href="https://github.com/alexxiyang/shiro-redis/blob/master/docs/README.md#spring-boot-starter">https://github.com/alexxiyang/shiro-redis/blob/master/docs/README.md#spring-boot-starter</a></p>
<p>第一步：导入shiro-redis的starter包：还有jwt的工具包，以及为了简化开发，我引入了hutool工具包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.crazycake&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-redis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- hutool工具类--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.3.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- jwt --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>第二步：编写配置：</p>
<h4 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h4><ul>
<li>com.markerhub.config.ShiroConfig</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * shiro启用注解拦截控制器</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    JwtFilter jwtFilter;</span><br><span class="line">    @Bean</span><br><span class="line">    public SessionManager sessionManager(RedisSessionDAO redisSessionDAO) &#123;</span><br><span class="line">        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();</span><br><span class="line">        sessionManager.setSessionDAO(redisSessionDAO);</span><br><span class="line">        return sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultWebSecurityManager securityManager(AccountRealm accountRealm,</span><br><span class="line">                                                     SessionManager sessionManager,</span><br><span class="line">                                                     RedisCacheManager redisCacheManager) &#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(accountRealm);</span><br><span class="line">        securityManager.setSessionManager(sessionManager);</span><br><span class="line">        securityManager.setCacheManager(redisCacheManager);</span><br><span class="line">        /*</span><br><span class="line">         * 关闭shiro自带的session，详情见文档</span><br><span class="line">         */</span><br><span class="line">        DefaultSubjectDAO subjectDAO = new DefaultSubjectDAO();</span><br><span class="line">        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = new DefaultSessionStorageEvaluator();</span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(false);</span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        securityManager.setSubjectDAO(subjectDAO);</span><br><span class="line">        return securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterChainDefinition shiroFilterChainDefinition() &#123;</span><br><span class="line">        DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition();</span><br><span class="line">        Map&lt;String, String&gt; filterMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">        filterMap.put(&quot;/**&quot;, &quot;jwt&quot;); // 主要通过注解方式校验权限</span><br><span class="line">        chainDefinition.addPathDefinitions(filterMap);</span><br><span class="line">        return chainDefinition;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean(&quot;shiroFilterFactoryBean&quot;)</span><br><span class="line">    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager,</span><br><span class="line">                                                         ShiroFilterChainDefinition shiroFilterChainDefinition) &#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilter.setSecurityManager(securityManager);</span><br><span class="line">        Map&lt;String, Filter&gt; filters = new HashMap&lt;&gt;();</span><br><span class="line">        filters.put(&quot;jwt&quot;, jwtFilter);</span><br><span class="line">        shiroFilter.setFilters(filters);</span><br><span class="line">        Map&lt;String, String&gt; filterMap = shiroFilterChainDefinition.getFilterChainMap();</span><br><span class="line">        shiroFilter.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        return shiroFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 开启注解代理（默认好像已经开启，可以不要）</span><br><span class="line">    @Bean</span><br><span class="line">    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager)&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        return authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public static DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() &#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator creator = new DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        return creator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面ShiroConfig，我们主要做了几件事情：</p>
<ol>
<li>引入RedisSessionDAO和RedisCacheManager，为了解决shiro的权限数据和会话信息能保存到redis中，实现会话共享。</li>
<li>重写了SessionManager和DefaultWebSecurityManager，同时在DefaultWebSecurityManager中为了关闭shiro自带的session方式，我们需要设置为false，这样用户就不再能通过session方式登录shiro。后面将采用jwt凭证登录。</li>
<li>在ShiroFilterChainDefinition中，我们不再通过编码形式拦截Controller访问路径，而是所有的路由都需要经过JwtFilter这个过滤器，然后判断请求头中是否含有jwt的信息，有就登录，没有就跳过。跳过之后，有Controller中的shiro注解进行再次拦截，比如<a href="https://github.com/RequiresAuthentication">@RequiresAuthentication</a>，这样控制权限访问。</li>
</ol>
<p>那么，接下来，我们聊聊ShiroConfig中出现的AccountRealm，还有JwtFilter。</p>
<h4 id="AccountRealm"><a href="#AccountRealm" class="headerlink" title="AccountRealm"></a>AccountRealm</h4><p>AccountRealm是shiro进行登录或者权限校验的逻辑所在，算是核心了，我们需要重写3个方法，分别是</p>
<ul>
<li>supports：为了让realm支持jwt的凭证校验</li>
<li>doGetAuthorizationInfo：权限校验</li>
<li>doGetAuthenticationInfo：登录认证校验</li>
</ul>
<p>我们先来总体看看AccountRealm的代码，然后逐个分析：</p>
<ul>
<li>com.markerhub.shiro.AccountRealm</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class AccountRealm extends AuthorizingRealm &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    JwtUtils jwtUtils;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(AuthenticationToken token) &#123;</span><br><span class="line">        return token instanceof JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line">        JwtToken jwt = (JwtToken) token;</span><br><span class="line">        log.info(&quot;jwt-----------------&gt;&#123;&#125;&quot;, jwt);</span><br><span class="line">        String userId = jwtUtils.getClaimByToken((String) jwt.getPrincipal()).getSubject();</span><br><span class="line">        User user = userService.getById(Long.parseLong(userId));</span><br><span class="line">        if(user == null) &#123;</span><br><span class="line">            throw new UnknownAccountException(&quot;账户不存在！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(user.getStatus() == -1) &#123;</span><br><span class="line">            throw new LockedAccountException(&quot;账户已被锁定！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        AccountProfile profile = new AccountProfile();</span><br><span class="line">        BeanUtil.copyProperties(user, profile);</span><br><span class="line">        log.info(&quot;profile-----------------&gt;&#123;&#125;&quot;, profile.toString());</span><br><span class="line">        return new SimpleAuthenticationInfo(profile, jwt.getCredentials(), getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实主要就是doGetAuthenticationInfo登录认证这个方法，可以看到我们通过jwt获取到用户信息，判断用户的状态，最后异常就抛出对应的异常信息，否者封装成SimpleAuthenticationInfo返回给shiro。<br>接下来我们逐步分析里面出现的新类：</p>
<p>1、shiro默认supports的是UsernamePasswordToken，而我们现在采用了jwt的方式，所以这里我们自定义一个JwtToken，来完成shiro的supports方法。</p>
<h4 id="JwtToken"><a href="#JwtToken" class="headerlink" title="JwtToken"></a>JwtToken</h4><ul>
<li>com.markerhub.shiro.JwtToken</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class JwtToken implements AuthenticationToken &#123;</span><br><span class="line">    private String token;</span><br><span class="line">    public JwtToken(String token) &#123;</span><br><span class="line">        this.token = token;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Object getPrincipal() &#123;</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Object getCredentials() &#123;</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、JwtUtils是个生成和校验jwt的工具类，其中有些jwt相关的密钥信息是从项目配置文件中配置的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;markerhub.jwt&quot;)</span><br><span class="line">public class JwtUtils &#123;</span><br><span class="line">    private String secret;</span><br><span class="line">    private long expire;</span><br><span class="line">    private String header;</span><br><span class="line">    /**</span><br><span class="line">     * 生成jwt token</span><br><span class="line">     */</span><br><span class="line">    public String generateToken(long userId) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取jwt的信息</span><br><span class="line">    public Claims getClaimByToken(String token) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * token是否过期</span><br><span class="line">     * @return  true：过期</span><br><span class="line">     */</span><br><span class="line">    public boolean isTokenExpired(Date expiration) &#123;</span><br><span class="line">        return expiration.before(new Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、而在AccountRealm我们还用到了AccountProfile，这是为了登录成功之后返回的一个用户信息的载体，</p>
<h4 id="AccountProfile"><a href="#AccountProfile" class="headerlink" title="AccountProfile"></a>AccountProfile</h4><ul>
<li>com.markerhub.shiro.AccountProfile</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class AccountProfile implements Serializable &#123;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String avatar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步，ok，基本的校验的路线完成之后，我们需要少量的基本信息配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shiro-redis:</span><br><span class="line">  enabled: true</span><br><span class="line">  redis-manager:</span><br><span class="line">    host: 127.0.0.1:6379</span><br><span class="line">markerhub:</span><br><span class="line">  jwt:</span><br><span class="line">    # 加密秘钥</span><br><span class="line">    secret: f4e2e52034348f86b67cde581c0f9eb5</span><br><span class="line">    # token有效时长，7天，单位秒</span><br><span class="line">    expire: 604800</span><br><span class="line">    header: token</span><br></pre></td></tr></table></figure>

<p>第四步：另外，如果你项目有使用spring-boot-devtools，需要添加一个配置文件，在resources目录下新建文件夹META-INF，然后新建文件spring-devtools.properties，这样热重启时候才不会报错。</p>
<ul>
<li>resources&#x2F;META-INF&#x2F;spring-devtools.properties</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restart.include.shiro-redis=/shiro-[\\w-\\.]+jar</span><br></pre></td></tr></table></figure>

<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/f227ba4a47614a6ea2f849a56fcb352d.png" alt="图片"></p>
<h4 id="JwtFilter"><a href="#JwtFilter" class="headerlink" title="JwtFilter"></a>JwtFilter</h4><p>第五步：定义jwt的过滤器JwtFilter。</p>
<p>这个过滤器是我们的重点，这里我们继承的是Shiro内置的AuthenticatingFilter，一个可以内置了可以自动登录方法的的过滤器，有些同学继承BasicHttpAuthenticationFilter也是可以的。</p>
<p>我们需要重写几个方法：</p>
<ol>
<li>createToken：实现登录，我们需要生成我们自定义支持的JwtToken</li>
<li>onAccessDenied：拦截校验，当头部没有Authorization时候，我们直接通过，不需要自动登录；当带有的时候，首先我们校验jwt的有效性，没问题我们就直接执行executeLogin方法实现自动登录</li>
<li>onLoginFailure：登录异常时候进入的方法，我们直接把异常信息封装然后抛出</li>
<li>preHandle：拦截器的前置拦截，因为我们是前后端分析项目，项目中除了需要跨域全局配置之外，我们再拦截器中也需要提供跨域支持。这样，拦截器才不会在进入Controller之前就被限制了。</li>
</ol>
<p>下面我们看看总体的代码：</p>
<ul>
<li>com.markerhub.shiro.JwtFilter</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class JwtFilter extends AuthenticatingFilter &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    JwtUtils jwtUtils;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationToken createToken(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception &#123;</span><br><span class="line">        // 获取 token</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        String jwt = request.getHeader(&quot;Authorization&quot;);</span><br><span class="line">        if(StringUtils.isEmpty(jwt))&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return new JwtToken(jwt);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onAccessDenied(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception &#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        String token = request.getHeader(&quot;Authorization&quot;);</span><br><span class="line">        if(StringUtils.isEmpty(token)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 判断是否已过期</span><br><span class="line">            Claims claim = jwtUtils.getClaimByToken(token);</span><br><span class="line">            if(claim == null || jwtUtils.isTokenExpired(claim.getExpiration())) &#123;</span><br><span class="line">                throw new ExpiredCredentialsException(&quot;token已失效，请重新登录！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 执行自动登录</span><br><span class="line">        return executeLogin(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">        try &#123;</span><br><span class="line">            //处理登录失败的异常</span><br><span class="line">            Throwable throwable = e.getCause() == null ? e : e.getCause();</span><br><span class="line">            Result r = Result.fail(throwable.getMessage());</span><br><span class="line">            String json = JSONUtil.toJsonStr(r);</span><br><span class="line">            httpResponse.getWriter().print(json);</span><br><span class="line">        &#125; catch (IOException e1) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 对跨域提供支持</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = WebUtils.toHttp(request);</span><br><span class="line">        HttpServletResponse httpServletResponse = WebUtils.toHttp(response);</span><br><span class="line">        httpServletResponse.setHeader(&quot;Access-control-Allow-Origin&quot;, httpServletRequest.getHeader(&quot;Origin&quot;));</span><br><span class="line">        httpServletResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET,POST,OPTIONS,PUT,DELETE&quot;);</span><br><span class="line">        httpServletResponse.setHeader(&quot;Access-Control-Allow-Headers&quot;, httpServletRequest.getHeader(&quot;Access-Control-Request-Headers&quot;));</span><br><span class="line">        // 跨域时会首先发送一个OPTIONS请求，这里我们给OPTIONS请求直接返回正常状态</span><br><span class="line">        if (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(org.springframework.http.HttpStatus.OK.value());</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么到这里，我们的shiro就已经完成整合进来了，并且使用了jwt进行身份校验。</p>
<h3 id="5、异常处理"><a href="#5、异常处理" class="headerlink" title="5、异常处理"></a>5、异常处理</h3><p>有时候不可避免服务器报错的情况，如果不配置异常处理机制，就会默认返回tomcat或者nginx的5XX页面，对普通用户来说，不太友好，用户也不懂什么情况。这时候需要我们程序员设计返回一个友好简单的格式给前端。</p>
<p>处理办法如下：通过使用<a href="https://github.com/ControllerAdvice">@ControllerAdvice</a>来进行统一异常处理，<a href="https://github.com/ExceptionHandler">@ExceptionHandler</a>(value &#x3D; RuntimeException.class)来指定捕获的Exception各个类型异常 ，这个异常的处理，是全局的，所有类似的异常，都会跑到这个地方处理。</p>
<ul>
<li>com.markerhub.common.exception.GlobalExceptionHandler</li>
</ul>
<p>步骤二、定义全局异常处理，<a href="https://github.com/ControllerAdvice">@ControllerAdvice</a>表示定义全局控制器异常处理，<a href="https://github.com/ExceptionHandler">@ExceptionHandler</a>表示针对性异常处理，可对每种异常针对性处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 全局异常处理</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@RestControllerAdvice</span><br><span class="line">public class GlobalExcepitonHandler &#123;</span><br><span class="line">    // 捕捉shiro的异常</span><br><span class="line">    @ResponseStatus(HttpStatus.UNAUTHORIZED)</span><br><span class="line">    @ExceptionHandler(ShiroException.class)</span><br><span class="line">    public Result handle401(ShiroException e) &#123;</span><br><span class="line">        return Result.fail(401, e.getMessage(), null);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 处理Assert的异常</span><br><span class="line">     */</span><br><span class="line">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class="line">    @ExceptionHandler(value = IllegalArgumentException.class)</span><br><span class="line">    public Result handler(IllegalArgumentException e) throws IOException &#123;</span><br><span class="line">        log.error(&quot;Assert异常:--------------&gt;&#123;&#125;&quot;,e.getMessage());</span><br><span class="line">        return Result.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @Validated 校验错误异常处理</span><br><span class="line">     */</span><br><span class="line">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class="line">    @ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br><span class="line">    public Result handler(MethodArgumentNotValidException e) throws IOException &#123;</span><br><span class="line">        log.error(&quot;运行时异常:--------------&gt;&quot;,e);</span><br><span class="line">        BindingResult bindingResult = e.getBindingResult();</span><br><span class="line">        ObjectError objectError = bindingResult.getAllErrors().stream().findFirst().get();</span><br><span class="line">        return Result.fail(objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class="line">    @ExceptionHandler(value = RuntimeException.class)</span><br><span class="line">    public Result handler(RuntimeException e) throws IOException &#123;</span><br><span class="line">        log.error(&quot;运行时异常:--------------&gt;&quot;,e);</span><br><span class="line">        return Result.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面我们捕捉了几个异常：</p>
<ul>
<li>ShiroException：shiro抛出的异常，比如没有权限，用户登录异常</li>
<li>IllegalArgumentException：处理Assert的异常</li>
<li>MethodArgumentNotValidException：处理实体校验的异常</li>
<li>RuntimeException：捕捉其他异常</li>
</ul>
<h3 id="6、实体校验"><a href="#6、实体校验" class="headerlink" title="6、实体校验"></a>6、实体校验</h3><p>当我们表单数据提交的时候，前端的校验我们可以使用一些类似于jQuery Validate等js插件实现，而后端我们可以使用Hibernate validatior来做校验。</p>
<p>我们使用springboot框架作为基础，那么就已经自动集成了Hibernate validatior。</p>
<p>那么用起来啥样子的呢？</p>
<p>第一步：首先在实体的属性上添加对应的校验规则，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@TableName(&quot;m_user&quot;)</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    @TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br><span class="line">    private Long id;</span><br><span class="line">    @NotBlank(message = &quot;昵称不能为空&quot;)</span><br><span class="line">    private String username;</span><br><span class="line">    @NotBlank(message = &quot;邮箱不能为空&quot;)</span><br><span class="line">    @Email(message = &quot;邮箱格式不正确&quot;)</span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步 ：这里我们使用<a href="https://github.com/Validated">@Validated</a>注解方式，如果实体不符合要求，系统会抛出异常，那么我们的异常处理中就捕获到MethodArgumentNotValidException。</p>
<ul>
<li>com.markerhub.controller.UserController</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试实体校验</span><br><span class="line"> * @param user</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/save&quot;)</span><br><span class="line">public Object testUser(@Validated @RequestBody User user) &#123;</span><br><span class="line">    return user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、跨域问题"><a href="#7、跨域问题" class="headerlink" title="7、跨域问题"></a>7、跨域问题</h3><p>因为是前后端分析，所以跨域问题是避免不了的，我们直接在后台进行全局跨域处理：</p>
<ul>
<li>com.markerhub.config.CorsConfig</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 解决跨域问题</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class CorsConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">        registry.addMapping(&quot;/**&quot;)</span><br><span class="line">                .allowedOrigins(&quot;*&quot;)</span><br><span class="line">                .allowedMethods(&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;)</span><br><span class="line">                .allowCredentials(true)</span><br><span class="line">                .maxAge(3600)</span><br><span class="line">                .allowedHeaders(&quot;*&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ok，因为我们系统开发的接口比较简单，所以我就不集成swagger2啦，也比较简单而已。下面我们就直接进入我们的正题，进行编写登录接口。</p>
<h3 id="8、登录接口开发"><a href="#8、登录接口开发" class="headerlink" title="8、登录接口开发"></a>8、登录接口开发</h3><p>登录的逻辑其实很简答，只需要接受账号密码，然后把用户的id生成jwt，返回给前段，为了后续的jwt的延期，所以我们把jwt放在header上。具体代码如下：</p>
<ul>
<li>com.markerhub.controller.AccountController</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class AccountController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    JwtUtils jwtUtils;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    /**</span><br><span class="line">     * 默认账号密码：markerhub / 111111</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    @CrossOrigin</span><br><span class="line">    @PostMapping(&quot;/login&quot;)</span><br><span class="line">    public Result login(@Validated @RequestBody LoginDto loginDto, HttpServletResponse response) &#123;</span><br><span class="line">        User user = userService.getOne(new QueryWrapper&lt;User&gt;().eq(&quot;username&quot;, loginDto.getUsername()));</span><br><span class="line">        Assert.notNull(user, &quot;用户不存在&quot;);</span><br><span class="line">        if(!user.getPassword().equals(SecureUtil.md5(loginDto.getPassword()))) &#123;</span><br><span class="line">            return Result.fail(&quot;密码错误！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String jwt = jwtUtils.generateToken(user.getId());</span><br><span class="line">        response.setHeader(&quot;Authorization&quot;, jwt);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Expose-Headers&quot;, &quot;Authorization&quot;);</span><br><span class="line">        // 用户可以另一个接口</span><br><span class="line">        return Result.succ(MapUtil.builder()</span><br><span class="line">                .put(&quot;id&quot;, user.getId())</span><br><span class="line">                .put(&quot;username&quot;, user.getUsername())</span><br><span class="line">                .put(&quot;avatar&quot;, user.getAvatar())</span><br><span class="line">                .put(&quot;email&quot;, user.getEmail())</span><br><span class="line">                .map()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 退出</span><br><span class="line">    @GetMapping(&quot;/logout&quot;)</span><br><span class="line">    @RequiresAuthentication</span><br><span class="line">    public Result logout() &#123;</span><br><span class="line">        SecurityUtils.getSubject().logout();</span><br><span class="line">        return Result.succ(null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口测试：<br><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/5000047b0a874b09850c4ffde0053c8d.png" alt="图片"></p>
<h3 id="9、博客接口开发"><a href="#9、博客接口开发" class="headerlink" title="9、博客接口开发"></a>9、博客接口开发</h3><p>我们的骨架已经完成，接下来，我们就可以添加我们的业务接口了，下面我以一个简单的博客列表、博客详情页为例子开发：</p>
<ul>
<li>com.markerhub.controller.BlogController</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class BlogController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    BlogService blogService;</span><br><span class="line">    @GetMapping(&quot;/blogs&quot;)</span><br><span class="line">    public Result blogs(Integer currentPage) &#123;</span><br><span class="line">        if(currentPage == null || currentPage &lt; 1) currentPage = 1;</span><br><span class="line">        Page page = new Page(currentPage, 5)</span><br><span class="line">        IPage pageData = blogService.page(page, new QueryWrapper&lt;Blog&gt;().orderByDesc(&quot;created&quot;));</span><br><span class="line">        return Result.succ(pageData);</span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(&quot;/blog/&#123;id&#125;&quot;)</span><br><span class="line">    public Result detail(@PathVariable(name = &quot;id&quot;) Long id) &#123;</span><br><span class="line">        Blog blog = blogService.getById(id);</span><br><span class="line">        Assert.notNull(blog, &quot;该博客已删除！&quot;);</span><br><span class="line">        return Result.succ(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequiresAuthentication</span><br><span class="line">@PostMapping(&quot;/blog/edit&quot;)</span><br><span class="line">public Result edit(@Validated @RequestBody Blog blog) &#123;</span><br><span class="line">    System.out.println(blog.toString());</span><br><span class="line">    Blog temp = null;</span><br><span class="line">    if(blog.getId() != null) &#123;</span><br><span class="line">        temp = blogService.getById(blog.getId());</span><br><span class="line">        Assert.isTrue(temp.getUserId() == ShiroUtil.getProfile().getId(), &quot;没有权限编辑&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        temp = new Blog();</span><br><span class="line">        temp.setUserId(ShiroUtil.getProfile().getId());</span><br><span class="line">        temp.setCreated(LocalDateTime.now());</span><br><span class="line">        temp.setStatus(0);</span><br><span class="line">    &#125;</span><br><span class="line">    BeanUtil.copyProperties(blog, temp, &quot;id&quot;, &quot;userId&quot;, &quot;created&quot;, &quot;status&quot;);</span><br><span class="line">    blogService.saveOrUpdate(temp);</span><br><span class="line">    return Result.succ(&quot;操作成功&quot;, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意<a href="https://github.com/RequiresAuthentication">@RequiresAuthentication</a>说明需要登录之后才能访问的接口，其他需要权限的接口可以添加shiro的相关注解。<br>接口比较简单，我们就不多说了，基本增删改查而已。注意的是edit方法是需要登录才能操作的受限资源。</p>
<p>接口测试：</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/f9269851970c43d096d3c777730fffde.png" alt="图片"></p>
<h3 id="10、后端总结"><a href="#10、后端总结" class="headerlink" title="10、后端总结"></a>10、后端总结</h3><p>好了，一篇文章搞定一个基本骨架，好像有点赶，但是基本的东西这里已经有了。后面我们就要去开发我们的前端接口了。</p>
<p>项目代码：<a href="https://github.com/MarkerHub/vueblog">https://github.com/MarkerHub/vueblog</a></p>
<p>项目视频：<a href="https://www.bilibili.com/video/BV1PQ4y1P7hZ/">https://www.bilibili.com/video/BV1PQ4y1P7hZ/</a></p>
<h2 id="Vue前端页面开发"><a href="#Vue前端页面开发" class="headerlink" title="Vue前端页面开发"></a>Vue前端页面开发</h2><h3 id="1、前言-1"><a href="#1、前言-1" class="headerlink" title="1、前言"></a>1、前言</h3><p>接下来，我们来完成vueblog前端的部分功能。可能会使用的到技术如下：</p>
<ul>
<li>vue</li>
<li>element-ui</li>
<li>axios</li>
<li>mavon-editor</li>
<li>markdown-it</li>
<li>github-markdown-css</li>
</ul>
<p>本项目实践需要一点点vue的基础，希望你对vue的一些指令有所了解，这样我们讲解起来就简单多了哈。</p>
<h3 id="2、项目演示"><a href="#2、项目演示" class="headerlink" title="2、项目演示"></a>2、项目演示</h3><p>我们先来看下我们需要完成的项目长什么样子，考虑到很多同学的样式的掌握程度不够，所以我尽量使用了element-ui的原生组件的样式来完成整个博客的界面。不多说，直接上图：</p>
<p>在线体验：<a href="https://markerhub.com:8083/">https://markerhub.com:8083</a></p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/068bbd1dcddb40b79c54b02cc5516dfd.png" alt="图片"></p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/c1fe32b559cf4b39a2be26b3990b884a.png" alt="图片"></p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/b66dbd5169fd4f8f94109aa1bd65f48f.png" alt="图片"></p>
<h3 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h3><p>万丈高楼平地起，我们下面一步一步来完成，首先我们安装vue的环境，我实践的环境是windows 10哈。</p>
<p>1、首先我们上node.js官网(<a href="https://nodejs.org/zh-cn/)%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84%E9%95%BF%E6%9C%9F%E7%89%88%E6%9C%AC%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8C%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E5%B7%B2%E7%BB%8F%E5%85%B7%E5%A4%87%E4%BA%86node%E5%92%8Cnpm%E7%9A%84%E7%8E%AF%E5%A2%83%E5%95%A6%E3%80%82">https://nodejs.org/zh-cn/)，下载最新的长期版本，直接运行安装完成之后，我们就已经具备了node和npm的环境啦。</a></p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/5a30fecdf00d47619f99e4d15ed5c983.png" alt="图片"></p>
<p>安装完成之后检查下版本信息：</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/babbc453e8c94bf2b413d370e8ad8989.png" alt="图片"></p>
<p>2、接下来，我们安装vue的环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装淘宝npm</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"># vue-cli 安装依赖包</span><br><span class="line">cnpm install --g vue-cli</span><br></pre></td></tr></table></figure>

<h3 id="4、新建项目"><a href="#4、新建项目" class="headerlink" title="4、新建项目"></a>4、新建项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开vue的可视化管理工具界面</span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure>

<p>上面我们分别安装了淘宝npm，cnpm是为了提高我们安装依赖的速度。vue ui是<a href="https://github.com/vue">@vue</a>&#x2F;cli3.0增加一个可视化项目管理工具，可以运行项目、打包项目，检查等操作。对于初学者来说，可以少记一些命令，哈哈。<br>3、创建vueblog-vue项目</p>
<p>运行vue ui之后，会为我们打开一个<a href="http://localhost:8080/">http://localhost:8080</a> 的页面：</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/154ae9db3c0c4d9e9218bc74da7cddec.png" alt="图片"></p>
<p>然后切换到【创建】，注意创建的目录最好是和你运行vue ui同一级。这样方便管理和切换。然后点击按钮【在此创建新羡慕】</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/9e5178bc47cf406fa6a982032fb4e25d.png" alt="图片"></p>
<p>下一步中，项目文件夹中输入项目名称“vueblog-vue”，其他不用改，点击下一步，选择【手动】，再点击下一步，如图点击按钮，勾选上路由Router、状态管理Vuex，去掉js的校验。</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/b6d1d354fa3942458212ca24ed8316d4.png" alt="图片"></p>
<p>下一步中，也选上【Use history mode for router】，点击创建项目，然后弹窗中选择按钮【创建项目，不保存预设】，就进入项目创建啦。</p>
<p>稍等片刻之后，项目就初始化完成了。上面的步骤中，我们创建了一个vue项目，并且安装了Router、Vuex。这样我们后面就可以直接使用。</p>
<p>我们来看下整个vueblog-vue的项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── README.md            项目介绍</span><br><span class="line">├── index.html           入口页面</span><br><span class="line">├── build              构建脚本目录</span><br><span class="line">│  ├── build-server.js         运行本地构建服务器，可以访问构建后的页面</span><br><span class="line">│  ├── build.js            生产环境构建脚本</span><br><span class="line">│  ├── dev-client.js          开发服务器热重载脚本，主要用来实现开发阶段的页面自动刷新</span><br><span class="line">│  ├── dev-server.js          运行本地开发服务器</span><br><span class="line">│  ├── utils.js            构建相关工具方法</span><br><span class="line">│  ├── webpack.base.conf.js      wabpack基础配置</span><br><span class="line">│  ├── webpack.dev.conf.js       wabpack开发环境配置</span><br><span class="line">│  └── webpack.prod.conf.js      wabpack生产环境配置</span><br><span class="line">├── config             项目配置</span><br><span class="line">│  ├── dev.env.js           开发环境变量</span><br><span class="line">│  ├── index.js            项目配置文件</span><br><span class="line">│  ├── prod.env.js           生产环境变量</span><br><span class="line">│  └── test.env.js           测试环境变量</span><br><span class="line">├── mock              mock数据目录</span><br><span class="line">│  └── hello.js</span><br><span class="line">├── package.json          npm包配置文件，里面定义了项目的npm脚本，依赖包等信息</span><br><span class="line">├── src               源码目录 </span><br><span class="line">│  ├── main.js             入口js文件</span><br><span class="line">│  ├── app.vue             根组件</span><br><span class="line">│  ├── components           公共组件目录</span><br><span class="line">│  │  └── title.vue</span><br><span class="line">│  ├── assets             资源目录，这里的资源会被wabpack构建</span><br><span class="line">│  │  └── images</span><br><span class="line">│  │    └── logo.png</span><br><span class="line">│  ├── routes             前端路由</span><br><span class="line">│  │  └── index.js</span><br><span class="line">│  ├── store              应用级数据（state）状态管理</span><br><span class="line">│  │  └── index.js</span><br><span class="line">│  └── views              页面目录</span><br><span class="line">│    ├── hello.vue</span><br><span class="line">│    └── notfound.vue</span><br><span class="line">├── static             纯静态资源，不会被wabpack构建。</span><br><span class="line">└── test              测试文件目录（unit&amp;e2e）</span><br><span class="line">  └── unit              单元测试</span><br><span class="line">    ├── index.js            入口脚本</span><br><span class="line">    ├── karma.conf.js          karma配置文件</span><br><span class="line">    └── specs              单测case目录</span><br><span class="line">      └── Hello.spec.js</span><br></pre></td></tr></table></figure>

<h3 id="5、安装element-ui"><a href="#5、安装element-ui" class="headerlink" title="5、安装element-ui"></a>5、安装element-ui</h3><p>接下来我们引入element-ui组件（<a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn</a>），这样我们就可以获得好看的vue组件，开发好看的博客界面。</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/b98ecc8a8cd84e3bbbe382424d25ad27.png" alt="图片"></p>
<p>命令很简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到项目根目录</span><br><span class="line">cd vueblog-vue</span><br><span class="line"># 安装element-ui</span><br><span class="line">cnpm install element-ui --save</span><br></pre></td></tr></table></figure>

<p>然后我们打开项目src目录下的main.js，引入element-ui依赖。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Element from &#x27;element-ui&#x27;</span><br><span class="line">import &quot;element-ui/lib/theme-chalk/index.css&quot;</span><br><span class="line">Vue.use(Element)</span><br></pre></td></tr></table></figure>

<p>这样我们就可以愉快得在官网上选择组件复制代码到我们项目中直接使用啦。</p>
<h3 id="6、安装axios"><a href="#6、安装axios" class="headerlink" title="6、安装axios"></a>6、安装axios</h3><p>接下来，我们来安装axios（<a href="http://www.axios-js.com/%EF%BC%89%EF%BC%8Caxios%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E">http://www.axios-js.com/），axios是一个基于</a> promise 的 HTTP 库，这样我们进行前后端对接的时候，使用这个工具可以提高我们的开发效率。</p>
<p>安装命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install axios --save</span><br></pre></td></tr></table></figure>

<p>然后同样我们在main.js中全局引入axios。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">Vue.prototype.$axios = axios //</span><br></pre></td></tr></table></figure>

<p>组件中，我们就可以通过this.$axios.get()来发起我们的请求了哈。</p>
<h3 id="7、页面路由"><a href="#7、页面路由" class="headerlink" title="7、页面路由"></a>7、页面路由</h3><p>接下来，我们先定义好路由和页面，因为我们只是做一个简单的博客项目，页面比较少，所以我们可以直接先定义好，然后在慢慢开发，这样需要用到链接的地方我们就可以直接可以使用：</p>
<p>我们在views文件夹下定义几个页面：</p>
<ul>
<li>BlogDetail.vue（博客详情页）</li>
<li>BlogEdit.vue（编辑博客）</li>
<li>Blogs.vue（博客列表）</li>
<li>Login.vue（登录页面）</li>
</ul>
<p>然后再路由中心配置：</p>
<ul>
<li>router\index.js</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">import Login from &#x27;../views/Login.vue&#x27;</span><br><span class="line">import BlogDetail from &#x27;../views/BlogDetail.vue&#x27;</span><br><span class="line">import BlogEdit from &#x27;../views/BlogEdit.vue&#x27;</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    name: &#x27;Index&#x27;,</span><br><span class="line">    redirect: &#123; name: &#x27;Blogs&#x27; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/login&#x27;,</span><br><span class="line">    name: &#x27;Login&#x27;,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/blogs&#x27;,</span><br><span class="line">    name: &#x27;Blogs&#x27;,</span><br><span class="line">    // 懒加载</span><br><span class="line">    component: () =&gt; import(&#x27;../views/Blogs.vue&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/blog/add&#x27;, // 注意放在 path: &#x27;/blog/:blogId&#x27;之前</span><br><span class="line">    name: &#x27;BlogAdd&#x27;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      requireAuth: true</span><br><span class="line">    &#125;,</span><br><span class="line">    component: BlogEdit</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/blog/:blogId&#x27;,</span><br><span class="line">    name: &#x27;BlogDetail&#x27;,</span><br><span class="line">    component: BlogDetail</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/blog/:blogId/edit&#x27;,</span><br><span class="line">    name: &#x27;BlogEdit&#x27;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      requireAuth: true</span><br><span class="line">    &#125;,</span><br><span class="line">    component: BlogEdit</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure>

<p>接下来我们去开发我们的页面。其中，带有meta：requireAuth: true说明是需要登录字后才能访问的受限资源，后面我们路由权限拦截时候会用到。</p>
<h3 id="8、登录页面"><a href="#8、登录页面" class="headerlink" title="8、登录页面"></a>8、登录页面</h3><p>接下来，我们来搞一个登陆页面，表单组件我们直接在element-ui的官网上找就行了，登陆页面就两个输入框和一个提交按钮，相对简单，然后我们最好带页面的js校验。emmm，我直接贴代码了~~</p>
<ul>
<li>views&#x2F;Login.vue</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/blogs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.markerhub.com/dist/images/logo/markerhub-logo.png&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">&quot;height: 60%; margin-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">status-icon</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;12&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.password&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Login&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      var validatePass = (rule, value, callback) =&gt; &#123;</span><br><span class="line">        if (value === &#x27;&#x27;) &#123;</span><br><span class="line">          callback(new Error(&#x27;请输入密码&#x27;));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          callback();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      return &#123;</span><br><span class="line">        ruleForm: &#123;</span><br><span class="line">          password: &#x27;111111&#x27;,</span><br><span class="line">          username: &#x27;markerhub&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        rules: &#123;</span><br><span class="line">          password: [</span><br><span class="line">            &#123;validator: validatePass, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">          ],</span><br><span class="line">          username: [</span><br><span class="line">            &#123;required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">            &#123;min: 3, max: 12, message: &#x27;长度在 3 到 12 个字符&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      submitForm(formName) &#123;</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$refs[formName].validate((valid) =&gt; &#123;</span><br><span class="line">          if (valid) &#123;</span><br><span class="line">            // 提交逻辑</span><br><span class="line">            this.$axios.post(&#x27;http://localhost:8081/login&#x27;, this.ruleForm).then((res)=&gt;&#123;</span><br><span class="line">              const token = res.headers[&#x27;authorization&#x27;]</span><br><span class="line">              _this.$store.commit(&#x27;SET_TOKEN&#x27;, token)</span><br><span class="line">              _this.$store.commit(&#x27;SET_USERINFO&#x27;, res.data.data)</span><br><span class="line">              _this.$router.push(&quot;/blogs&quot;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            console.log(&#x27;error submit!!&#x27;);</span><br><span class="line">            return false;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      resetForm(formName) &#123;</span><br><span class="line">        this.$refs[formName].resetFields();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.$notify(&#123;</span><br><span class="line">        title: &#x27;看这里：&#x27;,</span><br><span class="line">        message: &#x27;关注公众号：MarkerHub，回复【vueblog】，领取项目资料与源码&#x27;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>找不到啥好的方式讲解了，之后先贴代码，然后再讲解。<br>上面代码中，其实主要做了两件事情</p>
<p>1、表单校验</p>
<p>2、登录按钮的点击登录事件</p>
<p>表单校验规则还好，比较固定写法，查一下element-ui的组件就知道了，我们来分析一下发起登录之后的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const token = res.headers[&#x27;authorization&#x27;]</span><br><span class="line">_this.$store.commit(&#x27;SET_TOKEN&#x27;, token)</span><br><span class="line">_this.$store.commit(&#x27;SET_USERINFO&#x27;, res.data.data)</span><br><span class="line">_this.$router.push(&quot;/blogs&quot;)</span><br></pre></td></tr></table></figure>

<p>从返回的结果请求头中获取到token的信息，然后使用store提交token和用户信息的状态。完成操作之后，我们调整到了&#x2F;blogs路由，即博客列表页面。</p>
<h4 id="token的状态同步"><a href="#token的状态同步" class="headerlink" title="token的状态同步"></a>token的状态同步</h4><p>所以在store&#x2F;index.js中，代码是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    token: &#x27;&#x27;,</span><br><span class="line">    userInfo: JSON.parse(sessionStorage.getItem(&quot;userInfo&quot;))</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_TOKEN: (state, token) =&gt; &#123;</span><br><span class="line">      state.token = token</span><br><span class="line">      localStorage.setItem(&quot;token&quot;, token)</span><br><span class="line">    &#125;,</span><br><span class="line">    SET_USERINFO: (state, userInfo) =&gt; &#123;</span><br><span class="line">      state.userInfo = userInfo</span><br><span class="line">      sessionStorage.setItem(&quot;userInfo&quot;, JSON.stringify(userInfo))</span><br><span class="line">    &#125;,</span><br><span class="line">    REMOVE_INFO: (state) =&gt; &#123;</span><br><span class="line">      localStorage.setItem(&quot;token&quot;, &#x27;&#x27;)</span><br><span class="line">      sessionStorage.setItem(&quot;userInfo&quot;, JSON.stringify(&#x27;&#x27;))</span><br><span class="line">      state.userInfo = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    getUser: state =&gt; &#123;</span><br><span class="line">      return state.userInfo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>存储token，我们用的是localStorage，存储用户信息，我们用的是sessionStorage。毕竟用户信息我们不需要长久保存，保存了token信息，我们随时都可以初始化用户信息。当然了因为本项目是个比较简单的项目，考虑到初学者，所以很多相对复杂的封装和功能我没有做，当然了，学了这个项目之后，自己想再继续深入，完成可以自行学习和改造哈。</p>
<h4 id="定义全局axios拦截器"><a href="#定义全局axios拦截器" class="headerlink" title="定义全局axios拦截器"></a>定义全局axios拦截器</h4><p>点击登录按钮发起登录请求，成功时候返回了数据，如果是密码错误，我们是不是也应该弹窗消息提示。为了让这个错误弹窗能运用到所有的地方，所以我对axios做了个后置拦截器，就是返回数据时候，如果结果的code或者status不正常，那么我对应弹窗提示。</p>
<p>在src目录下创建一个文件axios.js（与main.js同级），定义axios的拦截：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import Element from &quot;element-ui&quot;;</span><br><span class="line">import store from &quot;./store&quot;;</span><br><span class="line">import router from &quot;./router&quot;;</span><br><span class="line">axios.defaults.baseURL=&#x27;http://localhost:8081&#x27;</span><br><span class="line">axios.interceptors.request.use(config =&gt; &#123;</span><br><span class="line">  console.log(&quot;前置拦截&quot;)</span><br><span class="line">  // 可以统一设置请求头</span><br><span class="line">  return config</span><br><span class="line">&#125;)</span><br><span class="line">axios.interceptors.response.use(response =&gt; &#123;</span><br><span class="line">    const res = response.data;</span><br><span class="line">    console.log(&quot;后置拦截&quot;)</span><br><span class="line">    // 当结果的code是否为200的情况</span><br><span class="line">    if (res.code === 200) &#123;</span><br><span class="line">      return response</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 弹窗异常信息</span><br><span class="line">      Element.Message(&#123;</span><br><span class="line">        message: response.data.msg,</span><br><span class="line">        type: &#x27;error&#x27;,</span><br><span class="line">        duration: 2 * 1000</span><br><span class="line">      &#125;)</span><br><span class="line">      // 直接拒绝往下面返回结果信息</span><br><span class="line">      return Promise.reject(response.data.msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    console.log(&#x27;err&#x27; + error)// for debug</span><br><span class="line">    if(error.response.data) &#123;</span><br><span class="line">      error.message = error.response.data.msg</span><br><span class="line">    &#125;</span><br><span class="line">    // 根据请求状态觉得是否登录或者提示其他</span><br><span class="line">    if (error.response.status === 401) &#123;</span><br><span class="line">      store.commit(&#x27;REMOVE_INFO&#x27;);</span><br><span class="line">      router.push(&#123;</span><br><span class="line">        path: &#x27;/login&#x27;</span><br><span class="line">      &#125;);</span><br><span class="line">      error.message = &#x27;请重新登录&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (error.response.status === 403) &#123;</span><br><span class="line">      error.message = &#x27;权限不足，无法访问&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    Element.Message(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      type: &#x27;error&#x27;,</span><br><span class="line">      duration: 3 * 1000</span><br><span class="line">    &#125;)</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>前置拦截，其实可以统一为所有需要权限的请求装配上header的token信息，这样不需要在使用是再配置，我的小项目比较小，所以，还是免了吧~</p>
<p>然后再main.js中导入axios.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;./axios.js&#x27; // 请求拦截</span><br></pre></td></tr></table></figure>

<p>后端因为返回的实体是Result，succ时候code为200，fail时候返回的是400，所以可以根据这里判断结果是否是正常的。另外权限不足时候可以通过请求结果的状态码来判断结果是否正常。这里都做了简单的处理。</p>
<p>登录异常时候的效果如下：</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/84587fc9e3444debacf84ccc726f4058.png" alt="图片"></p>
<h3 id="9、博客列表"><a href="#9、博客列表" class="headerlink" title="9、博客列表"></a>9、博客列表</h3><p>登录完成之后直接进入博客列表页面，然后加载博客列表的数据渲染出来。同时页面头部我们需要把用户的信息展示出来，因为很多地方都用到这个模块，所以我们把页面头部的用户信息单独抽取出来作为一个组件。</p>
<h4 id="头部用户信息"><a href="#头部用户信息" class="headerlink" title="头部用户信息"></a>头部用户信息</h4><p>那么，我们先来完成头部的用户信息，应该包含三部分信息：id，头像、用户名，而这些信息我们是在登录之后就已经存在了sessionStorage。因此，我们可以通过store的getters获取到用户信息。</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/6d33d6a010324a91a48537e975a4b1a0.png" alt="图片"></p>
<p>看起来不是很复杂，我们贴出代码：</p>
<ul>
<li>components\Header.vue</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;m-content&quot;&gt;</span><br><span class="line">    &lt;h3&gt;欢迎来到MarkerHub的博客&lt;/h3&gt;</span><br><span class="line">    &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">      &lt;el-avatar :size=&quot;50&quot; :src=&quot;user.avatar&quot;&gt;&lt;/el-avatar&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; user.username &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;maction&quot;&gt;</span><br><span class="line">      &lt;el-link href=&quot;/blogs&quot;&gt;主页&lt;/el-link&gt;</span><br><span class="line">      &lt;el-divider direction=&quot;vertical&quot;&gt;&lt;/el-divider&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">          &lt;el-link type=&quot;success&quot; href=&quot;/blog/add&quot; :disabled=&quot;!hasLogin&quot;&gt;发表文章&lt;/el-link&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;el-divider direction=&quot;vertical&quot;&gt;&lt;/el-divider&gt;</span><br><span class="line">      &lt;span v-show=&quot;!hasLogin&quot;&gt;</span><br><span class="line">          &lt;el-link type=&quot;primary&quot; href=&quot;/login&quot;&gt;登陆&lt;/el-link&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;span v-show=&quot;hasLogin&quot;&gt;</span><br><span class="line">          &lt;el-link type=&quot;danger&quot; @click=&quot;logout&quot;&gt;退出&lt;/el-link&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Header&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        hasLogin: false,</span><br><span class="line">        user: &#123;</span><br><span class="line">          username: &#x27;请先登录&#x27;,</span><br><span class="line">          avatar: &quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        blogs: &#123;&#125;,</span><br><span class="line">        currentPage: 1,</span><br><span class="line">        total: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      logout() &#123;</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$axios.get(&#x27;http://localhost:8081/logout&#x27;, &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            &quot;Authorization&quot;: localStorage.getItem(&quot;token&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then((res) =&gt; &#123;</span><br><span class="line">          _this.$store.commit(&#x27;REMOVE_INFO&#x27;)</span><br><span class="line">          _this.$router.push(&#x27;/login&#x27;)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      if(this.$store.getters.getUser.username) &#123;</span><br><span class="line">        this.user.username = this.$store.getters.getUser.username</span><br><span class="line">        this.user.avatar = this.$store.getters.getUser.avatar</span><br><span class="line">        this.hasLogin = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码created()中初始化用户的信息，通过hasLogin的状态来控制登录和退出按钮的切换，以及发表文章链接的disabled，这样用户的信息就能展示出来了。<br>然后这里有个退出按钮，在methods中有个logout()方法，逻辑比较简单，直接访问&#x2F;logout，因为之前axios.js中我们已经设置axios请求的baseURL，所以这里我们不再需要链接的前缀了哈。因为是登录之后才能访问的受限资源，所以在header中带上了Authorization。返回结果清楚store中的用户信息和token信息，跳转到登录页面。</p>
<p>然后需要头部用户信息的页面只需要几个步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Header from &quot;@/components/Header&quot;;</span><br><span class="line">data() &#123;</span><br><span class="line">  components: &#123;Header&#125;</span><br><span class="line">&#125;</span><br><span class="line"># 然后模板中调用组件</span><br><span class="line">&lt;Header&gt;&lt;/Header&gt;</span><br></pre></td></tr></table></figure>

<h4 id="博客分页"><a href="#博客分页" class="headerlink" title="博客分页"></a>博客分页</h4><p>接下来就是列表页面，需要做分页，列表我们在element-ui中直接使用<strong>时间线</strong>组件来作为我们的列表样式，还是挺好看的。还有我们的分页组件。</p>
<p>需要几部分信息：</p>
<ul>
<li>分页信息</li>
<li>博客列表内容，包括id、标题、摘要、创建时间</li>
<li>views\Blogs.vue</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;m-container&quot;&gt;</span><br><span class="line">    &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">    &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">      &lt;el-timeline&gt;</span><br><span class="line">        &lt;el-timeline-item v-bind:timestamp=&quot;blog.created&quot; placement=&quot;top&quot; v-for=&quot;blog in blogs&quot;&gt;</span><br><span class="line">          &lt;el-card&gt;</span><br><span class="line">            &lt;h4&gt;&lt;router-link :to=&quot;&#123;name: &#x27;BlogDetail&#x27;, params: &#123;blogId: blog.id&#125;&#125;&quot;&gt;&#123;&#123;blog.title&#125;&#125;&lt;/router-link&gt;&lt;/h4&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;blog.description&#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;/el-card&gt;</span><br><span class="line">        &lt;/el-timeline-item&gt;</span><br><span class="line">      &lt;/el-timeline&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;el-pagination class=&quot;mpage&quot;</span><br><span class="line">      background</span><br><span class="line">      layout=&quot;prev, pager, next&quot;</span><br><span class="line">      :current-page=currentPage</span><br><span class="line">      :page-size=pageSize</span><br><span class="line">      @current-change=page</span><br><span class="line">      :total=&quot;total&quot;&gt;</span><br><span class="line">    &lt;/el-pagination&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  import Header from &quot;@/components/Header&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Blogs&quot;,</span><br><span class="line">    components: &#123;Header&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        blogs: &#123;&#125;,</span><br><span class="line">        currentPage: 1,</span><br><span class="line">        total: 0,</span><br><span class="line">        pageSize: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      page(currentPage) &#123;</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$axios.get(&#x27;http://localhost:8081/blogs?currentPage=&#x27; + currentPage).then((res) =&gt; &#123;</span><br><span class="line">          console.log(res.data.data.records)</span><br><span class="line">          _this.blogs = res.data.data.records</span><br><span class="line">          _this.currentPage = res.data.data.current</span><br><span class="line">          _this.total = res.data.data.total</span><br><span class="line">          _this.pageSize = res.data.data.size</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      this.page(1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>data()中直接定义博客列表blogs、以及一些分页信息。methods()中定义分页的调用接口page（currentPage），参数是需要调整的页码currentPage，得到结果之后直接赋值即可。然后初始化时候，直接在mounted()方法中调用第一页this.page(1)。完美。使用element-ui组件就是简单快捷哈哈！<br>注意标题这里我们添加了链接，使用的是<router-link>标签。</p>
<h3 id="10、博客编辑（发表）"><a href="#10、博客编辑（发表）" class="headerlink" title="10、博客编辑（发表）"></a>10、博客编辑（发表）</h3><p>我们点击发表博客链接调整到&#x2F;blog&#x2F;add页面，这里我们需要用到一个markdown编辑器，在vue组件中，比较好用的是mavon-editor，那么我们直接使用哈。先来安装mavon-editor相关组件：</p>
<h4 id="安装mavon-editor"><a href="#安装mavon-editor" class="headerlink" title="安装mavon-editor"></a>安装mavon-editor</h4><p>基于Vue的markdown编辑器mavon-editor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install mavon-editor --save</span><br></pre></td></tr></table></figure>

<p>然后在main.js中全局注册：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mavonEditor <span class="keyword">from</span> <span class="string">&#x27;mavon-editor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;mavon-editor/dist/css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// use</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(mavonEditor)</span><br></pre></td></tr></table></figure>

<p>ok，那么我们去定义我们的博客表单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;m-container&quot;&gt;</span><br><span class="line">    &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">    &lt;div class=&quot;m-content&quot;&gt;</span><br><span class="line">      &lt;el-form ref=&quot;editForm&quot; status-icon :model=&quot;editForm&quot; :rules=&quot;rules&quot; label-width=&quot;80px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;标题&quot; prop=&quot;title&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;editForm.title&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;摘要&quot; prop=&quot;description&quot;&gt;</span><br><span class="line">          &lt;el-input type=&quot;textarea&quot; v-model=&quot;editForm.description&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;内容&quot; prop=&quot;content&quot;&gt;</span><br><span class="line">          &lt;mavon-editor v-model=&quot;editForm.content&quot;/&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm()&quot;&gt;立即创建&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  import Header from &quot;@/components/Header&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;BlogEdit&quot;,</span><br><span class="line">    components: &#123;Header&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        editForm: &#123;</span><br><span class="line">          id: null,</span><br><span class="line">          title: &#x27;&#x27;,</span><br><span class="line">          description: &#x27;&#x27;,</span><br><span class="line">          content: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        rules: &#123;</span><br><span class="line">          title: [</span><br><span class="line">            &#123;required: true, message: &#x27;请输入标题&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">            &#123;min: 3, max: 50, message: &#x27;长度在 3 到 50 个字符&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">          ],</span><br><span class="line">          description: [</span><br><span class="line">            &#123;required: true, message: &#x27;请输入摘要&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      const blogId = this.$route.params.blogId</span><br><span class="line">      const _this = this</span><br><span class="line">      if(blogId) &#123;</span><br><span class="line">        this.$axios.get(&#x27;/blog/&#x27; + blogId).then((res) =&gt; &#123;</span><br><span class="line">          const blog = res.data.data</span><br><span class="line">          _this.editForm.id = blog.id</span><br><span class="line">          _this.editForm.title = blog.title</span><br><span class="line">          _this.editForm.description = blog.description</span><br><span class="line">          _this.editForm.content = blog.content</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      submitForm() &#123;</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$refs.editForm.validate((valid) =&gt; &#123;</span><br><span class="line">          if (valid) &#123;</span><br><span class="line">            this.$axios.post(&#x27;/blog/edit&#x27;, this.editForm, &#123;</span><br><span class="line">              headers: &#123;</span><br><span class="line">                &quot;Authorization&quot;: localStorage.getItem(&quot;token&quot;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;).then((res) =&gt; &#123;</span><br><span class="line">              _this.$alert(&#x27;操作成功&#x27;, &#x27;提示&#x27;, &#123;</span><br><span class="line">                confirmButtonText: &#x27;确定&#x27;,</span><br><span class="line">                callback: action =&gt; &#123;</span><br><span class="line">                  _this.$router.push(&quot;/blogs&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            console.log(&#x27;error submit!!&#x27;);</span><br><span class="line">            return false;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>逻辑依然简单，校验表单，然后点击按钮提交表单，注意头部加上Authorization信息，返回结果弹窗提示操作成功，然后跳转到博客列表页面。emm，和写ajax没啥区别。熟悉一下vue的一些指令使用即可。<br>然后因为编辑和添加是同一个页面，所以有了create()方法，比如从编辑连接&#x2F;blog&#x2F;7&#x2F;edit中获取blogId为7的这个id。然后回显博客信息。获取方式是const blogId &#x3D; this.$route.params.blogId。</p>
<p>对了，mavon-editor因为已经全局注册，所以我们直接使用组件即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mavon-editor v-model=&quot;editForm.content&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下：<br><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/61c514b1b68c4cf1b07a87b51eacd8bf.png" alt="图片"></p>
<h3 id="11、博客详情"><a href="#11、博客详情" class="headerlink" title="11、博客详情"></a>11、博客详情</h3><p>博客详情中需要回显博客信息，然后有个问题就是，后端传过来的是博客内容是markdown格式的内容，我们需要进行渲染然后显示出来，这里我们使用一个插件markdown-it，用于解析md文档，然后导入github-markdown-c，所谓md的样式。</p>
<p>方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用于解析md文档</span><br><span class="line">cnpm install markdown-it --save</span><br><span class="line"># md样式</span><br><span class="line">cnpm install github-markdown-css</span><br></pre></td></tr></table></figure>

<p>然后就可以在需要渲染的地方使用：</p>
<ul>
<li>views\BlogDetail.vue</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;m-container&quot;&gt;</span><br><span class="line">    &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">    &lt;div class=&quot;mblog&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123; blog.title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;el-link icon=&quot;el-icon-edit&quot; v-if=&quot;ownBlog&quot;&gt;&lt;router-link :to=&quot;&#123;name: &#x27;BlogEdit&#x27;, params: &#123;blogId: blog.id&#125;&#125;&quot;&gt;编辑&lt;/router-link&gt;&lt;/el-link&gt;</span><br><span class="line">      &lt;el-divider&gt;&lt;/el-divider&gt;</span><br><span class="line">      &lt;div class=&quot;content markdown-body&quot; v-html=&quot;blog.content&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  import &#x27;github-markdown-css/github-markdown.css&#x27; // 然后添加样式markdown-body</span><br><span class="line">  import Header from &quot;@/components/Header&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;BlogDetail&quot;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Header</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        blog: &#123;</span><br><span class="line">          userId: null,</span><br><span class="line">          title: &quot;&quot;,</span><br><span class="line">          description: &quot;&quot;,</span><br><span class="line">          content: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        ownBlog: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getBlog() &#123;</span><br><span class="line">        const blogId = this.$route.params.blogId</span><br><span class="line">        const _this = this</span><br><span class="line">        this.$axios.get(&#x27;/blog/&#x27; + blogId).then((res) =&gt; &#123;</span><br><span class="line">          console.log(res)</span><br><span class="line">          console.log(res.data.data)</span><br><span class="line">          _this.blog = res.data.data</span><br><span class="line">          var MarkdownIt = require(&#x27;markdown-it&#x27;),</span><br><span class="line">            md = new MarkdownIt();</span><br><span class="line">          var result = md.render(_this.blog.content);</span><br><span class="line">          _this.blog.content = result</span><br><span class="line">          // 判断是否是自己的文章，能否编辑</span><br><span class="line">          _this.ownBlog =  (_this.blog.userId === _this.$store.getters.getUser.id)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      this.getBlog()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>具体逻辑还是挺简单，初始化create()方法中调用getBlog()方法，请求博客详情接口，返回的博客详情content通过markdown-it工具进行渲染。</p>
<p>再导入样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;github-markdown.css&#x27;</span><br></pre></td></tr></table></figure>

<p>然后在content的div中添加class为markdown-body即可哈。<br>效果如下：</p>
<p><img src="https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201117/7244e11b1cbe456daf043f815b9877f8.png" alt="图片"></p>
<p>另外标题下添加了个小小的编辑按钮，通过ownBlog （判断博文作者与登录用户是否同一人）来判断按钮是否显示出来。</p>
<h3 id="12、路由权限拦截"><a href="#12、路由权限拦截" class="headerlink" title="12、路由权限拦截"></a>12、路由权限拦截</h3><p>页面已经开发完毕之后，我们来控制一下哪些页面是需要登录之后才能跳转的，如果未登录访问就直接重定向到登录页面，因此我们在src目录下定义一个js文件：</p>
<ul>
<li>src\permission.js</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import router from &quot;./router&quot;;</span><br><span class="line">// 路由判断登录 根据路由配置文件的参数</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.matched.some(record =&gt; record.meta.requireAuth)) &#123; // 判断该路由是否需要登录权限</span><br><span class="line">    const token = localStorage.getItem(&quot;token&quot;)</span><br><span class="line">    console.log(&quot;------------&quot; + token)</span><br><span class="line">    if (token) &#123; // 判断当前的token是否存在 ； 登录存入的token</span><br><span class="line">      if (to.path === &#x27;/login&#x27;) &#123;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next(&#123;</span><br><span class="line">        path: &#x27;/login&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>通过之前我们再定义页面路由时候的的meta信息，指定requireAuth: true，需要登录才能访问，因此这里我们在每次路由之前（router.beforeEach）判断token的状态，觉得是否需要跳转到登录页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/blog/add&#x27;, // 注意放在 path: &#x27;/blog/:blogId&#x27;之前</span><br><span class="line">  name: &#x27;BlogAdd&#x27;,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    requireAuth: true</span><br><span class="line">  &#125;,</span><br><span class="line">  component: BlogEdit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们再main.js中import我们的permission.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;./permission.js&#x27; // 路由拦截</span><br></pre></td></tr></table></figure>

<h3 id="13、前端总结"><a href="#13、前端总结" class="headerlink" title="13、前端总结"></a>13、前端总结</h3><p>ok，基本所有页面就已经开发完毕啦，css样式信息我未贴出来，大家直接上github上clone下来查看。</p>
<h2 id="项目大总结"><a href="#项目大总结" class="headerlink" title="项目大总结"></a>项目大总结</h2><p>好啦，项目先到这里，花了3天半录制了一套对应的视频，记得去看，给我三连哇。</p>
<p>项目代码：<a href="https://github.com/MarkerHub/vueblog">https://github.com/MarkerHub/vueblog</a></p>
<p>项目视频：<a href="https://www.bilibili.com/video/BV1PQ4y1P7hZ/">https://www.bilibili.com/video/BV1PQ4y1P7hZ/</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>反射工具包JOOR、Hutool与原生反射对比</title>
    <url>/post/a9c4edf1.html</url>
    <content><![CDATA[<h2 id="三者代码量的比较"><a href="#三者代码量的比较" class="headerlink" title="三者代码量的比较"></a>三者代码量的比较</h2><p>在分析比较三者之前，我们先比较直观的通过代码量来看看三者之间的区别。</p>
<p>我们首先看一段反射的例子。</p>
<p><strong>原生反射实现</strong><br><img src="https://img-blog.csdnimg.cn/ecbde742fdec40f4bec378ebe447997d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>JOOR实现</strong><br><img src="https://img-blog.csdnimg.cn/d5a0e9f564d747a887949b605688cf5e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>Hutool实现</strong><br><img src="https://img-blog.csdnimg.cn/c47fe5491a44416c9395708695895392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>首先从主观上来看JOOR和Hutool在api层面都精简了很多，并且对异常进行了封装，不强制捕获，而JOOR在Hutool的基础上又支持了链式编程。</p>
<span id="more"></span>

<h2 id="JOOR主要API"><a href="#JOOR主要API" class="headerlink" title="JOOR主要API"></a>JOOR主要API</h2><p>那么我们来看下JOOR的主要API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoorExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Kale kale;</span><br><span class="line">        <span class="comment">// 【创建类】</span></span><br><span class="line">        kale = Reflect.onClass(Kale.class).create().get(); <span class="comment">// 无参数</span></span><br><span class="line"><span class="comment">//        kale = Reflect.on(Kale.class).create(&quot;kale class name&quot;).get();// 有参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&gt; class name = &quot;</span> + kale.getClass());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 【调用方法】</span></span><br><span class="line">        Reflect.on(kale).call(<span class="string">&quot;setName&quot;</span>,<span class="string">&quot;调用setName&quot;</span>);<span class="comment">// 多参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用方法：name = &quot;</span> + Reflect.on(kale).call(<span class="string">&quot;getName&quot;</span>));<span class="comment">// 无参数</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 【得到变量】</span></span><br><span class="line">        name = Reflect.on(kale).field(<span class="string">&quot;name&quot;</span>).get();<span class="comment">// 复杂</span></span><br><span class="line">        name = Reflect.on(kale).get(<span class="string">&quot;name&quot;</span>);<span class="comment">// 简单</span></span><br><span class="line">        System.out.println(<span class="string">&quot;得到变量值： name = &quot;</span> + name);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 【设置变量的值】</span></span><br><span class="line">        Reflect.on(kale).set(<span class="string">&quot;className&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;设置变量的值： name = &quot;</span> + kale.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;设置变量的值： name = &quot;</span> + Reflect.on(kale).set(<span class="string">&quot;className&quot;</span>, <span class="string">&quot;hello2&quot;</span>).get(<span class="string">&quot;className&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/097662c90f8349a498d612666e371537.png" alt="在这里插入图片描述"></p>
<p>可以看出JOOR内置了set和get方法供我们调用，可以直接获得某些属性的值，而链式编程也极大地简化了开发。</p>
<h2 id="JOOR是否支持java原生的几种方式-全类名，对象实例，类的class对象-获得反射对象呢？"><a href="#JOOR是否支持java原生的几种方式-全类名，对象实例，类的class对象-获得反射对象呢？" class="headerlink" title="JOOR是否支持java原生的几种方式(全类名，对象实例，类的class对象)获得反射对象呢？"></a>JOOR是否支持java原生的几种方式(全类名，对象实例，类的class对象)获得反射对象呢？</h2><p>由上面的例子我们已知JOOR支持根据对象的实例获得反射对象。</p>
<p>再来看看下面的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">world</span> <span class="operator">=</span> onClass(<span class="string">&quot;java.lang.String&quot;</span>)  <span class="comment">// on后面放入类的全名，这里是String类</span></span><br><span class="line">        .create(<span class="string">&quot;Hello World&quot;</span>) <span class="comment">// 将字符串“Hello World”，传入构造方法中</span></span><br><span class="line">        .call(<span class="string">&quot;substring&quot;</span>, <span class="number">6</span>)  <span class="comment">// 执行subString这个方法，并且传入6作为参数</span></span><br><span class="line">        .call(<span class="string">&quot;toString&quot;</span>)      <span class="comment">// 执行toString方法</span></span><br><span class="line">        .get();                <span class="comment">// 得到包装好的类，这里是一个String对象</span></span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> onClass(<span class="string">&quot;java.lang.String&quot;</span>)</span><br><span class="line">        .create(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">        .as(StringProxy.class) <span class="comment">// 为包装类建立一个代理</span></span><br><span class="line">        .substring(<span class="number">6</span>);         <span class="comment">// 访问代理方法</span></span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> onClass(String.class)</span><br><span class="line">        .create(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">        .as(StringProxy.class) <span class="comment">// 为包装类建立一个代理</span></span><br><span class="line">        .substring(<span class="number">6</span>);         <span class="comment">// 访问代理方法</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">System.out.println(world);</span><br><span class="line">System.out.println(substring);</span><br><span class="line">System.out.println(string);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/979e078e05b4467f846ac334d0550caf.png" alt="在这里插入图片描述"></p>
<p>我们可以看出，通过全类名和类的class对象均可以获得反射对象，同时还支持访问jdk的代理方法。</p>
<h2 id="JOOR实现代理"><a href="#JOOR实现代理" class="headerlink" title="JOOR实现代理"></a>JOOR实现代理</h2><p>我们首先来写一个静态代理，包含代理类和普通类，Waiter是ZhangSan的代理类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Restaurant</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhangSan</span> <span class="keyword">implements</span> <span class="title class_">Restaurant</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃吃吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Waiter</span> <span class="keyword">implements</span> <span class="title class_">Restaurant</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ZhangSan zhangSan;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Waiter</span><span class="params">(ZhangSan zhangSan)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.zhangSan = zhangSan;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;做饭&quot;</span>);</span><br><span class="line">        zhangSan.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;洗碗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现代理的测试<br><img src="https://img-blog.csdnimg.cn/cd6635b2d992443da7dcfe5df8dfcb12.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>这里代理对象必须以构造方法的形式传入对象，对其增强，通过代理实现增强的方法。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上案例可以看出，JOOR由于其链式编程的特性，对代码的简化和可扩展性要强于另外两个，且其包含了一些高级应用，如代理，虽然代码不如原生的精简，但是通俗易懂。</p>
<p>如需使用，则只需引入下列的包，即可使用JOOR或Hutool中的反射封装类。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//JOOR</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jooq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joor-java-8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">//Hutool</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>具体如何使用可根据实际情况灵活选择。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CODEX为你的项目编制一套代码库目录/索引</title>
    <url>/post/d232be0e.html</url>
    <content><![CDATA[<h2 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h2><p>本文来自一片项目重构文章的启发，该文章作者一整年经历了 3 个代码十分混乱的项目，最大的收获就是摸索出了一个梳理烂代码的最佳实践——CODEX。</p>
<p>原文路径：<a href="https://mp.weixin.qq.com/s/JXRruyOvVtj6ykV1J6arSQ">一个技术总监的忠告：精通那么多技术为何还是做不好一个项目？</a>.</p>
<p>文章作者的本意是重构项目时便于梳理项目结构提出的一个活的源代码索引。</p>
<p>然而对于一些实践，借鉴了前者的经验，整理了一套基于idea的CODEX，可以在编写代码的时候按照规范将注释以特定形式输入，达成一个自动生成索引的功能，方便定位代码功能与位置。</p>
<span id="more"></span>

<h2 id="增加索引标签"><a href="#增加索引标签" class="headerlink" title="增加索引标签"></a>增加索引标签</h2><p>首先，我们可以为索引增加一个特定的标签，类似于todo，并且统一约定这个标签，随着开发者将注释随着代码进行提交的时候，将标签也会一同带上，这样另一个人在拉取代码的时候就会很清楚的了解到这个项目结构目录。<br><img src="https://img-blog.csdnimg.cn/dba33e9c57ca4cc6879d2f47834126d7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后基于每个功能的分解步骤进行注释的编写<br><img src="https://img-blog.csdnimg.cn/d942829899144aa2a5da614f4457185b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后查看下方的todo列表<br><img src="https://img-blog.csdnimg.cn/a22a13e6462f4a2198c3570a2eeac85c.png" alt="在这里插入图片描述"><br>过滤todo信息<br><img src="https://img-blog.csdnimg.cn/e3ac5dda206945c3b4e32387dcaaab66.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/09364792184649e683eb47beae58a46e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就可以看到完整的codex项目索引了。</p>
<p>这种方式可以快速的查询到问题，一方面可以使新人快速了解各个结构之间的关系和功能分布，另一方面可以在出现问题的时候快速定位代码位置，便于修改。</p>
<h2 id="生成markdown"><a href="#生成markdown" class="headerlink" title="生成markdown"></a>生成markdown</h2><p>进一步的，如果在 CODEX 中添加 Markdown 关键字，甚至可以将导出的 CODEX 简单加工后，变成一张业务逻辑的 Sequence 序列图，如下所示。<br><img src="https://img-blog.csdnimg.cn/4e3361b90ac948a9879196aa37043db4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>结合业务逻辑，我们再来看一下，只需将每一步操作记录下来，简单的处理下便可得到一个项目结构图。<br><img src="https://img-blog.csdnimg.cn/1e7d2949af8340c692e8f3978cdb8320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上图为例，我们将必要注释记录清楚稍作加工便可形成下图所示图形。<br><img src="https://img-blog.csdnimg.cn/fc1ac18eee1742ff9321db0899aef53e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>这样就可以极大的方便了我们梳理项目结构和接手新项目的学习成本。</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>screw 一颗螺丝钉的使命</title>
    <url>/post/9e3b75c0.html</url>
    <content><![CDATA[<h1 id="screw介绍"><a href="#screw介绍" class="headerlink" title="screw介绍"></a>screw介绍</h1><p>对于screw，我们来看看作者是怎么定义它的。</p>
<blockquote>
<p>关于名字，想一个太难了，好在我这个聪明的小脑瓜灵感一现，怎么突出它的小，但重要呢？从小就学过雷锋的螺丝钉精神，摘自雷锋日记：虽然是细小的螺丝钉，是个细微的小齿轮，然而如果缺了它，那整个的机器就无法运转了，慢说是缺了它，即使是一枚小螺丝钉没拧紧，一个小齿轮略有破损，也要使机器的运转发生故障的…，感觉自己写的这个工具，很有这意味，虽然很小、但是开发中缺了它还不行，于是便起名为screw（螺丝钉）。</p>
</blockquote>
<h1 id="screw的特点"><a href="#screw的特点" class="headerlink" title="screw的特点"></a>screw的特点</h1><blockquote>
<p>简洁、轻量、设计良好<br>多数据库支持<br>多种格式文档<br>灵活扩展<br>支持自定义模板</p>
</blockquote>
<span id="more"></span>


<h1 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h1><blockquote>
<p>MySQL<br> MariaDB<br> TIDB<br> Oracle<br> SqlServer<br> PostgreSQL<br> Cache DB（2016）<br> H2 （开发中）<br> DB2 （开发中）<br> HSQL （开发中）<br> SQLite（开发中）<br> 瀚高（开发中）<br> 达梦 （开发中）<br> 虚谷 （开发中）<br> 人大金仓（开发中）<br>文档生成支持<br> html<br> word<br> markdown</p>
</blockquote>
<h1 id="screw的简单使用"><a href="#screw的简单使用" class="headerlink" title="screw的简单使用"></a>screw的简单使用</h1><blockquote>
<p>通过maven插件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- HikariCP --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--mysql driver--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--username--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>&gt;</span>username<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--password--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--driver--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--jdbc url--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">jdbcUrl</span>&gt;</span>jdbc:mysql://(数据库ip):3306/(数据库名)<span class="tag">&lt;/<span class="name">jdbcUrl</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--生成文件类型--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileType</span>&gt;</span>WORD/MD/HTML(三选一)<span class="tag">&lt;/<span class="name">fileType</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--打开文件输出目录--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">openOutputDir</span>&gt;</span>true<span class="tag">&lt;/<span class="name">openOutputDir</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--生成模板--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">produceType</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">produceType</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--文档名称 为空时:将采用[数据库名称-描述-版本号]作为文档名称--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileName</span>&gt;</span>测试文档名称<span class="tag">&lt;/<span class="name">fileName</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>&gt;</span>数据库文档生成<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据库文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>插件执行</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/6fe7b69b26d141d6840d35b10927b4d9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>生成完成后自动跳转到文件目录<br><img src="https://img-blog.csdnimg.cn/7d4081b706634600bf9339c1a5d4cda0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>如需自定义格式等复杂功能可参考链接<br><a href="https://gitee.com/leshalv/screw#https://www.bilibili.com/video/av456302504/">screw</a></p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优化代码中的if-else/switch</title>
    <url>/post/1a3a1ad3.html</url>
    <content><![CDATA[<h3 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h3><p><strong>示例（包含异步+并发+线程池+反射+枚举+工厂模式+策略模式+单例模式+代理模式）</strong></p>
<blockquote>
<p>模拟场景：有一群人分别属于A,B两个部门，此时A和B部门对于成年的标准不同，A部门认为大于18岁算成年，B部门认为大于等于18岁算成年，找出所有成年人。</p>
</blockquote>
<blockquote>
<p>抽象场景：根据前端系统提供的一个策略执行一套组合操作，由于各个组合之间千变万化，且耗时较长，应采取并发进行不同的单步操作，且可能存在不同线程之间的结果依赖，最终需要满足可配置性，可扩展性，需满足开闭原则，且需要对单步结果和汇总结果进行统计处理，熔断降级，并记录成功状态或失败原因等情况。</p>
</blockquote>
<blockquote>
<p>话不多说，直接上代码~~~</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编写工具类获取SpringApplicationContext</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        SpringContextUtil.applicationContext = applicationContext;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>



<blockquote>
<p>线程池</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolUtil</span> &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> ThreadPoolExecutor threadPool;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        threadPool = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">5</span>,</span><br><span class="line">                Runtime.getRuntime().availableProcessors(),</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()    <span class="comment">//如果队列满了，还有线程进来，就不处理，抛出异常</span></span><br><span class="line"><span class="comment">//                new ThreadPoolExecutor.CallerRunsPolicy()    //哪来的去哪里，一般由main线程执行</span></span><br><span class="line"><span class="comment">//                new ThreadPoolExecutor.DiscardPolicy()    //队列满了不抛出异常，丢掉任务</span></span><br><span class="line"><span class="comment">//                new ThreadPoolExecutor.DiscardOldestPolicy()    //队列满了尝试跟最早的竞争，不会抛出异常</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//允许核心线程使用完关闭</span></span><br><span class="line">        threadPool.allowCoreThreadTimeOut(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title function_">getThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一些准备的工具类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">findManByDepartment</span><span class="params">(Person person)</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//B部门认为大于等于18岁算成年</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Department</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findManByDepartment</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person.getAge() &gt;= <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//A部门认为大于18岁算成年</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findManByDepartment</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person.getAge() &gt; <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DepartmentFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line">    INSTANCE;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Department <span class="title function_">creatInstance</span><span class="params">(Class&lt;? extends Department&gt; clazz)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PersonEnum</span> &#123;</span><br><span class="line"> </span><br><span class="line">        XIAOMING(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;A&quot;</span>),</span><br><span class="line">        XIAOHUA(<span class="string">&quot;小华&quot;</span>, <span class="string">&quot;B&quot;</span>),</span><br><span class="line">        XIAOGONG(<span class="string">&quot;小红&quot;</span>, <span class="string">&quot;A&quot;</span>),</span><br><span class="line">        DAMING(<span class="string">&quot;大明&quot;</span>, <span class="string">&quot;B&quot;</span>),</span><br><span class="line">        CHAOMING(<span class="string">&quot;超明&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> String code;</span><br><span class="line">        <span class="keyword">private</span> String msg;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 枚举类型转换</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> code 需要转换的类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 转换后的类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMsgByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (PersonEnum ele : values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ele.getCode().equals(code)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ele.getMsg();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>supplyAsync是供给型接口，无需传入参数，有返回值，其他的可以类比，此处的whenComplete则是并发处理完成后异步回调需要做的处理。allOf则是等待所有并发完成，join()和get()方法都是用来获取CompletableFuture异步之后的返回值。join()方法抛出的是uncheck异常（即未经检查的异常),不会强制开发者抛出。get()方法抛出的是经过检查的异常，ExecutionException, InterruptedException 需要用户手动处理。<br>此时就可以巧妙地通过一个中间map来进行结果传递。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果采用一发一查的异步查询模式可将整过过程异步处理，或者使用定时任务定时扫表进行数据库结果记录等方式提高效率</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">METHOD</span> <span class="operator">=</span> <span class="string">&quot;findManByDepartment&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;小明&quot;</span>).age(<span class="number">18</span>).build());</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;小华&quot;</span>).age(<span class="number">17</span>).build());</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;小红&quot;</span>).age(<span class="number">16</span>).build());</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;大明&quot;</span>).age(<span class="number">19</span>).build());</span><br><span class="line">        persons.add(Person.builder().name(<span class="string">&quot;超明&quot;</span>).age(<span class="number">20</span>).build());</span><br><span class="line">        System.out.println(persons);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------------奇怪的分割线-------------------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//优化前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;优化前：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">            <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;小明&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> a.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;小华&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> b.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;小红&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> a.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;大明&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> b.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (person.getName().equals(<span class="string">&quot;超明&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">manByDepartment</span> <span class="operator">=</span> a.findManByDepartment(person);</span><br><span class="line">                System.out.println(manByDepartment ? (person + <span class="string">&quot;已成年&quot;</span>) : (person + <span class="string">&quot;未成年&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------------奇怪的分割线-------------------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//优化后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;优化后：&quot;</span>);</span><br><span class="line">        <span class="comment">//并发找出所有成年人,并存入map中</span></span><br><span class="line">        ArrayList&lt;CompletableFuture&lt;Boolean&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ConcurrentHashMap&lt;Person, Boolean&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">            resList.add(CompletableFuture.supplyAsync(() -&gt; findMan(person), ThreadPoolUtil.getThreadPool()).whenComplete((r, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == e) &#123;</span><br><span class="line">                    map.put(person, r);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从map中获取结果</span></span><br><span class="line">        CompletableFuture.allOf(resList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[resList.size()])).whenComplete((r, e) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == e) &#123;</span><br><span class="line">                map.forEach((key, value) -&gt; &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> value ? (key + <span class="string">&quot;已成年&quot;</span>) : (key + <span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).join();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------------奇怪的分割线-------------------------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">findMan</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            ApplicationContext applicationContext = SpringContextUtil.getApplicationContext();</span></span><br><span class="line">            Class&lt;? <span class="keyword">extends</span> <span class="title class_">Department</span>&gt; clazz = (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Department</span>&gt;) Class.forName(PersonEnum.getMsgByCode(person.getName()));</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(METHOD, person.getClass());</span><br><span class="line"><span class="comment">//            flag = (boolean) method.invoke(applicationContext.getBean(clazz), person);</span></span><br><span class="line">            <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> DepartmentFactory.INSTANCE.creatInstance(clazz);</span><br><span class="line">            flag = (<span class="type">boolean</span>) method.invoke(department, person);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210716131521628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>ESB的体系结构</title>
    <url>/post/f3355887.html</url>
    <content><![CDATA[<h2 id="什么是ESB"><a href="#什么是ESB" class="headerlink" title="什么是ESB"></a>什么是ESB</h2><blockquote>
<p>企业服务总线，即ESB全称为Enterprise Service Bus，指的是传统中间件技术与XML、Web服务等技术结合的产物。ESB提供了网络中最基本的连接中枢，是构筑企业神经系统的必要元素。<br>面向服务的体系结构已经逐渐成为IT集成的主流技术。面向服务的体系结构(service-oriented architecture，SOA)是一种软件系统设计方法，通过已经发布的和可发现的接口为终端用户应用程序或其它服务提供服务。</p>
</blockquote>
<h2 id="ESB的产生"><a href="#ESB的产生" class="headerlink" title="ESB的产生"></a>ESB的产生</h2><blockquote>
<p>ESB的产生即是为了解决企业中数据的多样性和协议的复杂性问题。如下图所示，系统与系统之间的数据传输是复杂的，同时又涉及到系统的交互，谁来适配谁就成了一个难题，因此ESB应运而生。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210714144810940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="ESB能够解决的问题"><a href="#ESB能够解决的问题" class="headerlink" title="ESB能够解决的问题"></a>ESB能够解决的问题</h2><blockquote>
<p>如果使用原生的服务调用，谁来适配谁成了一个大难题，谁来主导这次交互就会争论不休，如图所示。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210714145247890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<span id="more"></span>

<blockquote>
<p>如果一个系统接入外部系统，可能接入协议不同，则需要每个写一套适配流程，为了解决这个问题，且最大限度的复用代码，ESB采取了SOA架构，为每个请求方分配一个端口，为每个服务端提供的服务分配一个服务码和场景码供前端调用，此时前端将原来的几套适配流程转为只需要按照ESB的规定进行适配即可。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210714145756739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>我们来看一个简易的ESB流程在整个项目链路中的位置，前端接入自己的系统需要通过ESB，此时我们作为服务方，我们接入其他系统也需要经过ESB，此时我们作为渠道端，即ESB可以理解为沟通整个企业所有系统的一个总线系统。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210714145943534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="ESB的内部结构"><a href="#ESB的内部结构" class="headerlink" title="ESB的内部结构"></a>ESB的内部结构</h2><blockquote>
<p>ESB的内部结构就是通过拆组包，对一种报文进行拆分，拆分成一个个字段，再讲字段定向路由重组发送给后端系统，得到返回后将特定报文在进行拆分成一个个字段，并将字段重组成所需的报文组合返回给前端。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210714150738296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>ESB的内部结构即一个IN端用来处理和前端交互的数据，OUT端用于处理和后端交互的数据，此时多个前端可以复用后端提供给ESB的接口功能，IN和OUT的重合部分则是一个router，正因为有这个router，可以使前端不需要知道后端系统是谁，只需要根据ESB提供的接口调用ESB，然后ESB将数据返回即可。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210714151056848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>正是因为ESB的拆组包的灵活性和适配流程的多样性使得ESB可以适配不同的协议，不同的数据格式，使企业中每个系统通过总线连接起来，实现数据互通。</p>
</blockquote>
<h2 id="ESB的瓶颈与弊端"><a href="#ESB的瓶颈与弊端" class="headerlink" title="ESB的瓶颈与弊端"></a>ESB的瓶颈与弊端</h2><blockquote>
<p>当然ESB也存在一些缺点，虽然它在设计之初定义了不处理业务数据，只进行数据的拆分与组装，但是随着接入系统的增多与业务的复杂性，难免会根据不同的业务对同一系统拆分出不同的适配流程，虽然适配流程可以自由组合，但是也会导致系统越来越臃肿与庞大，难免会进行一些简单的转换操作，这种以一个微服务来管理所有为服务的思想是否可行仍需要等待时间的验证。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2021071415034911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>而且所有系统都接入ESB会导致系统排错比较困难，如上图，任何一个链路挂掉都需要通过ESB进行排查问题。</p>
</blockquote>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>编写自定义的 SpringBoot starter 实现自动装配</title>
    <url>/post/891bfe8a.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><em>记得几年前我在刚开始接触 SpringBoot&#x2F;SpringCloud，就对SpringBoot 如何实现自动装配产生了很大的好奇。但是当时技术能力尚浅，没能对这一方面了解的很透彻，只是在想如果有朝一日我也能写一个 Starter 提供给别人用就好了。最近我准备写一个 Starter。所以这篇博客就来总结一下，什么是 SpringBoot 自动装配以及如何实现自己的 Starter。</em></p>
<span id="more"></span>

<h2 id="什么是-Spring-Boot-的-AutoConfiguration"><a href="#什么是-Spring-Boot-的-AutoConfiguration" class="headerlink" title="什么是 Spring Boot 的 AutoConfiguration"></a>什么是 <strong>Spring Boot 的 AutoConfiguration</strong></h2><h4 id="什么是-SpringBoot-的自动装配"><a href="#什么是-SpringBoot-的自动装配" class="headerlink" title="什么是 SpringBoot 的自动装配"></a>什么是 SpringBoot 的自动装配</h4><p>实际上是类似于 SPI(Java Service Provider Interface) 机制， SpringBoot 在启动的时候会扫描 <code>classpath</code>下面的这个文件 <code>META-INF/spring.factories</code>， 包括所有依赖中的该文件都能够被 SpringBoot 扫描到。然后将文件中配置的类加载到 Spring 容器中，并执行类中定义的操作，比如按需创建更多的 Bean。如下，这是<code>spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories</code> <a href="https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories#L25">🔗</a>中的片段：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<p>该文件中，key 为<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>, value 为<code>org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</code>。 SpringBoot 会去扫描该文件并加载RabbitAutoConfiguration 。这就是 SpringBoot 的自动装配机制。</p>
<p>想要更加深入了解<code>EnableAutoConfiguration</code>是如何工作的、如何读取加载<code>spring.factories</code>，请查看其源码，这里不再详述。</p>
<h4 id="如何实现按需加载"><a href="#如何实现按需加载" class="headerlink" title="如何实现按需加载"></a>如何实现按需加载</h4><p>用<code>RabbitAutoConfiguration</code>举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; RabbitTemplate.class, Channel.class &#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RabbitProperties.class)</span></span><br><span class="line"><span class="meta">@Import(RabbitAnnotationDrivenConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitAutoConfiguration</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p><code>@ConditionalOnClass</code>注解标记了，当加载了<code>RabbitTemplate.class, Channel.class</code>的时候（也就是说当你的 SpringBoot 项目中引入了 Rabbit 的依赖的时候），才去创建该 bean&#x2F;configuration<code>RabbitAutoConfiguration。</code></p>
<p>在 SpringBoot 中，有很多<a href="https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition">类似的注解</a>，可以实现条件加载 bean 的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span></span><br><span class="line"><span class="meta">@ConditionalOnCloudPlatform</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression</span></span><br><span class="line"><span class="meta">@ConditionalOnJava</span></span><br><span class="line"><span class="meta">@ConditionalOnJndi</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span></span><br><span class="line"><span class="meta">@ConditionalOnNotWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span></span><br><span class="line"><span class="meta">@ConditionalOnResource</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate</span></span><br><span class="line"><span class="meta">@ConditionalOnWarDeployment</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br></pre></td></tr></table></figure>

<h2 id="实现自己的-SpringBoot-Starter"><a href="#实现自己的-SpringBoot-Starter" class="headerlink" title="实现自己的 SpringBoot Starter"></a>实现自己的 SpringBoot Starter</h2><p><em>现在我们了解了SpringBoot 的自动装配和按需加载，已经可以开始尝试写一个自定义的 starter 了。</em></p>
<h4 id="首先使用gradle创建一个SpringBoot-项目，引入依赖"><a href="#首先使用gradle创建一个SpringBoot-项目，引入依赖" class="headerlink" title="首先使用gradle创建一个SpringBoot 项目，引入依赖"></a>首先使用gradle创建一个SpringBoot 项目，引入依赖</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter:2.5.3&#x27;</span></span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:2.5.3&#x27;</span></span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.boot:spring-boot-autoconfigure:2.5.3&#x27;</span></span><br><span class="line"></span><br><span class="line">  implementation <span class="string">&#x27;net.logstash.logback:logstash-logback-encoder:6.+&#x27;</span></span><br><span class="line"></span><br><span class="line">  testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.5.2&#x27;</span></span><br><span class="line">  testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.5.2&#x27;</span></span><br><span class="line">  testImplementation(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-test:2.5.3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  annotationProcessor <span class="string">&quot;org.springframework.boot:spring-boot-configuration-processor:2.5.3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code> annotationProcessor &#39;org.springframework.boot:spring-boot-configuration-processor:2.5.3&#39;</code> 可以生成你自定义的 Properties 的 Metadata，这样你就可以在引入这个自定义 starter 之后，在<code>application.properties</code>中像写其他配置一样写自己的自定义配置。参考[这里](<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#configuration-metadata-annotation-processor">Spring Boot Reference Guide</a>)。<a href="https://github.com/Fatezhang/Barrier/blob/master/build.gradle">源码查看</a>。</p>
<h4 id="编写一个spring-factories文件"><a href="#编写一个spring-factories文件" class="headerlink" title="编写一个spring.factories文件"></a>编写一个<code>spring.factories</code>文件</h4><p>在自己的 starter 中编写文件 <code>src/main/resources/META-INF/spring.factories</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.barrier.configuration.BarrierAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<p>上面的代码声明了，在 SpringBoot 加载的时候，加载自定义自动配置类<code>BarrierAutoConfiguration</code>。</p>
<p><code>BarrierAutoConfiguration</code> 如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(Marker.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;BarrierProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BarrierAutoConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>@ConditionalOnBean(Marker.class)</code> 标记了这个 configuration 只有在 bean <code>Marker</code> 存在的时候才被加载到 Spring Context 中。那么 Marker 类是什么呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnableBarrierMarkerConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Marker <span class="title function_">barrierMarker</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Marker</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Marker</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Marker</span><span class="params">()</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;BarrierAutoConfiguration: enableBarrierMarkerBean creating...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Marker 类是一个标记类，在<code>EnableBarrierMarkerConfiguration</code>中被创建出来，加入到 SpringContext 中去的。那么何时这个 configuration 才会被加载呢？或者说我们如何控制该 configuration 被加载？</p>
<h4 id="创建一个注解实现按需开启-starter"><a href="#创建一个注解实现按需开启-starter" class="headerlink" title="创建一个注解实现按需开启 starter"></a>创建一个注解实现按需开启 starter</h4><p>Spring 提供了一个注解 <code>@Import</code>，可以提供使用者动态的去加载指定的 bean，尤其是去加载 configuration。</p>
<p>首先你要了解一个前提，SpringBoot 或者 Spring 是无法加载一个外部依赖中的 bean 的。所以我们在自己的 SpringBoot 项目中使用这个 starter 中，在SpringBoot 启动类中这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(EnableBarrierMarkerConfiguration.class)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，我们在自己的项目中就能够注入 Marker 这个 bean 了，也就间接地开启了<code>BarrierAutoConfiguration</code>。</p>
<p>但是这样写不够优雅，我们可以创建一个注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;EnableBarrierMarkerConfiguration.class&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="meta">@interface</span> EnableBarrier &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在注解中使用<code>@Import</code>，导入这个 configuration。 </p>
<h4 id="在-SpringBoot-项目中使用"><a href="#在-SpringBoot-项目中使用" class="headerlink" title="在 SpringBoot 项目中使用"></a>在 SpringBoot 项目中使用</h4><p>这样，在 SpringBoot 项目中，引入我们自定义的 starter 之后，使用<code>@EnableBarrier</code>就能开启我们自己的 starter 的功能了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableBarrier</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>最后，自定义 starter 的源码可以看<a href="https://github.com/Fatezhang/Barrier">这里</a>。</strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringBoot starter</tag>
      </tags>
  </entry>
  <entry>
    <title>我的无奈的来源，正是他</title>
    <url>/post/c7f9efd1.html</url>
    <content><![CDATA[<p>多年以前，我遇到了这么一个人。在长期的相处于磨合中，我渐渐的了解他，又渐渐的开始厌恶他。</p>
<p>在我看来他存在懒惰、不上进等诸多问题。我厌恶他的没有担当，面对一切事物只会去逃避。</p>
<p>我厌恶他做事情犹豫不决，不愿意向自己渴望的东西迈出脚步，痴望着上天能够怜悯他，将他喜欢的事物和人送到他手中。</p>
<p>性格上的懦弱、怯惧，以至于平平挫折，却自视为被生活沉重打击。</p>
<p>他把年华用以虚度的拙劣手段，对于青春与未来的人生所持有消极的态度，也曾令我屡屡失望、但同时我也是怜悯他的，我经历过他不被重视时的落寞，不被需要时的孤独，这种体验很糟糕，清楚的提醒着我，他正在难过。</p>
<p>他很脆弱，对于旁人的冷笑和嘲讽极度敏感。</p>
<p>我来到这个世界并无多么重大的意义，生活赋予我的第一要务就是要照顾好他。</p>
<p>于是我必须细心的感知他的大脑波动，替他整理悲苦、负面的情绪害怕他迷失，害怕他放弃只能一遍又一遍的安慰，一遍又一遍的强调。</p>
<p>在明知无望的情况下，还是想他能够逐渐的快乐起来。</p>
<p>但是我好无奈。</p>
<p>我无奈的来源于：我正是他。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>NestJS 实践记录（一）：项目创建</title>
    <url>/post/ccdb51fd.html</url>
    <content><![CDATA[<p>最近想写一些功能接口给自己用，平常写前端比较多，我自己可怜的小服务器用 java 资源不是很充足，所以准备还是用 Node.js 来实现后端，选用 NestJS 作为本次开发的后端框架。</p>
<span id="more"></span>

<blockquote>
<p>Nest (NestJS) 是一个用于构建高效、可扩展的 Node.js 服务器端应用程序的开发框架。它利用 JavaScript 的渐进增强的能力，使用并完全支持 TypeScript （仍然允许开发者使用纯 JavaScript 进行开发），并结合了 OOP （面向对象编程）、FP （函数式编程）和 FRP （函数响应式编程）。</p>
<p>在底层，Nest 构建在强大的 HTTP 服务器框架上，例如 Express （默认），并且还可以通过配置从而使用 Fastify ！</p>
<p>Nest 在这些常见的 Node.js 框架 (Express&#x2F;Fastify) 之上提高了一个抽象级别，但仍然向开发者直接暴露了底层框架的 API。这使得开发者可以自由地使用适用于底层平台的无数的第三方模块。</p>
</blockquote>
<p>NestJS 是我最近才了解到的一个非常流行的 Node.js 框架，用起来很有一种在编写 Spring Boot 的熟悉感，又能使用我更加熟悉的 JavaScript 来进行编写，是对我来说比较理想的后端框架。在此记录下实践的过程。</p>
<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>本机环境：</p>
<ul>
<li>Node.js: 14.17.0</li>
<li>npm: 7.11.2</li>
<li>NestJS: 8.0.0</li>
<li>TypeScirpt: 4.3.5</li>
</ul>
<p>在安装好 Node.js 后，在全局安装 <code>NestJS cli</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @nestjs/cli</span><br></pre></td></tr></table></figure>

<p>运行如下命令创建项目，<code>nest-cli</code>会根据参数初始化项目文件。接着会让你选择想用的包管理器，<code>npm</code>或<code>yarn</code>，我选择了<code>yarn</code>，因为我感觉国内即使换了源，<code>yarn</code> 似乎也更快一些。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest new project-name</span><br></pre></td></tr></table></figure>

<p>完成安装后就会显示如下信息。</p>
<p><img src="https://img.iszy.xyz/20210724195818.png"></p>
<p>目录结构可以参考 <a href="https://github.com/nestjs/typescript-starter">Nest framework TypeScript starter repository</a>，项目就是基于这个创建的。我们可以看到这个模板使用了 TypeScript 语言，NestJS 也是可以基于 JavaScript 运行的，创建时加上参数配置如下所示即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest new project-name -l JavaScript</span><br></pre></td></tr></table></figure>

<p>更多参数可以参考 cli 的帮助，<code>nest new --help</code>。</p>
<p><img src="https://img.iszy.xyz/20210724201411.png"></p>
<p>运行<code>yarn start</code>后，NestJS 就会开始运行，当显示<code>Nest application successfully started</code>时，即表示启动完成。</p>
<p><img src="https://img.iszy.xyz/20210724201050.png"></p>
<p>此时可以访问 <a href="http://localhost:3000/">http://localhost:3000</a>，就能看到默认返回的 <code>Hello World!</code> 了。</p>
<p><img src="https://img.iszy.xyz/20210724201226.png"></p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>初始项目结构如下，我们主要关注 <code>src</code> 目录</p>
<p><img src="https://img.iszy.xyz/20210725123352.png"></p>
<p>初始内容由一个入口文件 <code>main.ts</code>、用于定义路由的 controller 文件<code>app.controller.ts</code>、用于具体方法实现的 provider 文件 <code>app.service.ts</code>、以及一个将 controller 和 service 文件关联在一起的 module 文件组成。</p>
<p>打开入口文件<code>src/main.ts</code>，内容如下。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./app.module&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure>

<p>可以看到使用 Nest 工厂函数创建了 <code>AppModule</code>，然后将应用监听到了 3000 端口，现在应用将在 3000 端口接受 HTTP 请求。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./app.controller&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./app.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>在根模组 AppModule 中，注册了 AppController 和 AppService。<strong>值得注意的是，provider 需要在 module 中注册后才能为其他 provider 或者 controller 提供服务。</strong></p>
<p>在 AppController 中，添加了默认的 Get 路由 getHello，通过引入的 provider AppService 来实际提供逻辑代码。因为没有指定路由的路径，那就是默认的根路径，也就是我们访问的<code>http://localhost:3000/</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.controller.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./app.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">appService</span>.<span class="title function_">getHello</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 provider AppService 中，我们可以看到这个<code>getHello</code>方法就是返回了一个<code>Hello World!</code>，也是就我们之前访问<code>http://localhost:3000/</code>看到的内容。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppService</span> &#123;</span><br><span class="line">  <span class="title function_">getHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里基本可以了解了 NestJS 的设计理念，主要就是由<code>Controller</code>、<code>Provider</code>和<code>Module</code>组成成模组来提供服务。</p>
<ul>
<li>Controller: 控制器，提供 Api 接口，定义路由等，不实际处理业务。</li>
<li>Provider: 也就是<code>Service</code>，为<code>Controller</code>或其他<code>Provider</code>提供服务，在这里编写实际的处理代码。</li>
<li>Module: 负责连接<code>Provider</code>和<code>Controller</code>，类似于命名空间的概念，在同一个<code>Module</code>中注册过的 <code>Provider</code>才能引入并提供服务。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>NestJS</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>写博客有什么用？</title>
    <url>/post/1e5ae654.html</url>
    <content><![CDATA[<p>好久没写过一篇正经的技术博客了，也好久没有静下心来敲几行工作之外的代码了。</p>
<p>今天打开自己的博客看了一眼，突然有些反胃！😫我好像对自己的博客审美疲劳了。</p>
<p>产生的影响就是自己越来越不想写博客，没有整理笔记的欲望了。但是看了几个朋友分享的一些不错主题的他人博客，觉得也许换一种博客主题可能写博客的热情会高一点。</p>
<p>但是一想到换个主题，自己又要再新主题上魔改无数，又头大了。谢特！我真纠结。</p>
<p>说到写博客，突然想问自己一句，写了有人看吗？真的有人会看别人的博客吗？</p>
<p>或者换个问题，写了是给自己看的还是希望分享给别人？其实整理笔记、写博客都是巩固自己学习内容的方式吧，想要 develop others，属实想多了。</p>
<p>最近逛技术论坛，例如掘金，得到一个结论：当前国内互联网公司压榨下的搬砖码农，根本没时间好好看看别人写的东西，看了也不会思考。看完别人写的博客，在博客底下评论一句：“学到了”、“收藏了”。没有一个人站出来讨论一下，更不用说指出博客中的错误了。好像大家都一起进入了一个夸夸群。</p>
<p>我觉得对于我来说，没有经过自己验证的理论，我是永远持怀疑态度的。我永远都不会直接接受别人的想法，也许嘴上同意，心里也不会这样想！我甚至很反感那些莫名其妙就想要强加给你一个自己觉得对的理论的人，没有说服我的理由，只会让我更加讨厌。</p>
<p>一想到在网络上或者生活中看到别人很轻易地就能对别人说的东西去附和，我就觉得这个世界不适合我。每个人都活的太虚伪。</p>
<p>你要是说什么就是什么，那我的存在岂不是很没有意义？</p>
<span id="more"></span>

]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>你还不会用Hystrix实现服务降级吗?</title>
    <url>/post/921e143f.html</url>
    <content><![CDATA[<h1 id="一：需求分析"><a href="#一：需求分析" class="headerlink" title="一：需求分析"></a>一：需求分析</h1><p>如果一个服务不可用，例如网络延迟或者流量激增，则会影响依赖于这个服务的其他服务，导致雪崩效应。为了解决这种雪崩效应，使用熔断器Hystrix, 实现服务降级，服务限流的功能，并且为client提供健康的页面状态。</p>
<h1 id="二：解决方案"><a href="#二：解决方案" class="headerlink" title="二：解决方案"></a>二：解决方案</h1><p>使用熔断器或者服务降级，使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。</p>
<h2 id="fallback和fallbackFactory区别"><a href="#fallback和fallbackFactory区别" class="headerlink" title="fallback和fallbackFactory区别"></a>fallback和fallbackFactory区别</h2><p>需要得到导致回退触发的原因需要使用fallbackFactory</p>
<h2 id="配置中心开启Hystrix功能"><a href="#配置中心开启Hystrix功能" class="headerlink" title="配置中心开启Hystrix功能"></a>配置中心开启Hystrix功能</h2><p>在application.yml 或者Apollo中开启Hystrix功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  OkToRetryOnAllOperations: <span class="literal">false</span> #对所有操作请求都进行重试,默认<span class="literal">false</span></span><br><span class="line">  ReadTimeout: <span class="number">5000</span>   #负载均衡超时时间，默认值<span class="number">5000</span></span><br><span class="line">  ConnectTimeout: <span class="number">2000</span> #ribbon请求连接的超时时间，默认值<span class="number">2000</span></span><br><span class="line">  MaxAutoRetries: <span class="number">0</span>     #对当前实例的重试次数，默认<span class="number">0</span></span><br><span class="line">  MaxAutoRetriesNextServer: <span class="number">1</span> #对切换实例的重试次数，默认<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    <span class="keyword">default</span>: #<span class="keyword">default</span>全局有效，service id指定应用有效</span><br><span class="line">      execution:</span><br><span class="line">        timeout:</span><br><span class="line">          #如果enabled设置为<span class="literal">false</span>，则请求超时交给ribbon控制,为<span class="literal">true</span>,则超时作为熔断根据</span><br><span class="line">          enabled: <span class="literal">true</span></span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: <span class="number">1000</span> #断路器超时时间，默认1000ms</span><br><span class="line"></span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>如果hystrix.command.default.execution.timeout.enabled为true,则会有两个执行方法超时的配置,一个就是ribbon的ReadTimeout,一个就是熔断器hystrix的timeoutInMilliseconds, 此时谁的值小谁生效</li>
<li>如果hystrix.command.default.execution.timeout.enabled为false,则熔断器不进行超时熔断,而是根据ribbon的ReadTimeout抛出的异常而熔断,也就是取决于ribbon</li>
<li>ribbon的ConnectTimeout,配置的是请求服务的超时时间,除非服务找不到,或者网络原因,这个时间才会生效</li>
<li>ribbon还有MaxAutoRetries对当前实例的重试次数,MaxAutoRetriesNextServer对切换实例的重试次数, 如果ribbon的ReadTimeout超时,或者ConnectTimeout连接超时,会进行重试操作</li>
<li>由于ribbon的重试机制,通常熔断的超时时间需要配置的比ReadTimeout长,ReadTimeout比ConnectTimeout长,否则还未重试,就熔断了</li>
<li>为了确保重试机制的正常运作,理论上（以实际情况为准）建议hystrix的超时时间为:(1 + MaxAutoRetries + MaxAutoRetriesNextServer) * ReadTimeout</li>
<li>(以上太长可不看，如果按ribbon默认的推荐设置看，算出来是10s，但不使用ribbon重试机制的话则为5s，但hystrix默认为1s，因此建议测试环境5s，生产环境机器性能各方面相对较高可设置为3s左右)</li>
</ul>
</blockquote>
<span id="more"></span>



<h2 id="添加fallback属性"><a href="#添加fallback属性" class="headerlink" title="添加fallback属性"></a>添加fallback属性</h2><p>在接口中的<code>@FeignClient</code>注解上添加fallback属性来配置指定的处理类。</p>
<p>在热点服务上添加指定fallback类，返回指定内容:</p>
<p>在RPC调用的类上添加指定fallback类，在服务熔断的时候返回fallback类中的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CIM-BASE-ZUUL&quot;, url = &quot;$&#123;feign.url.cim-base-zuul&#125;&quot;, fallbackFactory = CimBaseZuulServiceFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CimBaseZuulService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有设备</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cim/api-service/find/deviceTypes&quot;)</span></span><br><span class="line">    CimBaseZuulResponse&lt;List&lt;DeviceBaseInfoBO&gt;&gt; <span class="title function_">getAllDeviceInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建回调类"><a href="#创建回调类" class="headerlink" title="创建回调类"></a>创建回调类</h2><p>热点服务的回掉类继承FallbackFactory：</p>
<p>创建<code>UgmdpServiceFallback</code>类继承于FallbackFactory<T>实现回调的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CimBaseZuulServiceFallback</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;CimBaseZuulService&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_CIM</span> <span class="operator">=</span> <span class="string">&quot;cim&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GET_ALL_DEVICE_INFO</span> <span class="operator">=</span> <span class="string">&quot;/cim/api-service/find/deviceTypes&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CimBaseZuulService <span class="title function_">create</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CimBaseZuulService</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> CimBaseZuulResponse&lt;List&lt;DeviceBaseInfoBO&gt;&gt; <span class="title function_">getAllDeviceInfo</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> HystrixTimeoutException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>(ResponseCode.FEIGN_TIMEOUT, SYSTEM_CIM, GET_ALL_DEVICE_INFO);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>(ResponseCode.DEGRADATION);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeoutException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeoutException</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeoutException</span><span class="params">(ResponseCode exception)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(exception.getMsg());</span><br><span class="line">        <span class="built_in">this</span>.code = exception.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = exception.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeoutException</span><span class="params">(ResponseCode exception,String... str)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(exception.getMsg());</span><br><span class="line">        <span class="built_in">this</span>.code = exception.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = String.format(exception.getMsg(),str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="全局异常捕获"><a href="#全局异常捕获" class="headerlink" title="全局异常捕获"></a>全局异常捕获</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;HystrixRuntimeException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> RdfaResult&lt;Serializable&gt; <span class="title function_">timeoutException</span><span class="params">(HystrixRuntimeException exception)</span> &#123;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">cause</span> <span class="operator">=</span> (Exception) exception.getFallbackException().getCause().getCause();</span><br><span class="line">        log.warn(<span class="string">&quot;服务调用超时&quot;</span>, cause);</span><br><span class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> TimeoutException)&#123;</span><br><span class="line">            <span class="type">TimeoutException</span> <span class="variable">e</span> <span class="operator">=</span> (TimeoutException)cause;</span><br><span class="line">            <span class="keyword">return</span> RdfaResult.fail(e.getCode(), e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RdfaResult.fail(ResponseCode.FAILURE.getCode(), exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="三：测试熔断"><a href="#三：测试熔断" class="headerlink" title="三：测试熔断"></a>三：测试熔断</h1><p><img src="https://img-blog.csdnimg.cn/20210629113553759.png" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么并不是所有人都有自由意志？</title>
    <url>/post/bb2f6bb7.html</url>
    <content><![CDATA[<div style="width: 100%">
  <iframe src="//player.bilibili.com/player.html?aid=461048579&bvid=BV1Z5411M7hG&cid=351951244&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="350px"> </iframe>
</div>

<center> <p style="font-size: 11px; color: gray"><u>Loki - About free will</u></p> </center>



<p>这两天看了一个新的美剧——《Loki》。是漫威系列的多元宇宙时间线背景的科幻加奇幻片。一开始是抱着看爆米花剧的心态再加上自己一直以来都对漫威的电影很感兴趣，所以翻墙找了资源🤫。剧情虽然离谱但是很对我的胃口，故事大致讲的是在复仇者联盟穿越回 2012 年寻找宇宙魔方（空间宝石）的时候，Loki 偷走了空间宝石。而因为扰乱了漫威宇宙的神圣时间线，被时间管理局逮捕。</p>
<span id="more"></span>

<p>剧中的时间管理局的工作者可以说是三位神圣的时间守护者创造出来管理时间线的没有生命的机器人。他们无法自由的出现在神圣时间线中，也就是无法干涉现实的人类生活，否则会扰乱神圣时间线从而导致出现时间线分支，衍生出多元宇宙。只能够待在时间管理局这样一个超脱时间存在的地方，日复一日的工作。</p>
<p>而 Loki，阿斯加德的诡计之神，一个不会听命于所有人，想要统治整个宇宙，自己建立规则的自由的神，在剧中与这位时间管理局的分析师——莫比乌斯，有了一段上述视频中的对话。只是一段小的插曲，却让我反复看了好几遍。</p>
<p>莫比乌斯收藏了一份摩托艇杂志，和洛基谈起来的时候神采飞扬像是非常了解摩托艇并极其热爱，但是当洛基问他有没有坐过的时候他的答案却是“no”。时间管理局的人没有权利去享受现实世界的任何事物，因为会引出另一个时间分支。他每天都看摩托艇杂志只是为了提醒自己为什么活着，为何而战！他不去想有什么意义，只是去一味的遵守既定设定。这让洛基对此非常不解。他反问洛基是被谁创造出来的，并说不论是谁，都没有意义，而且<code>Exist is chaos.</code>存在即混乱。当我们试着去理解这一切的时候，它们都会变得毫无意义！所以他相信这一切都是真的，并且按照这个设定去完成自己的“光荣使命”。</p>
<p>但是作为诡计之神的洛基，却不愿意遵守规则。他觉得这种过去、现在、将来被设定好的一切都是不正确的，时间就应该拥有不确定性，每个人也都是自由的，都拥有自由意志，能够按照记得的想法去做自己想做的事情。以至于那三个神圣的时间守护者，洛基有句话可能也有暗示：“There no one bad is truly bad, and no one good is ever truly good”。如果相信并且遵循固定的一切，那么自由意志将不复存在。</p>
<p>关于所谓的自由意志，我想每个人都用于不同的认识。我所理解的自由意志，是指<u>每个人都对自己的行为的产生，拥有自主决定性。不光指行动上的行为，还有思考，而且主要是指思考。每个人都是自己行为的主人，不受任何外界因素的影响</u>，这才叫拥有自由意志。</p>
<p>然而，现实世界有多少人拥有自由意志呢？每个人的成长过程中，都在经受着社会环境影响，每个人都拥有不同的人格，环境中一丁点的差别都会造就出两个完全不同的人。也许两个人在同一时间点读了不同的书，下一回就是几年后二者战场上兵戎相见、各为其主。</p>
<p>自由意志早已被那些所谓“爱你的人”、“管理你的人”、“你爱的人”、“你为之效忠的***”淹没在无底深渊。当你的自由意志想要反抗着挣扎着出来的时候，上述那些就像拥有着魔法一样将之再次压制回去。</p>
<p>不过其实自由意志也不需要完全的反抗，你只需要懂得辩证的思考。在你接受一个观点的时候，站在这个观点的对立面去思考问题，从多个角度看待一件事物的影响，尽可能的减少外界带给你的一些“判断依据”，那么自由意志就会产生，你才会自主的决定自己的行为，和对一件事物的思考。</p>
<p>其实我发现自己身边的人，并不懂得辩证的思考问题，在一个网站看到一个帖子，觉得说的正确，就急于将之分享给别人，变成自己的想法滔滔不绝的灌输给别人，完全缺乏多角度的思考。</p>
<p>不过有时候多角度思考问题，轻则形成一个犹豫不决的人格，或者让你很难去接受别人的想法，严重更会容易导致人格分裂，我感觉的的心里就住了两个自己，每次做出选择的时候脑子里就会有另一个声音发出反对意见，我是不是要去看一下心理医生… …</p>
<p>最后凭借着这个话题，想到一个最近看到的一句话：如果循规蹈矩的生活并没有给你带来预期的幸福，反而让你在神采飞扬的大好年华过的卑微而苍白，那么就试着放飞自我，随心所欲一次！</p>
<p><strong>自由、自由意志万岁！</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_5839.JPG" alt="IMG_5839"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>给数组原型对象添加方法</title>
    <url>/post/cef58ddb.html</url>
    <content><![CDATA[<p>今天使用<code>for...in</code>方法的时候发现枚举到了意料之外的<code>prototype</code>内的方法，发现是没有正确为数组原型对象添加方法，在此记录。</p>
<span id="more"></span>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一般我们如何给一个数组原型对象添加方法呢，比如我们添加一个去重方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unique</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> n = &#123;&#125;,</span><br><span class="line">    r = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!n[<span class="variable language_">this</span>[i]]) &#123;</span><br><span class="line">      n[<span class="variable language_">this</span>[i]] = <span class="literal">true</span>;</span><br><span class="line">      r.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我看不少文章里这样就好了，这就会出现我刚刚说到的问题。在你使用<code>for...in</code>方法遍历数组时就会拿到<code>unique</code>这个 key 值，这个是不符合我们预期的。</p>
<p>其实出现这样的情况是因为<code>Array.prototype</code>对象的<code>unique</code>属性的描述值<code>enumerable</code>为<code>true</code>，也就是可枚举，在枚举对象属性时会被枚举到（<code>for...in</code>或<code>Object.keys</code>方法）。</p>
<p>根据<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">MDN Web Docs</a>说明，可枚举属性是指那些内部 <code>可枚举</code> 标志设置为 <code>true</code> 的属性，对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 <code>true</code>，对于通过 <code>Object.defineProperty</code> 等定义的属性，该标识值默认为 <code>false</code>。可枚举的属性可以通过 <code>for...in</code> 循环进行遍历（除非该属性名是一个 <code>Symbol</code>）。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>正确的方法如下，忽略方法内容。</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>先添加方法，再通过 <code>Object.defineProperty</code> 设置为不可枚举。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unique</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;unique&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>或者直接通过 <code>Object.defineProperty</code> 方法添加。此时<code>enumerable</code>默认为<code>false</code>，不用特别指定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;unique&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程的数据一致性问题</title>
    <url>/post/8b8560e1.html</url>
    <content><![CDATA[<h2 id="CPU的优化之路"><a href="#CPU的优化之路" class="headerlink" title="CPU的优化之路"></a>CPU的优化之路</h2><blockquote>
<p>我们需要了解数据一次性问题，首先需要知道CPU为了更好的性能做了哪些优化。</p>
</blockquote>
<h3 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h3><p>要了解数据一致性问题产生的原因，我们首先要了解数据的传输路径，我们首先来看下以下这张图。</p>
<p><img src="https://img-blog.csdnimg.cn/20210526140041842.png" alt="在这里插入图片描述"><br>因为CPU的计算速率远大于IO等数据传输的速率，为了让CPU能持续稳定的007工作，使宝贵的CPU资源得到有效地利用，因此引入了缓存的概念，CPU与内存的交互也由此发生了改变。<br><img src="https://img-blog.csdnimg.cn/2021052614121012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<span id="more"></span>

<h3 id="MESI协议与可见性"><a href="#MESI协议与可见性" class="headerlink" title="MESI协议与可见性"></a>MESI协议与可见性</h3><p>在多核情况下，存在多个L1和L2缓存，那么如何保证线程之间以及线程与主存数据的一致性呢？<br>因此引入了MESI协议来解决数据的可见性问题。<br><img src="https://img-blog.csdnimg.cn/20210526145738582.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>在MESI协议中，每个Cache line有4个状态，可用2个bit表示，它们分别是：<br>M(Modified)：这行数据有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中；<br>E(Exclusive)：这行数据有效，数据和内存中的数据一致，数据只存在于本Cache中；<br>S(Shared)：这行数据有效，数据和内存中的数据一致，数据存在于很多Cache中；<br>I(Invalid)：这行数据无效。</p>
</blockquote>
<p>简单来说就是CacheA缓存了主存中的数据，状态为E，CacheB缓存了相同数据，此时CacheA和CacheB状态均修改为S，存在于不同CacheLine中，然后CacheA修改了数据，A变为M，B变为I。这样CPU就可以通过CacheLine的状态，来决定是删除缓存，还是直接读取什么的。</p>
<h3 id="伪共享与缓存填充"><a href="#伪共享与缓存填充" class="headerlink" title="伪共享与缓存填充"></a>伪共享与缓存填充</h3><p>使用MESI协议对缓存一致性进行优化以后又会出现新的问题，数据的伪共享问题。<br>我们的缓存行是以64字节为一行的，因为系统认为你读取了一个数据后，可能会在不久之后用到与之相邻的一些数据，因此一次读取64字节,由于MESI协议，会造成可能几个CPU同时修改同一块缓存内容，大量造成缓存失效，从而影响性能。<br>这样就出现了一个问题，b 和 a 完全不相干，每次却要因为 a 的更新需要从主内存重新读取，它被缓存未命中给拖慢了。</p>
<p><img src="https://img-blog.csdnimg.cn/20210526165854414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时，为了优化缓存行的效率，从而引入了缓存填充的概念，使同一个变量独占一个缓存行，而其他位置使用一些不相干的数据进行填充，使其占满64字节，从而提高系统效率。<br><img src="https://img-blog.csdnimg.cn/20210526170603796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>例如一个long类型数据占8字节，为了占满64字节，通常会在周围填充7个无意义的long类型数据使其占满64字节，即缓存填充。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> p1, p2, p3, p4, p5, p6, p7; <span class="comment">// cache line padding</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">long</span> <span class="variable">key</span> <span class="operator">=</span> VALUE;</span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> p8, p9, p10, p11, p12, p13, p14; <span class="comment">// cache line padding</span></span><br></pre></td></tr></table></figure>

<h3 id="异步处理与指令重排"><a href="#异步处理与指令重排" class="headerlink" title="异步处理与指令重排"></a>异步处理与指令重排</h3><p>由于MESI协议，导致线程间通信的时候会有一段时间同步等待的交互时间，为了进一步压榨CPU剩余价值，会采取一种异步的方式来进行操作。<br><img src="https://img-blog.csdnimg.cn/20210526171719567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由于缓存刷新是异步操作，会导致CPU会在没接收到刷新命令之前进行一些其他命令，这种设计在提高性能的同时会导致另一个问题，指令重排，在单线程的时候，指令重排对程序运行最终结果没有任何影响，但是如果在多线程情况下，则会对结果产生影响。</p>
<h2 id="解决CPU优化所带来的问题"><a href="#解决CPU优化所带来的问题" class="headerlink" title="解决CPU优化所带来的问题"></a>解决CPU优化所带来的问题</h2><p>由上文可知，CPU的性能优化导致了很多问题，比如缓存一致性问题，可见性问题，指令重排的问题。<br>那么如何有效的解决问题这些问题呢？</p>
<h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><p>JMM（Java Memory Model的缩写）是一种java内存模型。它类似于缓存一致性协议，用于定义数据读写的规则。<br>JMM定义了线程工作内存和主内存的一种抽象关系，线程中的共享对象存在于主内存中，每个线程都有一块私有的本地内存。<br>解决共享对象可见性问题，即线程中修改数据立马同步到主线程中，其它线程复制时可以得到最新的数据：volilate和synchronize关键词。<br>JMM数据同步模型如下图。<br><img src="https://img-blog.csdnimg.cn/20201016161234764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="volatile关键词"><a href="#volatile关键词" class="headerlink" title="volatile关键词"></a>volatile关键词</h3><p>volatile关键字可以保持可见性，不能保证原子性，由于内存屏障，可以保证避免指令重排的现象产生！</p>
<h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>两个线程，同时对单一对象进行操作时，均为从对象中复制一份，然后对复制的对象进行操作，然后合并。<br>可见性指的是当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，保证修改的数据为最新的数据。</p>
<blockquote>
<p>可见性测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisibilityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201125112333343.png#pic_center" alt="在这里插入图片描述"><br>此时线程陷入死循环，无法感知到main线程已经对数据进行了修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisibilityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201125112534705.png#pic_center" alt="在这里插入图片描述"><br>此时可以感知到main线程的变化，退出循环。</p>
<h4 id="非原子性"><a href="#非原子性" class="headerlink" title="非原子性"></a>非原子性</h4><blockquote>
<p>原子性测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020112510260580.png#pic_center" alt="在这里插入图片描述"><br> Num++不是原子操作，因为其可以分为：读取Num的值，将Num的值+1，写入最新的Num的值。<br> 对于Num++;操作，线程1和线程2都执行一次，最后输出Num的值可能是：1或者2。</p>
<p> 输出结果1的解释：当线程1执行Num++;语句时，先是读入Num的值为0，倘若此时让出CPU执行权，线程获得执行，线程2会重新从主内存中，读入Num的值还是0，然后线程2执行+1操作，最后把Num&#x3D;1刷新到主内存中； 线程2执行完后，线程1已经开始执行，但之前已经读取的Num的值0，所以它还是在0的基础上执行+1操作，也就是还是等于1，并刷新到主内存中。所以最终的结果是1。</p>
<blockquote>
<p>解决方案：使用CAS，通过自旋锁解决原子性问题</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line"><span class="comment">//                num++;</span></span><br><span class="line">                atomicInteger.getAndIncrement();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line"><span class="comment">//                num++;</span></span><br><span class="line">                atomicInteger.getAndIncrement();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        System.out.println(num);</span></span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201125110156343.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>CAS应用场景</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2020</span>);</span><br><span class="line"><span class="comment">//        int andIncrement = atomicInteger.getAndIncrement();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        public final boolean compareAndSet(int expect, int update)</span></span><br><span class="line"><span class="comment">//        如果期望的值达到了，那么就更新，否则，就不更新，CAS 是 CPU 的并发原型</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2021</span>, <span class="number">2020</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">6666</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201125095750332.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>常见示例：自旋锁实现</p>
</blockquote>
<p><strong>CAS是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步</strong><br>当第一个线程进入myLock时while条件为false，可以加锁，当第二个线程进入时while条件为true，进入循环，直到myUnLock执行结束，第二个线程跳出while循环，加锁成功。<br>自旋锁是指对一个内容无限循环，当达成条件的时候对其加锁，底层使用的是CAS。</p>
<p><strong>自定义自旋锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLock</span> &#123;</span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="literal">null</span>,thread))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; myLock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myUnLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        atomicReference.compareAndSet(thread,<span class="literal">null</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; myUnLock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#x3D;&#x3D;自旋锁测试&#x3D;&#x3D;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">SpinLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpinLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201124093623770.png#pic_center" alt="在这里插入图片描述"><br>线程T1占用时，线程T2会一直在循环中无法出来。只有当线程T1解锁，线程T2才会跳出循环，最终才会触发T2解锁。</p>
<blockquote>
<p>常用示例：利用CAS解决ABA问题</p>
</blockquote>
<p>CAS是java利用unsafe类通过对计算机底层的调用来进行数据的操作。底层实现为自旋锁。<br>CAS对数据修改时，可能会出现对数据修改两次，修改后值与之前相同的情况，因此会认定为未修改，此类问题被称为ABA问题，为了解决此类问题可以使用乐观锁，对每次记录新增一个记录，每次修改记录+1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ABADemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();   <span class="comment">//获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;a1 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">2</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;a2 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">2</span>, <span class="number">1</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;a3 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();   <span class="comment">//获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;b1 =&gt;&quot;</span>+stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">6</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;b2 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果分析</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020112020130879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="避免指令重排"><a href="#避免指令重排" class="headerlink" title="避免指令重排"></a>避免指令重排</h4><blockquote>
<p>指令重排测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderSort</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> a, b, x, y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Set&lt;String&gt; stringSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">            b = <span class="number">0</span>;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    x = <span class="number">1</span>;</span><br><span class="line">                    a = y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    y = <span class="number">1</span>;</span><br><span class="line">                    b = x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">            stringSet.add(<span class="string">&quot;a:&quot;</span> + a + <span class="string">&quot;,b:&quot;</span> + b);</span><br><span class="line">            num++;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+num+<span class="string">&quot;次：&quot;</span>+stringSet);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+num+<span class="string">&quot;次结果为：a = 0，b = 0&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210527140642934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>指令重排指的是，一段代码写出来的顺序可能为1&#x3D;&gt;2&#x3D;&gt;3&#x3D;&gt;4&#x3D;&gt;5,但是经过编译器以后的顺序并不一定严格按照这种顺序，可能在不影响结果的情况下改变为1&#x3D;&gt;3&#x3D;&gt;2&#x3D;&gt;4&#x3D;&gt;5。这种情况在单线程的情况下不会有任何问题，但是在多线程的情况下则会出现问题。而volatile关键词可以增加一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障。</p>
<blockquote>
<p>常用示例：DCL懒汉式(双重检测锁模式)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双重检测锁模式的懒汉式单例 DCL懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();    <span class="comment">//不是一个原子性操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时当第一次创建对象时会进行加锁，但是由于指令重排可能会造成以下情况，所以需要对对象加上volatile关键词防止指令重排</p>
<blockquote>
<p>&#x2F;**<br>                  * 1、分配内存空间<br>                  * 2、执行构造方法，初始化对象<br>                  * 3、把这个对象指向这个空间<br>                  *<br>                  * 此时程序执行顺序可能为<br>                  * 1-&gt;2-&gt;3<br>                  * 1-&gt;3-&gt;2<br>                  * 若为1-&gt;3-&gt;2则可能发生以下情境<br>                  *<br>                  * A线程执行完1-&gt;3时，B线程执行，此时对象有指向的内存空间，但是并未初始化<br>                  * 当B进行判断时 lazyMan &#x3D;&#x3D; null 为 false，则会直接返回未初始化的对象。<br>                  * 因此在声明对象时必须加上 volatile 关键词来防止指令重排<br>                  *&#x2F;</p>
</blockquote>
]]></content>
      <tags>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>带你轻松搞定UML类图</title>
    <url>/post/3ebcfc76.html</url>
    <content><![CDATA[<h2 id="什么是UML类图"><a href="#什么是UML类图" class="headerlink" title="什么是UML类图"></a>什么是UML类图</h2><p>UML类图即是一种表现类与类之间关系的一种示意图，由于java是一种面向对象的语言，且万物皆对象，因此对象与对象之间，类与类之间，总是存在的某种不清不楚，不明不白的联系，类图就是一种可以让我们一眼看清这种复杂联系的简单示意图(其实一点都不简单~~~),然而面对复杂的各种符号，可能很多人摸不着头脑，比如下面一张图，很生动的表示了一些类之间的关系，可能第一次看会有点一脸懵逼，似懂非懂的感觉，然而看完本篇的讲解，再回过头来看这张图，肯定会有一目了然的感觉。<br><img src="https://img-blog.csdnimg.cn/20210515175207709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="单个类的符号含义"><a href="#单个类的符号含义" class="headerlink" title="单个类的符号含义"></a>单个类的符号含义</h2><blockquote>
<p>-表示private<br>#表示protected<br>~表示default,也就是包权限<br>_下划线表示static<br>斜体表示抽象<br>如果是接口则使用&lt;&lt; interface &gt;&gt;来标注</p>
</blockquote>
<span id="more"></span>

<h2 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h2><p><img src="https://img-blog.csdnimg.cn/20210515180026755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一般的关系由被拥有者指向拥有者。</p>
<hr>
<ul>
<li>继承与实现<br>这一组指向由三角箭头表示，继承一般子类可以拥有父类方法，相对属于比较实的关系，而实现本身是无法获得接口方法的，属于比较虚的关系，因此继承是实线，实现是虚线。</li>
</ul>
<hr>
<ul>
<li>聚合和组合<br>这一组是由菱形箭头表示，但组合是必须拥有相同的生命周期，类似于身体不同器官，一荣俱荣，一损俱损，不可单独存在，属于比较实的关系，而聚合则没有相同工作周期，比如公交车司机和工作服，属于比较虚的关系，因此组合是实心，聚合是空心。</li>
</ul>
<hr>
<ul>
<li>关联和依赖<br>这一对是由箭头表示，关联更像是一种拥有，比如一个类里面拥有的属性包含另一个类，属于比较实的关系，而依赖更像临时借用，比如set进去一个属性，属于比较虚的关系，因此关联是实线，依赖是虚线。</li>
</ul>
<h2 id="UML类图总结"><a href="#UML类图总结" class="headerlink" title="UML类图总结"></a>UML类图总结</h2><p>UML类图就是通过图形展示类之间的关系，了解了类的符号含义和类之间的符号含义之后，再来看开头的类图是不是就一目了然了呢？<br>可以类比下面的图片进行进一步理解。<br><img src="https://img-blog.csdnimg.cn/20210515184213926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>解决阿里云服务器无法ping通的问题</title>
    <url>/post/6ebdde31.html</url>
    <content><![CDATA[<h2 id="添加安全组策略"><a href="#添加安全组策略" class="headerlink" title="添加安全组策略"></a>添加安全组策略</h2><p>若想通过本地ping通阿里云服务器，则需要添加如下安全组策略。</p>
<ul>
<li><p>入方向添加ICMP协议<br><img src="https://img-blog.csdnimg.cn/20210508143535157.png" alt="在这里插入图片描述"></p>
</li>
<li><p>出方向添加ICMP协议<br><img src="https://img-blog.csdnimg.cn/20210508143614519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<span id="more"></span>

<h2 id="设置客户端对本服务器ping"><a href="#设置客户端对本服务器ping" class="headerlink" title="设置客户端对本服务器ping"></a>设置客户端对本服务器ping</h2><blockquote>
<p>设置允许客户端对本服务器ping</p>
</blockquote>
<p>将icmp_echo_ignore_all的1改成0，即可本地ping或客户端对服务器的ping</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jiangxj /]# cat /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br><span class="line">1</span><br><span class="line">[root@jiangxj /]# echo 0 &gt;/proc/sys/net/ipv4/</span><br><span class="line">[root@jiangxj /]#  cat /proc/sys/net/ipv4/icmp_echo_ignore_all   </span><br><span class="line">0</span><br><span class="line">[root@jiangxj /]# ping 127.0.0.1</span><br><span class="line">PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.049 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.050 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.051 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.049 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.049 ms</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>奥利奥生成器与Canvas绘制图片不显示问题</title>
    <url>/post/4928b204.html</url>
    <content><![CDATA[<p>最近尝试在 Vue 中实现奥利奥生成器的效果，遇到使用 Canvas 的 drawImage 方法绘制图片不显示的问题，在此记录下解决过程。</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎体验</p>
<p><a href="https://tools.iszy.xyz/others/oreooo">奥利奥生成器</a></p>
<p><img src="https://img.iszy.xyz/20210523144733.png"><img src="https://img.iszy.xyz/20210523144706.png"></p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>奥利奥的原理，就是根据不同的字符串组合，对应不同的图片，然后按顺序将图片绘制到 canvas 上，最终生成图片。</p>
<p>canvas 的 drawImage 有几种用法。</p>
<ul>
<li>在画布上定位图像: <code>ctx.drawImage(img,x,y);</code></li>
<li>在画布上定位图像，并规定图像的宽度和高度: <code>ctx.drawImage(img,x,y,width,height);</code></li>
<li>剪切图像，并在画布上定位被剪切的部分: <code>ctx.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</code></li>
</ul>
<p>我们这里只需要使用第二种方法，控制下图片的大小即可。</p>
<p>参数值</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>img</td>
<td>规定要使用的图像、画布或视频。</td>
</tr>
<tr>
<td>sx 可选。</td>
<td>开始剪切的 x 坐标位置。</td>
</tr>
<tr>
<td>sy 可选。</td>
<td>开始剪切的 y 坐标位置。</td>
</tr>
<tr>
<td>swidth 可选。</td>
<td>被剪切图像的宽度。</td>
</tr>
<tr>
<td>sheight 可选。</td>
<td>被剪切图像的高度。</td>
</tr>
<tr>
<td>x</td>
<td>在画布上放置图像的 x 坐标位置。</td>
</tr>
<tr>
<td>y</td>
<td>在画布上放置图像的 y 坐标位置。</td>
</tr>
<tr>
<td>width 可选。</td>
<td>要使用的图像的宽度（伸展或缩小图像）。</td>
</tr>
<tr>
<td>height 可选。</td>
<td>要使用的图像的高度（伸展或缩小图像）。</td>
</tr>
</tbody></table>
<p>一般情况下，都按照下面的示例来使用。把绘制写到 img 的 onload 事件里，是因为如果图片还没有加载完成，drawImage 是不生效的，这样能够保证图片已经加载完成。不过因为我们需要多次调用同一张图片，绘制多次，这样的方法就不是很方便。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;scream&quot;</span>);</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(img, <span class="number">10</span>, <span class="number">10</span>, <span class="number">150</span>, <span class="number">180</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>于是尝试将加载的图片缓存一下，方便调用，使用的是下面的方法。sources 中是图片名称和图片地址的键值对，使用 Image 对象设置 src 的方式加载图片；在 onload 事件中，记录加载完成的次数；当全部加载完成时，将存储了这些 Image 对象的 cacheImages 对象存储下来以便调用。</p>
<p>在原版 oreooo 的页面中，我可以看到这个方法是有效的。但是我在 Vue 3 + Vite 2 的环境下，虽然 cacheImages 成功存储了，也能在 Networks 里面看到网络请求，但是 canvas 绘制出来的图形一直是空白的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">loadImages</span>: <span class="keyword">function</span> (<span class="params">sources, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cacheImages = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> attCount = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(sources).<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (imgItem <span class="keyword">in</span> sources) &#123;</span><br><span class="line">        cacheImages[imgItem] = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        cacheImages[imgItem].<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (index == attCount) &#123;</span><br><span class="line">                images = cacheImages;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cacheImages[imgItem].<span class="property">src</span> = sources[imgItem];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或许是需要实际存在的 img 标签才有用，我如果页面上实际就有这个图片，我测试了下，确实就能获取到图片绘制出来了。于是我换了种写法，通过在页面实际加载图片，然后在绘制时获取图片 DOM 的 image，只要图片已经加载完成了，绘制时就能正常出图了。下面是在 Vue 里的一个大概示例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;imgContainer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;assets.O&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;O&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;assets.R&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;R&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;assets.Ob&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;Ob&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;output-image&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">&quot;oreo_canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">      您的浏览器不支持 HTML5 canvas 标签。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> O <span class="keyword">from</span> <span class="string">&quot;./assets/image/O.png&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> R <span class="keyword">from</span> <span class="string">&quot;./assets/image/R.png&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Ob</span> <span class="keyword">from</span> <span class="string">&quot;./assets/image/Ob.png&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">assets</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        O,</span></span><br><span class="line"><span class="language-javascript">        R,</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Ob</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;),</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">generateImage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> canvas = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">oreo_canvas</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">O</span>.<span class="property">image</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">240</span>, <span class="number">160</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.imgContainer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Canvas 的 drawImage 在图片还未加载完成时是不会生效的，由于这个特性，需要保证在调用 drawImage 时图片已经加载完成，否则就会有不显示的现象。解决的方案有下面两种。</p>
<ul>
<li>将 drawImage 事件写在图片的 onload 事件中，这样可以保证图片已经加载。</li>
<li>可以在页面上写上 img 标签实际加载图片，然后 drawImage 时调用 img 的 DOM 下的 image 属性进行绘制。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex数据持久化</title>
    <url>/post/53638891.html</url>
    <content><![CDATA[<p>众所周知，Vuex 的数据是存储在内存中的，刷新一下网页这些数据就会丢失。而有些数据我们希望刷新后仍然能够留存，这就需要把数据存储下来。这里就记录一下，使用 localStorage 来持久化 Vuex 中的数据。</p>
<span id="more"></span>

<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol>
<li>因为 state 中的数据理论上只能通过 mutation 来进行更新，所以可以监听 mutation 事件，在每次事件执行后，将此时整个 state 的数据转为字符串后存储进 localStorage。</li>
<li>在页面初始化 state 时，读取 localStorage 值，重新转为 JSON 后，合并进当前 state。</li>
<li>这种方法只是一个简单的实现，只适用于简单对象，对复杂对象来说，重新转为 JSON 可能会失去对应的事件和方法，后面可以考虑以其他方式存储。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>插件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (options = &#123;&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> storage = options.<span class="property">storage</span> || (<span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">localStorage</span>);</span><br><span class="line">  <span class="keyword">const</span> key = options.<span class="property">key</span> || <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取state的值</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getState</span> = (<span class="params">key, storage</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> value = storage.<span class="title function_">getItem</span>(key);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value !== <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(value) : <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置state的值</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setState</span> = (<span class="params">key, state, storage</span>) =&gt;</span><br><span class="line">    storage.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">store</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化时获取数据，如果有的话，把原来的vuex的state替换掉</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">Object</span>.<span class="title function_">assign</span>(store.<span class="property">state</span>, <span class="title function_">getState</span>(key, storage));</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      store.<span class="title function_">replaceState</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅 store 的 mutation。handler 会在每个 mutation 完成后调用，接收 mutation 和经过 mutation 后的状态作为参数</span></span><br><span class="line">    store.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setState</span>(key, state, storage);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>调用方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VuexPersist</span> <span class="keyword">from</span> <span class="string">&quot;@/plugins/VuexPersist&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title class_">VuexPersist</span>()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vue中使用CodeMirror实现编写JSON编辑器</title>
    <url>/post/636e2d18.html</url>
    <content><![CDATA[<p>最近写了个 JSON 编辑器给自己用，用 CodeMirror 来实现代码编辑器的功能，这边来记录下。</p>
<span id="more"></span>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save codemirror</span><br><span class="line">npm install --save jsonlint-mod</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add codemirror</span><br><span class="line">yarn add jsonlint-mod</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这边用的环境时 <code>Vue 3 + Vite 2</code></p>
<p><strong>要点:</strong></p>
<ul>
<li>不要将准备被渲染的 textarea 标签放在 template 顶层，在 vue 组件 unbind 时，由 CodeMirror 添加的 DOM 无法自动被移除。</li>
<li>根据需要引入对应的样式和 js</li>
<li>JSON 编辑器的 lint 需要引入外部插件<code>jsonlint-mod</code>，不要直接使用<code>jsonlint</code>，不支持通过 import 导入</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;codePanel&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ref</span>=<span class="string">&quot;codemirror&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入CodeMirror和基础样式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">CodeMirror</span> <span class="keyword">from</span> <span class="string">&quot;codemirror&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/lib/codemirror.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// JSON代码高亮需要由JavaScript插件支持</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/mode/javascript/javascript.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 选择IDEA主题样式，还有其他很多主题可选</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/theme/idea.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持使用Sublime快捷键</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/keymap/sublime.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 搜索功能的依赖</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/dialog/dialog.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/dialog/dialog.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持搜索功能</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/search/search&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/search/searchcursor.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持各种代码折叠</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/foldgutter.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/foldcode.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/foldgutter.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/brace-fold.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/fold/comment-fold.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持代码区域全屏功能</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/display/fullscreen.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/display/fullscreen.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持括号自动匹配</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/edit/matchbrackets.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/edit/closebrackets.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 支持代码自动补全</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/hint/show-hint.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/hint/show-hint.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/hint/anyword-hint.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 行注释</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/comment/comment.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// JSON错误检查</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/lint/lint.css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/lint/lint.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 需要依赖全局的jsonlint，不是很优雅</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="string">&quot;codemirror/addon/lint/json-lint.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入jsonlint</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> jsonlint <span class="keyword">from</span> <span class="string">&quot;jsonlint-mod&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">jsonlint</span> = jsonlint;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> codemirror;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;JSON编辑器&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">code</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;),</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 防止转为监听对象，vue3中如果CodeMirror对象被转为监听对象，会无法正常使用</span></span></span><br><span class="line"><span class="language-javascript">      codemirror = <span class="title function_">markRaw</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用ref获取需要渲染的textarea的DOM</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">CodeMirror</span>.<span class="title function_">fromTextArea</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">codemirror</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// JS高亮显示</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">mode</span>: <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">indentUnit</span>: <span class="number">2</span>, <span class="comment">// 缩进单位，默认2</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">smartIndent</span>: <span class="literal">true</span>, <span class="comment">// 是否智能缩进</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 显示行号</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">styleActiveLine</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lineNumbers</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 设置主题</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">theme</span>: <span class="string">&quot;idea&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 绑定sublime快捷键</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">keyMap</span>: <span class="string">&quot;sublime&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 开启代码折叠</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lineWrapping</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">foldGutter</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">gutters</span>: [</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;CodeMirror-linenumbers&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;CodeMirror-foldgutter&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;CodeMirror-lint-markers&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// CodeMirror-lint-markers是实现语法报错功能</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lint</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 全屏模式</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fullScreen</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 括号匹配</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">matchBrackets</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">autoCloseBrackets</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 额外快捷键</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">extraKeys</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">F11</span>: <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              cm.<span class="title function_">setOption</span>(<span class="string">&quot;fullScreen&quot;</span>, !cm.<span class="title function_">getOption</span>(<span class="string">&quot;fullScreen&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Esc</span>: <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (cm.<span class="title function_">getOption</span>(<span class="string">&quot;fullScreen&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                cm.<span class="title function_">setOption</span>(<span class="string">&quot;fullScreen&quot;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将编辑器中的值存储下来</span></span></span><br><span class="line"><span class="language-javascript">      codemirror.<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>, <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">code</span> = cm.<span class="title function_">getValue</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">destroy</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取代表编辑器的DOM</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> element = codemirror.<span class="property">doc</span>.<span class="property">cm</span>.<span class="title function_">getWrapperElement</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 删除编辑器实例</span></span></span><br><span class="line"><span class="language-javascript">        element &amp;&amp; element.<span class="property">remove</span> &amp;&amp; element.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>哔哩哔哩AV号、BV号转换</title>
    <url>/post/49fa7865.html</url>
    <content><![CDATA[<p>哔哩哔哩把以前 <code>av</code> + 数字的稿件地址格式更换为 <code>BV</code> + 字母数字的格式，类似 Youtube 的稿件编码方式已经有一段时间了。最近闲来无聊，搜了下，发现大佬们已经破解了转换的方法，并给出了 Python 测试代码。正好最近在写小工具合集，写着玩，就用 js 写了一个，留作备用。</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://tools.iszy.xyz/anime/bilibiliBv2av">哔哩哔哩 AV、BV 号转换</a></p>
<p>网上应该已经有了类似工具，不过还是喜欢用自己写的，有问题也好改。有需要的可以用一下。</p>
<h2 id="原文-来自知乎mcfx-的答案"><a href="#原文-来自知乎mcfx-的答案" class="headerlink" title="原文(来自知乎mcfx 的答案"></a>原文(来自知乎<a href="https://www.zhihu.com/question/381784377/answer/1099438784">mcfx 的答案</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table=<span class="string">&#x27;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&#x27;</span></span><br><span class="line">tr=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>):</span><br><span class="line">    tr[table[i]]=i</span><br><span class="line">s=[<span class="number">11</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">xor=<span class="number">177451812</span></span><br><span class="line">add=<span class="number">8728348608</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">x</span>):</span><br><span class="line">    r=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        r+=tr[x[s[i]]]*<span class="number">58</span>**i</span><br><span class="line">    <span class="keyword">return</span> (r-add)^xor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">x</span>):</span><br><span class="line">    x=(x^xor)+add</span><br><span class="line">    r=<span class="built_in">list</span>(<span class="string">&#x27;BV1  4 1 7  &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        r[s[i]]=table[x//<span class="number">58</span>**i%<span class="number">58</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(r)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dec(<span class="string">&#x27;BV17x411w7KC&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dec(<span class="string">&#x27;BV1Q541167Qg&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dec(<span class="string">&#x27;BV1mK4y1C7Bz&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(enc(<span class="number">170001</span>))</span><br><span class="line"><span class="built_in">print</span>(enc(<span class="number">455017605</span>))</span><br><span class="line"><span class="built_in">print</span>(enc(<span class="number">882584971</span>))</span><br></pre></td></tr></table></figure>

<p>互相转换脚本，如果算法没猜错，可以保证在 av 号 $&lt; 2^{27}$ 时正确，同时应该在 $&lt; 2^{30}$ 时也是正确的。此代码以 WTFPL 开源。</p>
<p>UPD：之前的代码中，所有数位都被用到是乱凑的，实际上并不需要，目前只要低 6 位就足够了。（更大的 av 号需要 64 位整数存储，但是 b 站现在使用的应该还是 32 位整数，所以应该还要很久）</p>
<p>发现的方法：</p>
<p>首先从各种渠道的信息来看，应该是 base58 编码的。设 x 是一个钦定的 av 号，查询 $58k+x,58^{2}k+x,58^{3}k+x,58^{4}k+x(k \in Z)$ 这些 av 号对应的 bv 号，发现 bv 号的第 12、11、4、9、5 位分别会变化。所以猜测这些是 58 进制下的相应位。</p>
<p>但是直接 base58 是不行的，所以猜测异或了一个大数，并且 base58 的字符表可能打乱了。经过实验，bv 号最低位相同的数，av 号的奇偶性相同，这一定程度上印证了之前的猜想。</p>
<p>接下来找了一些 av 号 $x$，满足 $x$ 和 $x+1$ 对应 bv 号的第 11 位不同。设异或的数为 $X$，那么 $\left [\frac{X\oplus x}{58} \right]\neq \left [\frac{X\oplus (x+1)}{58} \right]$（ $\oplus$ 表示异或）。</p>
<p>由于 av 号（除了最新的少量视频）最多只有 27 bits，所以可以设 $X&#x3D;2^{27}a+b(0\leq b\leq 2^{27})$ 。然后可以发现 $X$ 只和 $2^{27}a\ mod\ 58$ 和 $b$ 有关，那么可以枚举这两个值（一共 $2^{27} \cdot 58&#x3D;7784628224$ 种情况）然后使用上面的式子检查，就能得到若干可能的 $X$ 只和 $2^{27}a\ mod\ 58$ 和 $b$。</p>
<p>这里我得到的可能值如下：（左边是 $2^{27}a\ mod\ 58$，右边是 $b$）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22 90983642</span><br><span class="line">22 90983643</span><br><span class="line">50 43234084</span><br><span class="line">50 43234085</span><br></pre></td></tr></table></figure>

<p>有奇有偶是因为异或 $1$ 之后也能找到轮换表。而 $90983642+43234085&#x3D;2^{27}-1$ 则使得模 $58$ 的余数刚好变成 $2^{27}-1$ 减它。</p>
<p>我取了 <code>b=43234084</code>，然后处理最低位，可以得到一个字符表，即 <code>fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF</code>。</p>
<p>对于更高位，实际上还需要知道 $2^{27}a\ mod\ 58^{2},2^{27}a\ mod\ 58^{3},…$，这些值也可以 枚举 58 次得到，最后我得到的值是 $2^{27}a\ mod\ 58^{4}&#x3D;1749968$ 。</p>
<p>这时我发现，每一位的字符表是相同的（实际上只对 <code>b=43234084</code> 是这样的），然后再微调一下参数（上面代码中的两个 magic number 就相当于这里的 $a,b$），最后处理了一下 $\geq 2^{27}$ 的情况就得到了这份代码。</p>
<h2 id="Vue-JS-实现"><a href="#Vue-JS-实现" class="headerlink" title="Vue + JS 实现"></a>Vue + JS 实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;bilibiliBv2av&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">aid</span>: <span class="string">&quot;19390801&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">bvid</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">table</span>: <span class="string">&quot;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tr</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">s</span>: [<span class="number">11</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">xor</span>: <span class="number">177451812</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">add</span>: <span class="number">8728348608</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;),</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">58</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">tr</span>[<span class="variable language_">this</span>.<span class="property">table</span>[i]] = i;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">enc</span>(<span class="variable language_">this</span>.<span class="property">aid</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">dec</span>(<span class="params">x</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> r = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">          r += <span class="variable language_">this</span>.<span class="property">tr</span>[x[<span class="variable language_">this</span>.<span class="property">s</span>[i]]] * <span class="number">58</span> ** i;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">aid</span> = (r - <span class="variable language_">this</span>.<span class="property">add</span>) ^ <span class="variable language_">this</span>.<span class="property">xor</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">aid</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">enc</span>(<span class="params">x</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        x = <span class="built_in">parseInt</span>(x);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(x)) &#123;</span></span><br><span class="line"><span class="language-javascript">          x = (x ^ <span class="variable language_">this</span>.<span class="property">xor</span>) + <span class="variable language_">this</span>.<span class="property">add</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> r = [</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;B&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;V&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;4&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;7&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot; &quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          ];</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            r[<span class="variable language_">this</span>.<span class="property">s</span>[i]] = <span class="variable language_">this</span>.<span class="property">table</span>[<span class="title class_">Math</span>.<span class="title function_">floor</span>(x / <span class="number">58</span> ** i) % <span class="number">58</span>];</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">bvid</span> = r.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">bvid</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">bvid</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Python</tag>
        <tag>Vue</tag>
        <tag>Bilibili</tag>
        <tag>哔哩哔哩</tag>
      </tags>
  </entry>
  <entry>
    <title>多次提前还贷计算器</title>
    <url>/post/1f0f8df0.html</url>
    <content><![CDATA[<p>最近写了个计算多次提前还贷的计算器，大家可以尝试使用，计算结果仅供参考。</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://tools.iszy.xyz/money/mtqLoans">多次提前还贷计算器</a></p>
<p>网上这样的工具其实不少，不过用起来不是很得劲。比如有的还款时间只能写到月份，有的限制了多次提前还款的次数，不是很自由。</p>
<p>所以我就用 vue 自己写了一个，自认为还挺好用的吧，没有设置什么限制，不过精度问题还需要继续优化。</p>
<p><img src="https://img.iszy.xyz/20210416175915.png"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>输入:</p>
<ul>
<li>贷款金额</li>
<li>贷款期限</li>
<li>贷款利率</li>
<li>还款方式(等额本息、等额本金)</li>
<li>首次还款时间</li>
<li>提前还款<ul>
<li>还款金额</li>
<li>还款时间</li>
<li>调整期数</li>
<li>调整利率</li>
</ul>
</li>
</ul>
<p>输出:</p>
<ul>
<li>累计提前还款</li>
<li>累计调整期数</li>
<li>原累计利息</li>
<li>累计缴息</li>
<li>累计节省利息</li>
<li>每月明细</li>
</ul>
<h3 id="月明细计算"><a href="#月明细计算" class="headerlink" title="月明细计算"></a>月明细计算</h3><ul>
<li><p><strong>每月利息</strong>: <code>本月剩余本金 * 年利率 / 12</code></p>
</li>
<li><p><strong>每月还款额</strong>:</p>
<ul>
<li>等额本息: 用 <code>PMT 函数</code>计算</li>
<li>等额本金: <code>本月偿还本金 + 本月利息</code></li>
</ul>
</li>
<li><p><strong>每月偿还本金</strong>:</p>
<ul>
<li>等额本息: <code>本月还款额 - 本月利息</code></li>
<li>等额本金: <code>本月剩余本金 / 剩余期数</code></li>
</ul>
</li>
</ul>
<h3 id="PMT-函数"><a href="#PMT-函数" class="headerlink" title="PMT 函数"></a>PMT 函数</h3><p>这个函数本是 Excel 里的，不过 Excel 不开源，只好另外用 js 来实现。这里使用的是网上的大佬实现的版本。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copy of Excel&#x27;s PMT function.</span></span><br><span class="line"><span class="comment"> * Credit: http://stackoverflow.com/questions/2094967/excel-pmt-function-in-js</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ratePerPeriod       The interest rate for the loan.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> numberOfPayments    The total number of payments for the loan in months.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> presentValue        The present value, or the total amount that a series of future payments is worth now;</span></span><br><span class="line"><span class="comment"> *                            Also known as the principal.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> futureValue         The future value, or a cash balance you want to attain after the last payment is made.</span></span><br><span class="line"><span class="comment"> *                            If fv is omitted, it is assumed to be 0 (zero), that is, the future value of a loan is 0.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type                Optional, defaults to 0. The number 0 (zero) or 1 and indicates when payments are due.</span></span><br><span class="line"><span class="comment"> *                              0 = At the end of period</span></span><br><span class="line"><span class="comment"> *                              1 = At the beginning of the period</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pmt</span>(<span class="params">ratePerPeriod, numberOfPayments, presentValue, futureValue, type</span>) &#123;</span><br><span class="line">  futureValue = <span class="keyword">typeof</span> futureValue !== <span class="string">&quot;undefined&quot;</span> ? futureValue : <span class="number">0</span>;</span><br><span class="line">  type = <span class="keyword">typeof</span> type !== <span class="string">&quot;undefined&quot;</span> ? type : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ratePerPeriod !== <span class="number">0.0</span>) &#123;</span><br><span class="line">    <span class="comment">// Interest rate exists</span></span><br><span class="line">    <span class="keyword">const</span> q = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">1</span> + ratePerPeriod, numberOfPayments);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      -(ratePerPeriod * (futureValue + q * presentValue)) /</span><br><span class="line">      ((-<span class="number">1</span> + q) * (<span class="number">1</span> + ratePerPeriod * type))</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numberOfPayments !== <span class="number">0.0</span>) &#123;</span><br><span class="line">    <span class="comment">// No interest rate, but number of payments exists</span></span><br><span class="line">    <span class="keyword">return</span> -(futureValue + presentValue) / numberOfPayments;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL两句话生成自签名证书</title>
    <url>/post/9cd23637.html</url>
    <content><![CDATA[<p>今天需要生成一个自签名证书，记录下。</p>
<span id="more"></span>

<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>今天，我需要给微服务统一添加一个自签名证书，按照最简单的方式生成了一个证书。不过现在这个证书在验证时会报<code>No subject alternative names present</code>错误，虽然可以通过代码绕过，但是正式环境不太推荐，所以还是在创建证书的环节解决。</p>
<p>我们查看一个一般的网站证书，可以看到现在的证书都有使用者可选名称，而使用 OpenSSL 的默认参数生成的自签名证书是没有这一条的，而 SSL 验证较为严格的地方就会报上面的错误。</p>
<p><img src="https://img.iszy.xyz/20210309172353.png"></p>
<h2 id="两句话生成自签名证书"><a href="#两句话生成自签名证书" class="headerlink" title="两句话生成自签名证书"></a>两句话生成自签名证书</h2><ol>
<li><p>先用 openssl req 生成证书请求，会顺带生成私钥。接下来会输入一系列信息，<code>Common Name</code>为必填参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -nodes -new -keyout server.key -out server.csr</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><code>-nodes</code>， 密钥文件不加密。不加此参数会要求 “Enter PEM pass phrase：”</li>
<li><code>-keyout</code>，密钥生成路径</li>
<li><code>-out</code>，证书请求文件生成路径</li>
</ol>
</blockquote>
<p><img src="https://img.iszy.xyz/20210309173008.png"></p>
</li>
<li><p>生成自签名证书，带上 SAN 扩展信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -sha256 -days 3650 -<span class="keyword">in</span> server.csr \</span><br><span class="line">-signkey server.key -out server.crt \</span><br><span class="line">-extfile &lt;(<span class="built_in">printf</span> <span class="string">&quot;subjectAltName=DNS:localhost,DNS:example.com,IP:192.168.1.1,IP:127.0.0.1&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><code>-sha256</code>，使用的加密方法</li>
<li><code>-days</code>，证书有效期</li>
<li><code>-in</code>，证书请求文件路径</li>
<li><code>-signkey</code>，用于提供自签名时的私钥文件</li>
<li><code>-out</code>，证书生成路径</li>
<li><code>-extfile</code>，指定签名时包含要添加到证书中的扩展项的文件，自签名时候可以这样使用</li>
</ol>
</blockquote>
<p><img src="https://img.iszy.xyz/20210309173723.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
        <tag>自签名证书</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA信任自签名证书</title>
    <url>/post/eec24d53.html</url>
    <content><![CDATA[<p>这篇文章是为了解决 Java 使用 SSL 过程中出现<code>PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</code>的问题。</p>
<span id="more"></span>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>今天在给微服务添加自签名证书后，微服务间使用 SSL 验证权限时出现了如下错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br><span class="line">    at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)</span><br><span class="line">    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)</span><br><span class="line">    at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302)</span><br><span class="line">    at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296)</span><br><span class="line">...</span><br><span class="line">Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br><span class="line">    at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)</span><br><span class="line">    at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)</span><br><span class="line">    at sun.security.validator.Validator.validate(Validator.java:260)</span><br><span class="line">    at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)</span><br><span class="line">    at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)</span><br></pre></td></tr></table></figure>

<p>这是因为自签名证书不被 Java 信任导致 SSL 握手失败。我看网上有不少是通过代码忽略证书验证来解决的，但是我觉得不能一刀切忽略验证，而是应该将特定证书添加到服务器的 Java 证书信任库中。</p>
<h2 id="Java-信任自签名证书"><a href="#Java-信任自签名证书" class="headerlink" title="Java 信任自签名证书"></a>Java 信任自签名证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -import -trustcacerts -<span class="built_in">alias</span> nginx -file /opt/ssl/server.crt -keystore <span class="variable">$JAVA_HOME</span>/jre/lib/security/cacerts -storepass changeit -keyalg RSAs -noprompt</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><code>-alias</code>，证书别名，可以任意填写，但不能重复</li>
<li><code>-file</code>，需要导入的证书路径</li>
<li><code>-keystore</code>，Java 证书库地址，默认地址为<code>$JAVA_HOME/jre/lib/security/cacerts</code></li>
<li><code>-storepass</code>，Java 证书库密码，默认密码为<code>changeit</code></li>
</ol>
</blockquote>
<p><img src="https://img.iszy.xyz/20210309181047.png"></p>
<p>这样就将证书导入到了该服务器的 Java 证书信任库中了，<strong>涉及到这个证书的 Java 应用需要重启才能生效</strong>。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>OpenSSL</tag>
        <tag>自签名证书</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>&quot;CompletableFuture&quot;在手,并发不愁!</title>
    <url>/post/1e9373fd.html</url>
    <content><![CDATA[<h2 id="CompletableFuture是什么？"><a href="#CompletableFuture是什么？" class="headerlink" title="CompletableFuture是什么？"></a>CompletableFuture是什么？</h2><p>CompletableFuture是jdk8以来出现的一个专门处理并发的类库，是Future的加强版，集成了更多的方法以应对更加复杂的业务场景。<br>本节内容需要有一定的函数式编程基础以及lambda表达式基础。<br><a href="https://blog.csdn.net/qq_40359381/article/details/109353105">传送门</a></p>
<h2 id="大家一起找出所有成年人"><a href="#大家一起找出所有成年人" class="headerlink" title="大家一起找出所有成年人"></a>大家一起找出所有成年人</h2><p>结合之前业务中的场景，抽象出了这样一个模型，假设从数据库中得到一群人员信息，要筛选出所有成年人。<br>此时可以将所有的返回结果全部存入一个map中，等待并发结束再去查看所有map中的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小华&quot;</span>, <span class="number">17</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小红&quot;</span>, <span class="number">16</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;大明&quot;</span>, <span class="number">19</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;超明&quot;</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(persons);</span><br><span class="line">        <span class="comment">//并发找出所有成年人,并存入map中</span></span><br><span class="line">        ArrayList&lt;CompletableFuture&lt;Boolean&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CompletableFuture&lt;Boolean&gt;&gt;();</span><br><span class="line">        HashMap&lt;Person, Boolean&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">            resList.add(CompletableFuture.supplyAsync(() -&gt; findMan(person), Executors.newFixedThreadPool(<span class="number">5</span>)).whenComplete((r, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == e) &#123;</span><br><span class="line">                    map.put(person, r);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从map中获取结果</span></span><br><span class="line">        CompletableFuture.allOf(resList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[resList.size()])).whenComplete((r, e) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == e) &#123;</span><br><span class="line">                map.forEach((key,value)-&gt;&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> value ? (key+<span class="string">&quot;已成年&quot;</span>):(key+<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).join();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//判断一个人是否成年</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">findMan</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person.getAge() &gt;= <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从传送门中可知，supplyAsync是供给型接口，无需传入参数，有返回值，其他的可以类比，此处的whenComplete则是并发处理完成后异步回调需要做的处理。allOf则是等待所有并发完成，join()和get()方法都是用来获取CompletableFuture异步之后的返回值。join()方法抛出的是uncheck异常（即未经检查的异常),不会强制开发者抛出。get()方法抛出的是经过检查的异常，ExecutionException, InterruptedException 需要用户手动处理。</p>
<p>此时就可以巧妙地通过一个中间map来进行结果传递。</p>
<span id="more"></span>



<h2 id="成年认证"><a href="#成年认证" class="headerlink" title="成年认证"></a>成年认证</h2><p>此时如果不同的机构对于成年的认证不同，A机构认为大于18岁才能算成年，B机构认为大于等于18岁就算成年。此时又可以对findMan进行封装，可以通过反射获取特定的类进行校验，以SpringBoot工程为例。<br>此时可以给person加一个属性，认证机构。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写工具类获取SpringApplicationContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        SpringContextUtil.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义接口以及实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">findManByDepartment</span><span class="params">(Person person)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findManByDepartment</span><span class="params">(Person person)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> person.getAge() &gt; <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Department</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findManByDepartment</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person.getAge() &gt;= <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过反射动态返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>,<span class="string">&quot;A&quot;</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小华&quot;</span>, <span class="number">17</span>,<span class="string">&quot;B&quot;</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小红&quot;</span>, <span class="number">16</span>,<span class="string">&quot;A&quot;</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;大明&quot;</span>, <span class="number">19</span>,<span class="string">&quot;B&quot;</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;超明&quot;</span>, <span class="number">20</span>,<span class="string">&quot;A&quot;</span>));</span><br><span class="line">        System.out.println(persons);</span><br><span class="line">        <span class="comment">//并发找出所有成年人,并存入map中</span></span><br><span class="line">        ArrayList&lt;CompletableFuture&lt;Boolean&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CompletableFuture&lt;Boolean&gt;&gt;();</span><br><span class="line">        HashMap&lt;Person, Boolean&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">            resList.add(CompletableFuture.supplyAsync(() -&gt; findMan(person), Executors.newFixedThreadPool(<span class="number">5</span>)).whenComplete((r, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == e) &#123;</span><br><span class="line">                    map.put(person, r);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从map中获取结果</span></span><br><span class="line">        CompletableFuture.allOf(resList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[resList.size()])).whenComplete((r, e) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == e) &#123;</span><br><span class="line">                map.forEach((key,value)-&gt;&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> value ? (key+<span class="string">&quot;已成年&quot;</span>):(key+<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">findMan</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringContextUtil.getApplicationContext();</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(person.getDepartment());</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;findManByDepartment&quot;</span>, person.getClass());</span><br><span class="line">            flag = (<span class="type">boolean</span>) method.invoke(applicationContext.getBean(clazz), person);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法就可以对并发处理进行管控以及结果记录或处理，可以大大的提高系统性能和工作效率。</p>
]]></content>
      <tags>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Elasticsearch查询记录超过10000时的异常</title>
    <url>/post/7235e59d.html</url>
    <content><![CDATA[<p>最近遇到使用 ElasticSearch 做分页查询时，前面的页码都正常，后面的页码就会 500 错误的问题，一度怀疑是接口页码算错了。后来想起 ES 有个 10000 条数据的限制，默认返回数据量为 10000 条，超过的话就会报错。这里记录下解决办法。</p>
<span id="more"></span>

<h2 id="异常信息"><a href="#异常信息" class="headerlink" title="异常信息"></a>异常信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: ElasticsearchException[Elasticsearch exception [type=illegal_argument_exception, reason=Result window is too large, from + size must be less than or equal to: [10000] but was [10100]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting.]]; nested: ElasticsearchException[Elasticsearch exception [type=illegal_argument_exception, reason=Result window is too large, from + size must be less than or equal to: [10000] but was [10100]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting.]];</span><br></pre></td></tr></table></figure>

<p>从错误信息里面其实已经能看到解决方法了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This limit can be set by changing the [index.max_result_window] index level setting.</span><br></pre></td></tr></table></figure>

<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li><p>修改配置文件(需要重启 ES 服务)</p>
<p>修改 ES 配置文件<code>config/elasticsearch.yml</code>，在文件末尾添加一行:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">max_result_window:</span> <span class="number">200000000</span></span><br></pre></td></tr></table></figure>

<p>在 5.x 版本以上的 ES 中已经不再支持。</p>
<p><img src="https://img.iszy.xyz/20210226173324.png"></p>
</li>
<li><p>通过接口修改索引的配置(推荐)</p>
<p>修改 max_result_window 设置的最大索引值，注意以 put 方式提交。这种方式只能对每个 index 单独开启，毕竟也不是每个索引都需要返回那么大数据量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://localhost:9200/my_index/_settings?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> &quot;index&quot;:&#123;</span></span><br><span class="line"><span class="string">     &quot;max_result_window&quot;:200000000</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题v8配置自定义字体</title>
    <url>/post/d8642980.html</url>
    <content><![CDATA[<p>今天改了一下 NexT 主题的字体配置，发现还是有一些需要注意的地方的，在此记录一下。</p>
<span id="more"></span>

<h2 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h2><p>在此篇文章发布时，我用的是 v8.2.1 版本的<a href="https://github.com/next-theme/hexo-theme-next">next-theme&#x2F;hexo-theme-next</a>，通过<code>npm install hexo-theme-next</code>安装，所以尽量不想改动主题源文件。</p>
<p>现在这里展示下最终的配置，只改动了主题的配置(字体部分)，符合我一开始的期望。</p>
<p>这边的配置是这样的，可以改成自己喜欢的</p>
<ul>
<li>中文字体: Noto Serif SC</li>
<li>英文字体: EB Garamond</li>
<li>站点标题字体: Cinzel Decorative</li>
<li>代码字体: JetBrains Mono</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">&quot;EB Garamond, &#x27;Noto Serif SC&#x27;&quot;</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Cinzel</span> <span class="string">Decorative</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">JetBrains</span> <span class="string">Mono</span></span><br></pre></td></tr></table></figure>

<p>如果只需要看最后是怎么配置的，到这里就可以结束了，下面是我折腾的过程。</p>
<h2 id="折腾过程"><a href="#折腾过程" class="headerlink" title="折腾过程"></a>折腾过程</h2><p>涉及到的文件有以下几个。</p>
<ul>
<li>config.next.yml(主题配置文件)</li>
<li>node_modules&#x2F;hexo-theme-next&#x2F;source&#x2F;css&#x2F;_variables&#x2F;base.styl(主题源文件中关于字体配置的 css 变量)</li>
<li>source&#x2F;_data&#x2F;styles.styl(自定义样式文件)</li>
</ul>
<h3 id="查询资料"><a href="#查询资料" class="headerlink" title="查询资料"></a>查询资料</h3><p>虽说之前就看过主题配置文件中有这个字体配置的地方，姑且还是在网上查了一下其他人是怎么配置的。</p>
<p>然后我发现完整展示实际配置内容的较少，且基本上每一个类型都只配置了一个 font family，在其中一篇博文中还表示多在 NexT 主题的这个配置下多 font family 的配置是不支持的，这个我还是感觉比较诧异的，应该会有不少人有这样的需求吧。</p>
<p><img src="https://img.iszy.xyz/20210225171504.png"></p>
<p>所以根据网上的说法，就有以下两个方法进行字体配置。</p>
<ol>
<li><p>简单配置</p>
<p>在 NexT 配置中直接进行配置，内容为单个 font-family 值。</p>
</li>
<li><p>复杂配置</p>
<ol>
<li><p>在主题配置文件中指定自定义样式文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>，在对应路径下创建自定义样式文件，然后在文件中直接对对应的 html 标签编写 css。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-class">.post-body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: EB Garamond, <span class="string">&quot;Noto Serif SC&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Cinzel Decorative, EB Garamond, <span class="string">&quot;Noto Serif SC&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pre,</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: JetBrains Mono, consolas, Menlo, monospace, <span class="string">&quot;Noto Serif SC&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="探寻方案"><a href="#探寻方案" class="headerlink" title="探寻方案"></a>探寻方案</h3><p>不过直接加 css 有点不太优雅，万一以后多了什么标签，我还得手动改 css，那就要看看为什么不支持了。</p>
<p>在主题的代码中，我们能找到这么一段关于字体的配置。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get_font_family</span>(config) &#123;</span><br><span class="line">  <span class="variable">$custom-family</span> = <span class="built_in">hexo-config</span>(&#x27;font.&#x27; + config + &#x27;.family&#x27;);</span><br><span class="line">  return <span class="variable">$custom-family</span> is <span class="selector-tag">a</span> &#x27;string&#x27; ? <span class="built_in">unquote</span>($custom-family) : null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Font families.</span></span><br><span class="line"><span class="variable">$font-family-chinese</span>      = &#x27;PingFang SC&#x27;, &#x27;Microsoft YaHei&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-base</span>         = <span class="variable">$font-family-chinese</span>, sans-serif;</span><br><span class="line"><span class="variable">$font-family-base</span>         = <span class="built_in">get_font_family</span>(&#x27;global&#x27;), <span class="variable">$font-family-chinese</span>, sans-serif if <span class="built_in">get_font_family</span>(&#x27;global&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-logo</span>         = <span class="variable">$font-family-base</span>;</span><br><span class="line"><span class="variable">$font-family-logo</span>         = <span class="built_in">get_font_family</span>(&#x27;title&#x27;), <span class="variable">$font-family-base</span> if <span class="built_in">get_font_family</span>(&#x27;title&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-headings</span>     = <span class="variable">$font-family-base</span>;</span><br><span class="line"><span class="variable">$font-family-headings</span>     = <span class="built_in">get_font_family</span>(&#x27;headings&#x27;), <span class="variable">$font-family-base</span> if <span class="built_in">get_font_family</span>(&#x27;headings&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-posts</span>        = <span class="variable">$font-family-base</span>;</span><br><span class="line"><span class="variable">$font-family-posts</span>        = <span class="built_in">get_font_family</span>(&#x27;posts&#x27;), <span class="variable">$font-family-base</span> if <span class="built_in">get_font_family</span>(&#x27;posts&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-monospace</span>    = consolas, Menlo, monospace, <span class="variable">$font-family-chinese</span>;</span><br><span class="line"><span class="variable">$font-family-monospace</span>    = <span class="built_in">get_font_family</span>(&#x27;codes&#x27;), consolas, Menlo, monospace, <span class="variable">$font-family-chinese</span> if <span class="built_in">get_font_family</span>(&#x27;codes&#x27;);</span><br></pre></td></tr></table></figure>

<p>我们可以看到这边最主要的就是这个<code>get_font_family</code>方法，做的事情就是获取配置文件中对应项的值，如果不为空就去掉一下引号返回，否则返回<code>null</code>。</p>
<p>从代码上来看，并没有不支持多 font family 配置，所以我就试了以下几个配置看看效果。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">EB</span> <span class="string">Garamond,</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>

<p>首先这个配置，<code>EB Garamond</code>这个字体是生效了的，但<code>Noto Serif SC</code>没有生效。经过查询，在 css 规范中(<a href="http://jigsaw.w3.org/css-validator/">css 校验器</a>)带空格的 font family 是要加引号的，于是改为了以下配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">&#x27;EB Garamond&#x27;</span><span class="string">,</span> <span class="string">&#x27;Noto Serif SC&#x27;</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>

<p>好家伙，这个配置直接在 yaml 结构上就不支持，会报错。应当是被当作 map 解析了，不过结构也不正确，果断跳过。</p>
<p>经过查询，<code>unquote</code>这个方法，只是去除最外层引号的，而我将整个配置都套进双引号，应当就会被解析为字符串了，所以有了下面的配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">&quot;&#x27;EB Garamond&#x27;, &#x27;Noto Serif SC&#x27;&quot;</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>

<p>这个配置其实已经成功了，所有字体都展示得很正常。不过，我们平常确实能看到很多带空格的 font family 是没有加引号的，这又是为什么呢？</p>
<h3 id="无所谓的优化"><a href="#无所谓的优化" class="headerlink" title="无所谓的优化"></a>无所谓的优化</h3><p>经过进一步的查询，font family 在什么情况下要加引号和转义情况还是比较复杂的，需要先搞清楚 css 字符串和标识符之间的区别。</p>
<h4 id="字符串和标识符"><a href="#字符串和标识符" class="headerlink" title="字符串和标识符"></a>字符串和标识符</h4><p>关于<a href="https://www.w3.org/TR/CSS2/syndata.html#strings">字符串</a>，w3c 表示</p>
<blockquote>
<p>字符串可以放在单引号也可以放在双引号里，引号里面的相同引号需要转义。</p>
<p>Strings can either be written with double quotes or with single quotes. Double quotes cannot occur inside double quotes, unless escaped (e.g., as ‘&quot;‘ or as ‘\22’). Analogously for single quotes (e.g., “&#39;“ or “\27”).</p>
</blockquote>
<p>而<a href="https://www.w3.org/TR/CSS2/syndata.html#characters">标识符</a>的定义如下</p>
<blockquote>
<p>在 CSS 里，标识符(包括元素名称，类名，选择器里的 ID)只能包含字符[a-zA-Z0-9]，ISO 10646 里比 U+00A0 大的字符，还有连字符（-）和下划线（_）。标识符不能以数字，两个下划线后者一个下划线后面跟一个数字开头。标识符也能包含转义字符还有 ISO 10646 定义的数字编码。举个例子：<code>B&amp;W?</code>应该写成<code>B\&amp;W\?</code>或者 <code>B\26 W\3F</code>。</p>
<p>In CSS, identifiers (including element names, classes, and IDs in selectors) can contain only the characters [a-zA-Z0-9] and ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_); they cannot start with a digit, two hyphens, or a hyphen followed by a digit. Identifiers can also contain escaped characters and any ISO 10646 character as a numeric code (see next item). For instance, the identifier “B&amp;W?” may be written as “B&amp;W?“ or “B\26 W\3F”.</p>
</blockquote>
<h4 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h4><p><a href="https://drafts.csswg.org/css-fonts-3/#font-family-prop">css 规范</a>指出</p>
<blockquote>
<p>字体族的名字要么作为字符串用引号包含起来，要么作为标识符，不需要引号。这就意味着在没有引号的名称里，开头的大多数标点符号和数字都需要被转义</p>
<p>Font family names other than generic families must either be given quoted as strings, or unquoted as a sequence of one or more identifiers. This means most punctuation characters and digits at the start of each token must be escaped in unquoted font family names.</p>
</blockquote>
<p>规范里用一个新的段落来说明：</p>
<blockquote>
<p>如果 font family 的名字是一系列标识符。那么计算机识别的最终值是单个空格分隔的标识符转换成字符串后的值。</p>
<p>If <strong>a sequence of identifiers</strong> is given as a font family name, the computed value is the name converted to a string by joining all the identifiers in the sequence by single spaces.</p>
</blockquote>
<p>所以<code>Microsoft YaHei</code>表示由多个空格分隔的标识符组成了单一字体族名称，而带引号的<code>&#39;Microsoft YaHei&#39;</code>仅是简单的字符串，都是合法的 CSS。</p>
<h4 id="字体族关键字"><a href="#字体族关键字" class="headerlink" title="字体族关键字"></a>字体族关键字</h4><p>规范定义了一些通用关键字，</p>
<blockquote>
<p>通用关键字: serif, sans-serif, cursive, fantasy, 和 monospace.这些关键字可以作为普通的回退机制，以防期望的字体不可以用的时候。</p>
<p>The following generic family keywords are defined: ‘serif’, ‘sans-serif’, ‘cursive’, ‘fantasy’, and ‘monospace’.</p>
</blockquote>
<p>关于和关键字相同名称的字体族，</p>
<blockquote>
<p>当字体族名称恰好和关键字名称一样，那就必须套上引号来防止冲突。</p>
<p>Font family names that happen to be the same as keyword value (‘inherit’, ‘serif’, etc.) must be quoted to prevent confusion with the keywords with the same names.</p>
</blockquote>
<p>另，关键字都是不区分大小写的。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>所以问题也就明晰了，之前不加引号，<code>Noto Serif SC</code>字体应用有问题，就是因为这个字体族名称中有<code>Serif</code>关键字，被解析成了<code>serif</code>并使用了浏览器默认配置的<code>serif</code>字体。</p>
<p>所以就能把配置进一步优化成我的最终配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">&quot;EB Garamond, &#x27;Noto Serif SC&#x27;&quot;</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>

<p>当然去除引号不是必要操作，加上引号还是比较保险的，单字体族的配置中遇到保留关键字也需要套上引号。要像下面这样套多层引号，否则编译的时候会被去掉一层。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">&quot;&#x27;Noto Serif SC&#x27;&quot;</span></span><br><span class="line">  <span class="attr">size:</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch使用text类型字段排序报错</title>
    <url>/post/f24ea6eb.html</url>
    <content><![CDATA[<p>在使用 ElasticSearch 进行查询时，排序是相当常见的一种操作。不过，一般情况下，我们都会对数字、日期类型等进行排序，较少直接对 text 类型进行排序。今天偶然遇到了需要对 text 类型进行排序的情况，就一不小心掉坑里了，这边记录下解决方法。</p>
<span id="more"></span>

<h2 id="问题还原"><a href="#问题还原" class="headerlink" title="问题还原"></a>问题还原</h2><p>我们的问题是，对 text 类型进行排序时，ES 会报错。</p>
<p>错误内容形如:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fielddata is disabled on text fields by default.  Set `fielddata=true` on</span><br><span class="line">[`your_field_name`] in order to load  fielddata in memory by uninverting the</span><br><span class="line">inverted index. Note that this can however use significant memory.</span><br></pre></td></tr></table></figure>

<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>默认的 text 类型字段的 mapping 大概是这样的。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dm&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>根据上面的错误信息，我们可以去 ES 的文档中查一下<code>Fielddata</code>这个属性的说明。</p>
<blockquote>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/text.html#fielddata-mapping-param">fielddata mapping parameter</a></p>
</blockquote>
<p><img src="https://img.iszy.xyz/20210224173812.png" alt="fielddata mapping parameter"></p>
<p>按照官方的说明，text 类型的字段默认不支持聚合、排序等操作，此时如果进行聚合、排序等操作就会出现上文所示的错误信息。</p>
<h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>那么，第一种启用 text 字段的聚合、排序等操作的方法也就清楚了，就是在 mapping 中将<code>fielddata</code>设置为<code>true</code>，此属性默认为<code>false</code>。这样，就能对该 text 字段进行常规的聚合、排序等操作了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my_field&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fielddata&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>不过需要注意的是，启用<code>fielddata</code>会将数据存储到程序的堆中，可能会带来性能、内存使用量增大等问题，这通常是没有必要的。</p>
<h3 id="第二种方法【推荐】"><a href="#第二种方法【推荐】" class="headerlink" title="第二种方法【推荐】"></a>第二种方法【推荐】</h3><p><img src="https://img.iszy.xyz/20210224180354.png" alt="Before enabling fielddata"></p>
<p>为了解决上面提到的性能和资源的浪费，官方更推荐使用多字段映射的方式。也就是一方面保留原字段来进行全文搜索，另一方面使用一个未做处理的<code>keyword</code>字段来进行聚合、排序等操作。配置方法如下示例所示。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my_field&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在这样配置以后，在进行搜索时使用<code>my_field</code>字段，在进行聚合、排序等操作时使用<code>my_field.keyword</code>字段，这样能够比直接启用<code>fielddata</code>获得更好的性能表现。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>通俗易通的设计模式总结，带你彻底搞定设计模式</title>
    <url>/post/2c03d14d.html</url>
    <content><![CDATA[<h2 id="七大设计原则"><a href="#七大设计原则" class="headerlink" title="七大设计原则"></a>七大设计原则</h2><h3 id="一句话归纳七大设计原则"><a href="#一句话归纳七大设计原则" class="headerlink" title="一句话归纳七大设计原则"></a>一句话归纳七大设计原则</h3><table>
<thead>
<tr>
<th>设计原则</th>
<th>一句话归纳</th>
<th>目的</th>
</tr>
</thead>
<tbody><tr>
<td>开闭原则</td>
<td>对扩展开放，对修改关闭</td>
<td>减少维护带来新的风险</td>
</tr>
<tr>
<td>依赖倒置原则</td>
<td>高层不依赖低层</td>
<td>更利于代码结构升级扩展</td>
</tr>
<tr>
<td>单一职责原则</td>
<td>一个类只干一件事</td>
<td>便于理解，提高代码可读性</td>
</tr>
<tr>
<td>接口隔离原则</td>
<td>一个接口只干一件事</td>
<td>功能解耦，高聚合，低耦合</td>
</tr>
<tr>
<td>迪米特法则</td>
<td>不该知道的不要知道</td>
<td>只和朋友交流，不和陌生人说话，减少代码臃肿</td>
</tr>
<tr>
<td>里氏替换原则</td>
<td>子类重写方法功能，不应该影响父类方法</td>
<td>防止继承泛滥</td>
</tr>
<tr>
<td>合成复用原则</td>
<td>尽量使用组合实现代码复用，而不用继承</td>
<td>降低代码耦合</td>
</tr>
</tbody></table>
<span id="more"></span>



<h2 id="GOF-23种设计模式"><a href="#GOF-23种设计模式" class="headerlink" title="GOF 23种设计模式"></a>GOF 23种设计模式</h2><h3 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h3><p><strong>GOF</strong>的设计模式是java基础知识和J2EE框架知识之间的一座隐性的“<strong>桥</strong>”。</p>
<h3 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h3><blockquote>
<ul>
<li>创建型：定义创建对象时的规则。<ul>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>建造者模式</li>
<li>单例模式</li>
<li>原型模式</li>
</ul>
</li>
<li>结构型：定义实现代码复用时的形式。<ul>
<li>适配器模式</li>
<li>装饰器模式    </li>
<li>代理模式</li>
<li>门面模式</li>
<li>组合模式</li>
<li>享元模式</li>
<li>桥接模式</li>
</ul>
</li>
<li>行为型：定义代码运行阶段的处理方式。<ul>
<li>策略模式</li>
<li>观察者模式</li>
<li>责任链模式</li>
<li>解释器模式</li>
<li>模板方法模式</li>
<li>迭代器模式</li>
<li>中介者模式</li>
<li>命令模式</li>
<li>访问者模式</li>
<li>备忘录模式</li>
<li>状态模式</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="一句话归纳23种设计原则"><a href="#一句话归纳23种设计原则" class="headerlink" title="一句话归纳23种设计原则"></a>一句话归纳23种设计原则</h3><table>
<thead>
<tr>
<th>设计模式</th>
<th>一句话归纳</th>
<th>目的</th>
<th>生活案例</th>
<th>框架源码举例</th>
</tr>
</thead>
<tbody><tr>
<td>工厂模式(Factory)</td>
<td>产品标准化，生产更高效</td>
<td>封装创建细节</td>
<td>实体工厂</td>
<td>LoggerFactory、 Calender</td>
</tr>
<tr>
<td>单例模式(Singleton)</td>
<td>世上只有一个我</td>
<td>保证独一无二</td>
<td>CEO</td>
<td>BeanFactory、Runtime</td>
</tr>
<tr>
<td>原型模式(Prototype)</td>
<td>拔一根猴毛，吹出千万个</td>
<td>高效创建对象</td>
<td>克隆</td>
<td>ArrayList、PrototypeBean</td>
</tr>
<tr>
<td>建造者模式(Builder)</td>
<td>高配中配与低配，想选哪配就哪配</td>
<td>开放个性化配置</td>
<td>选配</td>
<td>StringBuilder、BeanDefinitionBuilder</td>
</tr>
<tr>
<td>代理模式(Proxy)</td>
<td>没有资源没时间，得找媒婆来帮忙</td>
<td>增强职责</td>
<td>媒婆</td>
<td>ProxyFactoryBean、JdkDynamicAopProxy、CglibAopProxy</td>
</tr>
<tr>
<td>门面模式(Facade)</td>
<td>打开一扇门，走向全世界</td>
<td>统一访问入口</td>
<td>前台</td>
<td>jdbcUtils、RequestFacade</td>
</tr>
<tr>
<td>装饰器模式(Decorator)</td>
<td>大舅二舅都是舅</td>
<td>灵活扩展，同宗同源</td>
<td>煎饼</td>
<td>BufferedReader、InputStream</td>
</tr>
<tr>
<td>享元模式(Flyweight)</td>
<td>优化资源配置，减少重复浪费</td>
<td>共享资源池</td>
<td>全国社保联网</td>
<td>String、Integer、ObjectPool</td>
</tr>
<tr>
<td>组合模式(Composite)</td>
<td>人在一起叫团伙，心在一起叫团队</td>
<td>统一整体和个体</td>
<td>组织架构树</td>
<td>HashMap、SqlNode</td>
</tr>
<tr>
<td>适配器模式(Adapter)</td>
<td>适合自己的，才是最好的</td>
<td>兼容转换(求同存异)</td>
<td>电源适配</td>
<td>AdvisorAdapter、HandlerAdapter</td>
</tr>
<tr>
<td>桥接模式(Bridge)</td>
<td>约定优于配置</td>
<td>不允许用继承</td>
<td>桥</td>
<td>DriverManager</td>
</tr>
<tr>
<td>委派模式(Delegate)</td>
<td>这个需求很简单，怎么实现我不管</td>
<td>只对结果负责</td>
<td>授权委托书</td>
<td>ClassLoader、BeanDefinitionParserDelegate</td>
</tr>
<tr>
<td>模板模式(Template)</td>
<td>流程全部标准化，需要微调请覆盖</td>
<td>逻辑复用</td>
<td>把大象装进冰箱的步骤</td>
<td>JdbcTemplate、HttpServlet</td>
</tr>
<tr>
<td>策略模式(Strategy)</td>
<td>条条大路通罗马，具体哪条你来定</td>
<td>把选择权交给用户</td>
<td>选择支付方式</td>
<td>Comparator、InstantiationStrategy</td>
</tr>
<tr>
<td>责任链模式(Chain of Responsibility)</td>
<td>各人自扫门前雪，莫管他人瓦上霜</td>
<td>解耦处理逻辑</td>
<td>踢皮球</td>
<td>FilterChain、Pipeline</td>
</tr>
<tr>
<td>迭代器模式(Iterater)</td>
<td>流水线上坐一天，每个包裹扫一遍</td>
<td>统一对集合的访问方式</td>
<td>逐个刷脸进站</td>
<td>Iterater</td>
</tr>
<tr>
<td>命令模式(Command)</td>
<td>运筹帷幄之中，决胜千里之外</td>
<td>解耦请求和处理</td>
<td>遥控器</td>
<td>Runable、TimeCase</td>
</tr>
<tr>
<td>状态模式(State)</td>
<td>状态驱动行为，行为决定状态</td>
<td>绑定状态和行为</td>
<td>订单状态跟踪</td>
<td>Lifecycle</td>
</tr>
<tr>
<td>备忘录(Memento)</td>
<td>给我一剂“后悔药”</td>
<td>备份</td>
<td>草稿箱</td>
<td>StateManageableMessageContext</td>
</tr>
<tr>
<td>中介者(Mediator)</td>
<td>联系方式我给你，怎么搞定我不管</td>
<td>统一管理网状资源</td>
<td>朋友圈</td>
<td>Timer</td>
</tr>
<tr>
<td>解释器模式(Interpreter)</td>
<td>我想说“方言”</td>
<td>实现特定语法解析</td>
<td>摩斯密码</td>
<td>Pattern、ExpressionParser</td>
</tr>
<tr>
<td>观察者模式(Observer)</td>
<td>到点就通知我</td>
<td>解耦观察者与被观察者</td>
<td>闹钟</td>
<td>ContextLoaderListener</td>
</tr>
<tr>
<td>访问者模式(Visitor)</td>
<td>横看成岭侧成峰，远近高低各不同</td>
<td>解耦数据结构和数据操作</td>
<td>KPI考核</td>
<td>FileVisitor、BeanDefinitionVisitor</td>
</tr>
</tbody></table>
<h3 id="设计模式混用"><a href="#设计模式混用" class="headerlink" title="设计模式混用"></a>设计模式混用</h3><p>常见的设计模式有这么多，但当我们在业务上实现某个需求的时候很难说只用某一种设计模式就可以解决复杂的业务常用，常常需要多种不同的设计模式混合使用，在不经意间就将一些设计模式杂糅起来了，可以参考下图的关系来定义设计模式的混用技巧。<br><img src="https://img-blog.csdnimg.cn/20210209145337187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/post/72e3b671.html</url>
    <content><![CDATA[<h3 id="策略模式适用场景"><a href="#策略模式适用场景" class="headerlink" title="策略模式适用场景"></a>策略模式适用场景</h3><p>策略模式比较适合在同一套主框架下，有不同的策略可供用户选择的情况下使用。比如在同一套流程中采取不同的支付方式来支付，就可以采用策略模式。</p>
<span id="more"></span>

<h3 id="策略模式使用示例"><a href="#策略模式使用示例" class="headerlink" title="策略模式使用示例"></a>策略模式使用示例</h3><p>首先定义公共接口，使用不同的策略实现类来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsgResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> Object date;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MsgResult</span><span class="params">(<span class="type">int</span> code, String msg, Object date)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MsgResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, date=&quot;</span> + date +</span><br><span class="line">                <span class="string">&quot;, msg=&#x27;&quot;</span> + msg + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Payment</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> MsgResult <span class="title function_">pay</span><span class="params">(String uid, <span class="type">double</span> amount)</span>&#123;</span><br><span class="line">        <span class="comment">//余额是否足够</span></span><br><span class="line">        <span class="keyword">if</span> (queryBalance(uid)&lt; amount)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MsgResult</span>(<span class="number">500</span>,<span class="string">&quot;支付失败&quot;</span>,<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MsgResult</span>(<span class="number">200</span>,<span class="string">&quot;支付成功&quot;</span>,<span class="string">&quot;支付金额&quot;</span> + amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">queryBalance</span><span class="params">(String uid)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliPay</span> <span class="keyword">extends</span> <span class="title class_">Payment</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;支付宝&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">double</span> <span class="title function_">queryBalance</span><span class="params">(String uid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">900</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDPay</span> <span class="keyword">extends</span> <span class="title class_">Payment</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;京东白条&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">double</span> <span class="title function_">queryBalance</span><span class="params">(String uid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionPay</span> <span class="keyword">extends</span> <span class="title class_">Payment</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;银联支付&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">double</span> <span class="title function_">queryBalance</span><span class="params">(String uid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">120</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatPay</span> <span class="keyword">extends</span> <span class="title class_">Payment</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;微信支付&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">double</span> <span class="title function_">queryBalance</span><span class="params">(String uid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">263</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再定义支付策略，可以根据用户传入的参数动态的选择策略进行执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALI_PAY</span> <span class="operator">=</span> <span class="string">&quot;AliPay&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JD_PAY</span> <span class="operator">=</span> <span class="string">&quot;JdPay&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WECHAT_PAY</span> <span class="operator">=</span> <span class="string">&quot;WechatPay&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UNION_PAY</span> <span class="operator">=</span> <span class="string">&quot;UnionPay&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PAY</span> <span class="operator">=</span> ALI_PAY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Payment&gt; strategy = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        strategy.put(ALI_PAY,<span class="keyword">new</span> <span class="title class_">AliPay</span>());</span><br><span class="line">        strategy.put(JD_PAY,<span class="keyword">new</span> <span class="title class_">JDPay</span>());</span><br><span class="line">        strategy.put(WECHAT_PAY,<span class="keyword">new</span> <span class="title class_">WechatPay</span>());</span><br><span class="line">        strategy.put(UNION_PAY,<span class="keyword">new</span> <span class="title class_">UnionPay</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Payment <span class="title function_">get</span><span class="params">(String payKey)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!strategy.containsKey(payKey))&#123;</span><br><span class="line">            <span class="keyword">return</span> strategy.get(DEFAULT_PAY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strategy.get(payKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时可以采用订单类进行调用不同的策略支付。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> amount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(String uid, String orderId, <span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MsgResult <span class="title function_">pay</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pay(PayStrategy.DEFAULT_PAY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> MsgResult <span class="title function_">pay</span><span class="params">(String payKey)</span>&#123;</span><br><span class="line">        <span class="type">Payment</span> <span class="variable">payment</span> <span class="operator">=</span> PayStrategy.get(payKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎使用&quot;</span> + payment.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;本次交易金额为&quot;</span>+amount+<span class="string">&quot;,开始扣款&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> payment.pay(uid,amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;20210204095400&quot;</span>,<span class="number">325.7</span>);</span><br><span class="line">        System.out.println(order.pay());</span><br><span class="line">        System.out.println(order.pay(PayStrategy.UNION_PAY));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">欢迎使用支付宝</span><br><span class="line">本次交易金额为<span class="number">325.7</span>,开始扣款</span><br><span class="line">MsgResult&#123;code=<span class="number">200</span>, date=支付金额<span class="number">325.7</span>, msg=<span class="string">&#x27;支付成功&#x27;</span>&#125;</span><br><span class="line">欢迎使用银联支付</span><br><span class="line">本次交易金额为<span class="number">325.7</span>,开始扣款</span><br><span class="line">MsgResult&#123;code=<span class="number">500</span>, date=余额不足, msg=<span class="string">&#x27;支付失败&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="策略模式类图"><a href="#策略模式类图" class="headerlink" title="策略模式类图"></a>策略模式类图</h3><p><img src="https://img-blog.csdnimg.cn/20210204111941667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过类图可以看出，Order类直接调用PayStrategy来选择策略，而策略类负责对策略进行路由，选择对应的策略来实现对应的功能。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法模式</title>
    <url>/post/ecc6414b.html</url>
    <content><![CDATA[<h2 id="模板方法模式是什么"><a href="#模板方法模式是什么" class="headerlink" title="模板方法模式是什么"></a>模板方法模式是什么</h2><p>模板方法模式指的是将一个定制化流程拆分出来，在不改变整体流程的情况下进行定制化配置钩子，来达到不同的抽象实现。</p>
<span id="more"></span>

<h2 id="模板方法模式案例"><a href="#模板方法模式案例" class="headerlink" title="模板方法模式案例"></a>模板方法模式案例</h2><p>首先一套课程流程可能根据课程的不同有一个模板，多种实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCourse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">createCourse</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1、发布预习资料</span></span><br><span class="line">        postPreResourse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、制作课件</span></span><br><span class="line">        createPPT();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、直播授课</span></span><br><span class="line">        liveVideo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、上传课后资料</span></span><br><span class="line">        postResourse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、布置作业</span></span><br><span class="line">        postHomework();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、检查作业</span></span><br><span class="line">        <span class="keyword">if</span> (needCheckHomework())&#123;</span><br><span class="line">            checkHomework();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">checkHomework</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">needCheckHomework</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postHomework</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;布置作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postResourse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传课后资料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">liveVideo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;直播授课&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createPPT</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;制作课件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postPreResourse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发布预习资料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以动态的根据钩子来设置是否执行某个步骤或修改某个步骤的实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaCourse</span> <span class="keyword">extends</span> <span class="title class_">AbstractCourse</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">needCheckHomework</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNeedCheckHomework</span><span class="params">(<span class="type">boolean</span> needCheckHomework)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.needCheckHomework = needCheckHomework;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">needCheckHomework</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.needCheckHomework;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">checkHomework</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;检查java作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PythonCourse</span> <span class="keyword">extends</span> <span class="title class_">AbstractCourse</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">checkHomework</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;检查python作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========java课程============&quot;</span>);</span><br><span class="line">        <span class="type">JavaCourse</span> <span class="variable">javaCourse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaCourse</span>();</span><br><span class="line">        javaCourse.setNeedCheckHomework(<span class="literal">true</span>);</span><br><span class="line">        javaCourse.createCourse();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===========python课程============&quot;</span>);</span><br><span class="line">        <span class="type">PythonCourse</span> <span class="variable">pythonCourse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PythonCourse</span>();</span><br><span class="line">        pythonCourse.createCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">===========java课程============</span><br><span class="line">发布预习资料</span><br><span class="line">制作课件</span><br><span class="line">直播授课</span><br><span class="line">上传课后资料</span><br><span class="line">布置作业</span><br><span class="line">检查java作业</span><br><span class="line">===========python课程============</span><br><span class="line">发布预习资料</span><br><span class="line">制作课件</span><br><span class="line">直播授课</span><br><span class="line">上传课后资料</span><br><span class="line">布置作业</span><br></pre></td></tr></table></figure>

<h2 id="模板方法模式适用场景"><a href="#模板方法模式适用场景" class="headerlink" title="模板方法模式适用场景"></a>模板方法模式适用场景</h2><p>当一个目标有许多细分步骤，但总体框架不变的时候可以考虑用模板方法模式对单个步骤使用不同的实现方式，或者使用钩子函数来定义某个步骤是否执行。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>委派模式</title>
    <url>/post/3ffc1ee8.html</url>
    <content><![CDATA[<h2 id="委派模式的定义"><a href="#委派模式的定义" class="headerlink" title="委派模式的定义"></a>委派模式的定义</h2><p>委派模式是一种通过中间类对一个职责的委派来达到职责分明的一种设计模式。</p>
<span id="more"></span>

<h2 id="委派模式案例"><a href="#委派模式案例" class="headerlink" title="委派模式案例"></a>委派模式案例</h2><p>比如一个老板需要分配任务，此时他需要给项目经理分配任务，而项目经理则需要给每一个合适的人分配合适的任务，此时可以通过委派模式将任务分配给合适的人。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boss</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">command</span><span class="params">(String task,Leader leader)</span>&#123;</span><br><span class="line">        leader.doing(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IEmployee</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">(String task)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeA</span> <span class="keyword">implements</span> <span class="title class_">IEmployee</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">goodAt</span> <span class="operator">=</span> <span class="string">&quot;编程&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是员工A，我擅长&quot;</span>+goodAt+<span class="string">&quot;,我现在开始做&quot;</span>+task+<span class="string">&quot;工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeB</span> <span class="keyword">implements</span> <span class="title class_">IEmployee</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">goodAt</span> <span class="operator">=</span> <span class="string">&quot;平面设计&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是员工B，我擅长&quot;</span>+goodAt+<span class="string">&quot;,我现在开始做&quot;</span>+task+<span class="string">&quot;工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时老板和员工之间不会直接对接，而是通过一个类委派任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Leader</span> <span class="keyword">implements</span> <span class="title class_">IEmployee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,IEmployee&gt; employee = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Leader</span><span class="params">()</span>&#123;</span><br><span class="line">        employee.put(<span class="string">&quot;爬虫&quot;</span>,<span class="keyword">new</span> <span class="title class_">EmployeeA</span>());</span><br><span class="line">        employee.put(<span class="string">&quot;海报图&quot;</span>,<span class="keyword">new</span> <span class="title class_">EmployeeB</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    publia c <span class="keyword">void</span> <span class="title function_">doing</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!employee.containsKey(task))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个任务&quot;</span>+task+<span class="string">&quot;超出我的能力范围&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            employee.get(task).doing(task);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Boss</span>().command(<span class="string">&quot;海报图&quot;</span>,<span class="keyword">new</span> <span class="title class_">Leader</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Boss</span>().command(<span class="string">&quot;爬虫&quot;</span>,<span class="keyword">new</span> <span class="title class_">Leader</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Boss</span>().command(<span class="string">&quot;卖手机&quot;</span>,<span class="keyword">new</span> <span class="title class_">Leader</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">我是员工B，我擅长平面设计,我现在开始做海报图工作</span><br><span class="line">我是员工A，我擅长编程,我现在开始做爬虫工作</span><br><span class="line">这个任务卖手机超出我的能力范围</span><br></pre></td></tr></table></figure>

<h2 id="委派模式类图"><a href="#委派模式类图" class="headerlink" title="委派模式类图"></a>委派模式类图</h2><p><img src="https://img-blog.csdnimg.cn/20210129160417473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/post/563268dc.html</url>
    <content><![CDATA[<h2 id="什么是桥接模式"><a href="#什么是桥接模式" class="headerlink" title="什么是桥接模式"></a>什么是桥接模式</h2><p>桥接模式指的是为了避免接口与类之间的大量继承，不通过继承，而通过组合等其他方式搭建一个类似于桥之类的东西来实现不同维度的类之间的联系。</p>
<span id="more"></span>

<h2 id="桥接模式案例"><a href="#桥接模式案例" class="headerlink" title="桥接模式案例"></a>桥接模式案例</h2><p>首先有一个信息接口，对于信息存在两个维度，一个是短信、邮件等信息类型，一种是紧急程度的维度，分为普通程度和紧急模式。<br>首先由一个信息的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMessage</span> &#123;</span><br><span class="line">    <span class="comment">//发送消息的内容和接收人</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message,String toUser)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailMessage</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message, String toUser)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用邮件消息发送&quot;</span>+ message + <span class="string">&quot;给&quot;</span> + toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsMessage</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message, String toUser)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用短信消息发送&quot;</span>+ message + <span class="string">&quot;给&quot;</span> + toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么要在另一个维度对接口进行修改，可以将接口通过构造方法传到一个抽象类中而非使用继承来创造桥梁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractMessage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IMessage message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractMessage</span><span class="params">(IMessage message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message,String toUser)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message.send(message,toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他方法通过继承这个抽象类来实现组合桥接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalMessage</span> <span class="keyword">extends</span> <span class="title class_">AbstractMessage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NormalMessage</span><span class="params">(IMessage message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrgencyMessage</span> <span class="keyword">extends</span> <span class="title class_">AbstractMessage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UrgencyMessage</span><span class="params">(IMessage message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, String toUser)</span>&#123;</span><br><span class="line">        message = <span class="string">&quot;【加急】&quot;</span> + message;</span><br><span class="line">        <span class="built_in">super</span>.sendMessage(message,toUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">watch</span><span class="params">(String messageId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样通过组合的方式可以避免出现类似下面这样的代码而重复写多个交叉的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalEmailMessage</span>  <span class="keyword">extends</span>  <span class="title class_">AbstractMessage</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsMessage</span>();</span><br><span class="line">        <span class="type">AbstractMessage</span> <span class="variable">abstractMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NormalMessage</span>(message);</span><br><span class="line">        abstractMessage.sendMessage(<span class="string">&quot;加班申请&quot;</span>,<span class="string">&quot;王总&quot;</span>);</span><br><span class="line"></span><br><span class="line">        message = <span class="keyword">new</span> <span class="title class_">EmailMessage</span>();</span><br><span class="line">        abstractMessage = <span class="keyword">new</span> <span class="title class_">UrgencyMessage</span>(message);</span><br><span class="line">        abstractMessage.sendMessage(<span class="string">&quot;加班申请&quot;</span>,<span class="string">&quot;王总&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用短信消息发送加班申请给王总</span><br><span class="line">使用邮件消息发送【加急】加班申请给王总</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210127220956765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上面的案例就是通过AbstractMessage 作为桥梁连接信息的方式和紧急程度两个维度的。</p>
<h2 id="桥接模式使用场景"><a href="#桥接模式使用场景" class="headerlink" title="桥接模式使用场景"></a>桥接模式使用场景</h2><p>类似于JDBC就是典型的桥接模式.<br>Class.forName(driver)就是利用你反射初始化类的时候创建了一个DriverManager的桥接，一方面连接java的数据库实现，一方面连接不同的数据库的实现方式，使用非继承的方式实现了不同维度之间的关联。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/post/df879792.html</url>
    <content><![CDATA[<h2 id="什么是组合服务"><a href="#什么是组合服务" class="headerlink" title="什么是组合服务"></a>什么是组合服务</h2><p>组合服务指的是一个整体和个体操作的共同属性放在一个顶层接口或抽象类中，整体和个体作为这个类的子类根据不同的规则进行不同的实现。</p>
<span id="more"></span>

<h2 id="组合服务的使用"><a href="#组合服务的使用" class="headerlink" title="组合服务的使用"></a>组合服务的使用</h2><p>组合服务常用的场景有一个文件目录可能存在文件和文件夹，而文件下下面又有文件和文件夹，这种情况为了解决类似List&lt;List<File>&gt;这种多层次调用的问题可以将文件和文件夹抽象为一个目录，抽象方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Directory</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Directory</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时可以将文件和文件夹分别继承这个抽象类，分别实现其中的方法达到不同的展示目的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">File</span> <span class="keyword">extends</span> <span class="title class_">Directory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Folder</span> <span class="keyword">extends</span> <span class="title class_">Directory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Directory&gt; dirs;</span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Folder</span><span class="params">(String name,Integer level)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">        <span class="built_in">this</span>.dirs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Directory&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (Directory directory:dirs)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.level!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.level; i++) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.level; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.print(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                directory.show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Directory dir)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.dirs.add(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Directory dir)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.dirs.remove(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Directory <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.dirs.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Directory dir:dirs) &#123;</span><br><span class="line">            System.out.println(dir.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过实现不同的show方法达到展示的目的。<br>测试上面代码的案例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========组合模式===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Word.exe&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Excel.exe&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">ppt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;PowerPoint.exe&quot;</span>);</span><br><span class="line">        <span class="type">Folder</span> <span class="variable">office</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;办公软件&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        office.add(word);</span><br><span class="line">        office.add(excel);</span><br><span class="line">        office.add(ppt);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">qq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;QQ.exe&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">wx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;微信.exe&quot;</span>);</span><br><span class="line">        <span class="type">Folder</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;D盘&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        root.add(qq);</span><br><span class="line">        root.add(wx);</span><br><span class="line">        root.add(office);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========show()===========&quot;</span>);</span><br><span class="line">        root.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;==========list()===========&quot;</span>);</span><br><span class="line">        root.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==========show()===========</span><br><span class="line">D盘</span><br><span class="line">   +-QQ.exe</span><br><span class="line">   +-微信.exe</span><br><span class="line">   +-办公软件</span><br><span class="line">      +--Word.exe</span><br><span class="line">      +--Excel.exe</span><br><span class="line">      +--PowerPoint.exe</span><br><span class="line">==========list()===========</span><br><span class="line">QQ.exe</span><br><span class="line">微信.exe</span><br><span class="line">办公软件</span><br></pre></td></tr></table></figure>

<h2 id="组合模式使用场景"><a href="#组合模式使用场景" class="headerlink" title="组合模式使用场景"></a>组合模式使用场景</h2><p>类似于一个树形结构，跟节点或者叶子结点都有相同的跟节点，可以将跟节点和叶子结点的相同属性抽离出来作为一个抽象类，跟节点和叶子结点分别继承相同的抽象类，分别实现不同的方法，这种情况下可以用组合模式来实现。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/post/9bd93306.html</url>
    <content><![CDATA[<h2 id="装饰器模式应用场景"><a href="#装饰器模式应用场景" class="headerlink" title="装饰器模式应用场景"></a>装饰器模式应用场景</h2><p>装饰器模式是一种类似于搭积木一样的模式，在底层会提供一个基础版本，可以在上面累加各种各样不同的配件，比如一个空房子，可以自由组合里面的家具。</p>
<span id="more"></span>

<h2 id="装饰器模式的使用"><a href="#装饰器模式的使用" class="headerlink" title="装饰器模式的使用"></a>装饰器模式的使用</h2><p>首先需要写一个接口或抽象类，并且一个基础版本来继承这个接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BatterCake</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title function_">getMsg</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseBatterCake</span> <span class="keyword">extends</span> <span class="title class_">BatterCake</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;煎饼&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后提供一个对外的装饰器继承这个接口，此时这个对外接口必须提供一个构造方法，传入的参数为父类的对象，同时继承父类的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatterCakeDecorator</span> <span class="keyword">extends</span> <span class="title class_">BatterCake</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BatterCake batterCake;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BatterCakeDecorator</span><span class="params">(BatterCake batterCake)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.batterCake = batterCake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.batterCake.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.batterCake.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后可以通过这个装饰器向下扩展很多个基础扩展，实现对基础版本的叠加。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EggDecorator</span> <span class="keyword">extends</span> <span class="title class_">BatterCakeDecorator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EggDecorator</span><span class="params">(BatterCake batterCake)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(batterCake);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getMsg() + <span class="string">&quot;+鸡蛋&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getPrice() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SauageDecorator</span> <span class="keyword">extends</span> <span class="title class_">BatterCakeDecorator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SauageDecorator</span><span class="params">(BatterCake batterCake)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(batterCake);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getMsg() + <span class="string">&quot;+香肠&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getPrice() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试以上的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BatterCake batterCake;</span><br><span class="line"></span><br><span class="line">        batterCake = <span class="keyword">new</span> <span class="title class_">BaseBatterCake</span>();</span><br><span class="line"></span><br><span class="line">        batterCake = <span class="keyword">new</span> <span class="title class_">EggDecorator</span>(batterCake);</span><br><span class="line">        batterCake = <span class="keyword">new</span> <span class="title class_">EggDecorator</span>(batterCake);</span><br><span class="line">        batterCake = <span class="keyword">new</span> <span class="title class_">SauageDecorator</span>(batterCake);</span><br><span class="line"></span><br><span class="line">        System.out.println(batterCake.getMsg()+<span class="string">&quot;, 总价：&quot;</span>+batterCake.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">煎饼+鸡蛋+鸡蛋+香肠, 总价：<span class="number">9</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="装饰器模式类图"><a href="#装饰器模式类图" class="headerlink" title="装饰器模式类图"></a>装饰器模式类图</h2><p><img src="https://img-blog.csdnimg.cn/20210126193626721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>装饰器模式就是利用Decorator装饰器的构造方法创建一个Base基础类，通过Decorator装饰器的子类对装饰器不断地叠加达到搭积木的效果。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>由 SpringBoot 升级到 2.4.2 引发的 Jackson 的 JsonFormat 问题排查</title>
    <url>/post/b2405a89.html</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/3hmYwN.jpg" alt="3hmYwN"></p>
<span id="more"></span>



<h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>在不久的以前，我们项目的 Tech Lead 决定在git repo中引入 DependaBot 来对项目中的依赖做检查并升级。我们的一个使用 SpringBoot 的服务也就这样成了待升级依赖的一份子。我们待升级的依赖包括但不限于：</p>
<ul>
<li>Bump newrelic-agent from 5.8.0 to 6.3.0 …</li>
<li>Bump guava from 28.0-jre to 30.1-jre …</li>
<li>Bump spring-hateoas from 1.1.0.RELEASE to 1.2.3 …</li>
<li>Bump postgresql from 42.2.8 to 42.2.18 …</li>
<li>Bump cloudwatch from 2.13.41 to 2.15.66 …</li>
<li>Bump json-schema-validator from 4.2.0 to 4.3.3 …</li>
<li>Bump org.springframework.boot from 2.2.5.RELEASE to 2.4.2 …</li>
<li>Bump io.spring.dependency-management …</li>
<li>Bump io.freefair.lombok from 4.1.3 to 5.3.0 …</li>
<li>Bump org.flywaydb.flyway from 6.1.3 to 7.5.0 …</li>
</ul>
<p>可以看到，几乎都将这些依赖升级到了最新的版本，甚至 SpringBoot2.4.2 是在这次升级的前三天 release 的。但是我们不慌，升级依赖什么的对我们来说跟喝水一样简单，因为… </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">jacocoTestCoverageVerification &#123;</span><br><span class="line">  dependsOn <span class="string">&#x27;jacocoTestReport&#x27;</span></span><br><span class="line">  violationRules &#123;</span><br><span class="line">    rule &#123;</span><br><span class="line">      element = <span class="string">&#x27;CLASS&#x27;</span></span><br><span class="line">      limit &#123;</span><br><span class="line">        minimum = <span class="number">1.0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们的代码的测试覆盖率的要求是惊人的100%🤣 这在我之前的公司是绝对无法实现的。不仅仅是 unit test， 我们还有 integration 测试覆盖，还有用到  cypress 又一次覆盖了所有的 endpoint。不就是改改代码么&#x2F;升级依赖啥的么，随便玩。</p>
<h2 id="于是"><a href="#于是" class="headerlink" title="于是"></a>于是</h2><p>梭哈！👨🏻‍💻👨🏻‍💻👨🏻‍💻👨🏻‍💻👨🏻‍💻👨🏻‍💻👨🏻‍💻升级，跑测试！</p>
<p>几分钟后：<img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/do0JqI.png" alt="do0JqI"></p>
<p>行嘛，不出我所料（才怪🙃）果然挂了。</p>
<p>打开log一看， emmm… </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of <span class="built_in">type</span> `java.time.LocalDate` from String <span class="string">&quot;2020-01-15&quot;</span>: Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text <span class="string">&#x27;2020-01-15&#x27;</span> could not be parsed: Unable to obtain LocalDate from TemporalAccessor: &#123;YearOfEra=2020, MonthOfYear=1, DayOfMonth=15&#125;,ISO of <span class="built_in">type</span> java.time.format.Parsed; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of <span class="built_in">type</span> `java.time.LocalDate` from String <span class="string">&quot;2020-01-15&quot;</span>: Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text <span class="string">&#x27;2020-01-15&#x27;</span> could not be parsed: Unable to obtain LocalDate from TemporalAccessor: &#123;YearOfEra=2020, MonthOfYear=1, DayOfMonth=15&#125;,ISO of <span class="built_in">type</span> java.time.format.Parsed</span><br><span class="line"> at [Source: (PushbackInputStream); line: 2, column: 18] (through reference chain: com.example.demo.Demo[<span class="string">&quot;localDate&quot;</span>])]</span><br></pre></td></tr></table></figure>

<p>汪的发！？😢 用的好好的<code>@JsonFormat</code>怎么就突然不好使了？</p>
<h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><h4 id="打开代码看一下："><a href="#打开代码看一下：" class="headerlink" title="打开代码看一下："></a>打开代码看一下：</h4><p>我有这么一个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">(LocalDate localDate)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.localDate = localDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, lenient = OptBoolean.FALSE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate localDate;</span><br><span class="line">    <span class="keyword">public</span> LocalDate <span class="title function_">getLocalDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> localDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocalDate</span><span class="params">(LocalDate localDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.localDate = localDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中配置了 localDate 的反序列化为严格模式<code>lenient = OptBoolean.FALSE</code>，防止将 number 反序列化为日期，那样是不正确的。</p>
<p>有这么一个 controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">test</span><span class="params">(<span class="meta">@RequestBody</span> Demo demo)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">localDate</span> <span class="operator">=</span> demo.getLocalDate().toString();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(localDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码很简单，就是有一个对象，接收一个 LocalDate 的属性，用pattern <code>yyyy-MM-dd</code> 接收类似于<code>2020-01-15</code>这样格式的日期。</p>
<p>但是之前用得好好的升级了 SpringBoot2.4.2之后却用不了了？emmmm… 一定是 SpringBoot 升级升了啥不该升的玩应，🧐我要去 SpringBoot 的升级日志里看看，是不是升级了 Jackson 啥的，万一找到一个大霸哥🦟，提个 PR 不就从此成为顶级开源项目的 contributor 了。。。😎</p>
<h4 id="SpringBoot-2-4-2-升级日志"><a href="#SpringBoot-2-4-2-升级日志" class="headerlink" title="SpringBoot 2.4.2 升级日志"></a>SpringBoot 2.4.2 升级日志</h4><p>去 GitHub 上打开  <a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.4.2">SpringBoot Release v2.4.2</a> ， 浏览下 <strong>Bug Fixes</strong> 、 <strong>Documentation</strong>、<strong>Dependency Upgrades</strong>， 发现一行：</p>
<blockquote>
<p>Upgrade to Jackson Bom 2.11.4 #24726</p>
</blockquote>
<p>果然，升级了 Jackson 到<code>2.11.4</code>。 对比了一下发现我原先的 SpringBoot 中的 Jackson 版本是<code>2.10.2</code>， emm… 一般这种稍大的版本升级都伴随着很多 magic 的事情。总之接下来要去 Jackson 的升级日志里面看一下，有什么升级跨越了<code>2.10.*</code>和<code>2.11.*</code>这两个版本。</p>
<h4 id="Jackson-2-11升级日志"><a href="#Jackson-2-11升级日志" class="headerlink" title="Jackson 2.11升级日志"></a>Jackson 2.11升级日志</h4><p>这个升级日志在它 GitHub 的 wiki 里，点击<a href="https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.11">Jackson Release 2.11</a>。 </p>
<p>阅读一下，第一遍竟然没有找到任何线索，阿西吧🥵，通篇与<code>@JsonFormat</code>的字眼几乎没有。但是，功夫不负有心人，由于我这个错误是时间类型的转换问题，在如下所示的更改中，发现对于<code>Java 8date/time</code>有相关升级：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/xCxT2g.png" alt="xCxT2g"></p>
<blockquote>
<ul>
<li><a href="https://github.com/FasterXML/jackson-modules-java8/issues/148">#148</a>: Allow strict <code>LocalDate</code> parsing</li>
</ul>
</blockquote>
<p>打开这个 <a href="https://github.com/FasterXML/jackson-modules-java8/issues/148">issue</a> 看一下，如他们所讨论的，在之前配置了<code>@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, lenient = OptBoolean.FALSE)</code>, Jackson 创建的<code>DateTimeFormatter</code>还是会使用<code>ResolverStyle.SMART</code> smart 模式，并不能阻止非法日期<code>2019-11-31</code>的输入。 所以在<code>2.11</code>版本之后， 如果设置了<code>lenient = OptBoolean.FALSE</code>, <code>DateTimeFormatter</code>会使用严格模式，看看代码：</p>
<p>在Jackson 中的<code>JSR310DateTimeDeserializerBase</code>这个类中，有这么一个方法<code>createContextual</code>， 有这么一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!deser.isLenient()) &#123;</span><br><span class="line">  df = df.withResolverStyle(ResolverStyle.STRICT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可是，为什么<code>DateTimeFormatter</code>使用了严格模式，会导致上述报错呢？</p>
<h4 id="Java8-之后的-java-time-之-DateTimeFormatter"><a href="#Java8-之后的-java-time-之-DateTimeFormatter" class="headerlink" title="Java8 之后的 java.time 之 DateTimeFormatter"></a>Java8 之后的 java.time 之 DateTimeFormatter</h4><p><strong>严格模式下的字符串转LocalDate</strong></p>
<p><em><strong>举个🌰👀👀</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter</span><br><span class="line">    .ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">    .withResolverStyle(ResolverStyle.STRICT);</span><br><span class="line"></span><br><span class="line">  <span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.parse(<span class="string">&quot;2021-01-20&quot;</span>, formatter);</span><br><span class="line">  System.out.println(<span class="string">&quot;localDate = &quot;</span> + localDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行，并抛出异常，转换失败！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.time.format.DateTimeParseException: Text <span class="string">&#x27;2021-01-20&#x27;</span> could not be parsed: Unable to obtain LocalDate from TemporalAccessor: &#123;YearOfEra=2021, DayOfMonth=20, MonthOfYear=1&#125;,ISO of <span class="built_in">type</span> java.time.format.Parsed</span><br></pre></td></tr></table></figure>

<p>关键字<code>YearOfEra</code>？🧐啊，带年代的年？沃德发😱？</p>
<p>打开类<code>DateTimeFormatter</code>搜索一下<code>yyyy</code>，发现一段注释里面<code>y: year-of-era</code>：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">* All letters &#x27;A&#x27; to &#x27;Z&#x27; and &#x27;a&#x27; to &#x27;z&#x27; are reserved as pattern letters. The</span><br><span class="line">* following pattern letters are defined:</span><br><span class="line">* &lt;table class=&quot;striped&quot;&gt;</span><br><span class="line">* &lt;caption&gt;Pattern Letters and Symbols&lt;/caption&gt;</span><br><span class="line">* &lt;thead&gt;</span><br><span class="line">*  &lt;tr&gt;&lt;th scope=&quot;col&quot;&gt;Symbol&lt;/th&gt;   &lt;th scope=&quot;col&quot;&gt;Meaning&lt;/th&gt;         &lt;th scope=&quot;col&quot;&gt;Presentation&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;Examples&lt;/th&gt;</span><br><span class="line">* &lt;/thead&gt;</span><br><span class="line">* &lt;tbody&gt;</span><br><span class="line">*   &lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;G&lt;/th&gt;       &lt;td&gt;era&lt;/td&gt;                         &lt;td&gt;text&lt;/td&gt;              &lt;td&gt;AD; Anno Domini; A&lt;/td&gt;</span><br><span class="line">*   &lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;u&lt;/th&gt;       &lt;td&gt;year&lt;/td&gt;                        &lt;td&gt;year&lt;/td&gt;              &lt;td&gt;2004; 04&lt;/td&gt;</span><br><span class="line">*   &lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;y&lt;/th&gt;       &lt;td&gt;year-of-era&lt;/td&gt;                 &lt;td&gt;year&lt;/td&gt;              &lt;td&gt;2004; 04&lt;/td&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>原来，<code>u</code>才是代表年的那个字母，而<code>y</code>是指带有纪元（era）的年，在<code>DateTimeFormatter</code>严格模式下使用，<code>yyyy-MM-dd</code>并不合法，正确的使用姿势是<code>uuuu-MM-dd</code>！！！</p>
<p>所以<code>yyyy</code>要怎么用呢？如下，带上<code>G</code>表示一下公元前或者公元后吧。<code>AD/BC</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter</span><br><span class="line">  .ofPattern(<span class="string">&quot;yyyy-MM-dd G&quot;</span>)</span><br><span class="line">  .withResolverStyle(ResolverStyle.STRICT);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.parse(<span class="string">&quot;2021-01-20 AD&quot;</span>, formatter);</span><br></pre></td></tr></table></figure>

<p><strong>至此，大功告成，问题解决，依赖也成功升级</strong></p>
<h4 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h4><p>问题解决了心情很好，但是反思一下，Java8 都出来这么久了，新的日期时间也用了很多，但是就是忽略了<code>y</code>和<code>u</code>这么不起眼的小问题！</p>
<p>在问题的排查中，实际上并不如上述流程这样顺利，我还在 Jackson 的 GitHub 里面提了 issue</p>
<p><a href="https://github.com/FasterXML/jackson-modules-java8/issues/199">https://github.com/FasterXML/jackson-modules-java8/issues/199</a></p>
<p>在我排查 Jackson 的源码的时候，发现他们对于这段代码<code>df = df.withResolverStyle(ResolverStyle.STRICT);</code>的升级，并没有很完善的测试。在他们的源码中可以看到test case 都是只是测试了异常情况，并没有覆盖原先本应该正确的 case（可见 unit test 是多么的重要），他们的测试源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateDeserTest</span> <span class="keyword">extends</span> <span class="title class_">ModuleTestBase</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">MAPPER</span> <span class="operator">=</span> newMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StrictWrapper</span> &#123;</span><br><span class="line">        <span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd&quot;,</span></span><br><span class="line"><span class="meta">                lenient = OptBoolean.FALSE)</span></span><br><span class="line">        <span class="keyword">public</span> LocalDate value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">StrictWrapper</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">StrictWrapper</span><span class="params">(LocalDate v)</span> &#123; value = v; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = InvalidFormatException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStrictCustomFormat</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*StrictWrapper w =*/</span> MAPPER.readValue(<span class="string">&quot;&#123;\&quot;value\&quot;:\&quot;2019-11-31\&quot;&#125;&quot;</span>, StrictWrapper.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个测试的问题在于，将<code>&#123; &quot;value&quot; : &quot;2019-11-31&quot;&#125;</code>改成合法的也能跑过。因为严格模式下， <code>yyyy-MM-dd</code>并不合法，同样会跑出<code>InvalidFormatException</code>异常。所以我在 Jackson 的<code>jackson-modules-java8</code>这个 repo 下还提了一个 PR 去修改他们的测试用例：</p>
<p><a href="https://github.com/FasterXML/jackson-modules-java8/pull/201">https://github.com/FasterXML/jackson-modules-java8/pull/201</a></p>
<p> 不过也只是简单覆盖一下这个 case，对于其他用到<code>yyyy</code>的测试并未做修改，希望我的 PR 能被合进去吧哈哈😜虽然只是单元测试并不是代码功能，但也很有用啊。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>DateTimeFormatter</tag>
        <tag>jackson</tag>
        <tag>lenient</tag>
        <tag>JsonFormat</tag>
      </tags>
  </entry>
  <entry>
    <title>你知道从BIO到NIO的进化史吗？</title>
    <url>/post/d819d929.html</url>
    <content><![CDATA[<h2 id="IO是什么"><a href="#IO是什么" class="headerlink" title="IO是什么"></a>IO是什么</h2><p>IO可以简单地理解为是计算机与硬盘之间进行通讯一种方式，通过输入输出流来进行数据的交互。在java中存在了几种IO的接口，如常见的字节流和字符流。</p>
<blockquote>
<ul>
<li>InputStream ：字节输入流</li>
<li>OutputStream ：字节输出流</li>
<li>Reader ：字符输入流</li>
<li>Writer ：字符输出流</li>
</ul>
</blockquote>
<p>在java应用程序层面通过调用native方法调用操作系统，从硬盘中或者internet中进行对数据的存取操作。</p>
<span id="more"></span>

<h2 id="IO的几种类型"><a href="#IO的几种类型" class="headerlink" title="IO的几种类型"></a>IO的几种类型</h2><p>在IO的发展史中大致存在了以下几种类型的IO操作。<br>在java发展之初性能并不需要维持很大的并发量，因此原始的IO是一种同步并阻塞的IO。在程序&#x3D;&gt;操作系统&#x3D;&gt;硬盘层面只能保证一个线程的操作，并不允许多个线程同时进行连接。<br>随着业务的发展与性能要求的提升，逐渐演变出了一种通过线程池创建的多线程连接，即同步非阻塞的IO，此时会有一个守护线程持续不断的访问硬件层面是否返回成功，返回成功则告诉应用程序。<br>后来由于同步仍然存在部分的阻塞，又演变为一种异步非阻塞的IO，即NIO，此时会将所有连接都阻塞在一个单线程的队列中，开启一个线程来判断是否需要通信，如果需要则修改连接状态进行通讯，并异步返回。</p>
<h2 id="同步并阻塞的BIO"><a href="#同步并阻塞的BIO" class="headerlink" title="同步并阻塞的BIO"></a>同步并阻塞的BIO</h2><p>首先我们来看看初始版本的BIO，只通过一个线程进行同步并阻塞的BIO。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BioServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BioServer has started。Listener on port：&quot;</span>+serverSocket.getLocalSocketAddress());</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;Connection from &quot;</span>+clientSocket.getRemoteSocketAddress());</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(clientSocket.getInputStream()))&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">request</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;quit&quot;</span>.equals(request))&#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(String.format(<span class="string">&quot;From %s : %s&quot;</span>,clientSocket.getRemoteSocketAddress(),request));</span><br><span class="line">                        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="string">&quot;From BioServer Hello &quot;</span>+request+<span class="string">&quot;. \n&quot;</span>;</span><br><span class="line">                        clientSocket.getOutputStream().write(response.getBytes());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时当一个连接占据时其他连接都无法获取socket连接，造成的极大地不便，当多个用户进行操作时效率会变得很低。</p>
<h2 id="通过线程池实现同步非阻塞的BIO"><a href="#通过线程池实现同步非阻塞的BIO" class="headerlink" title="通过线程池实现同步非阻塞的BIO"></a>通过线程池实现同步非阻塞的BIO</h2><p>此时为了解决多用户的连接请求，演化出线程池实现多个socket连接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理客户端请求数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handle</span><span class="params">(String request)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;From BioServer Hello &quot;</span>+request+<span class="string">&quot;. \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BioServerThreadPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ExecutorService executor= Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="type">RequestHandler</span> <span class="variable">requestHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestHandler</span>();</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BioServer has started。Listener on port：&quot;</span>+serverSocket.getLocalSocketAddress());</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                executor.submit(<span class="keyword">new</span> <span class="title class_">ClientHandler</span>(clientSocket,requestHandler));</span><br><span class="line">                System.out.println(<span class="string">&quot;Connection from &quot;</span> + clientSocket.getRemoteSocketAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientHandler</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Socket clientSocket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RequestHandler requestHandler;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClientHandler</span><span class="params">(Socket clientSocket, RequestHandler requestHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clientSocket = clientSocket;</span><br><span class="line">        <span class="built_in">this</span>.requestHandler = requestHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(clientSocket.getInputStream()))&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">request</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;quit&quot;</span>.equals(request))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;From %s : %s&quot;</span>,clientSocket.getRemoteSocketAddress(),request));</span><br><span class="line">                <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> requestHandler.handle(request);</span><br><span class="line">                clientSocket.getOutputStream().write(response.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时虽然使用了多线程，但是线程池的数量仍然是一个不好处理的东西，多了可能系统硬件承受不住，少了可能会造成溢出，或者无法合理运用系统资源，而选择一个合适的线程池数量则是一个头疼的问题，与此同时线程持续的进行频繁交互，并且在读取数据时会造成部分阻塞，也会造成性能问题，怎么样解决这些问题呢？</p>
<h2 id="异步非阻塞的NIO的实现"><a href="#异步非阻塞的NIO的实现" class="headerlink" title="异步非阻塞的NIO的实现"></a>异步非阻塞的NIO的实现</h2><p>基于以上讨论，出现了一种异步非阻塞的NIO模式。<br>这种方式会将所有连接阻塞在一个叫Channel的队列中，并将状态设置为accept，此时会用一个守护线程selector持续轮询，如果某个连接需要进行IO操作，则会将此连接状态修改为read或者write进行读写，同时从队列中弹出符合条件的连接进行IO操作，以此达到异步非阻塞的效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//01、创建一个服务端Channel</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//设置为非阻塞</span></span><br><span class="line">        serverChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//serverchannel需要绑定一个端口</span></span><br><span class="line">        serverChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">6666</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;BioServer has started。Listener on port：&quot;</span>+serverChannel.getLocalAddress());</span><br><span class="line">        <span class="comment">//02、Selector：专门用来进行轮询，判断socket的状态</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        <span class="comment">//将一个个channel注册到Selector,channel初始状态</span></span><br><span class="line">        serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ByteBuffer进行数据临时存储</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">RequestHandler</span> <span class="variable">requestHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestHandler</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对selector里面的channel进行轮询，判断谁需要后续的IO操作</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">select</span> <span class="operator">=</span> selector.select();</span><br><span class="line">            <span class="keyword">if</span> (select==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//selector中有channel</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                <span class="comment">//selectionKey中保存了channel的各种信息</span></span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                <span class="comment">//假如channel的状态是readable</span></span><br><span class="line">                <span class="keyword">if</span>(key.isAcceptable())&#123;</span><br><span class="line">                    <span class="type">ServerSocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">clientChannel</span> <span class="operator">=</span> channel.accept();</span><br><span class="line">                    System.out.println(<span class="string">&quot;Connection from&quot;</span>+clientChannel.getRemoteAddress());</span><br><span class="line">                    clientChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">//将channel改变状态:read、write</span></span><br><span class="line">                    clientChannel.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (key.isReadable())&#123;</span><br><span class="line">                    <span class="comment">//数据交互</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                    <span class="comment">//将客户端的数据读取到buffer中</span></span><br><span class="line">                    channel.read(buffer);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array()).trim();</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                    System.out.println(String.format(<span class="string">&quot;From %s : %s&quot;</span>,channel.getRemoteAddress(),request));</span><br><span class="line">                    <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> requestHandler.handle(request);</span><br><span class="line">                    channel.write(ByteBuffer.wrap(response.getBytes()));</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NIO的使用场景"><a href="#NIO的使用场景" class="headerlink" title="NIO的使用场景"></a>NIO的使用场景</h2><p>因为NIO的性能比较高效，一些框架会基于NIO进行api的封装，典型的有Netty，而Dubbo的rpc协议又是基于Netty进行封装的。因此NIO在一些频繁IO操作高性能框架中使用的还是挺多的。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 UPic &amp; GitHub 做个自己的图床</title>
    <url>/post/ad141fe0.html</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/spider1.jpg" alt="spider1"></p>
<center>

<p>有写过一个小小的创建步骤，不过是英文版的(在练习写英文博客)，有兴趣的可以点开看下，步骤也比较简单。</p>
<p><a href="https://chennianfenglou.github.io/#/blogs/upicGithub?id=create-your-image-service-by-upic-amp-github">点击跳转到文章</a></p>
</center>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/post/undefined.html</url>
    <content><![CDATA[<h3 id="享元模式使用场景"><a href="#享元模式使用场景" class="headerlink" title="享元模式使用场景"></a>享元模式使用场景</h3><p>在平时的code中经常对某种相似度极高的对象进行多次操作，比如一个游戏地图内的一片树组成的森林。对于每棵树来说属性是相同的，仅仅是坐标不同，因此没必要每次创建的时候都创建一棵树，因此可以使用享元模式，共享树的公共属性，从而只用关注树的坐标即可。</p>
<span id="more"></span>



<h3 id="享元模式示例"><a href="#享元模式示例" class="headerlink" title="享元模式示例"></a>享元模式示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyWeightTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>, <span class="number">4</span>, TreeFactory.getTree(<span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;yyyyyyyy&quot;</span>));</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>, <span class="number">5</span>, TreeFactory.getTree(<span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;yyyyyyyy&quot;</span>));</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>, <span class="number">6</span>, TreeFactory.getTree(<span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;yyyyyyyy&quot;</span>));</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>, <span class="number">7</span>, TreeFactory.getTree(<span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;yyyyyyyy&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeFactory</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Tree&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Tree <span class="title function_">getTree</span><span class="params">(String name ,String data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Tree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tree</span>(name,data);</span><br><span class="line">        map.put(name,tree);</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> Tree tree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, Tree tree)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.tree = tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Tree <span class="title function_">getTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTree</span><span class="params">(Tree tree)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tree = tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tree</span><span class="params">(String name, String data)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot;  tree created.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>返回结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210112095502545.png" alt="在这里插入图片描述"></p>
<p>由此可见创建了四棵树，但是tree这个类只初始化了一次，极大地节省了资源消耗。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Office 365 家庭版开车圆满结束~</title>
    <url>/post/b6b1df55.html</url>
    <content><![CDATA[<p>刚刚从 Office 365 个人版升级到了 Office 365 家庭版，<del>准备开一波车，有兴趣的快来啊</del>，<strong>人齐啦，圆满结束</strong>。</p>
<span id="more"></span>

<h2 id="开车"><a href="#开车" class="headerlink" title="开车"></a>开车</h2><p>Office 365 家庭版可以共享 5 人连带自己总共 6 人同时使用，相当于六个人都获得了一个完整的 Office 365 个人版体验。也就是共享此订阅的每个用户都可以在其所有设备上安装高级 Office 应用，并且可同时在 5 台设备上登录，每人均可获取 1 TB 的 OneDrive 云存储空间，这样。为了减少开销，果断开车呀。</p>
<p>Office 365 家庭版一年价格是 499，平摊一下，每人 80 这样，欢迎想要长期使用的朋友来。有兴趣的可以在评论区留言哈，一定要留有效邮箱哈，不然我没法联系你。我会随时在下面更新最新情况。我是会长期续费的，如果有朋友不想续费了，提前跟我说一声，我在找到新朋友共享后再给你换下来，这样子。</p>
<h2 id="订阅情况"><a href="#订阅情况" class="headerlink" title="订阅情况"></a>订阅情况</h2><p>已经人齐啦，快乐~</p>
]]></content>
      <tags>
        <tag>Office</tag>
        <tag>共享</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/post/91ad9ce3.html</url>
    <content><![CDATA[<h3 id="原型模式实例"><a href="#原型模式实例" class="headerlink" title="原型模式实例"></a>原型模式实例</h3><p>原型模式主要用于对一个对象的克隆以及深拷贝，使对象所有属性进行复制的同时并不会造成相同地址的引用。</p>
<p>首先可以实现Cloneable接口使对象可以实现克隆。再通过重写父类的clone方法来实现对象的克隆，如出现对象嵌套操作的话则需要实现深拷贝。</p>
<span id="more"></span>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">BaseInfo</span> <span class="variable">baseInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseInfo</span>(<span class="string">&quot;XXX&quot;</span>);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&quot;part1&quot;</span>, <span class="string">&quot;part2&quot;</span>, <span class="string">&quot;part3&quot;</span>,baseInfo);</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">clone</span> <span class="operator">=</span> product.clone();</span><br><span class="line">        System.out.println(product);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line"></span><br><span class="line">        product.getBaseInfo().setCompanyName(<span class="string">&quot;YYY&quot;</span>);</span><br><span class="line">        System.out.println(product);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseInfo</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>,Serializable&#123;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompanyName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompanyName</span><span class="params">(String companyName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseInfo</span><span class="params">(String companyName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> BaseInfo <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (BaseInfo) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.hashCode()+<span class="string">&quot;|BaseInfo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;companyName=&#x27;&quot;</span> + companyName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>,Serializable&#123;</span><br><span class="line">    <span class="keyword">private</span> String part1;</span><br><span class="line">    <span class="keyword">private</span> String part2;</span><br><span class="line">    <span class="keyword">private</span> String part3;</span><br><span class="line">    <span class="keyword">private</span> BaseInfo baseInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(String part1, String part2, String part3,BaseInfo baseInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part1 = part1;</span><br><span class="line">        <span class="built_in">this</span>.part2 = part2;</span><br><span class="line">        <span class="built_in">this</span>.part3 = part3;</span><br><span class="line">        <span class="built_in">this</span>.baseInfo = baseInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BaseInfo <span class="title function_">getBaseInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> baseInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBaseInfo</span><span class="params">(BaseInfo baseInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baseInfo = baseInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPart1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart1</span><span class="params">(String part1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part1 = part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPart2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> part2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart2</span><span class="params">(String part2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part2 = part2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPart3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> part3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart3</span><span class="params">(String part3)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part3 = part3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Product <span class="title function_">clone</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">clone</span> <span class="operator">=</span> (Product) <span class="built_in">super</span>.clone();</span><br><span class="line">        <span class="type">BaseInfo</span> <span class="variable">clone1</span> <span class="operator">=</span> <span class="built_in">this</span>.baseInfo.clone();</span><br><span class="line">        clone.setBaseInfo(clone1);</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.hashCode()+<span class="string">&quot;|Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;part1=&#x27;&quot;</span> + part1 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part2=&#x27;&quot;</span> + part2 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part3=&#x27;&quot;</span> + part3 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, baseInfo=&quot;</span> + baseInfo +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>也可以使用流的操作来实现对象的拷贝。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Product <span class="title function_">clone</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        oos.writeObject(<span class="built_in">this</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">object</span> <span class="operator">=</span> ((Product) ois.readObject());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>当代码不应该依赖于需要复制的对象的具体类时，需要使用原型模式。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>可以在不耦合具体类的情况下克隆对象。</li>
<li>避免重复的初始化代码。</li>
<li>更方便的构建复杂的数据结构。</li>
</ol>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/post/fe816c3c.html</url>
    <content><![CDATA[<h3 id="建造者模式实例"><a href="#建造者模式实例" class="headerlink" title="建造者模式实例"></a>建造者模式实例</h3><p>在我们平时编码过程中如果遇到一些特别复杂的Model，或者Model中各个字段之间存在一些依赖关系的时候，为了避免逻辑混乱，可以使用建造者模式进行封装处理。</p>
<span id="more"></span>

<p>首先建造者模式可以使用如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 建造者模式.v1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuildTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Product product = new Product();</span></span><br><span class="line"><span class="comment">//        product.setCompanyName(&quot;xxx&quot;);</span></span><br><span class="line"><span class="comment">//        product.setPart1(&quot;xxx&quot;);</span></span><br><span class="line"><span class="comment">//        //......</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ProductBuilder</span> <span class="variable">productBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConcreteProductBuilder</span>();</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(productBuilder);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> director.makeProduct(<span class="string">&quot;companyName&quot;</span>, <span class="string">&quot;part1&quot;</span>, <span class="string">&quot;part2&quot;</span>, <span class="string">&quot;part3&quot;</span>, <span class="string">&quot;part4&quot;</span>, <span class="string">&quot;part5&quot;</span>);</span><br><span class="line">        System.out.println(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ProductBuilder</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">builderCompanyName</span><span class="params">(String companyName)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">builderPart1</span><span class="params">(String part1)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">builderPart2</span><span class="params">(String part2)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">builderPart3</span><span class="params">(String part3)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">builderPart4</span><span class="params">(String part4)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">builderPart5</span><span class="params">(String part5)</span>;</span><br><span class="line"></span><br><span class="line">    Product <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultConcreteProductBuilder</span> <span class="keyword">implements</span> <span class="title class_">ProductBuilder</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> String part1;</span><br><span class="line">    <span class="keyword">private</span> String part2;</span><br><span class="line">    <span class="keyword">private</span> String part3;</span><br><span class="line">    <span class="keyword">private</span> String part4;</span><br><span class="line">    <span class="keyword">private</span> String part5;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderCompanyName</span><span class="params">(String companyName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderPart1</span><span class="params">(String part1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part1 = part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderPart2</span><span class="params">(String part2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part2 = part2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderPart3</span><span class="params">(String part3)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part3 = part3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderPart4</span><span class="params">(String part4)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part4 = part4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderPart5</span><span class="params">(String part5)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part5 = part5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="built_in">this</span>.companyName,<span class="built_in">this</span>.part1,<span class="built_in">this</span>.part2,<span class="built_in">this</span>.part3,<span class="built_in">this</span>.part4,<span class="built_in">this</span>.part5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ProductBuilder builder;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(ProductBuilder builder)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.builder=builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">makeProduct</span><span class="params">(String companyName, String part1, String part2, String part3, String part4, String part5)</span>&#123;</span><br><span class="line">        builder.builderCompanyName(companyName);</span><br><span class="line">        builder.builderPart1(part1);</span><br><span class="line">        builder.builderPart2(part2);</span><br><span class="line">        builder.builderPart3(part3);</span><br><span class="line">        builder.builderPart4(part4);</span><br><span class="line">        builder.builderPart5(part5);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> String part1;</span><br><span class="line">    <span class="keyword">private</span> String part2;</span><br><span class="line">    <span class="keyword">private</span> String part3;</span><br><span class="line">    <span class="keyword">private</span> String part4;</span><br><span class="line">    <span class="keyword">private</span> String part5;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(String companyName, String part1, String part2, String part3, String part4, String part5)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">        <span class="built_in">this</span>.part1 = part1;</span><br><span class="line">        <span class="built_in">this</span>.part2 = part2;</span><br><span class="line">        <span class="built_in">this</span>.part3 = part3;</span><br><span class="line">        <span class="built_in">this</span>.part4 = part4;</span><br><span class="line">        <span class="built_in">this</span>.part5 = part5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompanyName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompanyName</span><span class="params">(String companyName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPart1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart1</span><span class="params">(String part1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part1 = part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPart2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> part2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart2</span><span class="params">(String part2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part2 = part2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPart3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> part3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart3</span><span class="params">(String part3)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part3 = part3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPart4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> part4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart4</span><span class="params">(String part4)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part4 = part4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPart5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> part5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart5</span><span class="params">(String part5)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part5 = part5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;companyName=&#x27;&quot;</span> + companyName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part1=&#x27;&quot;</span> + part1 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part2=&#x27;&quot;</span> + part2 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part3=&#x27;&quot;</span> + part3 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part4=&#x27;&quot;</span> + part4 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part5=&#x27;&quot;</span> + part5 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用ProductBuilder定义接口，实现类的构建，使用Director来定义构建方式和构建顺序，以此达到定制化的构建。</p>
<p>如果业务没有上述那么复杂，也可以使用以下方式动态的配置类的构建过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuildTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Product.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>.Builder().productName(<span class="string">&quot;productName&quot;</span>).part1(<span class="string">&quot;part1&quot;</span>).part2(<span class="string">&quot;part2&quot;</span>).part3(<span class="string">&quot;part3&quot;</span>).part4(<span class="string">&quot;part4&quot;</span>).part5(<span class="string">&quot;part5&quot;</span>);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        System.out.println(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String part1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String part2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String part3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String part4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String part5;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(String companyName, String part1, String part2, String part3, String part4, String part5)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">        <span class="built_in">this</span>.part1 = part1;</span><br><span class="line">        <span class="built_in">this</span>.part2 = part2;</span><br><span class="line">        <span class="built_in">this</span>.part3 = part3;</span><br><span class="line">        <span class="built_in">this</span>.part4 = part4;</span><br><span class="line">        <span class="built_in">this</span>.part5 = part5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String companyName;</span><br><span class="line">        <span class="keyword">private</span> String part1;</span><br><span class="line">        <span class="keyword">private</span> String part2;</span><br><span class="line">        <span class="keyword">private</span> String part3;</span><br><span class="line">        <span class="keyword">private</span> String part4;</span><br><span class="line">        <span class="keyword">private</span> String part5;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">productName</span><span class="params">(String productName)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.companyName=productName;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">part1</span><span class="params">(String part1)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.part1=part1;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">part2</span><span class="params">(String part2)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.part2=part2;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">part3</span><span class="params">(String part3)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.part3=part3;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">part4</span><span class="params">(String part4)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.part4=part4;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">part5</span><span class="params">(String part5)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.part5=part5;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Product <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="built_in">this</span>.companyName, <span class="built_in">this</span>.part1, <span class="built_in">this</span>.part2, <span class="built_in">this</span>.part3, <span class="built_in">this</span>.part4, <span class="built_in">this</span>.part5);</span><br><span class="line">            <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;companyName=&#x27;&quot;</span> + companyName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part1=&#x27;&quot;</span> + part1 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part2=&#x27;&quot;</span> + part2 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part3=&#x27;&quot;</span> + part3 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part4=&#x27;&quot;</span> + part4 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part5=&#x27;&quot;</span> + part5 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可以使用静态内部类Builder构建，每次赋值以后返回当前对象，以此达到可以链式动态赋值的方式。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>需要生成的对象具有复杂的内部结构。</li>
<li>需要生成的对象内部属性本身相互依赖。</li>
<li>与不可变对象(final)配合使用。</li>
</ol>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>建造者独立，以扩展。</li>
<li>便于控制细节风险。</li>
</ol>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/post/9b7d6e62.html</url>
    <content><![CDATA[<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
<p>以下我们来模拟编写一个数据库组件。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IDatabaseUtils</span> <span class="variable">iDatabaseUtils</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OracleDatabaseUtils</span>();</span><br><span class="line">        <span class="type">IConnection</span> <span class="variable">connection</span> <span class="operator">=</span> iDatabaseUtils.getConnection();</span><br><span class="line">        connection.connect();</span><br><span class="line">        <span class="type">ICommand</span> <span class="variable">command</span> <span class="operator">=</span> iDatabaseUtils.getCommand();</span><br><span class="line">        command.command();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计一个数据库组件</span></span><br><span class="line"><span class="comment">// 变化的部分: mysql，oracle</span></span><br><span class="line"><span class="comment">// 不变的部分: connection，command</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IConnection</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ICommand</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">command</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IDatabaseUtils</span>&#123;</span><br><span class="line">    IConnection <span class="title function_">getConnection</span><span class="params">()</span>;</span><br><span class="line">    ICommand <span class="title function_">getCommand</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MysqlConnection</span> <span class="keyword">implements</span> <span class="title class_">IConnection</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql connected.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OracleConnection</span> <span class="keyword">implements</span> <span class="title class_">IConnection</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle connected.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MysqlCommand</span> <span class="keyword">implements</span> <span class="title class_">ICommand</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">command</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql command.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OracleCommand</span> <span class="keyword">implements</span> <span class="title class_">ICommand</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">command</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle command.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MysqlDatabaseUtils</span> <span class="keyword">implements</span> <span class="title class_">IDatabaseUtils</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IConnection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MysqlConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICommand <span class="title function_">getCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MysqlCommand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OracleDatabaseUtils</span> <span class="keyword">implements</span> <span class="title class_">IDatabaseUtils</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IConnection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICommand <span class="title function_">getCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleCommand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>通过对数据库组件公共功能的抽象将公共功能提取出来，用接口实现类的方式来实现不同需求的编写。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>程序需要处理不同系列的相关产品，但是不希望它依赖于这些产品的具体类时，可以使用抽象工厂。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>可以确信你从工厂得到的产品是彼此兼容的。</li>
<li>可以避免具体产品与客户端代码的紧密耦合。</li>
<li>符合单一职责原则。</li>
<li>符合开闭原则。</li>
</ol>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/post/48598499.html</url>
    <content><![CDATA[<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>我们在code的时候经常会遇到由于业务复杂，而不知道如何下手的情况，或者对于某个东西写出来很难扩展的情况。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Application</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Application</span>();</span><br><span class="line">        <span class="type">ProductA</span> <span class="variable">product</span> <span class="operator">=</span> application.getObject();</span><br><span class="line">        product.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ProductA.method executed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ProductA <span class="title function_">createProduct</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建产品A&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ProductA <span class="title function_">getObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ProductA</span> <span class="variable">product</span> <span class="operator">=</span> createProduct();</span><br><span class="line">        System.out.println(<span class="string">&quot;检查产品&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>比如以下代码，针对产品A定制了一套解决方案，此时代码的耦合性极高，当产生新的产品的时候需要对产品B写一套全新的代码，从而造成极大的工作量以及代码的混乱。</p>
<p>因此需要考虑一种高内聚、低耦合的解决方案，不仅可以使代码层次清晰，还可以最大限度的提取出公共代码，对变化的代码进行提取，使用抽象的方式代替。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Application</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationA</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> application.getObject();</span><br><span class="line">        product.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ProductA.method executed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ProductB.method executed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> Product <span class="title function_">createProduct</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> createProduct();</span><br><span class="line">        System.out.println(<span class="string">&quot;检查产品&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApplicationA</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建产品A&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApplicationB</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建产品B&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>通过以上方法我们可以将产品和应用通过抽象的形式抽离出来，只写一些公共的内容，再通过接口或者继承的方式来实现他们不同的需求。此时只需要在主类中动态改变Application的类型即可实现不同产品的切换。</p>
<h3 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h3><ol>
<li>当不知道适用对象具体类型的时候</li>
<li>当你希望为库或者框架提供扩展其内部组件的方法时</li>
</ol>
<h3 id="主要优点"><a href="#主要优点" class="headerlink" title="主要优点"></a>主要优点</h3><ol>
<li>将具体产品和创建者解耦，只需关注产品本身的实现</li>
<li>符合单一职责原则</li>
<li>符合开闭原则</li>
</ol>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/post/f1601c3e.html</url>
    <content><![CDATA[<h3 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h3><p>在java中实现单例模式的方法有很多，比如饿汉式、懒汉式、静态内部类、枚举类型。</p>
<p>单例模式的核心就是只产生一个单例，外部无法通过new来创造新的类对象，也无法重复获得不同的类对象，只可根据该类暴露的一个getinstance（）方法来获取初始化以后的单例对象。</p>
<span id="more"></span>

<p>以下为单例模式的具体实现:</p>
<p>1、饿汉式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HungrySingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HungrySingleton</span> <span class="variable">instance1</span> <span class="operator">=</span> HungrySingleton.getInstance();</span><br><span class="line">        <span class="type">HungrySingleton</span> <span class="variable">instance2</span> <span class="operator">=</span> HungrySingleton.getInstance();</span><br><span class="line">        System.out.println(instance1==instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HungrySingleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">HungrySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HungrySingleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">HungrySingleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>标准饿汉式实现，通过private私有的无参构造来防止外部来new这个对象，饿汉式会在一开始就在静态代码块初始化一个instance类对象，需要的时候调用getInstance（）方法取出instance对象即可。</p>
<p>2、懒汉式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> LazySingleton.getInstance();</span><br><span class="line">            System.out.println(instance);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> LazySingleton.getInstance();</span><br><span class="line">            System.out.println(instance);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazySingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这种方法为标准的DCL懒汉式，一开始不初始化类对象，当使用的时候临时创建类对象，为防止重复创建需对对象进行加锁，为了防止JVM的底层指令重排机制造成多线程对对象重复进行创建，使用volatile关键字来防止指令重排。</p>
<p>3、静态内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassSingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">instance1</span> <span class="operator">=</span> InnerClassSingleton.getInstance();</span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">instance2</span> <span class="operator">=</span> InnerClassSingleton.getInstance();</span><br><span class="line">        System.out.println(instance1==instance2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InnerClassSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClassHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">InnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">InnerClassSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClassHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这种方法通过类中的私有内部类进行创建，只对外提供了一个公共方法getInstance，在初始化的时候调用私有类，获取属性时创建单例。</p>
<p>4、枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnumTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        EnumSingleton.INSTANCE.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="利用反射破坏单例模式"><a href="#利用反射破坏单例模式" class="headerlink" title="利用反射破坏单例模式"></a>利用反射破坏单例模式</h3><p>其实除了枚举方式实现以外，其他类型都可以通过反射来破坏单例。</p>
<p>下面以静态内部类进行举例：</p>
<blockquote>
<p>测试反射破坏单例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassSingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        Constructor&lt;InnerClassSingleton&gt; declaredConstructor = InnerClassSingleton.class.getDeclaredConstructor();</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">innerClassSingleton</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> InnerClassSingleton.getInstance();</span><br><span class="line">        System.out.println(innerClassSingleton==instance);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210105151347844.png" alt="在这里插入图片描述"></p>
<p>因此可以通过在初始化构造函数中判断单例是否存在，存在则抛出异常进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InnerClassSingleton</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClassHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">InnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">InnerClassSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (InnerClassHolder.instance!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例不允许多个实例&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClassHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://img-blog.csdnimg.cn/2021010515145410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="解决单例模式的序列化问题"><a href="#解决单例模式的序列化问题" class="headerlink" title="解决单例模式的序列化问题"></a>解决单例模式的序列化问题</h3><p>还是以静态内部类举例，此时我们希望将类序列化保存在文件中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InnerClassSingleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClassHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">InnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">InnerClassSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (InnerClassHolder.instance!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例不允许多个实例&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClassHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试序列化然后反序列化以后是否还是原来的单例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassSingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> InnerClassSingleton.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;SerializableTest&quot;</span>));</span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;SerializableTest&quot;</span>));</span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">innerClassSingleton</span> <span class="operator">=</span> (InnerClassSingleton)ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(innerClassSingleton==instance);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://img-blog.csdnimg.cn/20210105151536726.png" alt="在这里插入图片描述"></p>
<p>此时可得两者是不同的单例，通过查看Serializable类寻找到解决方法</p>
<p><img src="https://img-blog.csdnimg.cn/202101051516261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>通过在类中实现<code>Object readResolve() throws ObjectStreamException</code>来解决序列化问题。此时增加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object <span class="title function_">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException&#123;</span><br><span class="line">    <span class="keyword">return</span> InnerClassHolder.instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次测试，若出现如下报错</p>
<p><img src="https://img-blog.csdnimg.cn/20210105151654465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>则需要添加序列化的一个版本号，同样查看Serializable类，可以发现</p>
<p><img src="https://img-blog.csdnimg.cn/20210105151730408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>如不添加版本号会根据类中的数据自动生成，如果对类进行了修改，则存进的和取出的版本号不相同，则报错，如果自己添加则会根据添加的版本号直接获取数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">42L</span>;</span><br></pre></td></tr></table></figure>



<p>最终单例类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InnerClassSingleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">42L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClassHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">InnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">InnerClassSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (InnerClassHolder.instance!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例不允许多个实例&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClassHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClassHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassSingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> InnerClassSingleton.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;SerializableTest&quot;</span>));</span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;SerializableTest&quot;</span>));</span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">innerClassSingleton</span> <span class="operator">=</span> (InnerClassSingleton)ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(innerClassSingleton==instance);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://img-blog.csdnimg.cn/20210105151806960.png" alt="在这里插入图片描述"></p>
<h3 id="验证枚举的安全性"><a href="#验证枚举的安全性" class="headerlink" title="验证枚举的安全性"></a>验证枚举的安全性</h3><p>我们来试图尝试用反射破坏枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnumTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        Constructor&lt;EnumSingleton&gt; declaredConstructor = EnumSingleton.class.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredConstructor.newInstance(<span class="string">&quot;INSTANCE&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://img-blog.csdnimg.cn/20210105151853759.png" alt="在这里插入图片描述"></p>
<p>由此可以验证反射无法对枚举类型进行修改，查看反射的newInstance方法</p>
<p><img src="https://img-blog.csdnimg.cn/20210105151929736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>如图可以得到相同的结论。</p>
<p>由此可知枚举类型是相对安全的一种实现单例的方式。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>使用localstack 搭建 AWS 本地开发环境</title>
    <url>/post/5fc7d97a.html</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/DBhQX3.jpg" alt="DBhQX3"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信有很多同学公司项目都有用到 AWS 或者有同学在学习 AWS，我们知道像 AWS 这样的云服务，我们不太能很方便的去在本地开发的时候连接云上的服务，更何况 staging&#x2F;production 环境还会有安全方面的考虑。那么当我们创建好一个项目的时候，我们如何去搭建其本地开发环境方便我们在本地开发调试呢？没错！使用 localstack！</p>
<p><strong><a href="https://github.com/localstack/localstack">LocalStack - A fully functional local AWS cloud stack</a></strong></p>
<blockquote>
<p><em><strong>LocalStack provides an easy-to-use test&#x2F;mocking framework for developing Cloud applications.</strong></em></p>
<p><em><strong>Currently, the focus is primarily on supporting the AWS cloud stack.</strong></em></p>
</blockquote>
<p>LocalStack 是提供给开发者一个方便去测试和 mock 服务的框架， 目前主要提供 AWS 云服务。</p>
<span id="more"></span>



<h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><h3 id="例：使用-LocalStack-创建一个-SNS服务"><a href="#例：使用-LocalStack-创建一个-SNS服务" class="headerlink" title="例：使用 LocalStack 创建一个 SNS服务"></a>例：使用 LocalStack 创建一个 SNS服务</h3><p>想像我们有这样一个 SpringBoot 服务，提供接口在用户提交一条记录的时候给用户发邮件，一般情况这种业务我们都会将保存数据库和发邮件异步执行。使用 AWS 的话，我们就可以在保存数据库之后调用 SNS 服务，发布一个 <code>Event</code> 然后等待下游邮件服务订阅对应的 topic 然后消费。</p>
<p>那么如何创建呢？如下在 <code>docker-compose.yml</code> 文件中加入<code>localstack </code>，SERVICES 指定好 <code>sns</code>：</p>
<h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack:0.12.1</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app_net</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4566:4566&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=sns</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEFAULT_REGION=ap-southeast-2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./auto/create-localstack-topic:/docker-entrypoint-initaws.d/create-localstack-topic.sh</span></span><br></pre></td></tr></table></figure>

<h4 id="create-localstack-topic-sh"><a href="#create-localstack-topic-sh" class="headerlink" title="create-localstack-topic.sh"></a>create-localstack-topic.sh</h4><p>此外，可以看到我们还 volume 了一个脚本进去，那就是创建 SNS 的脚本。实际上这个命令就是 aws cli，在其官网就可以找得到，我们只需要把 <code>aws</code> 换成 <code>awslocal</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">REGION=<span class="variable">$&#123;DEFAULT_REGION:-ap-southeast-2&#125;</span></span><br><span class="line">TOPIC_NAME=demo-events-topic</span><br><span class="line"></span><br><span class="line">awslocal sns create-topic --name=<span class="variable">$&#123;TOPIC_NAME&#125;</span> --region <span class="string">&quot;<span class="variable">$&#123;REGION&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="启动日志"><a href="#启动日志" class="headerlink" title="启动日志"></a>启动日志</h4><p>当启动 <code>docker-compose up localstack</code> 的时候，就在该容器中创建好了 SNS 服务提供给我们使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sns_1            | Waiting <span class="keyword">for</span> all LocalStack services to be ready</span><br><span class="line">sns_1            | 2020-12-27 07:02:36,554 CRIT Supervisor is running as root.  Privileges were not dropped because no user is specified <span class="keyword">in</span> the config file.  If you intend to run as root, you can <span class="built_in">set</span> user=root <span class="keyword">in</span> the config file to avoid this message.</span><br><span class="line">sns_1            | 2020-12-27 07:02:36,559 INFO supervisord started with pid 15</span><br><span class="line">sns_1            | 2020-12-27 07:02:37,566 INFO spawned: <span class="string">&#x27;dashboard&#x27;</span> with pid 21</span><br><span class="line">sns_1            | 2020-12-27 07:02:37,571 INFO spawned: <span class="string">&#x27;infra&#x27;</span> with pid 22</span><br><span class="line">sns_1            | 2020-12-27 07:02:37,577 INFO success: dashboard entered RUNNING state, process has stayed up <span class="keyword">for</span> &gt; than 0 seconds (startsecs)</span><br><span class="line">sns_1            | 2020-12-27 07:02:37,577 INFO exited: dashboard (<span class="built_in">exit</span> status 0; expected)</span><br><span class="line">sns_1            | (. .venv/bin/activate; <span class="built_in">exec</span> bin/localstack start --host)</span><br><span class="line">sns_1            | 2020-12-27 07:02:38,591 INFO success: infra entered RUNNING state, process has stayed up <span class="keyword">for</span> &gt; than 1 seconds (startsecs)</span><br><span class="line">sns_1            | LocalStack version: 0.12.1</span><br><span class="line">sns_1            | Starting <span class="built_in">local</span> dev environment. CTRL-C to quit.</span><br><span class="line">sns_1            | 2020-12-27T07:02:39:DEBUG:bootstrap.py: Loading plugins - scope <span class="string">&quot;services&quot;</span>, module <span class="string">&quot;localstack&quot;</span>: &lt;<span class="keyword">function</span> register_localstack_plugins at 0x7f963f120f70&gt;</span><br><span class="line">sns_1            | Waiting <span class="keyword">for</span> all LocalStack services to be ready</span><br><span class="line">sns_1            | 2020-12-27T07:02:43:INFO:localstack.utils.analytics.profiler: Execution of <span class="string">&quot;load_plugin_from_path&quot;</span> took 4333.9550495147705ms</span><br><span class="line">sns_1            | 2020-12-27T07:02:43:INFO:localstack.utils.analytics.profiler: Execution of <span class="string">&quot;load_plugins&quot;</span> took 4334.24186706543ms</span><br><span class="line">sns_1            | Starting edge router (https port 4566)...</span><br><span class="line">sns_1            | Starting mock SNS service on http port 4566 ...</span><br><span class="line">sns_1            | 2020-12-27T07:02:45:INFO:localstack.utils.analytics.profiler: Execution of <span class="string">&quot;prepare_environment&quot;</span> took 2061.4540576934814ms</span><br><span class="line">sns_1            | 2020-12-27T07:02:45:INFO:localstack.multiserver: Starting multi API server process on port 59903</span><br><span class="line">sns_1            | [2020-12-27 07:02:45 +0000] [23] [INFO] Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">sns_1            | 2020-12-27T07:02:45:INFO:hypercorn.error: Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">sns_1            | [2020-12-27 07:02:45 +0000] [23] [INFO] Running on http://0.0.0.0:59903 (CTRL + C to quit)</span><br><span class="line">sns_1            | 2020-12-27T07:02:45:INFO:hypercorn.error: Running on http://0.0.0.0:59903 (CTRL + C to quit)</span><br><span class="line">sns_1            | 2020-12-27 07:02:45,824:API:  * Running on http://0.0.0.0:57589/ (Press CTRL+C to quit)</span><br><span class="line">sns_1            | Waiting <span class="keyword">for</span> all LocalStack services to be ready</span><br><span class="line">sns_1            | Ready.</span><br><span class="line">sns_1            | 2020-12-27T07:02:50:INFO:localstack.utils.analytics.profiler: Execution of <span class="string">&quot;start_api_services&quot;</span> took 5102.221965789795ms</span><br><span class="line">sns_1            | /usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initaws.d/create-localstack-topic.sh</span><br><span class="line">sns_1            | &#123;</span><br><span class="line">sns_1            |     <span class="string">&quot;TopicArn&quot;</span>: <span class="string">&quot;arn:aws:sns:ap-southeast-2:000000000000:demo-events-topic&quot;</span></span><br><span class="line">sns_1            | &#125;</span><br></pre></td></tr></table></figure>



<h4 id="在命令行调用"><a href="#在命令行调用" class="headerlink" title="在命令行调用"></a>在命令行调用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aws --endpoint-url=http://localhost:4566 sns publish --topic-arn arn:aws:sns:ap-southeast-2:000000000000:demo-events-topic --region ap-southeast-2 --message <span class="string">&quot;Hello SNS&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意，在本地使用 aws 命令调用 localstack 中的服务的时候，需要覆盖<code>endpoint-url</code>, 否则回去拿着 credentials 调用实际环境的服务。</p>
<h4 id="在-SpringBoot-中使用的注意点"><a href="#在-SpringBoot-中使用的注意点" class="headerlink" title="在 SpringBoot 中使用的注意点"></a>在 SpringBoot 中使用的注意点</h4><p>在 SpringBoot 或者其他代码库（如node）中使用的话，可以根据不同的环境创建不同的 <code>SNSClient</code>， 本地环境的注意要覆盖 endpoint：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;local&quot;, &quot;docker&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalSnsClientConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aws.sns.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String awsSnsEndpoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SnsClient <span class="title function_">snsClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">clientBuilder</span> <span class="operator">=</span> SnsClient.builder();</span><br><span class="line">        <span class="keyword">if</span> (!Strings.isNullOrEmpty(awsSnsEndpoint)) &#123;</span><br><span class="line">            clientBuilder.endpointOverride(URI.create(awsSnsEndpoint));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clientBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动多个服务"><a href="#启动多个服务" class="headerlink" title="启动多个服务"></a>启动多个服务</h3><p>上面只是一个启动 SNS 服务的例子，实际使用中，我们都会多种服务结合使用。比如会有一个 SQS 服务， 订阅了 SNS 的 topic，然后去 trigger 一个 lambda，执行相应的一些任务，那么如何在本地实现这些服务的相互订阅与触发呢？实际上只需要在一个 localstack 中启动多个服务然后执行一些脚本建立之间的关系（具体命令和 aws cli 一样）就可以了，如下：</p>
<h4 id="docker-compose-yml-1"><a href="#docker-compose-yml-1" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack:0.12.1</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">localstack</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app_net</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4566:4566&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=sns,sqs,kms,cloudwatch,lambda</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEFAULT_REGION=ap-southeast-2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LAMBDA_EXECUTOR=docker-reuse</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LAMBDA_REMOTE_DOCKER=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LAMBDA_DOCKER_NETWORK=host</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_TMP_FOLDER=$&#123;TMPDIR&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DOCKER_HOST=unix:///var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOCAL_CODE_PATH=$&#123;PWD&#125;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;TMPDIR:-/tmp/localstack&#125;:/tmp/localstack</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./auto/create-localstack:/docker-entrypoint-initaws.d/create-localstack.sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./kms/kms_seed.yaml:/init/seed.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">app_net:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="kms-seed-yaml"><a href="#kms-seed-yaml" class="headerlink" title="kms_seed.yaml"></a>kms_seed.yaml</h4><p>我在这里启动了 sns,sqs,kms,cloudwatch,lambda。 比较值得一说的除了在本地访问 sqs, sns, kms 等需要覆盖掉 <code>endpoint-url</code>之外， 在本地使用 kms 还需要指定一个 <code>seed.yml</code> 来用它进行加解密。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Keys:</span></span><br><span class="line">  <span class="attr">Symmetric:</span></span><br><span class="line">    <span class="attr">Aes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Metadata:</span></span><br><span class="line">          <span class="attr">KeyId:</span> <span class="string">832ac356-3c82-4c4d-a3dc-7489da152197</span></span><br><span class="line">        <span class="attr">BackingKeys:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">2bdaead27fe7da2de47945d34cd6d79e36494e73802f3cd3869f1d2cb0b5d74c</span></span><br><span class="line"><span class="attr">Aliases:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">AliasName:</span> <span class="string">alias/testing</span></span><br><span class="line">    <span class="attr">TargetKeyId:</span> <span class="string">832ac356-3c82-4c4d-a3dc-7489da152197</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="创建脚本-create-localstack-sh"><a href="#创建脚本-create-localstack-sh" class="headerlink" title="创建脚本 create-localstack.sh"></a>创建脚本 <code>create-localstack.sh</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">QUEUE_NAME=demo-queue</span><br><span class="line">TOPIC_NAME=demo-topic</span><br><span class="line">FUNCTION_NAME=demo-function</span><br><span class="line">APP_ENV=dev</span><br><span class="line"></span><br><span class="line">awslocal sns create-topic --name=$&#123;TOPIC_NAME&#125;</span><br><span class="line">awslocal sqs create-queue --queue-name=$&#123;QUEUE_NAME&#125;</span><br><span class="line">awslocal sns subscribe \</span><br><span class="line">    --topic-arn arn:aws:sns:ap-southeast-2:000000000000:$&#123;TOPIC_NAME&#125; \</span><br><span class="line">    --protocol sqs \</span><br><span class="line">    --notification-endpoint http://localhost:4566/000000000000/$&#123;QUEUE_NAME&#125;</span><br><span class="line"></span><br><span class="line">awslocal lambda create-function \</span><br><span class="line">    --code S3Bucket=&quot;__local__&quot;,S3Key=&quot;$&#123;LOCAL_CODE_PATH&#125;&quot; \</span><br><span class="line">    --function-name $&#123;FUNCTION_NAME&#125; \</span><br><span class="line">    --runtime nodejs12.x \</span><br><span class="line">    --timeout 5 \</span><br><span class="line">    --handler dist/index.handler \</span><br><span class="line">    --role dev \</span><br><span class="line">    --environment &quot;&#123;\&quot;Variables\&quot;:&#123;\&quot;APP_ENV\&quot;:\&quot;$&#123;APP_ENV&#125;\&quot;&#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">awslocal lambda create-event-source-mapping \</span><br><span class="line">    --event-source-arn arn:aws:sqs:ap-southeast-2:000000000000:$&#123;QUEUE_NAME&#125; \</span><br><span class="line">    --function-name $&#123;FUNCTION_NAME&#125; \</span><br><span class="line">    --enabled</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h4><p>直接运行 <code>docker-compose up localstack</code></p>
<h4 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h4><p>现在在命令行发送一条 SNS 的消息，就可以 trigger 我们的 Lambda 执行了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aws --endpoint-url=http://localhost:4566 sns publish --topic-arn arn:aws:sns:ap-southeast-2:000000000000:demo-topic --region ap-southeast-2 --message &quot;Hello SNS - SQS - Lambda&quot;</span><br></pre></td></tr></table></figure>

<p>在 Lambda 的 index.ts 写一个 <code>handler()</code> 方法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./overwriteAwsLocalEndpoint&#x27;</span>); <span class="comment">//overwrite aws local endpoint,Please keep it here.</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SQSEvent</span>, <span class="title class_">SQSHandler</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;aws-lambda&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">handler</span>: <span class="title class_">SQSHandler</span> = <span class="function">(<span class="params">event: SQSEvent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(event.<span class="property">Records</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印一下 SQS 的消息体。</p>
<p><strong>结果如下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localstack    | &gt; START RequestId: ce5ae5ff-054d-16e0-dc62-71161118d3bd Version: <span class="variable">$LATEST</span></span><br><span class="line">localstack    | &gt; 2020-12-27T09:32:56.373Z	ce5ae5ff-054d-16e0-dc62-71161118d3bd	INFO	[&#123;<span class="string">&quot;body&quot;</span>:<span class="string">&quot;&#123;\&quot;Type\&quot;: \&quot;Notification\&quot;, \&quot;MessageId\&quot;: \&quot;04c12e03-66d0-474a-a60a-f0b3c2451456\&quot;, \&quot;Token\&quot;: null, \&quot;TopicArn\&quot;: \&quot;arn:aws:sns:ap-southeast-2:000000000000:demo-topic\&quot;, \&quot;Message\&quot;: \&quot;Hello SNS - SQS - Lambda\&quot;, \&quot;SubscribeURL\&quot;: null, \&quot;Timestamp\&quot;: \&quot;2020-12-27T09:32:52.202Z\&quot;, \&quot;SignatureVersion\&quot;: \&quot;1\&quot;, \&quot;Signature\&quot;: \&quot;EXAMPLEpH+..\&quot;, \&quot;SigningCertURL\&quot;: \&quot;https://sns.us-east-1.amazonaws.com/SimpleNotificationService-0000000000000000000000.pem\&quot;&#125;&quot;</span>,<span class="string">&quot;receiptHandle&quot;</span>:<span class="string">&quot;exexifyylldwuznxlicibcanaqvcplpaeoztcdlltkzbsuvwiifvlyixrxwuzrmumlmkggofmiencdxilzoaluyreszdppsbycpxcowwvmeiieeplulkitfztfxzkjazucucauhuobpvlzdcnjdcmygqvbrouxkxoggcfryzqtibyquhikawczuif&quot;</span>,<span class="string">&quot;md5OfBody&quot;</span>:<span class="string">&quot;d96df71c445e9282ed4c2fefbf4c8ca1&quot;</span>,<span class="string">&quot;eventSourceARN&quot;</span>:<span class="string">&quot;arn:aws:sqs:ap-southeast-2:000000000000:demo-queue&quot;</span>,<span class="string">&quot;eventSource&quot;</span>:<span class="string">&quot;aws:sqs&quot;</span>,<span class="string">&quot;awsRegion&quot;</span>:<span class="string">&quot;ap-southeast-2&quot;</span>,<span class="string">&quot;messageId&quot;</span>:<span class="string">&quot;a59f7c57-651b-54f6-70bd-a2933fa57099&quot;</span>,<span class="string">&quot;attributes&quot;</span>:&#123;<span class="string">&quot;SenderId&quot;</span>:<span class="string">&quot;AIDAIT2UOQQY3AUEKVGXU&quot;</span>,<span class="string">&quot;SentTimestamp&quot;</span>:<span class="string">&quot;1609061572241&quot;</span>,<span class="string">&quot;ApproximateReceiveCount&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;ApproximateFirstReceiveTimestamp&quot;</span>:<span class="string">&quot;1609061572312&quot;</span>&#125;,<span class="string">&quot;messageAttributes&quot;</span>:&#123;&#125;,<span class="string">&quot;md5OfMessageAttributes&quot;</span>:null,<span class="string">&quot;sqs&quot;</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">localstack    | &gt; END RequestId: ce5ae5ff-054d-16e0-dc62-71161118d3bd</span><br><span class="line">localstack    | &gt; REPORT RequestId: ce5ae5ff-054d-16e0-dc62-71161118d3bd	Init Duration: 3381.65 ms	Duration: 13.13 ms	Billed Duration: 100 ms	Memory Size: 1536 MB	Max Memory Used: 55 MB</span><br></pre></td></tr></table></figure>

<h3 id="关于-LocalStack-中-Lambda-的使用"><a href="#关于-LocalStack-中-Lambda-的使用" class="headerlink" title="关于 LocalStack 中 Lambda 的使用"></a>关于 LocalStack 中 Lambda 的使用</h3><p>在本地创建 Lambda 运行环境是我觉得诸多 service 中比较麻烦的一个，以下是官方对于 Lambda 的创建时候的<a href="https://github.com/localstack/localstack#configurations">配置详解</a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">STEPFUNCTIONS<span class="emphasis">_LAMBDA_</span>ENDPOINT: URL to use as the Lambda service endpoint in Step Functions. By default this is the LocalStack Lambda endpoint. Use default to select the original AWS Lambda endpoint.</span><br><span class="line"></span><br><span class="line">LAMBDA<span class="emphasis">_EXECUTOR: Method to use for executing Lambda functions. Possible values are:</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">	- local: run Lambda functions in a temporary directory on the local machine</span></span><br><span class="line"><span class="emphasis">	- docker: run each function invocation in a separate Docker container</span></span><br><span class="line"><span class="emphasis">	- docker-reuse: create one Docker container per function and reuse it across invocations</span></span><br><span class="line"><span class="emphasis">	For docker and docker-reuse, if LocalStack itself is started inside Docker, then the docker command needs to be available inside the container (usually requires to run the container in privileged mode). Default is docker, fallback to local if Docker is not available.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">LAMBDA_</span>REMOTE<span class="emphasis">_DOCKER: determines whether Lambda code is copied or mounted into containers. Possible values are:</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">	- true (default): your Lambda function definitions will be passed to the container by copying the zip file (potentially slower). It allows for remote execution, where the host and the client are not on the same machine.</span></span><br><span class="line"><span class="emphasis">	- false: your Lambda function definitions will be passed to the container by mounting a volume (potentially faster). This requires to have the Docker client and the Docker host on the same machine.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">LAMBDA_</span>DOCKER<span class="emphasis">_NETWORK: Optional Docker network for the container running your lambda function.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">LAMBDA_</span>DOCKER<span class="emphasis">_DNS: Optional DNS server for the container running your lambda function.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">LAMBDA_</span>CONTAINER<span class="emphasis">_REGISTRY: Use an alternative docker registry to pull lambda execution containers (default: lambci/lambda).</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">LAMBDA_</span>REMOVE<span class="emphasis">_CONTAINERS: Whether to remove containers after Lambdas finished executing (default: true).</span></span><br></pre></td></tr></table></figure>



<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ol>
<li>为什么我使用 SNS、KMS 总是报一些 client 的 credentials 的错误？<ul>
<li>因为没有覆盖 本地环境需要的 endpoint-url， 参考本文中的解释</li>
</ul>
</li>
<li>为什么给 SNS 发消息成功了却没有触发到 Lambda？<ul>
<li>请检查你的创建脚本，确保你的 SQS 订阅了 SNS 的对应 topic，SQS 有能够触发 Lambda 的 Mapping</li>
</ul>
</li>
<li>本例代码库地址？<ul>
<li><a href="https://github.com/Fatezhang/aws-localstack-demo">Fatezhang&#x2F;aws-localstack-demo</a></li>
</ul>
</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果你在使用 localstack 的时候遇到了什么问题，欢迎告诉我一起研究讨论。</p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>localstack</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么是Bubbles？</title>
    <url>/post/f674f515.html</url>
    <content><![CDATA[<hr>
<p>Bubbles即泡泡，别问，问就是灵光一闪！</p>
<p>Bubbles是五彩斑斓的泡泡，是绚丽夺目的泡泡，是昙花一现的泡泡，也是敏感脆弱的泡泡。</p>
<p>泡泡虽然单调，但却是璀璨的，在其中丰富多彩的思想屡见不鲜。</p>
<p>泡泡虽然封闭，但却是透明的，在其内一望无际的世界尽收眼底。</p>
<p>泡泡一旦变大，就会爆破，但在爆破的瞬间，也意味着泡泡内的思想与外界的碰撞产生了火花，不再局限于有限的空间内，而那刹那的绽放为这个世界添上了一笔美丽的风景，这就足够了。</p>
<p>我希望构建的正是这种丰富多彩的小空间，其中有知识的洪流，又有细腻的情感。虽然微不足道，却也充盈美满，既能满足内心的充实，又能追逐世界的美好。在时间的长河中，即使只是过眼云烟，转瞬即逝，也终将无怨无悔，只为绽放片刻风华。</p>
<p>阳光下的泡沫，是彩色的……</p>
<p>​                                                                                                                                                                                                        出自某个失眠的夜，戏有点多   o(<em>￣︶￣</em>)o</p>
<p>​                                                                                                                                                                                                                                                            ——姜小径</p>
<p>↓点开有惊喜↓</p>
<span id="more"></span>]]></content>
      <tags>
        <tag>点我试试</tag>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>万物皆有裂痕，那是光进来的地方</title>
    <url>/post/8927a3c2.html</url>
    <content><![CDATA[<p>现实与梦幻的交界处，魔幻的思维萦绕在仿佛来自外太空的敏感地带，阴霾的最深处，阳光的照射下，来自心灵深处的一点希望之火似灭非灭，完好无损的身体深处传来了点点刺痛，仿佛外部的皮囊只是为了掩饰伤痕累累的残破肉体，精神的喜悦夹杂着无尽的悲伤透过深邃无尽的眼神投射向不知名为何处的远方。蓝天，白云，大树，小草依旧，在这看似和谐美好的世界里隐藏着人类无法言喻的躁动与不安，看似平静且强大到无坚不摧的内心正在逐步的被吞噬，成就钢铁般的意志还是精神的分崩离析，肉体的瓦解就在一念之间。从未觉得爆发与灭亡之间的距离竟然像一张被泪水浸湿的纸一样经不起尝试。过去与未来的界限仿佛在此刻也变得模糊，一切的一切也变成了无所谓，只求独行于天地之间，不念过去，不畏将来，问心无愧，以所向披靡之势向未来发出内心深处那撕心裂肺的咆哮，吼吼吼！！！</p>
]]></content>
      <tags>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>衣带渐宽终不悔，为伊消得人憔悴</title>
    <url>/post/7e78750c.html</url>
    <content><![CDATA[<p>我怀里所有温暖的空气，变成风却不能和你相遇！人是会变的，就像宁波的天气，反复无常。有时候明知道很幼稚又不得不幼稚下去！有时不想长大，又不得不长大！事与愿违是人生常态，负反馈调节也有着其意义所在。我相信一夜之间白了头的故事，也明白时光机终究是一种美好的向往！胸中的高风亮节终究沦为笑柄，心中的愤世嫉俗也沦为时间的牺牲品，正如桀骜不驯的孙悟空也终究向五指山低头，而改变他的不过是区区五百年！改变，谈何容易？但不能丧失了尝试的勇气。生活总是一天比一天美好的，至少在梦里剧本是这样发展的！遗憾自有其存在的意义，无法弥补，正如毒鸡汤也有其价值，虽无甚实际作用，却不得不喝，至少可以营造一个虚无缥缈的梦，正如寻梦环游记那一条虚无缥缈的桥一样，那只是人们为了记住亲人为自己编的一个理由。红红火火恍恍惚惚，心中能装的下越来越多的事情，无间道中所说的人有多重人格，对此我是深信不疑的，或许我们每个人都有许多种人格，只是潜意识的将他们一一否定，没有对错，因为生存不允许人性的分裂！正因每个人留下的人格不同，造成了世间对善恶对错的认识的差异！认真你就输了，毕竟每个人的路都是用时间堆出来的！问心无愧，谈何容易？正如早起吃早餐，谈何容易？人类终究是矛盾的个体，长大了，越来越喜欢怀念以前的无忧无虑，怀念以前躺在沙发上的时光，怀念在地上打弹珠的时光，甚至怀念以前集齐五张卡召唤黑暗大法师的梦想，可我们终究是回不去了！</p>
]]></content>
      <tags>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>谁都会孤单，就像地球自转</title>
    <url>/post/6c528f68.html</url>
    <content><![CDATA[<p>孤独<br>深入骨髓的孤独<br>如沙漠傲月下一只嘶吼的孤狼<br>如广寒桂树下不断伐木的吴刚<br>远处的灯红酒绿是虚无缥缈的泡影<br>眼前的片片残影是诡谲多变的映像<br>我孤身来到这世界<br>体会着孤独特有的美妙<br>生活的繁复是这孤独背后的点缀<br>孤独却常伴吾身</p>
]]></content>
      <tags>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>使用DockerCompose快速搭建自己的博客系统</title>
    <url>/post/9d8269b0.html</url>
    <content><![CDATA[<h2 id="DockerCompose是什么"><a href="#DockerCompose是什么" class="headerlink" title="DockerCompose是什么"></a>DockerCompose是什么</h2><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>
<span id="more"></span>

<h2 id="一键部署自己的项目"><a href="#一键部署自己的项目" class="headerlink" title="一键部署自己的项目"></a>一键部署自己的项目</h2><p><strong>环境准备</strong><br>&#x3D;&#x3D;配置Docker环境&#x3D;&#x3D;</p>
<ul>
<li>卸载旧的版本</li>
</ul>
<blockquote>
<p>yum remove docker <br>    docker-client <br>    docker-client-latest <br>    docker-common <br>    docker-latest <br>    docker-latest-logrotate <br>    docker-logrotate <br>    docker-engine</p>
</blockquote>
<ul>
<li><p>需要的安装包</p>
<blockquote>
<p>yum install -y yum-utils</p>
</blockquote>
</li>
<li><p>设置镜像的仓库</p>
<blockquote>
<p>yum-config-manager <br>–add-repo <br><a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a>                   #默认是国外的(慢)</p>
<hr>
<p>yum-config-manager <br>–add-repo <br><a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a>            #阿里云地址(快)  推荐</p>
</blockquote>
</li>
<li><p>更新yum软件包索引</p>
<blockquote>
<p>yum makecache fast</p>
</blockquote>
</li>
<li><p>安装Docker  docker-ce 社区版 </p>
<blockquote>
<p>yum install docker-ce docker-ce-cli containerd.io</p>
</blockquote>
</li>
<li><p>启动docker</p>
<blockquote>
<p>systemctl start docker</p>
</blockquote>
</li>
<li><p>查看docker版本</p>
<blockquote>
<p>docker version</p>
</blockquote>
</li>
</ul>
<p>&#x3D;&#x3D;配置DockerCompose环境&#x3D;&#x3D;</p>
<ul>
<li><p>下载DockerCompose</p>
<blockquote>
<p>curl -L “<a href="https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$">https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$</a>(uname -s)-$(uname -m)” -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p>
</blockquote>
</li>
<li><p>将可执行权限应用于二进制文件</p>
<blockquote>
<p>chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p>
</blockquote>
</li>
<li><p>创建软链</p>
<blockquote>
<p>ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose</p>
</blockquote>
</li>
<li><p>测试是否安装成功</p>
<blockquote>
<p>docker-compose –version</p>
</blockquote>
</li>
</ul>
<p><strong>代码Demo</strong></p>
<blockquote>
<p>HelloController</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">views</span> <span class="operator">=</span> redisTemplate.opsForValue().increment(<span class="string">&quot;views&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;访问的次数：&quot;</span>+ views;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>application.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment"># 集群服务名</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">redis</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>docker-compose.yml</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">myapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;redis&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Dockerfile</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;将项目部署到服务器中&#x3D;&#x3D;</p>
<blockquote>
<p>将jar包放到服务器上</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201224171748250.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>运行docker-compose up运行容器  -d 后台运行</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201224171835735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&#x3D;&#x3D;测试&#x3D;&#x3D;<br><img src="https://img-blog.csdnimg.cn/20201224172506774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="搭建自己的博客系统（基于halo）"><a href="#搭建自己的博客系统（基于halo）" class="headerlink" title="搭建自己的博客系统（基于halo）"></a>搭建自己的博客系统（基于halo）</h2><blockquote>
<p>参考资料</p>
<p><a href="https://halo.run/">halo官网</a><br><img src="https://img-blog.csdnimg.cn/20201224173255289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><a href="https://blog.csdn.net/qq_38225558/article/details/95329395">导出CSDN中的博客</a><br><a href="https://github.com/TonyChenn/BlogExportTool">导出工具的使用</a></p>
</blockquote>
<p>若不想做域名映射又想使用docker-compose进行搭建只需使用以下yaml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">halo:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ruibaby/halo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">halo</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1023</span><span class="string">:1023</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VIRTUAL_PORT=8090</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VIRTUAL_HOST=localhost</span>  <span class="comment"># 你的博客地址（务必修改）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LETSENCRYPT_HOST=localhost</span> <span class="comment"># 你的博客地址 （务必修改）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LETSENCRYPT_EMAIL=654658859@qq.com</span> <span class="comment"># 证书所有者的邮箱，快过期时会提醒（务必修改）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MAX_UPLOAD_SIZE=10m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_XMS=256m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_XMX=256m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/.halo:/root/.halo</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker之DockerFile全攻略</title>
    <url>/post/b7d8b1a3.html</url>
    <content><![CDATA[<h2 id="DockerFile简介"><a href="#DockerFile简介" class="headerlink" title="DockerFile简介"></a>DockerFile简介</h2><p>DockerFile是用来构建docker镜像的文件(命令参数脚本)。</p>
<blockquote>
<p>构建步骤：</p>
<ul>
<li>编写一个dockerfile文件</li>
<li>docker build构建成为一个镜像</li>
<li>docker run命令运行一个镜像</li>
<li>docker push发布镜像(DockerHub、阿里云镜像仓库)</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><p>DockerFile中每一个指令都会创建提交一个新的镜像层，并提交。<br><img src="https://img-blog.csdnimg.cn/20201215100518375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>DockerFile：构建文件，定义了一切步骤，源代码。<br>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行的产品。<br>Docker容器：容器就是镜像运行起来提供服务的。</p>
<h2 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM			# 基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER		# 镜像是谁写的，一般姓名加邮箱</span><br><span class="line">RUN  			# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD				# 添加内容</span><br><span class="line">WORKDIR			# 镜像的工作目录</span><br><span class="line">VOLUME			# 挂载的目录</span><br><span class="line">EXPOSE			# 暴露端口配置</span><br><span class="line">CMD				# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT		# 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD			# 当构建一个被继承 DockerFile 这个时候会运行 ONBUILD 的指令，触发指令</span><br><span class="line">COPY			# 类似ADD命令，将文件拷贝到镜像中</span><br><span class="line">ENV				# 构建的时候设置环境变量</span><br></pre></td></tr></table></figure>

<p><strong>实战测试:构建centos镜像</strong></p>
<p>大部分基础镜像都是来自于scratch，然后根据需要自行配置镜像。<br><img src="https://img-blog.csdnimg.cn/2020121511073813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>创建一个自己的centos</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编写Dockerfile文件</span></span><br><span class="line">[root@jiangxj dockerfile]# cat mydockerfile </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER purple&lt;654658859@qq.com&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;----end----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据文件构建对象</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker build -f docker文件路径 -t 镜像名:[tag]</span></span><br><span class="line">[root@jiangxj dockerfile]# docker build -f mydockerfile -t mycentos:0.1 .</span><br><span class="line">Successfully built 56faba07517c</span><br><span class="line">Successfully tagged mycentos:0.1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试运行</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201216162102688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>可以通过docker history查看构建历史</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201216162601816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>实战测试:构建Tomcat镜像</strong></p>
<p>1、准备镜像文件，Tomcat压缩包、jdk压缩包。<br><img src="https://img-blog.csdnimg.cn/20201216165534794.png" alt="在这里插入图片描述"><br>2、编写Dockerfile文件，官方命名&#x3D;&#x3D;Dockerfile&#x3D;&#x3D;，build会自动寻找这个文件，不用-f指定了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER purple&lt;654658859@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u261-linux-x64.rpm /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.37.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local/</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_11</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.37</span><br><span class="line">ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.37</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.37/bin/startup.sh &amp;&amp; tail -F /url/local/usr/local/apache-tomcat-9.0.37/bin/logs/catalina.out</span><br></pre></td></tr></table></figure>
<p>3、构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker build -t diytomcat .</span></span><br><span class="line">[root@jiangxj tomcat]# docker build -t diytomcat .</span><br><span class="line">Successfully built 0d6472a8bc3d</span><br><span class="line">Successfully tagged diytomcat:latest</span><br></pre></td></tr></table></figure>
<p>4、挂载启动镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jiangxj tomcat]# docker run -d -p 3500:8080 --name mytomcat -v /home/PurpleStars/build/tomcat/test:/usr/local/apache-tomcat-9.0.37/webapps/test -v /home/PurpleStars/build/tomcat/tomcatlogs:/usr/local/apache-tomcat-9.0.37/logs diytomcat</span><br><span class="line">440c1484b5be80ed79d6ed1a925b5c8fea2f993250df646c80951db2c063ea97</span><br></pre></td></tr></table></figure>
<p>5、进入镜像查看目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jiangxj /]# docker exec -it 610907cd7150 /bin/bash</span><br></pre></td></tr></table></figure>
<p>6、访问镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:3500</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20201216184033585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>7、发布项目<br>由于做了卷挂载，在本地编写项目即可发布。</p>
<blockquote>
<p>web.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>test.jsp</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello World!&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(&quot;你的 IP 地址 &quot; + request.getRemoteAddr());</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">&gt;</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">&lt;/body&gt;</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>8、查看日志<br><img src="https://img-blog.csdnimg.cn/20201216192008627.png" alt="在这里插入图片描述"><br>若启动报以下错误可尝试将&#x3D;&#x3D;web.xml&#x3D;&#x3D;中文件开头的空格去掉。<br><img src="https://img-blog.csdnimg.cn/20201216192115836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>9、使用映射端口访问项目<br><img src="https://img-blog.csdnimg.cn/20201216192214328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote>
<p>DockerHub</p>
</blockquote>
<p>1、登录DockerHub<br><img src="https://img-blog.csdnimg.cn/20201217104334925.png" alt="在这里插入图片描述"><br>2、push自己的镜像到DockerHub</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jiangxj /]# docker tag diytomcat jiangxjf/diytomcat:1.0</span><br><span class="line">[root@jiangxj /]# docker push jiangxjf/diytomcat:1.0</span><br></pre></td></tr></table></figure>
<p>其中镜像名必须与DockerHub用户名相同<br><img src="https://img-blog.csdnimg.cn/20201217110302172.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>阿里云镜像</p>
</blockquote>
<p>1、登录阿里云<br>2、找到容器镜像服务<br>3、创建命名空间<br><img src="https://img-blog.csdnimg.cn/20201217110752606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、创建容器镜像<br><img src="https://img-blog.csdnimg.cn/2020121711101082.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5、点击镜像查看操作步骤<br><img src="https://img-blog.csdnimg.cn/20201217111153726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考文档进行操作，完成后可查看镜像版本。<br><img src="https://img-blog.csdnimg.cn/20201217111752971.png" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker之容器数据卷</title>
    <url>/post/797a04f2.html</url>
    <content><![CDATA[<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p>Docker实际上就是将环境和应用打包成一个镜像独立部署的项目。<br>那么如果数据都在一个容器中，如果容器删除，数据就会丢失，因此迫切需要数据持久化技术。<br>当存在Mysql容器时，删除容器相当于删库跑路，因此也迫切需要数据可以存储在本地。<br>因此数据共享的技术应运而生，可以将容器的目录挂载到linux特定目录上，这就是<strong>容器数据卷</strong>。</p>
<p>总结：容器数据卷就是解决了容器的持久化和可同步操作的技术，保证容器间数据也是可以共享的。</p>
<span id="more"></span>

<h2 id="使用容器数据卷"><a href="#使用容器数据卷" class="headerlink" title="使用容器数据卷"></a>使用容器数据卷</h2><blockquote>
<p>方式一：使用命令进行挂载 -v</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker run -it -v 主机目录：容器内目录</span></span><br><span class="line">docker run -it -v /home/ceshi:/home centos /bin/bash</span><br></pre></td></tr></table></figure>
<p>退出容器通过<strong>docker inspect 容器id</strong>进行查看</p>
<p><img src="https://img-blog.csdnimg.cn/20201209143513623.png" alt="在这里插入图片描述"><br><strong>测试文件同步</strong><br><img src="https://img-blog.csdnimg.cn/20201209144127834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>好处：以后修改数据直接在服务器修改即可，不需要进入容器修改。</p>
<h2 id="实战：安装Mysql"><a href="#实战：安装Mysql" class="headerlink" title="实战：安装Mysql"></a>实战：安装Mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取镜像</span></span><br><span class="line">[root@jiangxj /]# docker pull mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行容器，进行数据挂载，注意设置密码</span></span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line">[root@jiangxj /]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>测试连接</strong><br><img src="https://img-blog.csdnimg.cn/20201209151711657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209151729770.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>此时新建数据库，主机&#x2F;home&#x2F;mysql&#x2F;data目录下会生成数据库文件，删除容器，主机目录下的数据仍然存在，并不会随之清除。</p>
</blockquote>
<h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有卷的情况</span></span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               6e8fd118eda13b1c1008c2e118363ee0b2feba4ed35de1b7d18318f4e7878887</span><br><span class="line">local               90ca321f309c5d5489624f531b2a87850421926453e1d8b4284e4f8b98ef86a7</span><br><span class="line">local               cd9444e698a9aceacb7c8aadc671f81de84763359cc55c42b7a7f1ae665d5805</span><br><span class="line">local               d20464627e515be32ce89ee6f262c3417d617f165fc57bfa1c5c1902c3d395cd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这种就是匿名挂载，-v 时只写了容器内路径，没有写容器外的路径</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具名挂载</span></span><br><span class="line">-v 容器卷名：容器内路径</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有卷的情况</span></span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               6e8fd118eda13b1c1008c2e118363ee0b2feba4ed35de1b7d18318f4e7878887</span><br><span class="line">local               90ca321f309c5d5489624f531b2a87850421926453e1d8b4284e4f8b98ef86a7</span><br><span class="line">local               cd9444e698a9aceacb7c8aadc671f81de84763359cc55c42b7a7f1ae665d5805</span><br><span class="line">local               d20464627e515be32ce89ee6f262c3417d617f165fc57bfa1c5c1902c3d395cd</span><br><span class="line">local               juming-nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这种就是具名挂载 卷拥有自己的名字</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看卷路径</span></span><br><span class="line">[root@jiangxj /]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2020-12-09T15:55:56+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>具名挂载和匿名挂载的区别</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-v 容器内路径				#匿名挂载</span><br><span class="line">-v 卷名：容器内路径			#具名挂载</span><br><span class="line">-v 宿主机路径：容器内路径		#指定路径挂载</span><br></pre></td></tr></table></figure>

<p><strong>拓展</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 容器内路径 可以改变读写权限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ro <span class="built_in">readonly</span>   	只读</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">rw readwrite   可读可写</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一旦设置为ro则只能通过宿主机来操作，容器内无法操作</span></span><br></pre></td></tr></table></figure>

<h2 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h2><p>Dockerfile就是用来构建docker镜像的构建文件！<br>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个一个的命令，每个命令都是一层！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个dockerfile文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件中内容如下</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"></span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的每个命令都是镜像的一层</span></span><br></pre></td></tr></table></figure>
<p>然后构建Dockerfile，查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jiangxj docker-test-volume]# docker build -f /home/docker-test-volume/dockerfile1 -t purplestars/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">300e315adb2f</span></span><br><span class="line">Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 005a2881c091</span></span><br><span class="line">Removing intermediate container 005a2881c091</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">2d3ee13725a5</span></span><br><span class="line">Step 3/4 : CMD echo &quot;---end---&quot;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> da635d1d5d74</span></span><br><span class="line">Removing intermediate container da635d1d5d74</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">1f23ab7f6cc7</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 84b34e9b8af8</span></span><br><span class="line">Removing intermediate container 84b34e9b8af8</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">a82c927eed38</span></span><br><span class="line">Successfully built a82c927eed38</span><br><span class="line">Successfully tagged purplestars/centos:1.0</span><br><span class="line">[root@jiangxj docker-test-volume]# docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">purplestars/centos    1.0                 a82c927eed38        42 seconds ago      209MB</span><br><span class="line">tomcat1.0             latest              068cef20e1fe        24 hours ago        654MB</span><br><span class="line">centos                latest              300e315adb2f        2 days ago          209MB</span><br><span class="line">nginx                 latest              bc9a0695f571        2 weeks ago         133MB</span><br><span class="line">mysql                 5.7                 ae0658fdbad5        2 weeks ago         449MB</span><br><span class="line">tomcat                latest              e0bd8b34b4ea        3 weeks ago         649MB</span><br><span class="line">redis                 latest              74d107221092        3 weeks ago         104MB</span><br><span class="line">portainer/portainer   latest              62771b0b9b09        4 months ago        79.1MB</span><br><span class="line">elasticsearch         7.6.2               f29a1ee41030        8 months ago        791MB</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201210142739114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对应容器外目录为<br><img src="https://img-blog.csdnimg.cn/20201210143123174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试文件是否同步</p>
<blockquote>
<p>容器内新建文件</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201210143307729.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>去容器外挂载目录查看</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201210143407520.png" alt="在这里插入图片描述"></p>
<h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p><strong>多个容器同步数据</strong></p>
<p>启动容器2个容器</p>
<ul>
<li>docker01<br><img src="https://img-blog.csdnimg.cn/20201210150102760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>docker02<br><img src="https://img-blog.csdnimg.cn/20201210150241415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试文件是否同步<blockquote>
<p>docker01创建文件</p>
</blockquote>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201210150626889.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>docker02查看文件</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020121015064063.png" alt="在这里插入图片描述"><br><strong>容器中的数据共享</strong></p>
<p>通过–volumes-from可以实现容器间数据共享，当删除宿主容器，数据仍然存在。</p>
<blockquote>
<p>例如，启动多个mysql实现数据共享。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jiangxj /]# docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">[root@jiangxj /]# docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这时可以实现两个容器数据同步</span></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong><br>容器数据卷可以实现多个容器之间的配置同步，数据卷容器的生命周期可以一直持续到没有容器使用为止。但是一旦持久化到本地，本地的数据时不会被删除的。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/post/29dc6fe8.html</url>
    <content><![CDATA[<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version  		# 显示docker的版本信息</span><br><span class="line">docker info				# 显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help		# 帮助命令</span><br></pre></td></tr></table></figure>


<span id="more"></span>

<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong>：查看所有本地的主机上的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              0d120b6ccaa8        3 months ago        215MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解释</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG			镜像的标签</span><br><span class="line">IMAGE ID	镜像的ID</span><br><span class="line">CREATED		镜像的创建时间</span><br><span class="line">SIZE		镜像的大小</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可选项</span></span><br><span class="line">  -a, --all             列出所有镜像</span><br><span class="line">  -q, --quiet           只显示镜像的id</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>docker search</strong>：搜索镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker search mysql</span></span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10243               [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3784                [OK]                </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可选项</span></span><br><span class="line">--filter=STARS=num		#例如--filter=STARS=5000则只显示收藏量为5000以上的镜像</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker search mysql --filter=STARS=5000</span></span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation…   10243               [OK]                </span><br></pre></td></tr></table></figure>

<p><strong>docker pull</strong>：下载镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载镜像 docker pull 镜像名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker pull mysql</span></span><br><span class="line">Using default tag: latest					#如果不写tag 则默认就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Pull complete 				#分层下载，docker image的核心 联合文件系统</span><br><span class="line">29969ddb0ffb: Pull complete </span><br><span class="line">a43f41a44c48: Pull complete </span><br><span class="line">5cdd802543a3: Pull complete </span><br><span class="line">b79b040de953: Pull complete </span><br><span class="line">938c64119969: Pull complete </span><br><span class="line">7689ec51a0d9: Pull complete </span><br><span class="line">a880ba7c411f: Pull complete </span><br><span class="line">984f656ec6ca: Pull complete </span><br><span class="line">9f497bce458a: Pull complete </span><br><span class="line">b9940f97694b: Pull complete </span><br><span class="line">2f069358dc96: Pull complete </span><br><span class="line">Digest: sha256:4bb2e81a40e9d0d59bd8e3dc2ba5e1f2197696f6de39a91e90798dd27299b093	#签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest				#真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">等价操作</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定版本下载 docker pull 镜像名:[tag]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Already exists </span><br><span class="line">29969ddb0ffb: Already exists </span><br><span class="line">a43f41a44c48: Already exists </span><br><span class="line">5cdd802543a3: Already exists </span><br><span class="line">b79b040de953: Already exists </span><br><span class="line">938c64119969: Already exists </span><br><span class="line">7689ec51a0d9: Already exists </span><br><span class="line">36bd6224d58f: Pull complete </span><br><span class="line">cab9d3fa4c8c: Pull complete </span><br><span class="line">1b741e1c47de: Pull complete </span><br><span class="line">aac9d11987ac: Pull complete </span><br><span class="line">Digest: sha256:8e2004f9fe43df06c3030090f593021a5f283d028b5ed5765cc24236c2c4d88e</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>

<p><strong>docker rmi</strong>：删除镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker rmi -f 镜像<span class="built_in">id</span>					<span class="comment">#删除指定的容器</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker rmi -f 镜像<span class="built_in">id</span> 镜像<span class="built_in">id</span> 镜像<span class="built_in">id</span>		<span class="comment">#删除多个容器</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker rmi -f $(docker images -aq)   	<span class="comment">#删除全部容器</span></span></span><br></pre></td></tr></table></figure>

<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>有了镜像才可以创建容器，下载一个centos镜像来测试学习</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker pull centos</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">7a0437f04f83: Pull complete </span><br><span class="line">Digest: sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line">docker.io/library/centos:latest</span><br></pre></td></tr></table></figure>
<p><strong>新建容器并启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker run [可选参数] image</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数说明</span></span><br><span class="line">--name=“Name”		#容器名字，用来区分容器</span><br><span class="line">-d 					#后台运行方式</span><br><span class="line">-it					#使用交互方式运行</span><br><span class="line">-p					#指定容器端口</span><br><span class="line">	-p ip:主机端口:容器端口</span><br><span class="line">	-p 主机端口:容器端口(常用)</span><br><span class="line">	-p 容器端口</span><br><span class="line">	容器端口</span><br><span class="line">-P					#随机指定端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动，并进入容器</span></span><br><span class="line">[root@jiangxj /]# docker run -it centos /bin/bash</span><br><span class="line">[root@1b340720ae1d /]# ls			#查看容器内的centos</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@1b340720ae1d /]# exit			#退出容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p><strong>列出所有运行的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker ps 命令</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可选项</span></span><br><span class="line">				#列出当前正在运行的容器</span><br><span class="line">-a 				#列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=num			#显示最近创建的容器，num为显示个数</span><br><span class="line">-q				#只显示容器编号</span><br><span class="line"></span><br><span class="line">[root@jiangxj /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@jiangxj /]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">1b340720ae1d        centos              &quot;/bin/bash&quot;         5 minutes ago       Exited (0) 2 minutes ago                       elegant_blackburn</span><br><span class="line">b9935b15445e        0d120b6ccaa8        &quot;/bin/bash&quot;         3 days ago          Exited (0) 3 days ago                          goofy_napier</span><br><span class="line">[root@jiangxj /]# docker ps -a -n=1</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">1b340720ae1d        centos              &quot;/bin/bash&quot;         8 minutes ago       Exited (0) 5 minutes ago                       elegant_blackburn</span><br><span class="line">[root@jiangxj /]# docker ps -aq</span><br><span class="line">1b340720ae1d</span><br><span class="line">b9935b15445e</span><br></pre></td></tr></table></figure>

<p><strong>退出容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit	 	#容器停止并退出</span><br><span class="line">Ctrl+p+q	#容器不停止退出</span><br></pre></td></tr></table></figure>
<p><strong>删除容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id							#删除指定容器，强制删除正在运行的容器则使用	rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)			#删除全部容器</span><br><span class="line">docker ps -a -q|xargs docker rm			#删除所有容器</span><br></pre></td></tr></table></figure>
<p><strong>启动和停止容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id			#启动容器</span><br><span class="line">docker restart 容器id		#重启容器</span><br><span class="line">docker stop 容器id			#停止容器</span><br><span class="line">docker kill 容器id			#强制停止容器</span><br></pre></td></tr></table></figure>

<h2 id="日志、进程、元数据命令"><a href="#日志、进程、元数据命令" class="headerlink" title="日志、进程、元数据命令"></a>日志、进程、元数据命令</h2><p><strong>后台启动容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jiangxj /]# docker run -d centos</span><br><span class="line">efa75cc6c750583ba6a7a87e19680e441e45f084a21f6745b5a45b56fc6810d6</span><br><span class="line">[root@jiangxj /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker后台启动，使用 docker ps 发现镜像停止了，容器使用后台运行，必须有一个前台进程，docker发现没有应用，就会自动停止。</span></span><br></pre></td></tr></table></figure>

<p><strong>查看日志</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">自己写一段shell脚本</span></span><br><span class="line">[root@jiangxj /]# docker run -d centos /bin/sh -c &quot;while true; do echo purpleStars; sleep 1; done&quot; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[root@jiangxj /]<span class="comment"># docker ps</span></span></span><br><span class="line">CONTAINER ID        IMAGE  </span><br><span class="line">98eefd87af22        centos </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示所有日志</span></span><br><span class="line">[root@jiangxj /]# docker logs -tf 容器id</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示指定行数日志</span></span><br><span class="line">[root@jiangxj /]# docker logs -tf --tail 10 容器id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可选项</span></span><br><span class="line"> 	-tf				# 显示日志</span><br><span class="line">	--tail num		# num为要显示日志条数</span><br></pre></td></tr></table></figure>

<p><strong>查看容器中的进程信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top命令</span><br><span class="line">[root@jiangxj /]# docker top 容器id</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                883                 867                 0                   15:32               ?                   00:00:00            /bin/sh -c while true; do echo purpleStars; sleep 1; done</span><br><span class="line">root                1990                883                 0                   15:41               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br></pre></td></tr></table></figure>

<p><strong>查看镜像元数据</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jiangxj /]# docker inspect 容器id</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;98eefd87af2221c5070fb5f07b055a35d3a38c689c874cdf2fc4fb00115d6b38&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-08T07:32:42.087417632Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true; do echo purpleStars; sleep 1; done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 883,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2020-12-08T07:32:42.400487416Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/98eefd87af2221c5070fb5f07b055a35d3a38c689c874cdf2fc4fb00115d6b38/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/98eefd87af2221c5070fb5f07b055a35d3a38c689c874cdf2fc4fb00115d6b38/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/98eefd87af2221c5070fb5f07b055a35d3a38c689c874cdf2fc4fb00115d6b38/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/98eefd87af2221c5070fb5f07b055a35d3a38c689c874cdf2fc4fb00115d6b38/98eefd87af2221c5070fb5f07b055a35d3a38c689c874cdf2fc4fb00115d6b38-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/zealous_euler&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;Capabilities&quot;: null,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/7be58605cffa80d045e2e777f2c1ac5cb4e30007113528faa41d08b8e1b7dd9f-init/diff:/var/lib/docker/overlay2/2b66cc1fa48e3ab70769626768e5274ba93a4c8158d27f4f27dc59f3524b2d12/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/7be58605cffa80d045e2e777f2c1ac5cb4e30007113528faa41d08b8e1b7dd9f/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/7be58605cffa80d045e2e777f2c1ac5cb4e30007113528faa41d08b8e1b7dd9f/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/7be58605cffa80d045e2e777f2c1ac5cb4e30007113528faa41d08b8e1b7dd9f/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;98eefd87af22&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true; do echo purpleStars; sleep 1; done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;5f0526c434f1dd60466856e9ec71f552688da0315c77174b5830f9a2f5c2ec7a&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/5f0526c434f1&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;fc219adbab36b46bd8750d4a9faf7d336350dafd63f255c3ea96d43bd88516df&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;aa647273ba9f8f301a4490fbd05d512360bb8a336d2f80321b0ad4fa1fc5dc3d&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;fc219adbab36b46bd8750d4a9faf7d336350dafd63f255c3ea96d43bd88516df&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="进入容器和拷贝"><a href="#进入容器和拷贝" class="headerlink" title="进入容器和拷贝"></a>进入容器和拷贝</h2><p><strong>进入当前正在运行的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们通常容器都是使用后台方式运行的，需要进入容器修改配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">[root@jiangxj /]# clear</span><br><span class="line">[root@jiangxj /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">98eefd87af22        centos              &quot;/bin/sh -c &#x27;while t…&quot;   18 minutes ago      Up 18 minutes                           zealous_euler</span><br><span class="line">[root@jiangxj /]# docker exec -it 98eefd87af22 /bin/bash</span><br><span class="line">[root@98eefd87af22 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@98eefd87af22 /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 07:32 ?        00:00:00 /bin/sh -c while true; do echo purpleStars; sleep 1; done</span><br><span class="line">root      1171     0  0 07:52 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      1208     1  0 07:52 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root      1209  1171  0 07:52 pts/0    00:00:00 ps -ef</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试</span></span><br><span class="line">[root@jiangxj /]# docker attach 98eefd87af22</span><br><span class="line">正在执行当前的代码……</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">区别</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span>		<span class="comment">#进入容器开启一个新的终端，可以在里面操作(常用)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker attach		<span class="comment">#进入容器正在执行的终端，不会启动新的进程</span></span></span><br></pre></td></tr></table></figure>
<p><strong>从容器内拷贝容器到主机上</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 容器id：容器内路径  目的主机路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入docker容器内</span></span><br><span class="line">[root@jiangxj home]# docker attach 01cdd87929c6</span><br><span class="line">[root@01cdd87929c6 /]# cd /home</span><br><span class="line">[root@01cdd87929c6 home]# ls</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在容器内新建文件</span></span><br><span class="line">[root@01cdd87929c6 home]# touch dockerps</span><br><span class="line">[root@01cdd87929c6 home]# ls</span><br><span class="line">dockerps</span><br><span class="line">[root@01cdd87929c6 home]# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将容器拷贝出来到主机上</span></span><br><span class="line">[root@jiangxj home]# docker cp 01cdd87929c6:/home/dockerps /home</span><br><span class="line">[root@jiangxj home]# ls</span><br><span class="line">dockerps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝是一个手动过程，还可以使用 -v 卷的技术，可以实现自动同步</span> </span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于Docker常用的命令就是以上内容，下图总结了一些命令以及交互内容。<br><img src="https://img-blog.csdnimg.cn/20201208161604403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手安装Docker以及配置阿里云镜像加速</title>
    <url>/post/997f9a42.html</url>
    <content><![CDATA[<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>
<p><img src="https://img-blog.csdnimg.cn/20201204141423676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<span id="more"></span>

<blockquote>
<p>Docker是一种虚拟化容器，可以将一系列环境及代码打包成一个个镜像，需要的时候直接复制镜像即可，这些镜像就犹如一个个方盒子，互相隔离，互不影响。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201204141446754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><ul>
<li>卸载旧的版本</li>
</ul>
<blockquote>
<p>yum remove docker <br>    docker-client <br>    docker-client-latest <br>    docker-common <br>    docker-latest <br>    docker-latest-logrotate <br>    docker-logrotate <br>    docker-engine</p>
</blockquote>
<ul>
<li><p>需要的安装包</p>
<blockquote>
<p>yum install -y yum-utils</p>
</blockquote>
</li>
<li><p>设置镜像的仓库</p>
<blockquote>
<p>yum-config-manager <br>–add-repo <br><a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a>                   #默认是国外的(慢)</p>
<hr>
<p>yum-config-manager <br>–add-repo <br><a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a>            #阿里云地址(快)  推荐</p>
</blockquote>
</li>
<li><p>更新yum软件包索引</p>
<blockquote>
<p>yum makecache fast</p>
</blockquote>
</li>
<li><p>安装Docker  docker-ce 社区版 </p>
<blockquote>
<p>yum install docker-ce docker-ce-cli containerd.io</p>
</blockquote>
</li>
<li><p>启动docker</p>
<blockquote>
<p>systemctl start docker</p>
</blockquote>
</li>
<li><p>查看docker版本</p>
<blockquote>
<p>docker version</p>
</blockquote>
</li>
<li><p>测试hello world</p>
<blockquote>
<p>docker run hello-world</p>
</blockquote>
</li>
<li><p>查看镜像</p>
<blockquote>
<p>docker images</p>
</blockquote>
</li>
</ul>
<p><strong>卸载Docker</strong></p>
<blockquote>
<p>#卸载Docker<br>##卸载Docker依赖<br>yum remove docker-ce docker-ce-cli containerd.io<br>##删除资源<br>rm -rf &#x2F;var&#x2F;lib&#x2F;docker<br>&#x2F;var&#x2F;lib&#x2F;docker      (Docker的默认工作路径)</p>
</blockquote>
<h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><ul>
<li>进入阿里云服务器，选择如图容器镜像服务</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201204142937879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>如图选择镜像加速器，选择对应的环境</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201204143056390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>服务器环境查看</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020120414322525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>依次运行上述指令即可配置阿里云镜像加速器</li>
</ul>
<blockquote>
<p>#配置镜像加速器<br>sudo mkdir -p &#x2F;etc&#x2F;docker<br>sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-‘EOF’<br>{<br>“registry-mirrors”: [“<a href="https://03m42yw6.mirror.aliyuncs.com&quot;]">https://03m42yw6.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p>
</blockquote>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合ElasticSearch及API详解</title>
    <url>/post/f506bd7.html</url>
    <content><![CDATA[<h2 id="ELK简介"><a href="#ELK简介" class="headerlink" title="ELK简介"></a>ELK简介</h2><p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件。</p>
<p>Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p>
<p>Logstash 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c&#x2F;s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。</p>
<p>Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</p>
<p>ELK是向大数据发展的必经之路。而ElasticSearch主要用于搜索引擎相关方面，其也是一种Nosql数据库，相比于solr，在数据量不断增大的情况下，其性能、速度等方面有显著优势。</p>
<span id="more"></span>



<h2 id="SpringBoot集成ElasticSearch"><a href="#SpringBoot集成ElasticSearch" class="headerlink" title="SpringBoot集成ElasticSearch"></a>SpringBoot集成ElasticSearch</h2><p>首先需要引入es的jar包，也可以直接引入SpringData中的包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticSearchClientConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">restHighLevelClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">9200</span>,<span class="string">&quot;http&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建User实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="API详解"><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h2><p>测试API</p>
<blockquote>
<p>编写测试类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ElasticSearch 高级客户端API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EsApiApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="meta">@Qualifier(&quot;restHighLevelClient&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>索引的创建</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 索引的创建</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="comment">//1、创建索引请求</span></span><br><span class="line">	<span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;purple_index&quot;</span>);</span><br><span class="line">	<span class="comment">//2、执行创建请求</span></span><br><span class="line">	<span class="type">CreateIndexResponse</span> <span class="variable">createIndexResponse</span> <span class="operator">=</span> client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">	System.out.println(createIndexResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试获取索引,判断其是否存在</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试获取索引,判断其是否存在</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testExistIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;purple_index&quot;</span>);</span><br><span class="line">	<span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试删除索引</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试删除索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;purple_index&quot;</span>);</span><br><span class="line">	<span class="type">AcknowledgedResponse</span> <span class="variable">delete</span> <span class="operator">=</span> client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试添加文档</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试添加文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="comment">//创建对象</span></span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;紫色星辰&quot;</span>,<span class="number">3</span>);</span><br><span class="line">	<span class="comment">//创建请求</span></span><br><span class="line">	<span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;purple_index&quot;</span>);</span><br><span class="line">	request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">	request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将数据放入请求 json</span></span><br><span class="line">	request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//客户端发送请求,获取响应结果</span></span><br><span class="line">	<span class="type">IndexResponse</span> <span class="variable">indexResponse</span> <span class="operator">=</span> client.index(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">	System.out.println(indexResponse.toString());</span><br><span class="line">	System.out.println(indexResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取文档，判断是否存在</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取文档，判断是否存在</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testIsExists</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;purple_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">	<span class="comment">//不获取返回的_source 的上下文了</span></span><br><span class="line">	getRequest.fetchSourceContext(<span class="keyword">new</span> <span class="title class_">FetchSourceContext</span>(<span class="literal">false</span>));</span><br><span class="line">	getRequest.storedFields(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取文档信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取文档信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;purple_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">	<span class="type">GetResponse</span> <span class="variable">getResponse</span> <span class="operator">=</span> client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(getResponse.getSourceAsString());</span><br><span class="line">	System.out.println(getResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更新文档信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新文档信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;purple_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">	updateRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;香草拿铁&quot;</span>, <span class="number">18</span>);</span><br><span class="line">	updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line">	<span class="type">UpdateResponse</span> <span class="variable">updateResponse</span> <span class="operator">=</span> client.update(updateRequest,RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(updateResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除文档信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除文档信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;purple_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">	request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">	<span class="type">DeleteResponse</span> <span class="variable">deleteResponse</span> <span class="operator">=</span> client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(deleteResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>批量插入数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量插入数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">	bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">	ArrayList&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;紫色星辰1&quot;</span>,<span class="number">1</span>));</span><br><span class="line">	userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;紫色星辰2&quot;</span>,<span class="number">2</span>));</span><br><span class="line">	userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;紫色星辰3&quot;</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">		bulkRequest.add(</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;purple_index&quot;</span>)</span><br><span class="line">				.id(<span class="string">&quot;&quot;</span>+(i+<span class="number">1</span>))</span><br><span class="line">				.source(JSON.toJSONString(userList.get(i)),XContentType.JSON)</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">BulkResponse</span> <span class="variable">bulkResponse</span> <span class="operator">=</span> client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(bulkResponse.hasFailures());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//查询</span></span><br><span class="line">	<span class="comment">//SearchRequest  搜索请求</span></span><br><span class="line">	<span class="comment">//SearchSourceBuilder  条件构造</span></span><br><span class="line">	<span class="comment">//HighlightBuilder  构建高亮</span></span><br><span class="line">	<span class="comment">//TermQueryBuilder  精确查询</span></span><br><span class="line">	<span class="comment">//MatchAllQueryBuilder  全量查询</span></span><br><span class="line">	<span class="comment">//xxx QueryBuilder 对应所有命令</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;purple_index&quot;</span>);</span><br><span class="line">		<span class="comment">//构建搜索条件</span></span><br><span class="line">		<span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">		<span class="comment">//查询条件，我们可以使用 QueryBuilders工具来实现</span></span><br><span class="line">		<span class="comment">//QueryBuilders.termQuery 精确匹配</span></span><br><span class="line">		<span class="comment">//QueryBuilders.matchAllQuery() 匹配所有</span></span><br><span class="line"></span><br><span class="line">		<span class="type">TermQueryBuilder</span> <span class="variable">termQueryBuilder</span> <span class="operator">=</span> QueryBuilders.termQuery(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">//		MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">		sourceBuilder.query(termQueryBuilder);</span><br><span class="line"><span class="comment">//		//分页</span></span><br><span class="line"><span class="comment">//		sourceBuilder.from();</span></span><br><span class="line"><span class="comment">//		sourceBuilder.size();</span></span><br><span class="line">		sourceBuilder.timeout(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">		searchRequest.source(sourceBuilder);</span><br><span class="line">		<span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">		System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">		System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (SearchHit hit : searchResponse.getHits()) &#123;</span><br><span class="line">			System.out.println(hit.getSourceAsMap());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>小黄鸭调试法-程序猿修炼之道</title>
    <url>/post/7517cb7a.html</url>
    <content><![CDATA[<h2 id="什么是小黄鸭调试法"><a href="#什么是小黄鸭调试法" class="headerlink" title="什么是小黄鸭调试法"></a>什么是小黄鸭调试法</h2><p>小黄鸭调试法（又称橡皮鸭调试法，黄鸭除虫法）是软件工程中使用的调试代码方法之一。此概念是参照于一个来自《程序员修炼之道》书中的一个故事。传说中程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码。</p>
<span id="more"></span>



<h2 id="小黄鸭调试法适用场景"><a href="#小黄鸭调试法适用场景" class="headerlink" title="小黄鸭调试法适用场景"></a>小黄鸭调试法适用场景</h2><p><strong>example A</strong></p>
<blockquote>
<p>程序猿A：又报错了，明明代码看起来没问题啊。。。<br>程序猿B：敲键盘。<br>程序猿A：明明什么都没做，怎么就报错了呢？<br>程序猿B：你在讲鬼故事吗？<br>程序猿A：帮我看一下，这里哪出现了问题？<br>程序猿B：这写的啥啊？<br>程序猿A：balabala，哦！我知道了。。。</p>
</blockquote>
<p><strong>example B</strong></p>
<blockquote>
<p>程序猿A：这又是个什么报错，这一串英文是什么鬼。<br>程序猿B：(我是一只小黄鸭，我不会说话)<br>程序猿A：(抠头皮)<br>程序猿B：(我是一只小黄鸭，我不会说话)<br>程序猿A：(吃手指)<br>程序猿B：(我是一只小黄鸭，我不会说话)<br>程序猿A：百度……半小时后<br>程序猿B：找到错误了吗？<br>程序猿A：你来帮我看一下，我先这样，再这样，然后这样，没问题啊，怎么就报错了。<br>程序猿B：你在说啥？<br>程序猿A：就是balabala，bilibili，我知道了！！！</p>
</blockquote>
<h2 id="小黄鸭调试法先决条件"><a href="#小黄鸭调试法先决条件" class="headerlink" title="小黄鸭调试法先决条件"></a>小黄鸭调试法先决条件</h2><p>由以上例子可以得知程序猿B从头到尾只是一个工具人，并没有什么作用。<br>这只是个名字，一个代号。你可以叫程序猿B，我也可以叫程序猿B，他们都可以。<br>因此万物皆可为程序猿B，那么小黄鸭也可以。<br>所以只需要有一只小黄鸭即可触发<strong>小黄鸭调试法的充分不必要条件</strong>。<br>所以只需要有一只小黄鸭即可触发<strong>解决问题的必要不充分条件</strong>。</p>
<blockquote>
<p>得出公式：<br>codeMonkeyA   me &#x3D; new  codeMonkeyA();<br>codeMonkeyB   yellowDuck  &#x3D; new  codeMonkeyB();<br>while(!problem.isSolve){<br>me.say();<br>yellowDuck.silent();<br>}<br>return problem.isSolve;</p>
</blockquote>
<h2 id="小黄鸭调试法最佳实践"><a href="#小黄鸭调试法最佳实践" class="headerlink" title="小黄鸭调试法最佳实践"></a>小黄鸭调试法最佳实践</h2><ul>
<li>获取一只小黄鸭</li>
</ul>
<p>– channelA：点外卖送一只<br>– channelB：淘宝买一只<br>– channelC：生日礼物收到一只<br>– channelD：new一只小黄鸭</p>
<p><img src="https://img-blog.csdnimg.cn/20201118150134481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>遇到问题，对着小黄鸭(工具鸭)balabala</li>
</ul>
<p>– methodA：肉眼看代码balabala<br>– methodB：一边debug，一边balabala<br>– methodC：一边抠头，一边balabala</p>
<ul>
<li>灵光一闪，问题解决</li>
</ul>
<p>– situationA：我知道了，原来是这样。<br>– situationB：卧槽，这真是一个大坑。<br>– situationC：这个锅我不接，有人改了代码。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>小黄鸭调试法</strong>实则是通过对着小黄鸭自言自语来整理程序猿思路，从而达到山穷水尽疑无路，柳暗花明又一村的豁然开朗之境。相较于<strong>抠头调试法</strong>和<strong>啃手指调试法</strong>可以更高效、更健康的发现和解决问题，建议程序猿们多加练习和实践，早日成为程序大师。</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>自旋锁的实现和死锁排查</title>
    <url>/post/d72b7dc3.html</url>
    <content><![CDATA[<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>自旋锁是指对一个内容无限循环，当达成条件的时候对其加锁，底层使用的是CAS。</p>
<p><strong>自定义自旋锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLock</span> &#123;</span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="literal">null</span>,thread))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; myLock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myUnLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        atomicReference.compareAndSet(thread,<span class="literal">null</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; myUnLock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<span id="more"></span>



<p>&#x3D;&#x3D;自旋锁测试&#x3D;&#x3D;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">SpinLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpinLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果<br><img src="https://img-blog.csdnimg.cn/20201124093623770.png#pic_center" alt="在这里插入图片描述"><br>线程T1占用时，线程T2会一直在循环中无法出来。只有当线程T1解锁，线程T2才会跳出循环，最终才会触发T2解锁。</p>
<h2 id="死锁排查"><a href="#死锁排查" class="headerlink" title="死锁排查"></a>死锁排查</h2><p>创建死锁场景</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockA</span> <span class="operator">=</span> <span class="string">&quot;lockA&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockB</span> <span class="operator">=</span> <span class="string">&quot;lockB&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(lockA,lockB),<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(lockB,lockA),<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lockA;</span><br><span class="line">    <span class="keyword">private</span> String lockB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String lockA,String lockB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lockA = lockA;</span><br><span class="line">        <span class="built_in">this</span>.lockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; lock:&quot;</span> + lockA + <span class="string">&quot;=&gt;get&quot;</span> + lockB);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (lockB)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; lock:&quot;</span> + lockB + <span class="string">&quot;=&gt;get&quot;</span> + lockA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>死锁结果</p>
<p><img src="https://img-blog.csdnimg.cn/20201103210400562.png#pic_center" alt="在这里插入图片描述"><br><strong>对死锁进行排查</strong></p>
<blockquote>
<p>jps -l :查看死锁线程号</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201103210745177.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>jstack 线程ID:查看进程堆栈信息</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201103211039110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201103210912399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>由此可以排查出死锁现象出现的原因。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CAS解决ABA问题</title>
    <url>/post/4aa28b22.html</url>
    <content><![CDATA[<h2 id="CAS是什么"><a href="#CAS是什么" class="headerlink" title="CAS是什么"></a>CAS是什么</h2><p>CAS是java利用unsafe类通过对计算机底层的调用来进行数据的操作。底层实现为自旋锁。</p>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2020</span>);</span><br><span class="line"><span class="comment">//        public final boolean compareAndSet(int expect, int update)</span></span><br><span class="line"><span class="comment">//        如果期望的值达到了，那么就更新，否则，就不更新，CAS 是 CPU 的并发原型</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2021</span>, <span class="number">2020</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">6666</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<span id="more"></span>



<p>结果输出<br><img src="https://img-blog.csdnimg.cn/20201103205021230.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="利用CAS解决ABA问题"><a href="#利用CAS解决ABA问题" class="headerlink" title="利用CAS解决ABA问题"></a>利用CAS解决ABA问题</h2><p>CAS对数据修改时，可能会出现对数据修改两次，修改后值与之前相同的情况，因此会认定为未修改，此类问题被称为ABA问题，为了解决此类问题可以使用乐观锁，对每次记录新增一个记录，每次修改记录+1。</p>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();   <span class="comment">//获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;a1 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">2</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;a2 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">2</span>, <span class="number">1</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;a3 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();   <span class="comment">//获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;b1 =&gt;&quot;</span>+stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">6</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;b2 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<p><img src="https://img-blog.csdnimg.cn/20201103205425202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>详解五种方式实现单例模式</title>
    <url>/post/4c6f62d8.html</url>
    <content><![CDATA[<h2 id="volatile关键词"><a href="#volatile关键词" class="headerlink" title="volatile关键词"></a>volatile关键词</h2><p>volatile是可以保持可见性，不能保证原子性，由于内存屏障，可以保证避免指令重排的现象产生！</p>
<p><strong>可见性</strong><br>两个线程，同时对单一对象进行操作时，均为从对象中复制一份，然后对复制的对象进行操作，然后合并。<br>可见性指的是当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，保证修改的数据为最新的数据。</p>
<span id="more"></span>



<p><strong>避免指令重排</strong><br>指令重排指的是，一段代码写出来的顺序可能为1&#x3D;&gt;2&#x3D;&gt;3&#x3D;&gt;4&#x3D;&gt;5,但是经过编译器以后的顺序并不一定严格按照这种顺序，可能在不影响结果的情况下改变为1&#x3D;&gt;3&#x3D;&gt;2&#x3D;&gt;4&#x3D;&gt;5。这种情况在单线程的情况下不会有任何问题，但是在多线程的情况下则会出现问题。而volatile关键词可以增加一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式有几种实现方式。</p>
<p><strong>饿汉式</strong><br>顾名思义，就像一个饿汉，每当程序初始化都会创建一个单例，无论是否用到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hungry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可能会浪费空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data3 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hungry</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Hungry</span> <span class="variable">Hungry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hungry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Hungry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样可能会造成空间的浪费。</p>
<p><strong>懒汉式</strong><br>顾名思义，就像一个懒汉，只有当需要对象的时候才会创建单例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">           lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样在多线程的情况下必然会造成问题，多个线程同时进入，可能会创建很多对象，因此需要给这个模式加锁。</p>
<p><strong>DCL懒汉式(双重检测锁模式)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双重检测锁模式的懒汉式单例 DCL懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();    <span class="comment">//不是一个原子性操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时当第一次创建对象时会进行加锁，但是由于指令重排可能会造成以下情况，所以需要对对象加上volatile关键词防止指令重排</p>
<blockquote>
<p>&#x2F;**<br>                  * 1、分配内存空间<br>                  * 2、执行构造方法，初始化对象<br>                  * 3、把这个对象指向这个空间<br>                  *<br>                  * 此时程序执行顺序可能为<br>                  * 1-&gt;2-&gt;3<br>                  * 1-&gt;3-&gt;2<br>                  * 若为1-&gt;3-&gt;2则可能发生以下情境<br>                  *<br>                  * A线程执行完1-&gt;3时，B线程执行，此时对象有指向的内存空间，但是并未初始化<br>                  * 当B进行判断时 lazyMan &#x3D;&#x3D; null 为 false，则会直接返回未初始化的对象。<br>                  * 因此在声明对象时必须加上 volatile 关键词来防止指令重排<br>                  *&#x2F;</p>
</blockquote>
<p>DCL懒汉式虽然可以解决大部分问题，但是仍然可以通过反射来改变对象。<br>常见的解决方法是定义一串加密的变量，每次创建都进行判断。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">purpleStar</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(purpleStar == <span class="literal">false</span>)&#123;</span><br><span class="line">                purpleStar = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不要试图使用反射破坏异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot; OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双重检测锁模式的懒汉式单例 DCL懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();    <span class="comment">//不是一个原子性操作</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 1、分配内存空间</span></span><br><span class="line"><span class="comment">                     * 2、执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">                     * 3、把这个对象指向这个空间</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 此时程序执行顺序可能为</span></span><br><span class="line"><span class="comment">                     * 1-&gt;2-&gt;3</span></span><br><span class="line"><span class="comment">                     * 1-&gt;3-&gt;2</span></span><br><span class="line"><span class="comment">                     * 若为1-&gt;3-&gt;2则可能发生以下情境</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * A线程执行完1-&gt;3时，B线程执行，此时对象有指向的内存空间，但是并未初始化</span></span><br><span class="line"><span class="comment">                     * 当B进行判断时 lazyMan == null 为 false，则会直接返回未初始化的对象。</span></span><br><span class="line"><span class="comment">                     * 因此在声明对象时必须加上 volatile 关键词来防止指令重排</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是如果神秘代码被别人破解，仍然可以通过反射获取对象，进行操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多线程并发</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        LazyMan lazyMan = LazyMan.getInstance();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">purpleStar</span> <span class="operator">=</span> LazyMan.class.getDeclaredField(<span class="string">&quot;purpleStar&quot;</span>);</span><br><span class="line">        purpleStar.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">LazyMan</span> <span class="variable">lazyMan1</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        purpleStar.set(lazyMan1,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">LazyMan</span> <span class="variable">lazyMan2</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(lazyMan1);</span><br><span class="line">        System.out.println(lazyMan2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态内部类</strong><br>使用静态内部类也可以解决了线程安全问题，并实现了延时加载，但是仍然可以通过反射进行强制修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Holder</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Holder <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//不会在外部类初始化时就直接加载，只有当调用了getInstance方法时才会静态加载，线程安全，final保证了在内存中只有一份</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Holder</span> <span class="variable">HOLDER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Holder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>枚举单例</strong><br>以上四种皆不是线程绝对安全的，都可以通过反射进行修改。<br>可以通过枚举得到安全的单例模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//enum 本身也是一个Class类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingle</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EnumSingle <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">EnumSingle</span> <span class="variable">instance1</span> <span class="operator">=</span> EnumSingle.INSTANCE;</span><br><span class="line">        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">EnumSingle</span> <span class="variable">instance2</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Cannot reflectively create enum objects</span></span><br><span class="line">        System.out.println(instance1);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点进反射的newInstance方法，发现当类型为枚举时，会报错，无法使用反射破坏枚举，因此使用枚举创建单例是线程安全的，无法通过反射来破坏。<br><img src="https://img-blog.csdnimg.cn/20201103203258681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>java并发编程之异步回调</title>
    <url>/post/c348ce1b.html</url>
    <content><![CDATA[<h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>在java并发编程中，要获取结果需要通过回调函数来获取，常用的有Future接口，此接口有一个CompletableFuture实现类用于异步回调。<br>一般异步任务分为有返回值的和无返回值的方法，通过get获取回调结果。</p>
<span id="more"></span>



<p><strong>无返回值</strong><br>&#x3D;&#x3D;使用runAsync方法&#x3D;&#x3D;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">//发起一个请求</span></span><br><span class="line">    CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">    completableFuture.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>有返回值</strong><br>&#x3D;&#x3D;使用supplyAsync方法&#x3D;&#x3D;</p>
<blockquote>
<p>正常返回</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;执行了&quot;</span>);</span><br><span class="line"><span class="comment">//            int i =100/0;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(completableFuture.whenComplete((t, u) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success=&gt;&quot;</span> + t);</span><br><span class="line">            System.out.println(<span class="string">&quot;error=&gt;&quot;</span> + u);</span><br><span class="line">        &#125;).exceptionally((e) -&gt; &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">        &#125;).get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20201029143453783.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>异常返回</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;执行了&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">100</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(completableFuture.whenComplete((t, u) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;success=&gt;&quot;</span> + t);</span><br><span class="line">        System.out.println(<span class="string">&quot;error=&gt;&quot;</span> + u);</span><br><span class="line">    &#125;).exceptionally((e) -&gt; &#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">    &#125;).get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20201029143540414.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>由此可知<br>whenComplete可以在正常返回后通过函数式接口传入两个参数，第一个是成功结果，第二个是失败结果，无返回值。<br>exceptionally可以在捕获到异常后传入异常信息，返回结果。<br>最后通过get获得结果可以得到正常返回的结果或者异常返回的结果。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>新时代程序猿必会技能(lambda表达式、链式编程、函数式接口、Stream流式计算)</title>
    <url>/post/a1a2cb78.html</url>
    <content><![CDATA[<h2 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h2><p>函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</p>
<p>函数式接口可以被隐式转换为 lambda 表达式。</p>
<p>根据接口类型可分为函数型接口、断定型接口、消费型接口、供给型接口。</p>
<span id="more"></span>



<p><strong>函数型接口</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20201029103532987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Function&lt;String, String&gt; function = new Function&lt;String, String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public String apply(String str) &#123;</span></span><br><span class="line"><span class="comment">//                return str;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        Function&lt;String, String&gt; function = (str)-&gt;&#123;<span class="keyword">return</span> str;&#125;;</span><br><span class="line">        System.out.println(function.apply(<span class="string">&quot;啦啦啦啦啦&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>断定型接口</strong><br><img src="https://img-blog.csdnimg.cn/20201029103632319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public boolean test(String str) &#123;</span></span><br><span class="line"><span class="comment">//                return str.isEmpty();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        Predicate&lt;String&gt; predicate = (str)-&gt;&#123;<span class="keyword">return</span> str.isEmpty();&#125;;</span><br><span class="line">        System.out.println(predicate.test(<span class="string">&quot;啦啦啦啦啦&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>消费型接口</strong><br><img src="https://img-blog.csdnimg.cn/20201029103738703.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void accept(String str) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(str);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line">        Consumer&lt;String&gt; consumer = (str) -&gt; &#123;System.out.println(str);&#125;;</span><br><span class="line">        consumer.accept(<span class="string">&quot;啦啦啦啦啦&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>供给型接口</strong><br><img src="https://img-blog.csdnimg.cn/20201029103841481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Supplier&lt;String&gt; supplier = new Supplier&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public String get() &#123;</span></span><br><span class="line"><span class="comment">//                return &quot;啦啦啦啦啦&quot;;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        Supplier&lt;String&gt; supplier = () -&gt; &#123;<span class="keyword">return</span> <span class="string">&quot;啦啦啦啦啦&quot;</span>;&#125;;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h2><p>流式计算中大量使用的函数式接口，来看下面这个例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目要求：只用一行代码实现</span></span><br><span class="line"><span class="comment"> * 现在有五个用户！筛选：</span></span><br><span class="line"><span class="comment"> * 1、ID必须是偶数</span></span><br><span class="line"><span class="comment"> * 2、年龄必须大于23岁</span></span><br><span class="line"><span class="comment"> * 3、用户名转化为大写字母</span></span><br><span class="line"><span class="comment"> * 4、用户名字母倒着排序</span></span><br><span class="line"><span class="comment"> * 5、只输出一个用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;b&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;c&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;d&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5</span>,<span class="string">&quot;e&quot;</span>,<span class="number">25</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">6</span>,<span class="string">&quot;f&quot;</span>,<span class="number">26</span>);</span><br><span class="line">        <span class="comment">//集合用来存储</span></span><br><span class="line">        List&lt;User&gt; list = Arrays.asList(u1, u2, u3, u4, u5,u6);</span><br><span class="line">        <span class="comment">//使用stream计算</span></span><br><span class="line">        <span class="comment">//lambda表达式、链式编程、函数式接口、Stream流式计算</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(u-&gt;&#123;<span class="keyword">return</span> u.getId()%<span class="number">2</span> == <span class="number">0</span>;&#125;)</span><br><span class="line">                .filter(u-&gt;&#123;<span class="keyword">return</span> u.getAge() &gt; <span class="number">23</span>;&#125;)</span><br><span class="line">                .map(u-&gt;&#123;<span class="keyword">return</span> u.getName().toUpperCase();&#125;)</span><br><span class="line">                .sorted((uu1,uu2)-&gt;&#123;<span class="keyword">return</span> uu2.compareTo(uu1);&#125;)</span><br><span class="line">                .limit(<span class="number">1</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举个例子sorted方法里传入的参数是Comparator接口<br><img src="https://img-blog.csdnimg.cn/20201029104437557.png#pic_center" alt="在这里插入图片描述"><br>那么点进Comparator接口，发现有以下三种方法<br><img src="https://img-blog.csdnimg.cn/20201029104548453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>由于函数式接口才能使用lambda表达式，根据以下解释可以得出，Comparator确实为函数式接口，因此可以使用lamda表达式。<br><img src="https://img-blog.csdnimg.cn/20201029104343909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>最终可以将流式计算和函数式接口结合起来进行一些简化。</p>
<h2 id="Forkjoin"><a href="#Forkjoin" class="headerlink" title="Forkjoin"></a>Forkjoin</h2><p>Forkjoin类似于一个递归算法，可以将一系列大问题拆分成小问题，然后逐个解决。<br>其中有个工作窃取的概念，即一个线程处理完成任务以后会从另一个线程中获取其他线程的任务进行处理。<br>由于线程是一种双端队列，可以从底部进行窃取。<br><img src="https://img-blog.csdnimg.cn/20201029105257941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求和计算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkJoinDemo</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Long&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Long start;         </span><br><span class="line">    <span class="keyword">private</span> Long end;           </span><br><span class="line"></span><br><span class="line">    <span class="comment">//临界值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ForkJoinDemo</span><span class="params">(Long start, Long end)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Long <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((end-start)&lt;temp)&#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Long</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">//分支合并计算 forkjoin</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end)/<span class="number">2</span>;  <span class="comment">//中间值</span></span><br><span class="line">            <span class="type">ForkJoinDemo</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(start, middle);</span><br><span class="line">            task1.fork();   <span class="comment">//拆分任务，把任务压入线程队列</span></span><br><span class="line">            <span class="type">ForkJoinDemo</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(middle +<span class="number">1</span>, end);</span><br><span class="line">            task2.fork();   <span class="comment">//拆分任务，把任务压入线程队列</span></span><br><span class="line">            <span class="keyword">return</span> task1.join() + task2.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样进行的快的线程会帮助慢的线程进行一些工作，可以适当的提高系统性能。</p>
<h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>那么对比普通的计算、Forkjoin、流式计算，三种方式的性能如何呢。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        test1();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line">        test2();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//普通计算</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;	</span><br><span class="line">        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0L</span>; i &lt;= <span class="number">10_0000_0000L</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span>+ sum +<span class="string">&quot;\n时间:&quot;</span>+(end-start));</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//Forkjoin</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;  </span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(<span class="number">0L</span>, <span class="number">10_0000_0000L</span>);</span><br><span class="line">        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> submit.get();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span>+ sum +<span class="string">&quot;\n时间:&quot;</span>+(end-start));</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//流式计算</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> LongStream.rangeClosed(<span class="number">0L</span>, <span class="number">10_0000_0000L</span>).parallel().reduce(<span class="number">0</span>, Long::sum);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span>+ sum +<span class="string">&quot;\n时间:&quot;</span>+(end-start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：<br><img src="https://img-blog.csdnimg.cn/2020102910584889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>结论：流式计算效率远大于Forkjoin，而Forkjoin稍大于普通的运算。<br>因此在计算的时候使用流来操作可以极大地提高效率。</p>
</blockquote>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>池化技术及线程池的使用</title>
    <url>/post/bc59b0ef.html</url>
    <content><![CDATA[<h2 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h2><p><strong>线程池三大方法</strong></p>
<blockquote>
<p>线程池主要是使用了三种方法分别表示创建单个线程、创建固定线程池、创建可伸缩的线程池。<br>ExecutorService threadPool &#x3D; Executors.newSingleThreadExecutor();               &#x2F;&#x2F;单个线程<br>ExecutorService threadPool &#x3D; Executors.newFixedThreadPool(5);         &#x2F;&#x2F;创建一个固定线程池的大小<br>ExecutorService threadPool &#x3D; Executors.newCachedThreadPool();                   &#x2F;&#x2F;可伸缩的，遇强则强，遇弱则弱</p>
</blockquote>
<span id="more"></span>



<p>本质都是创建ThreadPoolExecutor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,			<span class="comment">//约为21亿</span></span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线程池七大参数</strong></p>
<p>根据阿里巴巴java开发手册<br><img src="https://img-blog.csdnimg.cn/20201027152957659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>因此找到ThreadPoolExecutor源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,					//核心线程池大小</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,				//最大核心线程池大小</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,				//超时了没有人调用就会释放</span></span><br><span class="line"><span class="params">                          TimeUnit unit,					//超时单位</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,		//线程工厂，创建线程的</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler	//拒绝策略)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">            <span class="literal">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>手动创建线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                Runtime.getRuntime().availableProcessors(),</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()    <span class="comment">//如果队列满了，还有线程进来，就不处理，抛出异常</span></span><br><span class="line"><span class="comment">//                new ThreadPoolExecutor.CallerRunsPolicy()    //哪来的去哪里，一般由main线程执行</span></span><br><span class="line"><span class="comment">//                new ThreadPoolExecutor.DiscardPolicy()    //队列满了不抛出异常，丢掉任务</span></span><br><span class="line"><span class="comment">//                new ThreadPoolExecutor.DiscardOldestPolicy()    //队列满了尝试跟最早的竞争，不会抛出异常</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">                threadPool.execute(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>四种拒绝策略</strong><br><img src="https://img-blog.csdnimg.cn/202010271556581.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>new ThreadPoolExecutor.AbortPolicy()   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;如果队列满了，还有线程进来，就不处理，抛出异常<br>new ThreadPoolExecutor.CallerRunsPolicy()   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;哪来的去哪里，一般由main线程执行<br>new ThreadPoolExecutor.DiscardPolicy()    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;队列满了不抛出异常，丢掉任务<br>new ThreadPoolExecutor.DiscardOldestPolicy()    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;队列满了尝试跟最早的竞争，不会抛出异常</p>
</blockquote>
<h2 id="CPU密集型和IO密集型"><a href="#CPU密集型和IO密集型" class="headerlink" title="CPU密集型和IO密集型"></a>CPU密集型和IO密集型</h2><p>池的最大大小如何设置</p>
<blockquote>
<p><strong>CPU密集型</strong>：几核，就是几，可以保证CPU效率最高<br>Runtime.getRuntime().availableProcessors()     可以获取CPU核数<br><strong>IO密集型</strong>：判断你的程序中十分耗io的线程，最大线程大于这个值</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>阻塞队列与同步队列的使用</title>
    <url>/post/50a3d078.html</url>
    <content><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>在Collection下的子类中存在队列，其中常见的有阻塞队列和同步队列。如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20201027102305647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<span id="more"></span>



<h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>阻塞队列存在四组API，分别对应着四种队列的阻塞情况。</p>
<table>
<thead>
<tr>
<th>阻塞队列</th>
<th>抛出异常</th>
<th>有返回值</th>
<th>等待阻塞</th>
<th>等待超时</th>
</tr>
</thead>
<tbody><tr>
<td>入队方法</td>
<td>add()</td>
<td>offer()</td>
<td>put()</td>
<td>offer(值,超时时间,超时单位)</td>
</tr>
<tr>
<td>出队方法</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(超时时间,超时单位)</td>
</tr>
<tr>
<td>获取队顶方法</td>
<td>element()</td>
<td>peek()</td>
<td></td>
<td></td>
</tr>
<tr>
<td>队满或队空输出结果</td>
<td>抛出异常</td>
<td>返回false或null</td>
<td>一直阻塞</td>
<td>等待超时</td>
</tr>
</tbody></table>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ArrayBlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line">        System.out.println(blockingQueue.add(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.add(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.add(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.add(&quot;d&quot;));</span></span><br><span class="line">        System.out.println(blockingQueue.element());</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有返回值，不抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ArrayBlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;d&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.peek());</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待，阻塞（一直阻塞）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ArrayBlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line">        blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        blockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        blockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">//        blockingQueue.put(&quot;d&quot;);     //队列没有位置了，一直阻塞</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">        System.out.println(blockingQueue.take());</span><br><span class="line">        System.out.println(blockingQueue.take());</span><br><span class="line">        System.out.println(blockingQueue.take());</span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.take());   //没有这个元素，一直阻塞</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待，阻塞（等待超时）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ArrayBlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;d&quot;</span>,<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">        System.out.println(blockingQueue.peek());</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">        System.out.println(blockingQueue.poll(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h3><p>在同步队列中只有出队以后才允许入队，否则一直处于阻塞状态。</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronousQueueDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;();     <span class="comment">//同步队列</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;put 1&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;put 2&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;put 3&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;take 1&quot;</span>);</span><br><span class="line">                blockingQueue.take();</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;take 2&quot;</span>);</span><br><span class="line">                blockingQueue.take();</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;take 3&quot;</span>);</span><br><span class="line">                blockingQueue.take();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20201027112317719.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程中集合不安全问题及解决方案</title>
    <url>/post/65e50b2d.html</url>
    <content><![CDATA[<blockquote>
<p>在java中，存在很多集合，比如ArrayList、LinkedList、HashSet、HashMap等。如何保证它们在多线程下的集合安全性呢？</p>
</blockquote>
<h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//       1. List&lt;String&gt; list = new Vector&lt;&gt;();</span></span><br><span class="line"><span class="comment">//       2. List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class="line"><span class="comment">//       3. List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<span id="more"></span>



<p>结果</p>
<blockquote>
<p>报错：java.util.ConcurrentModificationException</p>
</blockquote>
<p>解决方案</p>
<blockquote>
<p>使用List<String> list &#x3D; new Vector&lt;&gt;();<br>实际是使用了synchronized实现加锁使线程安全。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020102111205869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>使用List<String> list &#x3D; Collections.synchronizedList(new ArrayList&lt;&gt;());<br>实际也是新建一个synchronized锁的List。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020102111235295.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>使用List<String> list &#x3D; new CopyOnWriteArrayList&lt;&gt;();<br>实际是使用ReentrantLock锁，先对需要写入的数据进行复制，写完之后再合并，实现了读写分离，读的是同一个数据，而写的是不同的数据，避免写入混乱。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201021112643360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Set&lt;String&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        1. Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class="line"><span class="comment">//        2. Set&lt;String&gt; set = new CopyOnWriteArraySet();</span></span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<blockquote>
<p>报错：java.util.ConcurrentModificationException</p>
</blockquote>
<p>解决方案</p>
<blockquote>
<p>使用Set<String> set &#x3D; Collections.synchronizedSet(new HashSet&lt;&gt;());<br>新建一个synchronized锁的Set。</p>
</blockquote>
<blockquote>
<p>使用Set<String> set &#x3D; new CopyOnWriteArraySet();<br>本质是使用ReentrantLock锁，先对需要写入的数据进行复制，写完之后再合并，实现了读写分离，读的是同一个数据，而写的是不同的数据，避免写入混乱。</p>
</blockquote>
<p><strong>HashSet的底层就是HashMap</strong><br><img src="https://img-blog.csdnimg.cn/20201021141327604.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201021141348494.png#pic_center" alt="在这里插入图片描述"><br>add方法本质就是map，因为map的key不能重复，因此set里的键也不重复。</p>
<h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//默认等价于什么？ Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(16,0.75);</span></span><br><span class="line">        <span class="comment">//初始化容量 16 / 加载因子 0.75</span></span><br><span class="line"><span class="comment">//        Map&lt;String, String&gt; map = new HashMap&lt;String, Object&gt;();</span></span><br><span class="line"><span class="comment">//        1. Map&lt;String, String&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;());</span></span><br><span class="line"><span class="comment">//        2. Map&lt;String, String&gt; map = new ConcurrentHashMap&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<blockquote>
<p>报错：java.util.ConcurrentModificationException</p>
</blockquote>
<p>解决方案</p>
<blockquote>
<p>使用Map&lt;String, String&gt; map &#x3D; Collections.synchronizedMap(new HashMap&lt;&gt;());<br>新建一个synchronized锁的Map。</p>
</blockquote>
<blockquote>
<p>使用Map&lt;String, String&gt; map &#x3D; new ConcurrentHashMap&lt;&gt;();</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>详解JVM体系结构(多图)</title>
    <url>/post/dba96642.html</url>
    <content><![CDATA[<h1 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h1><blockquote>
<p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。<br>引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p>
</blockquote>
<p>可能看过上面一段简介以后还是不知道JVM是什么东西，只知道JVM是一套可供java程序运行的环境。</p>
<span id="more"></span>



<p>那么jvm在程序中到底扮演者什么地位呢？</p>
<p><img src="https://img-blog.csdnimg.cn/20201013152547952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>JVM是介于java程序和操作系统之间的一个区域，由于是由C++编写，因此java又可以称为C++ - -，一个java文件编写完成后会被编译成class文件，然后经过类加载器进入运行时数据区。<br>如图所示，为JVM体系结构简图，由于main方法在运行时会被压入栈底，每运行完一个方法会被弹出，因此垃圾回收不可能存在在栈里，而应该存在于堆中，由于方法区为特殊的堆，因此大部分性能调优都是对于堆的性能调优。</p>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器的主要作用是加载类对象，将class文件加载为class类，如图所示：<br><img src="https://img-blog.csdnimg.cn/20201014105724833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>通过new的方式可以将class对象实例化为不同的实例化对象，实例化对象可以通过getClass的方式反射获得类对象，因此可以得出类是模板，而对象是具体的，所有的对象都是由同一个类实例化的。类的hashcode恒定，而每个对象各不相同。</p>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类是模板，对象是具体的</span></span><br><span class="line"></span><br><span class="line">        Animal 喜羊羊 = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        Animal 美羊羊 = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        Animal 懒羊羊 = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(喜羊羊.hashCode());</span><br><span class="line">        System.out.println(美羊羊.hashCode());</span><br><span class="line">        System.out.println(懒羊羊.hashCode());</span><br><span class="line"></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt; 喜羊羊Class = 喜羊羊.getClass();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt; 美羊羊Class = 喜羊羊.getClass();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt; 懒羊羊Class = 喜羊羊.getClass();</span><br><span class="line"></span><br><span class="line">        System.out.println(喜羊羊Class.hashCode());</span><br><span class="line">        System.out.println(美羊羊Class.hashCode());</span><br><span class="line">        System.out.println(懒羊羊Class.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果<br><img src="https://img-blog.csdnimg.cn/20201014110330715.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>由于类加载器有很多，在程序执行的时候到底执行的是哪个加载器呢？<br>首先我们来看下加载器的类型</p>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类是模板，对象是具体的</span></span><br><span class="line"></span><br><span class="line">        Animal 喜羊羊 = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt; aClass = 喜羊羊.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> aClass.getClassLoader();</span><br><span class="line">        System.out.println(classLoader);    <span class="comment">//应用程序加载器（AppClassLoader）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> classLoader.getParent();</span><br><span class="line">        System.out.println(parent);         <span class="comment">//扩展类加载器（ExtClassLoader）  \Java\jre\lib\ext\</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">oldParent</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">        System.out.println(oldParent);      <span class="comment">//null  不存在或者java获取不到    \Java\jre\lib\rt.jar</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果<br><img src="https://img-blog.csdnimg.cn/20201014112502472.png#pic_center" alt="在这里插入图片描述"><br>这里可以看到加载器有</p>
<ul>
<li>应用程序加载器（AppClassLoader）</li>
<li>扩展类加载器（ExtClassLoader）  &#x3D;&gt;存在于\Java\jre\lib\ext\</li>
<li>根加载器（BootstrapClassLoader） &#x3D;&gt;存在于\Java\jre\lib\rt.jar</li>
<li>虚拟机自带加载器</li>
</ul>
<blockquote>
<p>双亲委派机制指的是类加载器（AppClassLoader）收到类加载的请求，会将这个请求向上委托给父类加载器去完成，一直向上委托。<br>应用程序加载器——-扩展类加载器——-根加载器——-启动类加载器<br>启动类加载器会检查是否可以加载这个类，如果可以加载就结束，使用当前加载器，否则抛出异常，通知子加载器进行加载，我们平时自定义的方法都是运行在应用程序加载器（AppClassLoader）上面的。<br>启动类加载器——-根加载器——-扩展类加载器——-应用程序加载器<br>当所有加载器都无法加载会通过native调用操作系统层的本地方法。</p>
</blockquote>
<h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p>Java安全模型的核心就是Java沙箱（sandbox），什么是沙箱？沙箱是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱主要限制系统资源访问，那系统资源包括什么？——CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。</p>
<p>java历史上的一些沙箱模型如下：</p>
<ul>
<li>jdk1.0</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201014144350274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>jdk 1.1</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020101414444268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>jdk 1.2</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201014144520221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>jak1.6</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201014144553126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Native关键词"><a href="#Native关键词" class="headerlink" title="Native关键词"></a>Native关键词</h2><p>凡是使用了Native关键字的都是java代码实现不了的范围，会去底层调用C语言的库。主要过程为通过本地方法栈，调用本地方法本地接口，JNI（Java Native Interface）。<br>JNI的作用主要是为了融合不同的编程语言为java所用，它在内存区域中专门开辟了一块标记区域Native Method Stack用来登记Native方法，在最终执行的时候加载本地方法库中的方法。</p>
<p>常用的有线程类中的start0()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h2 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h2><p>每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址,也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记。</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区在JVM中也是一个非常重要的区域，它与堆一样，是被线程共享的区域。在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等，但是实例对象存在堆内存中，与方法区无关。</p>
<blockquote>
<p>static、final、Class、常量池等公共属性都存在方法区中。</p>
</blockquote>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种数据结构，常用来和队列相比较。<br>栈是先进后出，队列是先进先出。<br>栈内存主管程序的运行，生命周期和线程同步。线程结束，栈内存也就释放了，不存在垃圾回收的问题。<br>栈里面存放的有8中基本类型、对象的引用、实例的方法。</p>
<p>栈的示意图如下，每执行完一个方法就会弹出一次，知道所有都弹出，线程结束。<br><img src="https://img-blog.csdnimg.cn/20201015143003694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>有时会出现栈溢出的情况，是因为栈空间被占满，抽象示意图如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20201125143910368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>对应的代码如下：</p>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="comment">//栈溢出测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>().a();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果输出：StackOverflowError(栈溢出)</p>
<p><img src="https://img-blog.csdnimg.cn/20201015143637807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>对象实例化的过程示意图如下，通对对栈里面的引用对应堆中的对象实例化实体。<br><img src="https://img-blog.csdnimg.cn/20201125143837363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>一个JVM中只有一个堆内存，堆内存的大小是可以调节的。<br>类、方法、常量、变量一般会被存放在堆中，堆中保存了所有引用类型的真实对象。</p>
<blockquote>
<p>堆内存中分为三个区域：</p>
<ul>
<li>新生区</li>
<li>老年区</li>
<li>永久区</li>
</ul>
</blockquote>
<p>如果垃圾回收没有在新生区中被回收就会进入幸存区，称为轻GC，如果多次没被回收则会进入老年区，当老年区接近满的时候则会进行深度清理，称为重GC，如图所示：<br><img src="https://img-blog.csdnimg.cn/20201015161907178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>因此GC回收主要发生在新生区和老年区，当内存满值的时候，则会报错（OOM），即堆内存不够。<br>在JDK8以后<strong>永久存储区</strong>改名为<strong>元空间</strong>。</p>
<p><strong>新生区</strong></p>
<blockquote>
<p>新生区是一个类生成、成长、消亡的地方。<br>新生区主要分为伊甸园区、幸存1区，幸存2区。<br>所有对象都是在伊甸园区new出来的。</p>
</blockquote>
<p><strong>老年区</strong></p>
<blockquote>
<p>当经过新生区还未被杀死的对象会进入老年区。<br>研究表明，99%的对象都是临时对象，在新生区被kill。</p>
</blockquote>
<p><strong>永久区</strong></p>
<blockquote>
<p>这个区域是常驻内存的，用来存放JDK自身携带的Class对象，以及interface元数据，存放的是java运行时的一些环境或类信息。这个区域不存在垃圾回收，关闭虚拟机就会释放这个区域的内存。<br>一个类家在大量第三方jar包、Tomcat部署太多应用，大量动态生成反射类不断地被加载知道内存满了就会出现OOM。</p>
<ul>
<li>jdk6之前：永久代，常量池存在于方法区中。</li>
<li>jdk7：永久代，慢慢的退化了，常量池在堆中。（去永久代）</li>
<li>jdk8：无永久代，慢慢的退化了，常量池在元空间中。</li>
</ul>
</blockquote>
<p>在jdk1.8下堆中的结构如图所示：<br><img src="https://img-blog.csdnimg.cn/20201015195620146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>测试虚拟机试图使用的最大内存和jvm初始化总内存。</p>
<blockquote>
<p>默认情况下分配的总内存是电脑内存的4&#x2F;1，初始化内存为默认为总内存的64&#x2F;1</p>
</blockquote>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//返回虚拟机试图使用的最大内存</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> Runtime.getRuntime().maxMemory();    <span class="comment">//字节 1024*1024</span></span><br><span class="line">        <span class="comment">//返回jvm的初始化总内存</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认情况下分配的总内存是电脑内存的4/1，初始化内存为默认为总内存的64/1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大内存为：&quot;</span> + max/(<span class="type">double</span>)<span class="number">1024</span>/<span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化总内存为：&quot;</span> + total/(<span class="type">double</span>)<span class="number">1024</span>/<span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果输出<br><img src="https://img-blog.csdnimg.cn/20201015172344372.png#pic_center" alt="在这里插入图片描述"><br>这里可以手动设置使用内存大小，如图所示</p>
<blockquote>
<p>输入 -Xms1024m -Xmx1024m -XX:+PrintGCDetails</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201015172503154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//返回虚拟机试图使用的最大内存</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> Runtime.getRuntime().maxMemory();    <span class="comment">//字节 1024*1024</span></span><br><span class="line">        <span class="comment">//返回jvm的初始化总内存</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认情况下分配的总内存是电脑内存的4/1，初始化内存为默认为总内存的64/1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大内存为：&quot;</span> + max/(<span class="type">double</span>)<span class="number">1024</span>/<span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化总内存为：&quot;</span> + total/(<span class="type">double</span>)<span class="number">1024</span>/<span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果输出<br><img src="https://img-blog.csdnimg.cn/2020101517261136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>堆内存调优</strong></p>
<blockquote>
<p>当出现OOM时，可采取以下方法调优</p>
<ul>
<li>尝试扩大堆内存    -Xms1024m -Xmx1024m -XX:+PrintGCDetails  查看结果。</li>
<li>若仍旧出现问题，分析内存，看一下哪里出现问题。</li>
</ul>
</blockquote>
<p>计算可得，年轻代和老年代内存的和等于内存值，因此可以得出，元空间在逻辑上存在，在物理上不存在。</p>
<p><strong>模拟堆内存溢出（OOM）</strong></p>
<p>我们首先设置内存，将内存调小为1M。</p>
<blockquote>
<p>修改内存  -Xms1m -Xmx1m -XX:+PrintGCDetails </p>
</blockquote>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            str += <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">999999999</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先轻GC，年轻代内存占满，然后重GC，老年代内存占满，最后内存溢出，OOM报错。</p>
<p>运行结果</p>
<p><img src="https://img-blog.csdnimg.cn/20201015175220773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201015175327120.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="使用Jprofiler工具分析OOM"><a href="#使用Jprofiler工具分析OOM" class="headerlink" title="使用Jprofiler工具分析OOM"></a>使用Jprofiler工具分析OOM</h2><p>常用的内存快照分析工具可以快速定位内存泄漏问题，如MAT（eclipse集成），Jprofiler等。</p>
<blockquote>
<p>MAT、Jprofiler的作用：</p>
<ul>
<li>分析Dump内存文件，快速定位内存泄漏。</li>
<li>获得堆中的数据。</li>
<li>获得大的对象。</li>
</ul>
</blockquote>
<p>安装步骤如下：</p>
<ul>
<li>勾选如下设置</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201016111357406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>搜索插件安装</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020101614013321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li><p>下载Jprofiler客户端<br><a href="https://www.ej-technologies.com/download/jprofiler/files">Jprofiler客户端下载地址</a></p>
</li>
<li><p>安装Jprofiler客户端</p>
</li>
<li><p>配置路径</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201016140412559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>测试：模拟OOM报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OOMTest</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;OOMTest&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">OOMTest</span>());</span><br><span class="line">                count = count+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;count:&quot;</span>+count);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置生成Dump文件（-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError）<br><img src="https://img-blog.csdnimg.cn/20201016141908260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在src同级目录下会生成Dump文件<br><img src="https://img-blog.csdnimg.cn/20201016142036196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查看文件，定位报错信息位置<br><img src="https://img-blog.csdnimg.cn/20201016145023214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201016145039251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201016145059201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>Dump参数含义</strong></p>
<blockquote>
<p>-Xms ：设置初始化内存分配大小<br>-Xmx：设置最大分配内存<br>-XX:+PrintGCDetails：打印GC垃圾回收信息<br>-XX:+HeapDumpOnOutOfMemoryError：OOM Dump文件生成</p>
</blockquote>
<h2 id="GC-垃圾回收机制"><a href="#GC-垃圾回收机制" class="headerlink" title="GC 垃圾回收机制"></a>GC 垃圾回收机制</h2><p>JVM堆里面可能存在GC的地区有以下几种</p>
<ul>
<li>新生代</li>
<li>幸存区（from、to，对应前文的幸存0区和幸存1区，交替转换）</li>
<li>老年区</li>
</ul>
<p>GC：分为轻GC（普通GC）和重GC（全局GC）</p>
<blockquote>
<p>程序在运行过程中，会产生大量的内存垃圾（一些没有引用指向的内存对象都属于内存垃圾，因为这些对象已经无法访问，程序用不了它们了，对程序而言它们已经死亡），为了确保程序运行时的性能，java虚拟机在程序运行的过程中不断地进行自动的垃圾回收（GC）。</p>
</blockquote>
<h2 id="GC的常用算法"><a href="#GC的常用算法" class="headerlink" title="GC的常用算法"></a>GC的常用算法</h2><p>关于 JVM 的 GC 算法主要有下面四种：</p>
<p>1、引用计数算法（Reference counting）<br>每个对象在创建的时候，就给这个对象绑定一个计数器。每当有一个引用指向该对象时，计数器加一；每当有一个指向它的引用被删除时，计数器减一。这样，当没有引用指向该对象时，该对象死亡，计数器为0，这时就应该对这个对象进行垃圾回收操作。</p>
<p>缺点：会产生内存碎片，每个空间一个计数器浪费资源。</p>
<p>2、复制算法<br>该算法将内存平均分成两部分，然后每次只使用其中的一部分，当这部分内存满的时候，将内存中所有存活的对象复制到另一个内存中，然后将之前的内存清空，只使用这部分内存，循环下去。</p>
<p>优点：没有内存碎片。<br>缺点：浪费了内存空间，多了一半空间永远是空的（to区）。<br>复制算法最佳使用场景为对象存活率较低（新生区）</p>
<p>3、标记–清除算法（Mark-Sweep）<br>为每个对象存储一个标记位，记录对象的状态（活着或是死亡）。<br>分为两个阶段，一个是标记阶段，这个阶段内，为每个对象更新标记位，检查对象是否死亡；第二个阶段是清除阶段，该阶段对死亡的对象进行清除，执行 GC 操作。</p>
<p>优点：不需要额外的空间。<br>缺点：两次扫描严重浪费时间，会产生内存碎片。</p>
<p>4、标记–整理算法<br>标记-整理法是标记-清除法的一个改进版。同样，在标记阶段，该算法也将所有对象标记为存活和死亡两种状态；不同的是，在第二个阶段，该算法并没有直接对死亡的对象进行清理，而是将所有存活的对象整理一下，放到另一处空间，然后把剩下的所有对象全部清除。这样就达到了标记-整理的目的。</p>
<p>优点：解决了内存碎片问题。<br>缺点：整理需要再次消耗一次资源，浪费时间。</p>
<p><strong>GC的常用算法总结</strong></p>
<blockquote>
<p>内存效率（时间复杂度）：复制算法&gt;标记清除算法&gt;标记整理算法<br>内存整齐度：复制算法&#x3D;标记整理算法&gt;标记清除算法<br>内存利用率：标记整理算法&#x3D;标记清除算法&gt;复制算法</p>
</blockquote>
<p>没有最好的算法，只有最合适的算法，因此GC又被称为分代收集算法。</p>
<p>年轻代：存活率低，一般使用复制算法。<br>老年代：区域大，存活率高，一般使用标记清除（内存碎片较少时）+标记压缩（内存碎片较多时）混合使用。</p>
<h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><p>JMM（Java Memory Model的缩写）是一种java内存模型。它类似于缓存一致性协议，用于定义数据读写的规则。<br>JMM定义了线程工作内存和主内存的一种抽象关系，线程中的共享对象存在于主内存中，每个线程都有一块私有的本地内存。<br>解决共享对象可见性问题，即线程中修改数据立马同步到主线程中，其它线程复制时可以得到最新的数据：volilate和synchronize关键词。<br>JMM数据同步模型如下图。<br><img src="https://img-blog.csdnimg.cn/20201016161234764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="volatile关键词"><a href="#volatile关键词" class="headerlink" title="volatile关键词"></a>volatile关键词</h2><p>volatile是可以保持可见性，不能保证原子性，由于内存屏障，可以保证避免指令重排的现象产生！</p>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>两个线程，同时对单一对象进行操作时，均为从对象中复制一份，然后对复制的对象进行操作，然后合并。<br>可见性指的是当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，保证修改的数据为最新的数据。</p>
<blockquote>
<p>可见性测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisibilityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201125112333343.png#pic_center" alt="在这里插入图片描述"><br>此时线程陷入死循环，无法感知到main线程已经对数据进行了修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisibilityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201125112534705.png#pic_center" alt="在这里插入图片描述"><br>此时可以感知到main线程的变化，退出循环。</p>
<h3 id="非原子性"><a href="#非原子性" class="headerlink" title="非原子性"></a>非原子性</h3><blockquote>
<p>原子性测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020112510260580.png#pic_center" alt="在这里插入图片描述"><br> Num++不是原子操作，因为其可以分为：读取Num的值，将Num的值+1，写入最新的Num的值。<br> 对于Num++;操作，线程1和线程2都执行一次，最后输出Num的值可能是：1或者2。</p>
<p> 输出结果1的解释：当线程1执行Num++;语句时，先是读入Num的值为0，倘若此时让出CPU执行权，线程获得执行，线程2会重新从主内存中，读入Num的值还是0，然后线程2执行+1操作，最后把Num&#x3D;1刷新到主内存中； 线程2执行完后，线程1已经开始执行，但之前已经读取的Num的值0，所以它还是在0的基础上执行+1操作，也就是还是等于1，并刷新到主内存中。所以最终的结果是1。</p>
<blockquote>
<p>解决方案：使用CAS，通过自旋锁解决原子性问题</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicityDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line"><span class="comment">//                num++;</span></span><br><span class="line">                atomicInteger.getAndIncrement();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line"><span class="comment">//                num++;</span></span><br><span class="line">                atomicInteger.getAndIncrement();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2完成&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        System.out.println(num);</span></span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201125110156343.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>CAS应用场景</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2020</span>);</span><br><span class="line"><span class="comment">//        int andIncrement = atomicInteger.getAndIncrement();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        public final boolean compareAndSet(int expect, int update)</span></span><br><span class="line"><span class="comment">//        如果期望的值达到了，那么就更新，否则，就不更新，CAS 是 CPU 的并发原型</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2021</span>, <span class="number">2020</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">6666</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201125095750332.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>常见示例：自旋锁实现</p>
</blockquote>
<p><strong>CAS是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步</strong><br>当第一个线程进入myLock时while条件为false，可以加锁，当第二个线程进入时while条件为true，进入循环，直到myUnLock执行结束，第二个线程跳出while循环，加锁成功。<br>自旋锁是指对一个内容无限循环，当达成条件的时候对其加锁，底层使用的是CAS。</p>
<p><strong>自定义自旋锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLock</span> &#123;</span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="literal">null</span>,thread))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; myLock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myUnLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        atomicReference.compareAndSet(thread,<span class="literal">null</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; myUnLock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#x3D;&#x3D;自旋锁测试&#x3D;&#x3D;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">SpinLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpinLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201124093623770.png#pic_center" alt="在这里插入图片描述"><br>线程T1占用时，线程T2会一直在循环中无法出来。只有当线程T1解锁，线程T2才会跳出循环，最终才会触发T2解锁。</p>
<blockquote>
<p>常用示例：利用CAS解决ABA问题</p>
</blockquote>
<p>CAS是java利用unsafe类通过对计算机底层的调用来进行数据的操作。底层实现为自旋锁。<br>CAS对数据修改时，可能会出现对数据修改两次，修改后值与之前相同的情况，因此会认定为未修改，此类问题被称为ABA问题，为了解决此类问题可以使用乐观锁，对每次记录新增一个记录，每次修改记录+1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ABADemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();   <span class="comment">//获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;a1 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">2</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;a2 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">2</span>, <span class="number">1</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;a3 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();   <span class="comment">//获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;b1 =&gt;&quot;</span>+stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">6</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;b2 =&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果分析</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020112020130879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="避免指令重排"><a href="#避免指令重排" class="headerlink" title="避免指令重排"></a>避免指令重排</h3><p>指令重排指的是，一段代码写出来的顺序可能为1&#x3D;&gt;2&#x3D;&gt;3&#x3D;&gt;4&#x3D;&gt;5,但是经过编译器以后的顺序并不一定严格按照这种顺序，可能在不影响结果的情况下改变为1&#x3D;&gt;3&#x3D;&gt;2&#x3D;&gt;4&#x3D;&gt;5。这种情况在单线程的情况下不会有任何问题，但是在多线程的情况下则会出现问题。而volatile关键词可以增加一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障。</p>
<blockquote>
<p>常用示例：DCL懒汉式(双重检测锁模式)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双重检测锁模式的懒汉式单例 DCL懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();    <span class="comment">//不是一个原子性操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时当第一次创建对象时会进行加锁，但是由于指令重排可能会造成以下情况，所以需要对对象加上volatile关键词防止指令重排</p>
<blockquote>
<p>&#x2F;**<br>                  * 1、分配内存空间<br>                  * 2、执行构造方法，初始化对象<br>                  * 3、把这个对象指向这个空间<br>                  *<br>                  * 此时程序执行顺序可能为<br>                  * 1-&gt;2-&gt;3<br>                  * 1-&gt;3-&gt;2<br>                  * 若为1-&gt;3-&gt;2则可能发生以下情境<br>                  *<br>                  * A线程执行完1-&gt;3时，B线程执行，此时对象有指向的内存空间，但是并未初始化<br>                  * 当B进行判断时 lazyMan &#x3D;&#x3D; null 为 false，则会直接返回未初始化的对象。<br>                  * 因此在声明对象时必须加上 volatile 关键词来防止指令重排<br>                  *&#x2F;</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>Synchronized和Volatile的比较<br>1）Synchronized保证内存可见性和操作的原子性<br>2）Volatile只能保证内存可见性<br>3）Volatile不需要加锁，比Synchronized更轻量级，并不会阻塞线程（volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。）<br>4）volatile标记的变量不会被编译器优化,而synchronized标记的变量可以被编译器优化（如编译器重排序的优化）.<br>5）volatile是变量修饰符，仅能用于变量，而synchronized是一个方法或块的修饰符。<br>volatile本质是在告诉JVM当前变量在寄存器中的值是不确定的，使用前，需要先从主存中读取，因此可以实现可见性。而对n&#x3D;n+1,n++等操作时，volatile关键字将失效，不能起到像synchronized一样的线程同步（原子性）的效果。</p>
</blockquote>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞定Mybatis-Plus</title>
    <url>/post/a2980a19.html</url>
    <content><![CDATA[<h2 id="什么是Mybatis-Plus"><a href="#什么是Mybatis-Plus" class="headerlink" title="什么是Mybatis-Plus"></a>什么是Mybatis-Plus</h2><p>你可能不知道什么是MybatisPlus，但是你一定听说过Mybatis，如果你用过Mybatis，一定会因为重复的编写一些简单的sql而烦恼，因此Mybatis-Plus应运而生，它的主要工作就是简化Mybatis的开发流程，用官方的话来说就是：</p>
<blockquote>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。<br>我们的愿景是成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。</p>
</blockquote>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/20201012141000878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Mybatis-Plus的环境搭建"><a href="#Mybatis-Plus的环境搭建" class="headerlink" title="Mybatis-Plus的环境搭建"></a>Mybatis-Plus的环境搭建</h2><blockquote>
<p>基于SpringBoot</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>基于SpringMvc</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然还需要数据库等其他的依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用Mybatis-Plus只需要简单的几步即可</p>
<ul>
<li>创建pojo实体类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>继承BaseMapper接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在对应的Mapper上面继承基本类BaseMapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动类添加注解扫描目录<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisplusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisplusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>添加数据库配置文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库连接配置</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis-plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样一个简单的Mybatis-Plus环境就搭建好了，可以直接拿来使用了。</p>
</blockquote>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisplusApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有数据测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mybatisplusTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//参数是一个wrapper，条件构造器</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分布式ID生成策略"><a href="#分布式ID生成策略" class="headerlink" title="分布式ID生成策略"></a>分布式ID生成策略</h2><p>首先我们来测试下新增数据的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//没有setId，自动生成id</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;紫色星辰&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">19</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;654658859@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在没有插入主键的情况下，我们会根据<strong>雪花算法</strong>随机生成一个主键，并且进行插入，这也是默认的主键生成方式。</p>
<p>我们也可以通过添加 <strong>@TableId</strong> 注解的方式采用不同的策略进行主键生成。例如</p>
<blockquote>
<p>&#x2F;&#x2F;雪花算法<br>@TableId(type &#x3D; IdType.ID_WORKER)<br>private Long id;</p>
</blockquote>
<p>除了雪花算法还有以下几种方式生成主键ID</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IdType</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库ID自增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTO(<span class="number">0</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类型为未设置主键类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NONE(<span class="number">1</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户输入ID</span></span><br><span class="line"><span class="comment">     * 该类型可以通过自己注册自动填充插件进行填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INPUT(<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局唯一ID (idWorker)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ID_WORKER(<span class="number">3</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局唯一ID (UUID)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UUID(<span class="number">4</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串全局唯一ID (idWorker 的字符串表示)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ID_WORKER_STR(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> key;</span><br><span class="line"></span><br><span class="line">    IdType(<span class="type">int</span> key) &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><p>雪花算法即Twitter的snowflake算法</p>
<p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心（服务器地址），5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p>
<p>优点：</p>
<p>1）不依赖于数据库，灵活方便，且性能优于数据库。</p>
<p>2）ID按照时间在单机上是递增的。</p>
<p>缺点：</p>
<p>1）在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</p>
<h2 id="数据库时间自动填充"><a href="#数据库时间自动填充" class="headerlink" title="数据库时间自动填充"></a>数据库时间自动填充</h2><p>除了自动生成唯一ID以外，我们大多数情况还需要自动生成创建时间和修改时间。<br>因此需要在数据库中再新增两个字段create_time和update_time。<br>在实体类中添加createTime和updateTime。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//生成数据库中的唯一组件（uuid，自增id，雪花算法，redis，zookeeper）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//雪花算法</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间自动填充可以从数据库层面进行自动填充也可以在代码中实现。</p>
<ul>
<li>数据库填充</li>
</ul>
<blockquote>
<p>添加默认值即可。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201012145450537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>代码实现填充<blockquote>
<p>去除数据库默认值选项</p>
</blockquote>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201012150338345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>首先编写实现类实现MetaObjectHandler接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">//插入时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill......&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill......&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后对实体类添加注解  @TableField </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//生成数据库中的唯一组件（uuid，自增id，雪花算法，redis，zookeeper）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//雪花算法</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//没有setId，自动生成id</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1315496906140811265L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;香草拿铁&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>由于是分布式，操作数据库时可能出现多个用户同时对数据库进行写操作，为了满足<strong>ACID</strong>原则必然要对数据库进行上锁。<br>按照分类我们可以将锁分为乐观锁和悲观锁。</p>
<blockquote>
<p>乐观锁：顾名思义，它非常的乐观，总是认为不会出现问题，无论干什么都不会去上锁。出现问题再去更新值测试。<br>悲观锁：顾名思义，它非常的悲观，总是认为会出现问题，无论干什么都会去上锁。然后进行操作。</p>
</blockquote>
<p>由于对性能的考虑，大多数情况下不会用到悲观锁，这里主要讲乐观锁的实现机制。</p>
<p>乐观锁实现方式：<br>在数据库表中加上一个version字段，取出记录时获取当前version，更新时带上version，执行更新时先对version进行判断，满足条件才进行更新。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>先查询，获得版本号version <span class="operator">=</span> n</span><br><span class="line"><span class="keyword">select</span> version <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"><span class="number">2.</span>执行更新</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> &quot;香草拿铁&quot; ,version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">where</span> `id` <span class="operator">=</span> id <span class="keyword">and</span> `version` <span class="operator">=</span> n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数据库添加version字段</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201012153141902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>实体类添加version字段以及注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//生成数据库中的唯一组件（uuid，自增id，雪花算法，redis，zookeeper）</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span>  <span class="comment">//雪花算法</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@Version</span>    <span class="comment">//乐观锁注解</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>添加乐观锁插件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.example.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>    <span class="comment">//自动管理事务</span></span><br><span class="line"><span class="meta">@Configuration</span>      <span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="comment">//注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试乐观锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//乐观锁测试(成功)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOptimisticLockerSuccess</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1315557508653703170L</span>);</span><br><span class="line">        <span class="comment">//修改信息</span></span><br><span class="line">        user.setName(<span class="string">&quot;香草拿铁&quot;</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//乐观锁测试(失败)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOptimisticLockerFail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//线程1</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1315557508653703170L</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;抹茶拿铁&quot;</span>);</span><br><span class="line">        <span class="comment">//线程2(插队)</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1315557508653703170L</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;焦糖拿铁&quot;</span>);</span><br><span class="line">        userMapper.updateById(user2);</span><br><span class="line">        <span class="comment">//自旋锁来多次尝试提交</span></span><br><span class="line">        userMapper.updateById(user1);<span class="comment">//没有乐观锁就会覆盖插队线程的值</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行sql，可知，第二次更新没有生效</p>
</blockquote>
<blockquote>
<p>Preparing: UPDATE user SET name&#x3D;?, age&#x3D;?, email&#x3D;?, create_time&#x3D;?, update_time&#x3D;?, &gt;version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?<br>Parameters: 焦糖拿铁(String), 25(Integer), <a href="mailto:&#54;&#x35;&#52;&#x36;&#x35;&#x38;&#x38;&#53;&#x39;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;">&#54;&#x35;&#52;&#x36;&#x35;&#x38;&#x38;&#53;&#x39;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a>(String), 2020-10-12 &gt;15:38:47.0(Timestamp), 2020-10-12 15:43:31.59(Timestamp), 3(Integer), &gt;1315557508653703170(Long), 2(Integer)<br>Updates: 1<br>…………………………………………………………………………………………………………………………………<br>Preparing: UPDATE user SET name&#x3D;?, age&#x3D;?, email&#x3D;?, create_time&#x3D;?, update_time&#x3D;?, &gt;version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?<br>Parameters: 抹茶拿铁(String), 25(Integer), <a href="mailto:&#x36;&#x35;&#x34;&#54;&#53;&#x38;&#x38;&#x35;&#57;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x36;&#x35;&#x34;&#54;&#53;&#x38;&#x38;&#x35;&#57;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;</a>(String), 2020-10-12 &gt;15:38:47.0(Timestamp), 2020-10-12 15:43:31.696(Timestamp), 3(Integer), &gt;1315557508653703170(Long), 2(Integer)<br>Updates: 0</p>
</blockquote>
<h2 id="Mybatis-Plus条件查询"><a href="#Mybatis-Plus条件查询" class="headerlink" title="Mybatis-Plus条件查询"></a>Mybatis-Plus条件查询</h2><blockquote>
<p>Mybatis-Plus条件查询提供了以下几种方法，可以满足日常基本的查询条件。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1315557508653703170L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量查询测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByBatchId</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件查询测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;焦糖拿铁&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//分页查询测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//参数一：当前页</span></span><br><span class="line">        <span class="comment">//参数二：页面大小</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        IPage&lt;User&gt; userIPage = userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">        page.getRecords().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mybatis-Plus删除操作"><a href="#Mybatis-Plus删除操作" class="headerlink" title="Mybatis-Plus删除操作"></a>Mybatis-Plus删除操作</h2><ul>
<li>基本删除，同查询一样<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">1315557508653703170L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量删除测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByBatchId</span><span class="params">()</span>&#123;</span><br><span class="line">        userMapper.deleteBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件删除测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;香草拿铁&quot;</span>);</span><br><span class="line">        userMapper.deleteByMap(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>逻辑删除<blockquote>
<p>物理删除：从数据库中直接移除。<br>逻辑删除：在数据库中没有被移除，而是通过一个变量使它失效。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>在数据库表中加入deleted字段</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201012165559614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>实体类中添加属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//生成数据库中的唯一组件（uuid，自增id，雪花算法，redis，zookeeper）</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span>  <span class="comment">//雪花算法</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span>    <span class="comment">//乐观锁注解</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span>     <span class="comment">//逻辑删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置逻辑删除配置文件</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#逻辑删除配置</span></span><br><span class="line"><span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-delete-field</span>=<span class="string">flag</span></span><br><span class="line"><span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 逻辑未删除值(默认为 0)</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时执行删除即变为更新操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">1315579397265506306L</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201012171744975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>这时，执行查询的时候会自动过滤逻辑删除的数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1315579397265506306L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Preparing: SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE id&#x3D;? AND deleted&#x3D;0<br>Parameters: 1315579397265506306(Long)<br> Total: 0<br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@52f57666]<br>null</p>
</blockquote>
<h2 id="条件构造器Wrapper"><a href="#条件构造器Wrapper" class="headerlink" title="条件构造器Wrapper"></a>条件构造器Wrapper</h2><p>Wrapper是一个条件构造器，可以通过Mapper的参数将wrapper作为参数传进去。</p>
<blockquote>
<p>官方文档地址<a href="https://baomidou.com/guide/wrapper.html">Mybatis-Plus官网传送门</a>.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mybatisplusTest</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">//参数是一个wrapper，条件构造器</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mybatisplusTest2</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;紫色星辰&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mybatisplusTest3</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.between(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>,<span class="number">25</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.selectCount(wrapper);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mybatisplusTest4</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.notLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;香草&quot;</span>)</span><br><span class="line">                .likeRight(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">        maps.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mybatisplusTest5</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user where id &gt; 99&quot;</span>);</span><br><span class="line">        List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);</span><br><span class="line">        objects.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mybatisplusTest6</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><blockquote>
<p>代码生成器可以说是终极法宝了。<a href="https://baomidou.com/guide/generator.html">官方文档传送门</a>.<br>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
</blockquote>
<ul>
<li>添加依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    代码生成器 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    模板引擎 依赖 Velocity（默认）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>编写代码自动生成器，运行即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码自动生成器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        <span class="comment">//配置策略</span></span><br><span class="line">        <span class="comment">//1.全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;紫色星辰&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>);  <span class="comment">//是否覆盖原来生成的</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">//去Service的I前缀</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line">        <span class="comment">//2.设置数据源</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line">        <span class="comment">//3.包的位置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;blog&quot;</span>);</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.example&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line">        <span class="comment">//4策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;blog&quot;</span>);        <span class="comment">//设置要映射的表名</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>);     <span class="comment">//自动lombok</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);    <span class="comment">//逻辑删除</span></span><br><span class="line">        <span class="comment">//5自动填充配置</span></span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">gmt_create</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;gmt_create&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">gmt_modified</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;gmt_modified&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        tableFills.add(gmt_create);</span><br><span class="line">        tableFills.add(gmt_modified);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">//6乐观锁配置</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>);     <span class="comment">//url下划线命名</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        mpg.execute();  <span class="comment">//执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>完成效果图，以下为user表通过自动生成器生成的代码。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201013103907430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这就是代码生成器的强大之处了。</p>
<h2 id="Mybatis-Plus总结"><a href="#Mybatis-Plus总结" class="headerlink" title="Mybatis-Plus总结"></a>Mybatis-Plus总结</h2><p>总体来说Mybatis-Plus作为Mybatis最好的搭档，的确为我们提供了很多的便利，同时也解决了我们需要大量编写重复代码的问题，可以使我们将更多的时间放在解决核心业务上，但这并不代表Mybatis-Plus是我们偷懒的工具，学习的道路并不是一蹴而就的，技术的发展也是需要不断沉淀与反思的，只有掌握了mybatis的使用原理，在用好mybatis的前提下再合理的使用Mybatis-Plus，才能为我们的学习和工作带来便捷。</p>
]]></content>
      <tags>
        <tag>Mybatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis发布订阅</title>
    <url>/post/7f3ad76a.html</url>
    <content><![CDATA[<h2 id="发布订阅使用场景"><a href="#发布订阅使用场景" class="headerlink" title="发布订阅使用场景"></a>发布订阅使用场景</h2><p>类似于rabbit MQ这种消息中心，Redis也可以实现消息队列的功能，适用场景类似公众号的订阅和接收，当一个订阅者订阅了一个公众号，当发布者发布文章或消息的时候，可以将消息放在消息中心，而订阅者可以直接从消息中心获取到特定的消息。</p>
<span id="more"></span>

<h2 id="发布订阅的实现"><a href="#发布订阅的实现" class="headerlink" title="发布订阅的实现"></a>发布订阅的实现</h2><blockquote>
<p>发布订阅主要的方法如下：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200918135315297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>首先客户端订阅一个频道</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200918135708308.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe purpleStars</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;purpleStars&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后发布者将消息发送到指定频道</p>
<p><img src="https://img-blog.csdnimg.cn/20200918140429754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish purpleStars hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; publish purpleStars hi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>客户端将受到指定频道发送过来的信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe purpleStars</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;purpleStars&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;purpleStars&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;purpleStars&quot;</span></span><br><span class="line">3) <span class="string">&quot;hi&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis发布订阅原理及使用场景"><a href="#Redis发布订阅原理及使用场景" class="headerlink" title="Redis发布订阅原理及使用场景"></a>Redis发布订阅原理及使用场景</h2><p>Redis发布订阅实际上是在redis-service上维护了一个字典，每个字典的key相当于一个channel，而每个字典的value则是一串链表，连接了所有订阅者，消息发送者只需要向字典中特定位置插入消息，消息接受者就会收到发布的消息。</p>
<blockquote>
<p>使用场景：</p>
<ul>
<li>实时消息系统</li>
<li>实时聊天系统</li>
<li>消息(公众号、B站账号等)订阅</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis持久化(RDB和AOF)</title>
    <url>/post/ccf0cea3.html</url>
    <content><![CDATA[<h2 id="为什么Redis的持久化很重要？"><a href="#为什么Redis的持久化很重要？" class="headerlink" title="为什么Redis的持久化很重要？"></a>为什么Redis的持久化很重要？</h2><p>因为Redis的数据是存储在缓存中的，因此Redis的瓶颈不是cpu的运行速度，而往往是网络带宽和机器的内存大小。又因为数据存在缓存中是断电即失的，因此有效的持久化对于Redis来说也就变得十分重要了。<br>而对于redis来说，持久化的主要方式有RDB(Redis DataBase)和AOF(Append Only File)。</p>
<span id="more"></span>



<h2 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h2><blockquote>
<p>RDB在默认的配置redis.conf中如下，表示为</p>
<ul>
<li>在900s内有1次操作则进行持久化</li>
<li>在300s内有10次操作则进行持久化</li>
<li>在60s内有10000次操作则进行持久化</li>
</ul>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200917151658842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>一般dump.rdb会在以下三种情况下生成</p>
<ul>
<li>save条件生效的情况下</li>
<li>flushall删除数据库的时候</li>
<li>redis执行shutdown的时候</li>
</ul>
</blockquote>
<p>SNAPSHOTTING(快照)的原理主要为从父进程fork(分离)出一个子进程，然后子进程将内存写入临时RDB文件，写入完成后，替换原来的快照文件，并退出，生成的dump.rdb文件就是持久化的数据，并且在每次启动的时候自动加载数据。</p>
<blockquote>
<p>使用RDB的适用场景以及优缺点：</p>
<ul>
<li>适合大规模的数据恢复，对实时的数据完整性要求不高的场景，因为RDB适用于一段时间保存一次的情况。</li>
<li>有可能造成数据丢失，并且fork的时候会占用一定的内存空间。</li>
</ul>
</blockquote>
<h2 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h2><blockquote>
<p>AOF在默认的配置redis.conf中如下，默认为不开启，需要开启则将appendonly改为yes，重启redis即可生效。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020091810261492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>AOF采用的方法是将所有写操作以日志形式全部保存到一个文件中(读操作不记录)，文件名为appendonly.aof，当文件出现错误可以通过执行redis-check-aof进行修复，执行redis-check-aof –fix appendonly.aof即可自动修复AOF文件</p>
<blockquote>
<p>使用AOF的适用场景以及优缺点：<br>由于每次修改都进行更新同步，因此文件完整性更好。但是由于每秒都进行同步，当某一秒服务器宕机则会丢失某一秒的数据。如果设置从不同步则效率最高。<br>但相对于数据文件来说，aof远大于rdb，修复速度也比rdb慢。由于aof进行的读写操作，因此运行速度也比rdb慢</p>
</blockquote>
<h2 id="RDB和AOF的取舍"><a href="#RDB和AOF的取舍" class="headerlink" title="RDB和AOF的取舍"></a>RDB和AOF的取舍</h2><p>数据完整性和性能方面RDB比较好，而AOF在数据完整性方面AOF比较好，由于redis主要是放在缓存中的，数据追求的快速的读取，数据量大的情况下RDB效果比AOF好很多，因此redis中默认的就是使用RDB。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Redis</title>
    <url>/post/4ebad2d4.html</url>
    <content><![CDATA[<h2 id="通过Jedis整合"><a href="#通过Jedis整合" class="headerlink" title="通过Jedis整合"></a>通过Jedis整合</h2><blockquote>
<p>导入maven依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<span id="more"></span>



<blockquote>
<p>使用Jedis</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//通过jedis创建连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//创建json</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;purpleStars&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jsonObject.toJSONString();</span><br><span class="line">        <span class="comment">//清空数据库</span></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line">        <span class="comment">//通过watch关键词监控实现乐观锁</span></span><br><span class="line">        multi.watch(result);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;user&quot;</span>, result);</span><br><span class="line">            multi.exec();   <span class="comment">//执行事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            multi.discard();    <span class="comment">//放弃事务</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">            jedis.close();  <span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p> Jedis其实就是封装的一个redis操作类，可以进行redis中的操作。</p>
<h2 id="通过SpringData整合"><a href="#通过SpringData整合" class="headerlink" title="通过SpringData整合"></a>通过SpringData整合</h2><blockquote>
<p>导入依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先我们来了解一下SpringBoot实现redis的模板RedisTemplate,首先进入redis配置类RedisAutoConfiguration。<br><img src="https://img-blog.csdnimg.cn/20200917110838269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>由上图可知，在SpringData中默认有两种Redis的实现，分别为Lettuce和Jedis。</p>
<blockquote>
<p>而Spring2.0以后默认的实现为Lettuce，那么Lettuce和Jedis的区别是什么呢？</p>
<ul>
<li>Lettuce<br>Lettuce的连接是基于Netty的，连接实例（StatefulRedisConnection）可以在多个线程间并发访问，因为StatefulRedisConnection是线程安全的，所以一个连接实例（StatefulRedisConnection）就可以满足多线程环境下的并发访问，当然这个也是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例。<br>lettuce主要利用netty实现与redis的同步和异步通信。</li>
<li>Jedis<br>Jedis在实现上是直接连接的redis server，如果在多线程环境下是非线程安全的，这个时候只有使用连接池，为每个Jedis实例增加物理连接。</li>
</ul>
<p>那么除此之外还可以发现SpringData为我们提供了两个默认的redisTemplate<br><img src="https://img-blog.csdnimg.cn/20200917111921289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可知默认的RedisTemplate是Object类型的，而且@ConditionalOnMissingBean注解表明如果自定义自己的redisTemplate则默认的会失效。<br>那么我们则可以自定义RedisTemplate。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>      <span class="comment">//表明自己是config配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义自己的RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span>       <span class="comment">//将自己注入SpringIOC容器</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        <span class="comment">//自定义RedisTemplate&lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//Json序列化配置</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">//key采用String序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//hash采用String序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//value采用jackson序列化方式</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//hash的value序列化采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述RedisTemplate则可以自定义自己的序列化类型。使用@Configuration标注自己是配置类，并使用@Bean将redisTemplate注入到容器SpringIOC容器中其他类则可以从容器中取出自定义redisTemplate进行redis相关操作。</p>
<blockquote>
<ul>
<li>redisTemplate基本操作<br>   opsForValue 操作字符串 类似String<br>   opsForList  操作List<br>   opsForSet  操作Set<br>   opsForHash  操作Hash<br>   opsForZSet  操作ZSet<br>   opsForGeo 操作Geo(地图)类型<br>   opsForHyperLogLog 操作opsForHyperLogLog类型</li>
<li>常用的可以直接用redisTemplate来操作<br>   获取redis连接对象<br>   RedisConnection connection &#x3D; redisTemplate.getConnectionFactory().getConnection();<br>   connection.flushDb();<br>   connection.flushAll();</li>
</ul>
</blockquote>
<blockquote>
<p>测试自定义序列化的RedisTemplate</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;紫色星辰&quot;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//		json序列化        </span></span><br><span class="line"><span class="comment">//      String jsonUser = new ObjectMapper().writeValueAsString(user);	</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">userData</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(userData);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>控制台输出<br>User(name&#x3D;紫色星辰, age&#x3D;3)</p>
</blockquote>
<blockquote>
<p>查询redis数据库的key的值，已经被序列化为String</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020091712352130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>因此，同Jedis一样，只需要实例化一个RedisTemplate模板就可以对redis进行操作了。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis三种特殊的数据类型以及性能分析</title>
    <url>/post/b6dc1514.html</url>
    <content><![CDATA[<h2 id="redis的三种特殊的数据类型"><a href="#redis的三种特殊的数据类型" class="headerlink" title="redis的三种特殊的数据类型"></a>redis的三种特殊的数据类型</h2><p>redis内含五种基本的数据类型</p>
<blockquote>
<p>字符串（strings）<br>散列（hashes）<br>列表（lists）<br>集合（sets）<br>有序集合（sorted sets）</p>
</blockquote>
<p>除了这五种基本的数据类型以外还为我们提供了一些特殊的数据类型</p>
<blockquote>
<p>bitmaps<br>hyperloglogs<br>地理空间（geospatial）</p>
</blockquote>
<span id="more"></span>



<p>这些数据类型在日常生活中可以极大地提高便利性和系统性能。</p>
<h2 id="bitmaps"><a href="#bitmaps" class="headerlink" title="bitmaps"></a>bitmaps</h2><blockquote>
<p>bitmaps是redis为我们提供的一种位运算数据类型，内部只存在0和1两种数据，使用场景：</p>
<ul>
<li>在线&#x2F;非在线人数统计</li>
<li>活跃用户统计</li>
<li>打卡情况统计</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; clear</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">date</span> 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">date</span> 2 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">date</span> 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">date</span> 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">date</span> 5 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">date</span> 6 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">date</span> 7 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit <span class="built_in">date</span> 5</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit <span class="built_in">date</span> 7</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; bitcount <span class="built_in">date</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面这一段可以用来统计一周的打卡情况：</p>
<ul>
<li>setbit 向bitmaps中添加值</li>
<li>getbit 向bitmaps中获取值</li>
<li>bitcount 获取bitmaps中value为1的值的个数</li>
</ul>
</blockquote>
<h2 id="hyperloglogs"><a href="#hyperloglogs" class="headerlink" title="hyperloglogs"></a>hyperloglogs</h2><blockquote>
<p>hyperloglogs是redis为我们提供的一种计算基数的数据类型，相比于set可以节省更多内存，但是有0.81%的误差率，在允许少量误差的时候可以考虑使用，使用场景：</p>
<ul>
<li>文章&#x2F;博客观看人数统计</li>
<li>计数器</li>
<li>共同好友数量</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd xiaoming a b c d e</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfadd zhangsan d e f g</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount xiaoming</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; pfcount zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; pfmerge common xiaoming zhangsan</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount common</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面这一段可以用来统计共同好友情况：</p>
<ul>
<li>pfadd 向hyperloglogs中添加值</li>
<li>pfcount 查看hyperloglogs中值的数量</li>
<li>pfmerge 合并两个hyperloglogs数据类型，获取基数</li>
</ul>
</blockquote>
<h2 id="geospatial"><a href="#geospatial" class="headerlink" title="geospatial"></a>geospatial</h2><blockquote>
<p>geospatial是redis为我们提供的一种基于地理空间的数据类型，使用场景：</p>
<ul>
<li>查看附近的人</li>
<li>查看两点间的直线距离</li>
</ul>
</blockquote>
<blockquote>
<p>GEOADD：添加地址信息<br>GEODIST：计算两点之间直线距离<br>GEOHASH：查看两点hash值，两个值越相近则距离越近<br>GEOPOS：查看两点的经纬度信息<br>GEORADIUS：查看距离中心坐标一定半径内的key值<br>GEORADIUSBYMEMBER：查看指定key为中心一定半径内的key值</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GEOADD</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; geoadd city 116.397128 39.916527 beijing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd city 121.48941 31.40527 shanghai</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd city 113.88308 22.55329 shenzhen</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd city 120.21201 30.2084 hangzhou</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">GEODIST</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; geodist city beijing shanghai</span><br><span class="line"><span class="string">&quot;1052105.5643&quot;</span></span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">GEOHASH</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; geohash city beijing shanghai</span><br><span class="line">1) <span class="string">&quot;wx4g0dtf9e0&quot;</span></span><br><span class="line">2) <span class="string">&quot;wtw6st1uuq0&quot;</span></span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">GEOPOS</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; geopos city beijing shanghai</span><br><span class="line">1) 1) <span class="string">&quot;116.39712899923324585&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.91652647362980844&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;121.48941010236740112&quot;</span></span><br><span class="line">   2) <span class="string">&quot;31.40526993848380499&quot;</span></span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">GEORADIUS</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; georadius city 115 40 500 km</span><br><span class="line">1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius city 115 40 1500 km</span><br><span class="line">1) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">2) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">3) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">GEORADIUSBYMEMBER</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember city shanghai 1000 km</span><br><span class="line">1) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">2) <span class="string">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="为什么使用redis会增加系统性能"><a href="#为什么使用redis会增加系统性能" class="headerlink" title="为什么使用redis会增加系统性能"></a>为什么使用redis会增加系统性能</h2><blockquote>
<p>因为Redis的瓶颈不是cpu的运行速度，而往往是网络带宽和机器的内存大小。再说了，单线程切换开销小，容易实现既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。<br>再加上其巧妙地数据结构，以其nosql(not only sql)的优势，自然速度就要比普通的sql要快上许多。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot实现并发任务并返回结果</title>
    <url>/post/5911d8d9.html</url>
    <content><![CDATA[<h2 id="并发的实现以及结果获取"><a href="#并发的实现以及结果获取" class="headerlink" title="并发的实现以及结果获取"></a>并发的实现以及结果获取</h2><p>并发即多个线程同时进行任务，即异步任务，以下例子测试了并发进行四个任务，并同时返回结果的案例。</p>
<span id="more"></span>



<blockquote>
<p>service层</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTest</span> &#123;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="keyword">public</span> Future&lt;Boolean&gt; <span class="title function_">doReturn1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 这个方法需要调用500毫秒</span></span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;一号线程:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 消息汇总</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncResult</span>&lt;&gt;(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="keyword">public</span> Future&lt;Boolean&gt; <span class="title function_">doReturn2</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 这个方法需要调用500毫秒</span></span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;二号线程:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 消息汇总</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncResult</span>&lt;&gt;(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="keyword">public</span> Future&lt;Boolean&gt; <span class="title function_">doReturn3</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 这个方法需要调用500毫秒</span></span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;三号线程:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 消息汇总</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncResult</span>&lt;&gt;(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Async</span></span><br><span class="line">        <span class="keyword">public</span> Future&lt;Boolean&gt; <span class="title function_">doReturn4</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 这个方法需要调用500毫秒</span></span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;四号线程:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 消息汇总</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncResult</span>&lt;&gt;(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>controller层</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/async&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">async</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Future&lt;Boolean&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Future&lt;Boolean&gt; flag1 = asyncTest.doReturn1();</span><br><span class="line">        Future&lt;Boolean&gt; flag2 = asyncTest.doReturn2();</span><br><span class="line">        Future&lt;Boolean&gt; flag3 = asyncTest.doReturn3();</span><br><span class="line">        Future&lt;Boolean&gt; flag4 = asyncTest.doReturn4();</span><br><span class="line">        futures.add(flag1);</span><br><span class="line">        futures.add(flag2);</span><br><span class="line">        futures.add(flag3);</span><br><span class="line">        futures.add(flag4);</span><br><span class="line">        List&lt;Boolean&gt; response = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Future future : futures) &#123;</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                flag = (Boolean) future.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            response.add(flag);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        <span class="keyword">return</span> response.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这种方法即可在并发的时候拦截到全部完成后的结果进行判断，满足才进行下一步。</p>
]]></content>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装部署上线项目流程</title>
    <url>/post/f2f88eec.html</url>
    <content><![CDATA[<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><blockquote>
<p>一般在linux上安装软件有三种方式：</p>
<ul>
<li>rpm</li>
<li>解压缩</li>
<li>yum在线安装</li>
</ul>
</blockquote>
<h2 id="JDK安装（使用rpm方式）"><a href="#JDK安装（使用rpm方式）" class="headerlink" title="JDK安装（使用rpm方式）"></a>JDK安装（使用rpm方式）</h2><ul>
<li>下载jdk的rpm包</li>
<li>通过xftp上传到服务器</li>
<li>安装java环境</li>
</ul>
<span id="more"></span>



<blockquote>
<p>检查是否存在java环境:  java -version<br>检查jdk版本信息: rpm -qa|grep jdk<br>卸载jdk: rpm -e –nodeps jdk……<br>安装jdk: rpm -ivh jdk-….rpm</p>
</blockquote>
<ul>
<li><p>发布项目<br>将springboot项目打包生成jar包，并放到linux服务器上<br><img src="https://img-blog.csdnimg.cn/20200719142435622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>开启项目对应端口号(以9000为例)</p>
<blockquote>
<p>firewall-cmd –zone&#x3D;public –add-port&#x3D;9000&#x2F;tcp –permanent</p>
</blockquote>
</li>
<li><p>重启防火墙</p>
<blockquote>
<p>systemctl restart firewalld.service</p>
</blockquote>
</li>
<li><p>查看防火墙端口号是否打开</p>
<blockquote>
<p>firewall-cmd –list-ports</p>
</blockquote>
</li>
<li><p>阿里云需要配置安全组规则<br><img src="https://img-blog.csdnimg.cn/20200719131418682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200719131451801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020071913155438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020071913164970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>赋予文件权限(读、写、可执行)<blockquote>
<p>chmod 777 springboot-web.jar</p>
</blockquote>
</li>
<li>执行文件<blockquote>
<p>java -jar springboot-web.jar</p>
</blockquote>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200719143123696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>执行成功，即可从公网访问网站。</p>
<h2 id="Tomcat安装（使用解压缩方式）"><a href="#Tomcat安装（使用解压缩方式）" class="headerlink" title="Tomcat安装（使用解压缩方式）"></a>Tomcat安装（使用解压缩方式）</h2><p>ssm项目中war包需要放到Tomcat中运行！</p>
<ul>
<li><p>下载Tomcat<br>apache-tomcat-XXX.tar.gz<br><a href="https://tomcat.apache.org/download-90.cgi">Tomcat 9 链接</a></p>
</li>
<li><p>解压文件</p>
<blockquote>
<p>tar zxvf apache-tomcat-9.0.37.tar.gz</p>
</blockquote>
</li>
<li><p>进入Tomcat的bin目录下，启动Tomcat测试</p>
<blockquote>
<p>启动：.&#x2F;startup.sh<br>结束：.&#x2F;shutdown.sh</p>
</blockquote>
</li>
</ul>
<h2 id="Docker安装（使用yum方式安装）"><a href="#Docker安装（使用yum方式安装）" class="headerlink" title="Docker安装（使用yum方式安装）"></a>Docker安装（使用yum方式安装）</h2><p>需要在联网环境下进行，需要从网上下载文件。</p>
<ul>
<li><p>检测CentOS 7</p>
<blockquote>
<p>cat &#x2F;etc&#x2F;redhat-release<br>CentOS Linux release 7.7.1908 (Core)</p>
</blockquote>
</li>
<li><p>安装准备环境</p>
<blockquote>
<p>yum -y install 包名<br>yum -y install gcc<br>yum -y install gcc-c++</p>
</blockquote>
</li>
<li><p>卸载以前版本，根据官网依次执行指令安装。</p>
</li>
</ul>
<h2 id="使用宝塔面板安装软件"><a href="#使用宝塔面板安装软件" class="headerlink" title="使用宝塔面板安装软件"></a>使用宝塔面板安装软件</h2><p>打开宝塔面板可视化工具，进行可视化操作即可。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud五大神器(对比Dubbo+Zookeeper)</title>
    <url>/post/afd4526d.html</url>
    <content><![CDATA[<h2 id="微服务生态"><a href="#微服务生态" class="headerlink" title="微服务生态"></a>微服务生态</h2><p>在如今互联网盛行的今日，谈及架构，分布式微服务的理论应该火遍大江南北，其中以Spring家族发展而来的生态更是当今必备技能。<br>Spring是一个全家桶，集合了众家所长，俨然成为编程行业的春天，SpringBoot则简化了Spring中繁杂的配置，实现了自动装配，而SpringCloud则用于管理一个个的SpringBoot开发出的微服务。<br>因此说SpringCloud是一门技术不如说是一个生态。</p>
<span id="more"></span>



<p>SpringCloud主要用来解决由网络的不可靠而引发的一系列问题。</p>
<blockquote>
<p>服务很多，客户端该如何访问？<br>众多的微服务该如何通信？<br>这么多服务该如何治理？<br>如果服务挂了该怎么办？</p>
</blockquote>
<p>而为了解决这些问题，市面上出现了很多套解决方案，我认为都可以将其列入SpringCloud生态。<br>而SpringCloud NetFlix无疑是最火的，它完美的兼容了Spring生态，而最近出现的SpringCloud Alibaba更是势头正盛。</p>
<h2 id="SpringCloud五大神器"><a href="#SpringCloud五大神器" class="headerlink" title="SpringCloud五大神器"></a>SpringCloud五大神器</h2><p>Spring Cloud为了解决这一系列问题，推出了五大神器，分别为</p>
<ul>
<li>服务网关——Netflix Zuul</li>
<li>客户端端负载均衡——Netflix Ribbon</li>
<li>服务发现——Netflix Eureka</li>
<li>断路器——Netflix Hystrix</li>
<li>分布式配置——Spring Cloud Config</li>
</ul>
<p>在讨论SpringCloud之前我们先来聊聊Dubbo，同样是为了解决微服务的管理问题，Dubbo更倾向于通信，因此对于通信，Dubbo采取了一种新的通信协议，RPC协议，而SpringCloud则采用原始的Http协议，这无疑使Dubbo在通信方面强于SpringCloud，但Dubbo生态只解决了通信与服务的治理问题，其他则需要自研或者集成其它组件，因此是不完整的。可是Dubbo表示它并不是想要与SpringCloud竞争，只是想单纯的做一款RPC通信的框架。</p>
<h3 id="通信-对比Dubbo"><a href="#通信-对比Dubbo" class="headerlink" title="通信(对比Dubbo)"></a>通信(对比Dubbo)</h3><p>对于通信，SpringCloud采取的是使用RestTemplate的一个对象，通过客户端使用RequestMapping等方法传入客户端url，可以调用对象的方法，传入三个参数，分别为服务端url，传入的参数，返回的class对象来实现客户端任意网址访问服务端特地网址，可以保障安全性。而Dubbo则是通过@Reference注解来引用服务端的对象，直接调用对象中的方法，这种方式需要有相同的接口。</p>
<h3 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h3><p>为了解决服务很多，客户端如何访问的问题，SpringCloud Netflix采取了Zuul组件，Zuul其实是增加了一层api网关，类似nginx，反向代理的功能，不过Zuul自己增加了一些配合其他组件的特性。而Dubbo则没有这方面功能。</p>
<h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><p>Ribbon是为了解决负载均衡而产生的组件，是为了使服务器之间的压力更加平均，不至于造成某些服务器并发量特别大，而其他的服务器基本没什么人访问。常用的策略有轮询、随机等……<br>相比于Ribbon，还有一个社区版组件Feign，它的使用方式更符合java后端开发的习惯，它是以接口的方式来调用的。而Dubbo则没有这方面功能。</p>
<h3 id="Eureka-对比Zookeeper"><a href="#Eureka-对比Zookeeper" class="headerlink" title="Eureka(对比Zookeeper)"></a>Eureka(对比Zookeeper)</h3><p>Eureka是SpringCloud中用于解决服务注册与发现的组件，有一个监控界面用来查看集群部署以及服务的注册。<br>这里存在一个CAP原则。</p>
<blockquote>
<p>CAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p>
</blockquote>
<p>在这里容错性是必须要兼顾的，但鱼与熊掌不可兼得，在这里Eureka选择了AP原则，即首先保证了可用性和容错性，Eureka中集群之间的地位是平等且互相依赖的，有点类似于区块链，当一个服务器崩掉的时候并不会造成服务瘫痪，而是继续运转，与此同时Eureka的自我保护机制也会使崩掉的服务不会马上被杀死，而是继续保留等待它重新连接，因此在Eureka中服务可以保持长久可用，但数据不一定是最新的。<br>Zookeeper则是选择了CP原则，其有一个主服务器，下面有附属服务器，当一个服务器崩掉的时候则整个服务不可维持，但可以保证数据的准确性。</p>
<h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>Hystrix断路器是为了防止服务雪崩，以及服务降级操作，同样有一个监控界面用来观察服务的状态，例如一个微服务需要调用A服务，A又需要调用B，此时B服务不可用，如果不做处理则会报出404、500等错误，但有了Hystrix的熔断机制，我们可以运行另一套方案，此时可以给用户返回一个错误的信息，告诉用户现在服务器有错误，而不会任其超时或者报错。<br>服务降级则是在某个时间点，有些服务器并发很高，有些则没什么用户时，服务器比较空闲的服务可以给出一个提示告诉用户服务暂时关闭，让用户去其他地方办理业务，从而将更多的资源倾斜向资源更紧张的服务器。</p>
<h3 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h3><p>Spring Cloud Config通过客户端连接服务端，服务端连接远程服务器(如Git)实现远程动态修改配置，只需配置远程git的url等地址可以实现不修改源码，运维人员可以动态修改任意配置的操作。</p>
<h2 id="五大神器的分工合作"><a href="#五大神器的分工合作" class="headerlink" title="五大神器的分工合作"></a>五大神器的分工合作</h2><p>正是因为有这五大神器，使得SpringCloud可以使各大系统之间协调合作，使开发变得更加简单。<br><img src="https://img-blog.csdnimg.cn/20200717113736847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈微服务与分布式的过去与未来</title>
    <url>/post/fd332969.html</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p>
<p>随着java的不断演进，伴随着业务量的激增，必然会引领着技术的更新迭代。</p>
<p>早些年，互联网还没有那么普及，大多数应用仍停留在All in One ，即所有东西都糅合在一个大的系统中，这极大地增加了程序的耦合度，随着技术的演进，慢慢的出现了MVC三层架构，虽然极大地对一个庞大的系统进行了解耦，但是仍然无法很好的应对业务量逐步增大，一个服务器无法承受的问题，此时应对庞大的服务器压力，仍是选择增加服务器的数量来解决，但这又造成了不同地方的服务器人数不均衡，压力大小不一等许多问题，因此，MVC三层架构仍然是一种在一台机器上部署整个项目的架构，势必需要改进。</p>
<span id="more"></span>



<p>随着Martin Flower的一篇论文，微服务一词瞬间火爆，人们的视线也从对服务器的负载均衡的角度转向对业务的拆分，将单个的复杂业务转化为一个个简单的业务，每个业务之间相互独立又互不影响，渐渐地就产生了一种可以承载大多数并发的RPC架构。</p>
<p>而随着微服务的越来越多，也需要一种方式很好的统一管理这些微服务，因此SOA的面向服务的架构应运而生。<br><img src="https://img-blog.csdnimg.cn/20200713153531845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>说起微服务，下图可以非常形象的进行描述。<br><img src="https://img-blog.csdnimg.cn/20200713155028889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这种队服务进行拆分的方式也引起了很多问题。<br>首先如果将这些业务拆分成一个个微服务，并且在不同服务器中单独部署，每个服务负责单一模块，那么数据又应该怎么交互呢？</p>
<h2 id="微服务受到的挑战"><a href="#微服务受到的挑战" class="headerlink" title="微服务受到的挑战"></a>微服务受到的挑战</h2><p>任何一种新的东西出来，其可行性都是需要经受时间的考验的，而微服务目前还处于探索中，我们无法绝对的说SOA架构就是最好的，实际上如果业务比较简单的情况下完全没有必要使用微服务的架构，因为微服务存在数据通信的诸多问题，由于网络的不可靠性，如果不是因为一台服务器难以承受的高并发，在一台服务器上部署所有服务无疑是一种更好的选择。<br>但是如果业务量不断增大，必然会采用分布式的解决方案，对业务进行拆分，每个业务作为一个微服务来独立运行，而由于网络的不可靠性，会出现以下四个问题。<br>微服务的四个核心问题：</p>
<blockquote>
<ul>
<li>服务很多，客户端该如何访问？</li>
<li>众多的微服务该如何通信？</li>
<li>这么多服务该如何治理？</li>
<li>如果服务挂了该怎么办？</li>
</ul>
</blockquote>
<p>为了解决这些问题，出现了一系列的解决方案。</p>
<ol>
<li>Spring Cloud NetFlix       <blockquote>
<p>服务很多，客户端该如何访问？        使用api网关，使用了zuul组件。<br>众多的微服务该如何通信？      使用Feign，是一种基于Http的通信方式，这种方式是同步并阻塞的。<br>这么多服务该如何治理？   服务的注册与发现，使用了Eureka。<br>如果服务挂了该怎么办？    存在熔断机制，Hystrix。</p>
</blockquote>
</li>
</ol>
<p>这是一种一站式解决方案，可以解决上述四个问题。</p>
<ol start="2">
<li>Dubbo Zookeeper<blockquote>
<p>没有api网关。<br>Dubbo就是一套高性能的基于Java的RPC通信框架。<br>服务的注册与发现，使用了Zookeeper。<br>没有熔断机制。</p>
</blockquote>
</li>
</ol>
<p>这个方案并不完善，这种方案侧重于RPC通信。</p>
<ol start="3">
<li>Spring Cloud Alibaba</li>
</ol>
<p>这也是一种一站式解决方案，类似于Spring Cloud NetFlix ，并且更加简单。</p>
<p>因此只要解决了以下四个问题就可以称之为一套微服务生态。</p>
<blockquote>
<p>api ：主要解决服务路由问题<br>http、rpc：主要解决通信问题<br>服务的注册与发现：主要解决高可用性<br>熔断机制：主要解决服务降级问题，防止服务雪崩</p>
</blockquote>
<h2 id="微服务的未来"><a href="#微服务的未来" class="headerlink" title="微服务的未来"></a>微服务的未来</h2><p>随着微服务研究的深入，有一种叫做服务网格(Server Mesh)的新名词出现了，它将成为微服务的一个发展的分支。而Istio 解决了开发人员和运维人员所面临的从单体应用向分布式微服务架构转变的挑战。了解它是如何做到这一点的可以让我们更详细地理解 Istio 的服务网格。</p>
<h2 id="Dubbo和SpringCloud的对比"><a href="#Dubbo和SpringCloud的对比" class="headerlink" title="Dubbo和SpringCloud的对比"></a>Dubbo和SpringCloud的对比</h2><p>Dubbo和SpringCloud都是为了解决微服务的网络不可靠而产生的一套解决方案，Dubbo侧重点在通信上，致力于打造一款纯粹的rpc框架，而springcloud则是注重于微服务管理的生态，以及一些其他的服务治理等功能。</p>
<h3 id="Dubbo的通信方式"><a href="#Dubbo的通信方式" class="headerlink" title="Dubbo的通信方式"></a>Dubbo的通信方式</h3><p>对于主流的微服务解决方案，Dubbo相对于SpringCloud而言其优势主要体现在通信上，摒弃了传统的http的方式而采取了RPC通信，在通信方面显得更加强大。<br><img src="https://img-blog.csdnimg.cn/20200713162600358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Dubbo需要Consumer和Provider之间有共同的接口，消费者(用户)通过@Reference注解从远程引用生产者的对象，从而实现RPC(远程过程调用)的通信。</p>
<h3 id="SpringCloud的通信方式"><a href="#SpringCloud的通信方式" class="headerlink" title="SpringCloud的通信方式"></a>SpringCloud的通信方式</h3><p>但是SpringCloud拥有更加完整的生态，远程通信采用的是Http的方式，消费者只需要通过url来调用生产者的对应接口地址，来实现远程调用。<br>使用SpringCloud调用远程接口首先需要引入RestTemplate以供使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigBean</span> &#123;   <span class="comment">//@Configuration -- 相当于spring中的applicationContext.xml</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后使用RestTemplate中的方法传入远程url和特定参数即可实现Http调用远程接口。(远程端口8001，本地端口80)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者不应该有service层</span></span><br><span class="line">    <span class="comment">//RestTemplate... 里面有许多模板供我们调用，注册到Spring中</span></span><br><span class="line">    <span class="comment">//(url,实体:Map,Class&lt;T&gt; responseType)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REST_URL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Dept dept)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/add&quot;</span>,dept,Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/get/&quot;</span>+id,Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/list&quot;</span>,List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下为远程服务器controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptServiceImpl deptService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addDept</span><span class="params">(Dept dept)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">queryDept</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.queryDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">queryAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时只需要清楚接口url和参数即可通过restful风格访问80端口可以访问远程生产者提供的接口。</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot定时任务</title>
    <url>/post/bd46367b.html</url>
    <content><![CDATA[<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>SpringBoot定时任务非常简单，只需要两个注解即可实现。</p>
<blockquote>
<p>在springBoot主类中添加@EnableScheduling注解来实现开启定时功能</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启定时功能的注解</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootTestApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot07TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<span id="more"></span>



<blockquote>
<p>使用@Scheduled注解，通过cron表达式执行定时任务。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleService</span> &#123;</span><br><span class="line">    <span class="comment">//在特定时间执行这个方法</span></span><br><span class="line">    <span class="comment">//cron表达式</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;59 59 21 10 7 0-7&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行定时任务&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即可以在特定时间执行所需要的执行的方法。<br><img src="https://img-blog.csdnimg.cn/20200710221749783.png" alt="在这里插入图片描述"></p>
<h2 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h2><blockquote>
<p>(cron &#x3D; “59 59 21 10 7 0-7”)<br>后面六个参数分别为秒，分，时，日，月，星期，？为不确定，*为任意</p>
</blockquote>
]]></content>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot实现邮件发送</title>
    <url>/post/fd2c0e1.html</url>
    <content><![CDATA[<h2 id="邮件发送配置参数"><a href="#邮件发送配置参数" class="headerlink" title="邮件发送配置参数"></a>邮件发送配置参数</h2><blockquote>
<p>application.properties配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.mail.username=654658859@qq.com</span><br><span class="line">#此处若为qq邮件需要获取秘钥</span><br><span class="line">spring.mail.password=vxsbnbgmcindbcid</span><br><span class="line">spring.mail.host=smtp.qq.com</span><br><span class="line">#开启加密验证</span><br><span class="line">spring.mail.properties.mail.smtl.ssl.enable=true</span><br></pre></td></tr></table></figure>


<span id="more"></span>

<h3 id="秘钥获取"><a href="#秘钥获取" class="headerlink" title="秘钥获取"></a>秘钥获取</h3><p>以qq邮箱为例，按要求开启服务<br><img src="https://img-blog.csdnimg.cn/2020071017144933.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200710171522289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="创建邮件对象进行测试"><a href="#创建邮件对象进行测试" class="headerlink" title="创建邮件对象进行测试"></a>创建邮件对象进行测试</h2><p>简单的邮件只需要复给邮件相应的值set进去即可使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//简单的邮件</span></span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">mailMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        mailMessage.setSubject(<span class="string">&quot;你好，倔强100%&quot;</span>);</span><br><span class="line">        mailMessage.setText(<span class="string">&quot;啦啦啦!&quot;</span>);</span><br><span class="line">        mailMessage.setTo(<span class="string">&quot;654658859@qq.com&quot;</span>);</span><br><span class="line">        mailMessage.setFrom(<span class="string">&quot;654658859@qq.com&quot;</span>);</span><br><span class="line">        mailSender.send(mailMessage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p> 等待片刻即可收到邮件<br> <img src="https://img-blog.csdnimg.cn/20200710213519203.png" alt="在这里插入图片描述"><br>复杂的邮件则可对内部内容进行组装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">//复杂的邮件</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">//组装</span></span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//正文</span></span><br><span class="line">        helper.setSubject(<span class="string">&quot;倔强100%,你好&quot;</span>);</span><br><span class="line">        helper.setText(<span class="string">&quot;&lt;p style=&#x27;color:blue&#x27;&gt;啦啦啦啦啦!&lt;/p&gt;&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//附件</span></span><br><span class="line">        helper.addAttachment(<span class="string">&quot;哈士奇.jpg&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\admin\\Pictures\\Saved Pictures\\哈士奇.jpg&quot;</span>));</span><br><span class="line">        helper.addAttachment(<span class="string">&quot;包子.jpg&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\admin\\Pictures\\Saved Pictures\\包子.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        helper.setTo(<span class="string">&quot;654658859@qq.com&quot;</span>);</span><br><span class="line">        helper.setFrom(<span class="string">&quot;654658859@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>运行等待发送即可收到带有附件和样式的邮件<br><img src="https://img-blog.csdnimg.cn/20200710213656557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot异步任务实现方法</title>
    <url>/post/ad3999ab.html</url>
    <content><![CDATA[<h2 id="异步任务使用场景"><a href="#异步任务使用场景" class="headerlink" title="异步任务使用场景"></a>异步任务使用场景</h2><p>在很多情况下，比如邮件发送，文件上传或者下载的时候，由于时间较长，经常会出现用户需要很长时间才会得到响应，为了优化用户体验，比如先进行页面跳转，显示已经开始进行邮件发送或者下载上传文件等信息，等任务结束再返回成功信息，这就采取了异步的方式进行任务调度。</p>
<span id="more"></span>

<h2 id="异步任务的实现"><a href="#异步任务的实现" class="headerlink" title="异步任务的实现"></a>异步任务的实现</h2><p>首先我们可以模拟一个网站跳转的过程，假设某一个线程执行某个任务需要3秒，结束以后才会进行下一步，我们令线程休眠三秒，然后通过controller进行页面跳转，代码如下：</p>
<blockquote>
<p>Service层</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据正在处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Controller层</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        asyncService.hello();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时用户点击需要等待三秒才会跳转到新页面并显示OK，此时由于用户体验极差，大概率下用户会直接关闭该网页，因此需要通过多线程的方式来实现异步任务调度，而SpringBoot则可以使用更简便的方式来实现异步任务调度。我们只需要在<strong>Service</strong>层需要多线程处理的方法上加上@Async注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncService</span> &#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据正在处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在主启动类上加上**@EnableAsync**注解来开启异步注解功能即可执行异步任务调度，此时执行可立即跳转然后再执行hello方法来输出“数据正在处理”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootTestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动装配原理</title>
    <url>/post/6a8abce0.html</url>
    <content><![CDATA[<h2 id="自动装配简介"><a href="#自动装配简介" class="headerlink" title="自动装配简介"></a>自动装配简介</h2><p>SpringBoot相比于其它框架(如SpringMVC等)，最大的优势就是配置简单，易于操作，集成了大量类库，但却可以通过一个配置文件进行简单的操作。因此说SpringBoot的核心是自动装配也毫不为过，而SpringBoot的优势也在于自动装配，毕竟程序的发展的过程就是把手动的东西变成自动的，把复杂的东西变成简单的。</p>
<span id="more"></span>

<h2 id="核心依赖"><a href="#核心依赖" class="headerlink" title="核心依赖"></a>核心依赖</h2><p>首先我们来思考一个问题，SpringBoot能够集成这么多复杂的东西，并且简化配置，首先它的依赖是在哪里导入的？<br>根据经验，打开pom.xml查看依赖，发现此文件中并没有想象中的大量依赖，但是有一个父工程，一路点过去果然发现了大量jar包的管理，因此可以得出SpringBoot的核心依赖都配置在父工程（spring-boot-dependencies）中。SpringBoot中导入依赖是不需要写版本信息的，所有版本信息都在父工程中配置好了。<br><img src="https://img-blog.csdnimg.cn/2020062209512122.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200622095201925.png" alt="在这里插入图片描述"><br>资源过滤在spring-boot-starter-parent中，这三种配置文件类型也是SpringBoot主要配置类型。<br><img src="https://img-blog.csdnimg.cn/20200622095326438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><a href="https://blog.csdn.net/qq_40359381/article/details/106892934">yml使用方式传送门</a></p>
<h2 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h2><p>在pom.xml下面存在一个个启动器，即SpringBoot的启动场景，SpringBoot会将一个个启动场景全部封装成启动器，需要使用什么只需要导入对应启动器即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-*<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><p>除了配置以外，启动一个单独的SpringBoot项目只需要一个启动类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们观察到这个启动类由一个注解（@SpringBootApplication）和一个启动方法（run）来构成。<br>@SpringBootApplication标注了这个类是一个SpringBoot应用，这个注解也是自动装配的关键。而run()方法则决定了SpringBoot项目怎么运行。</p>
<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p>注解和反射是理解自动装配的基础。<br><a href="https://blog.csdn.net/qq_40359381/article/details/104853907">注解传送门</a><br><a href="https://blog.csdn.net/qq_40359381/article/details/106410107">反射传送门</a></p>
<p>去除以下四个基本注解，我们将自动装配的主线理一下。</p>
<blockquote>
<p>@Target<br>用于描述注解的使用范围<br>@Retention<br>表示需要什么级别保存该注释信息,用于描述注解的生命周期(SOURCE&lt;CLASS&lt;RUNTIME)<br>@Documented<br>说明该注解将被包含在javadoc中<br>@Inherited<br>说明子类可以继承父类中的该注解</p>
</blockquote>
<p>SpringBoot自动装配流程如下<br><img src="https://img-blog.csdnimg.cn/2020062311391766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>首先在spring-boot-autoconfigure-2.3.1.RELEASE.jar下面的META-INF&#x2F;spring.factories中配置了大量的配置类，其中@EnableConfigurationProperties可以获取配置的反射对象，反射对象中的@ConfigurationProperties定义了配置的前缀，以及类中的属性组成的配置信息与resource中的配置文件可配置项一一对应。</li>
<li>在启动SpringBoot时会加载大量的配置类，通过导入AutoConfigurationImportSelector.class的反射对象，通过getCandidateConfigurations()方法获取所有配置项的List，并转化为properties供我们使用，getCandidateConfigurations()方法中调用SpringFactoriesLoader.loadFactoryNames()返回一个类加载器信息，而类加载器通过loadSpringFactories(classLoader)方法获取系统和项目参数，并放入缓存中，返回到List中。</li>
<li>SpringBoot启动时会根据启动器的配置来动态的判断可使用配置，并将spring.factories中数据和配置文件一一绑定(yml&#x2F;properties)，从而达到配置文件自动装配的效果。</li>
</ul>
<h3 id="主启动类的运行"><a href="#主启动类的运行" class="headerlink" title="主启动类的运行"></a>主启动类的运行</h3><p>SpringBoot在启动时主要运行了一个SpringApplication.run(DemoApplication.class, args)方法，那么这个方法是怎么运行的呢？<br>SpringApplication类主要做了四件事情：</p>
<blockquote>
<ul>
<li>判断项目是普通项目还是web项目</li>
<li>查找并加载所有可用初始化器，设置到initializers属性中</li>
<li>找出所有应用程序监听器，设置到listeners属性中</li>
<li>推断并设置main方法的定义类，找到运行的主类</li>
</ul>
</blockquote>
<p>执行run()方法的时候会开启一个进程，进行一系列操作，即可访问。</p>
]]></content>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中yaml(yml)的使用</title>
    <url>/post/f70d93b7.html</url>
    <content><![CDATA[<h2 id="什么是yaml"><a href="#什么是yaml" class="headerlink" title="什么是yaml"></a>什么是yaml</h2><blockquote>
<p>yaml通俗来讲就是一种符合某种规范的数据的格式，类似xml、json,因为springboot的核心是自动装配，因此可以自动识别配置文件中特定格式的配置，而yaml相比于properties配置清晰而优点众多，因此springboot推荐使用yaml来进行配置。</p>
</blockquote>
<h2 id="yaml语法规范"><a href="#yaml语法规范" class="headerlink" title="yaml语法规范"></a>yaml语法规范</h2><blockquote>
<p>以下我们用一个实体类来做示范来说明yaml的语法规范</p>
</blockquote>
<ul>
<li>创建实体类Dog(偷懒使用lombok),添加@Component注解说明。<br><a href="https://blog.csdn.net/qq_40359381/article/details/106300295">lombok传送门</a></li>
</ul>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建Person类，添加@Component注解说明,使用@ConfigurationProperties(prefix &#x3D; “person”)绑定对应的yaml配置装配的类。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span> <span class="comment">//绑定yaml</span></span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">//数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Boolean marry;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用yaml给Person类赋值。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">小明</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">marry:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2020</span><span class="string">/06/21</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">唱歌</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">跳舞</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rap</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li>使用@Autowired自动装配并测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot02ConfigApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果输出：<br>Person(name&#x3D;小明, age&#x3D;3, marry&#x3D;false, birth&#x3D;Sun Jun 21 00:00:00 CST 2020, maps&#x3D;{k1&#x3D;v1, k2&#x3D;v2}, lists&#x3D;[唱歌, 跳舞, rap], dog&#x3D;Dog(name&#x3D;旺财, age&#x3D;1))</p>
</blockquote>
</li>
</ul>
<h2 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h2><p>根据上面示例在类上面添加@Validated 注解用来数据校验，则可以在对应的成员变量上添加一些条件来限制注入的值。<br>常用注解：<br><img src="https://img-blog.csdnimg.cn/20200621231915959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h2><p>springboot中很多地方都可以创建配置文件并且生效，他们之间的优先级为:</p>
<blockquote>
<ul>
<li>file:.&#x2F;config&#x2F; (当前项目路径config目录下);</li>
<li>file:.&#x2F; (当前项目路径下);</li>
<li>classpath:&#x2F;config&#x2F; (类路径config目录下);</li>
<li>classpath:&#x2F; (类路径config下).</li>
</ul>
</blockquote>
<p>而创建项目时默认的配置为配置优先级最低的classpath:&#x2F;（resources&#x2F;application.*），任何地方增加配置文件均可覆盖默认配置。</p>
<h2 id="多文件配置与yaml设置"><a href="#多文件配置与yaml设置" class="headerlink" title="多文件配置与yaml设置"></a>多文件配置与yaml设置</h2><p>在yaml中也可以分文档，只需要使用 <strong>- - -</strong> 则可以配置不同环境的参数，使用<strong>spring.profiles</strong>命名，不使用为默认，需要更换环境只需要使用<strong>spring.profiles.active</strong>进行激活即可。<br>例如不同环境配置不同端口，<strong>application.yaml</strong>配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>
<p>只需要使用active激活对应配置，即可动态修改配置。</p>
]]></content>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue路由使用实例</title>
    <url>/post/cb7915e5.html</url>
    <content><![CDATA[<h2 id="路由插件集成安装"><a href="#路由插件集成安装" class="headerlink" title="路由插件集成安装"></a>路由插件集成安装</h2><p>控制台执行</p>
<blockquote>
<p>npm install vue-router –save-dev</p>
</blockquote>
<span id="more"></span>

<h2 id="路由的作用"><a href="#路由的作用" class="headerlink" title="路由的作用"></a>路由的作用</h2><p>Vue作为纯前端工程，实现页面跳转路由必不可少，相当于java中的重定向和请求转发实现页面跳转。</p>
<blockquote>
<p>@RequestMapping(&#x2F;path)<br>public String hello(Model model){<br> &#x2F;&#x2F;封装数据<br> model.addAttribute(“msg”,”Hello SpringMvc”);<br> &#x2F;&#x2F;会被视图解析器处理<br> &#x2F;&#x2F;请求转发<br> return “hello”;<br> &#x2F;&#x2F;重定向<br> return “redirect:&#x2F;jsp&#x2F;hello”;<br>}</p>
</blockquote>
<h2 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a>路由的使用</h2><ul>
<li>新建两个vue组件（Content.vue，Main.vue）用来跳转,并导出组件以便其他地方引入。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>内容页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;Content&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;Main&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在index.js中安装配置路由跳转相关信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Content</span> <span class="keyword">from</span> <span class="string">&quot;../components/Content&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&quot;../components/Main&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装路由</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;内容页&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Content</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">Main</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在main.js中引入路由配置文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">//自动扫描路由配置</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">//配置路由</span></span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在App.vue中使用路由跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue-router<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--    控制路由--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/main&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/content&quot;</span>&gt;</span>内容页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--    控制页面展示--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">font-family</span>: <span class="string">&#x27;Avenir&#x27;</span>, Helvetica, Arial, sans-serif;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://img-blog.csdnimg.cn/20200620114645937.png" alt="在这里插入图片描述"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue工程webpack打包</title>
    <url>/post/b56bf4ba.html</url>
    <content><![CDATA[<h2 id="下载webpack"><a href="#下载webpack" class="headerlink" title="下载webpack"></a>下载webpack</h2><p>使用命令下载webpack相关插件</p>
<blockquote>
<p>npm install webpack -g<br>npm install webpack-cli -g</p>
</blockquote>
<p>查看版本号，显示出具体版本则下载成功</p>
<blockquote>
<p>webpack -v<br>webpack-cli -v</p>
</blockquote>
<span id="more"></span>



<h2 id="使用vue进行模块化开发"><a href="#使用vue进行模块化开发" class="headerlink" title="使用vue进行模块化开发"></a>使用vue进行模块化开发</h2><blockquote>
<p>新建hello.js暴露方法供其他js引用，可防止原生  <strong>&lt; script &gt;&lt; &#x2F;script &gt;</strong>  标签引入多个js方法重名的问题。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hello.js</span></span><br><span class="line"><span class="comment">//暴露一个方法</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;学习webpack&lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>新建main.js引入hello.js，则可以使用hello.js中的方法。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//引入hello.js存放在变量hello中</span></span><br><span class="line"><span class="keyword">let</span> hello = <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>)</span><br><span class="line">hello.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>新建webpack.config.js，注意名字一定要对，否则报错。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置打包目录</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./modules/main.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//打包出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;./js/bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Terminal 输入webpack,自动打包，生成bundle.js。或者输入webpack –watch可以打包后继续监听，实现热部署</p>
</blockquote>
<blockquote>
<p>新建index.html，导入打包后的js，进行测试。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/bundle.js&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>热部署实时更新页面内容，输入 <strong>学习webpack</strong>。</p>
</blockquote>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://img-blog.csdnimg.cn/20200619230405814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue生命钩子函数及axios的使用</title>
    <url>/post/ece3deda.html</url>
    <content><![CDATA[<h2 id="vue简介"><a href="#vue简介" class="headerlink" title="vue简介"></a>vue简介</h2><p>Angular、React、Vue并称为前端三大框架，Angular最大的特点是把后端的一些开发模式移植到前端来实现，如MVC、依赖注入等，React得益于其创新式的VirtualDOM，Vue则借鉴了前辈angular和react的特点，是一套用于构建用户界面的渐进式JavaScript框架。</p>
<span id="more"></span>



<h2 id="vue实例的生命周期"><a href="#vue实例的生命周期" class="headerlink" title="vue实例的生命周期"></a>vue实例的生命周期</h2><p>正如很多对象都有自己的从创建到销毁的一整套生命周期，vue也有属于自己的一套生命周期。<br><img src="https://img-blog.csdnimg.cn/20200619124047135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>我们只需要清楚vue实例每个阶段所做的一些事情即可像spring AOP一样在对应的钩子上执行相对应的处理就可以将所需要的操作横切进去。<br>为了验证vue实例数据是在哪一步创建的，我做了以下测试。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;&quot;初始数据&quot;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;beforeCreate&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;created&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;beforeMount&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;mounted&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;beforeUpdate&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updated</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;updated&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;beforeDestroy&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">destroy</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;destroy&quot;</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试结果为弹出mounted之后页面显示数据，因此可以得出mounted之后页面进行渲染，而vm对象即挂载到图中圆圈中的一个钩子函数。<br><img src="https://img-blog.csdnimg.cn/20200619125301870.png" alt="在这里插入图片描述"></p>
<h2 id="axios的使用"><a href="#axios的使用" class="headerlink" title="axios的使用"></a>axios的使用</h2><p>axios类似于ajax请求，是进行数据交互的一种方式，由前面得知数据是在mounted后初始化的，因此可以在mounted()钩子函数中获取初始化数据，在updated以后对数据进行更新。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;&quot;初始数据&quot;&#125;&#125;</span><br><span class="line">    &#123;&#123;info&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">info</span>:&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;beforeCreate&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;created&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;beforeMount&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;mounted&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">get</span>(<span class="string">&#x27;data.json&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="variable language_">this</span>.<span class="property">info</span> = response.<span class="property">data</span>))</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;beforeUpdate&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updated</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;updated&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;beforeDestroy&quot;</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">destroy</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;destroy&quot;</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>数据在updated以后显示，因此更加确信vm中实现的双向绑定以及数据操作等功能是挂载在beforeUpdate和updated之间的一个钩子函数。</p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC运行原理</title>
    <url>/post/d9d8b6a5.html</url>
    <content><![CDATA[<h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h2><p>SpringMVC框架的出现就是为了简化开发，减少servlet的配置，将一些需要我们手动配置的内容进行简化，主要是优化servlet部分的代码。首先我们来看下SpringMVC底层架构图：<br><img src="https://img-blog.csdnimg.cn/20200601141151525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>本文主要结合架构图对代码进行讲解。</p>
<span id="more"></span>



<h2 id="DispatchServlet拦截请求-步骤1"><a href="#DispatchServlet拦截请求-步骤1" class="headerlink" title="DispatchServlet拦截请求(步骤1)"></a>DispatchServlet拦截请求(步骤1)</h2><blockquote>
<p>首先我们通过配置web.xml,在init时开启DispatchServlet，使DispatchServlet拦截根目录下所有请求并找到spring配置文件。</p>
</blockquote>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置DispatchServlet，这是SpringMVC的核心:请求分发器，前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        DispatcherServlet要绑定spring的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        启动级别:1  init时启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/:只匹配所有的请求,不会匹配jsp页面</span></span><br><span class="line"><span class="comment">/*:匹配所有请求,包括jsp页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    SpringMVC过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring核心配置文件"><a href="#Spring核心配置文件" class="headerlink" title="Spring核心配置文件"></a>Spring核心配置文件</h2><blockquote>
<p>根据Spring配置文件springmvc-servlet.xml来配置HandlerMapping（处理器映射器）、HandlerAdapter（处理器适配器）、ViewResolver（视图解析器）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    处理器映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200601142855752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="HandlerMapping的作用-步骤2、3、4"><a href="#HandlerMapping的作用-步骤2、3、4" class="headerlink" title="HandlerMapping的作用(步骤2、3、4)"></a>HandlerMapping的作用(步骤2、3、4)</h2><p>映射 地址和HandlerAdapter的关系。</p>
<h2 id="HandlerAdapter的作用-步骤5、6、7、8"><a href="#HandlerAdapter的作用-步骤5、6、7、8" class="headerlink" title="HandlerAdapter的作用(步骤5、6、7、8)"></a>HandlerAdapter的作用(步骤5、6、7、8)</h2><p>HandlerAdapter（处理器适配器）通过ModelAndView来处理接收发送业务数据和跳转目录。</p>
<ul>
<li>实现Controller接口</li>
<li>通过ModelAndView来处理数据，并返回给DispatchServlet<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//业务代码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;HelloSpringMVC&quot;</span>;</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,result);</span><br><span class="line">        <span class="comment">//视图跳转</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
可以将ModelAndView大体上理解为一个map，通过addObject来增加键值对信息，setViewName用来存跳转地址信息。</li>
</ul>
<h2 id="ViewResolver的作用-步骤9、10、11、12"><a href="#ViewResolver的作用-步骤9、10、11、12" class="headerlink" title="ViewResolver的作用(步骤9、10、11、12)"></a>ViewResolver的作用(步骤9、10、11、12)</h2><p>ViewResolver可以将获取的视图信息进行拼接，拼接为最终地址进行跳转：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如从ModelAndView 中取出test拼接为<strong>WEB-INF&#x2F;jsp&#x2F;test.jsp</strong>,跳转到对应目录。</p>
<h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>springmvc-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    自动扫描包，让指定包下的注解生效，由IOC容器统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    让Spring MVC不处理静态资源 .css .js .html等--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    支持mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在com.example.controller包下的类添加@Controller注解，可以省去映射配置，改为注解配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;h1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;h2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello SpringMvc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//会被视图解析器处理</span></span><br><span class="line">        <span class="comment">//请求转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/jsp/hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如以上代码，访问 <strong>ip:port&#x2F;h1&#x2F;h2</strong> 则会跳转到&#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp页面。</p>
<p>因此，使用注解开发的话，配置文件可以不用变，只需要专注于写业务代码，即@Controller注解标注的类中的方法。而不同的方法@RequestMapping的value不同return不同的值，即可实现不同路径跳转不同界面，代码即可简化很多。</p>
]]></content>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-Spring整合配置汇总</title>
    <url>/post/2f88694f.html</url>
    <content><![CDATA[<h3 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h3><p>文件名：pom.xml</p>
<ul>
<li>maven依赖包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>





<ul>
<li>支持Idea在java包下加载xml文件,防止报错<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h3><p>文件名：mybatis-config.xml</p>
<ul>
<li>配置Mybatis配置文件(也可以在Spring中配置)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.example.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h3></li>
<li>Spring配置文件 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DataSource:使用Spring数据源替换Mybatis配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定Mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/example/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionTemplate,即mybatis里的sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionTemplate类里面没有set方法，因此只能使用构造器注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    开启声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    结合AOP实现事物的植入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置事物通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置给哪些方法使用事务--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            propagation：事物的传播特性：共7种--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置事物的切入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.example.mapper.UserMapper.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中sqlSession可以不配</p>
</blockquote>
</li>
</ul>
<h3 id="整合配置文件，用于管理Mapper中的类（mybatis-config-xml）"><a href="#整合配置文件，用于管理Mapper中的类（mybatis-config-xml）" class="headerlink" title="整合配置文件，用于管理Mapper中的类（mybatis-config.xml）"></a>整合配置文件，用于管理Mapper中的类（mybatis-config.xml）</h3><ul>
<li>配置sqlSession</li>
</ul>
<p>文件名：mybatis-config.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-config.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;userMapper&quot; class=&quot;com.example.mapper.UserMapperImpl&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>userMapperImpl(通过sqlSessionTemplate来操作)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有操作通过sqlSessionTemplate来操作</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.queryUser();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不配置sqlSession</li>
</ul>
<p>文件名：mybatis-config.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-config.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;userMapper&quot; class=&quot;com.example.mapper.UserMapperImpl&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;sqlSession&quot; ref=&quot;sqlSession&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>userMapperImpl(通过sqlSessionFactory来操作，继承SqlSessionDaoSupport类,getSqlSession()获得sqlSession对象)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUser</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="comment">//获取Mapper的接口</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//从Mybatis的Mapper.xml中查询数据</span></span><br><span class="line">        List&lt;User&gt; users = mapper.queryUser();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring AOP</title>
    <url>/post/655d86b3.html</url>
    <content><![CDATA[<h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h2><blockquote>
<p>Spring AOP又称为面向切面编程，主要是针对一个接口，将它当做一个切面，对切面的两面进行一系列操作的过程，表现在程序上为一个接口中有一系列方法，所有这些方法构成了一个面，在执行每个方法前都执行一段代码则可以看做在切面上面操作，在执行每个方法后执行一串代码则视为在切面下面操作。</p>
</blockquote>
<p>AOP的底层实现方式为动态代理模式：<br><a href="https://blog.csdn.net/qq_40359381/article/details/106412281">设计模式之代理模式(戏说代理模式)</a><br>动态代理模式的底层实现表现为Java反射机制：<br><a href="https://blog.csdn.net/qq_40359381/article/details/106410107">Java反射机制详解</a></p>
<span id="more"></span>

<h3 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h3><p>导入AOP需要的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--maven--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--applicationContext.xml头文件--&gt;</span></span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">http://www.springframework.org/schema/aop</span><br><span class="line">https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>首先定义一个切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用Spring API接口实现</li>
</ul>
<p>继承Spring的一些接口来实现动态代理，本质是使用Proxy类得到代理实例，Java的InvocationHandler接口自动生成代理类，并调用   invoke(Object proxy, Method method, Object[] args)   方法来处理代理实例并返回结果。</p>
<p>切面前：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeforeLog</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//method：要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//args：执行的方法参数</span></span><br><span class="line">    <span class="comment">//target：目标对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getSimpleName()+<span class="string">&quot;类的&quot;</span>+method.getName()+<span class="string">&quot;()方法被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>切面后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">	<span class="comment">//method：要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//args：执行的方法参数</span></span><br><span class="line">    <span class="comment">//target：目标对象</span></span><br><span class="line">    <span class="comment">//returnValue：返回结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+target.getClass().getSimpleName()+<span class="string">&quot;类的&quot;</span>+method.getName()+<span class="string">&quot;方法,返回结果为：&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>applicationContext.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.log.BeforeLog&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.example.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        执行环绕增加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用自定义切面来实现AOP</li>
</ul>
<p>自定义类而非实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;操作前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;操作后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>applicationContext.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        自定义切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.example.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用注解实现</li>
</ul>
<p>使用注解设置切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Annotation</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;操作前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.example.service.UserServiceImpl.delete(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>applicationContext.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.diy.Annotation&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--增加注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//使用动态代理代理的是接口</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之代理模式(戏说代理模式)</title>
    <url>/post/a6d2ab40.html</url>
    <content><![CDATA[<h2 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h2><blockquote>
<p>代理模式是一种设计模式，分为静态代理和动态代理两种，当需要在一整套开发流程中嵌入式的增加功能又不改变代码结构的情况下，就可以将一些业务交给代理对象来做，代理模式也是Spring AOP的核心。</p>
</blockquote>
<span id="more"></span>



<p><strong>以下故事纯属虚构</strong></p>
<blockquote>
<p>我们来看以下这个例子，首先我们有一套完整的业务流程(增删改查)。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个时候领导突然需要在每一个方法前增加一些操作(手动打一些日志)。<br>这个时候心想，如此简单的任务，真是太轻松了~~~~~</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误示范，请勿模仿</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="comment">//假装是日志</span></span><br><span class="line">    	System.out.println(<span class="string">&quot;使用了add方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="comment">//假装是日志</span></span><br><span class="line">    	System.out.println(<span class="string">&quot;使用了delete方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="comment">//假装是日志</span></span><br><span class="line">    	System.out.println(<span class="string">&quot;使用了update方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="comment">//假装是日志</span></span><br><span class="line">    	System.out.println(<span class="string">&quot;使用了query方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个时候，领导又站了出来，这个日志的格式需要换一下，将<strong>使用了XXX方法</strong>改成<strong>调用了XXX方法</strong>，看着成百上千的方法，陷入了沉思，Emmm…<br>果然老话说得好，祖传代码不能碰！<br>看着这复用率极高的代码，怎么办呢？</p>
</blockquote>
<h3 id="静态代理的实现"><a href="#静态代理的实现" class="headerlink" title="静态代理的实现"></a>静态代理的实现</h3><blockquote>
<p>于是乎，为了将原有的高耦合代码提取出一个类，但是又不改动之前的类，就需要使用代理类来进行操作。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserServiceImpl userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了&quot;</span>+msg+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用这个代理类就可以不改动其他方法的情况下通过代理类调用这些方法了，并解决了日志问题。<br>Emmm…测试一下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="type">UserServiceProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceProxy</span>();</span><br><span class="line">        proxy.setUserService(userService);</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>果然可以，但是看着成百上千的业务类，每一个类都要写一个代理类，下面这东西好像是写死的。那不是又要写成百上千的代理类来代理业务类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserServiceImpl userService)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userService = userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一个优秀的程序员是不允许这种高耦合度的代码存在的(这改下来可能要累死)。<br>沉思中~~~~~</p>
</blockquote>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><blockquote>
<p>要想办法把代理类弄成动态生成的啊！<br>咦！好像可以通过动态代理来实现</p>
</blockquote>
<ul>
<li>实现InvocationHandler接口</li>
<li>生成代理类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用这个类自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到的代理类（代理实例在这里被动态生成）</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理代理实例并返回结果</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="comment">//通过反射获得方法并通过invoke(反射对象，参数)执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+msg+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>好像是这么回事，测一下……</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="comment">//代理角色(不存在)</span></span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">        <span class="comment">//设置代理对象</span></span><br><span class="line">        pih.setTarget(userService);</span><br><span class="line">        <span class="comment">//动态生成代理实例</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) pih.getProxy();</span><br><span class="line">        proxy.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<blockquote>
<p>执行了delete方法<br>删除了一个用户</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>仔细看了看，这个InvocationHandler实现类里面的invoke方法没有调用过啊，结果怎么出来的？</p>
<p><img src="https://img-blog.csdnimg.cn/20200528211348194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>参考jdk帮助文档</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200528210201701.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>因此在proxy代理实例中调用方法的时候，调用了invoke方法。<br><del>？？？？？</del><br>问号消失了！</p>
</blockquote>
<p>动态代理解决了静态代理中每个业务层都需要一个代理类来代理的问题，降低了代码的耦合度。</p>
<h3 id="结尾附上反射传送门"><a href="#结尾附上反射传送门" class="headerlink" title="结尾附上反射传送门"></a>结尾附上反射传送门</h3><p><a href="https://blog.csdn.net/qq_40359381/article/details/106410107">Java反射机制详解</a></p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射机制详解</title>
    <url>/post/3a00cd14.html</url>
    <content><![CDATA[<h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><ul>
<li>反射是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API 取的任何类的内部信息，并能够操作任意对象的内部属性和方法。</li>
<li>加载完类之后再堆内存的方法区会产生一个class类型的对象，这个对象包含了完整的类结构信息。这个对象就像一面镜子，透过这个对象可以看到类的结构，所以形象的将它称之为反射。</li>
</ul>
<p>反射的过程与正常的执行过程相反。</p>
<ul>
<li>正常方式 ：引入包名和类名&#x3D;&gt;通过new实例化&#x3D;&gt;取得实例化对象</li>
<li>反射方式：实例化对象&#x3D;&gt;获得getClass()方法&#x3D;&gt;得到包名和类名</li>
</ul>
<span id="more"></span>



<h2 id="反射相关的API"><a href="#反射相关的API" class="headerlink" title="反射相关的API"></a>反射相关的API</h2><blockquote>
<p>java.lang.Class : 代表一个类</p>
<p>java.lang.reflect.Method :代表类的方法</p>
<p>java.lang.reflect.Field :代表类的成员变量</p>
<p>java.lang.reflect.Constructor :代表类的构造器</p>
<p>……</p>
</blockquote>
<p>在Object类中定义了如下方法，此方法被所有类继承</p>
<blockquote>
<p>public final Class getClass()</p>
</blockquote>
<p>获得Class对象的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//已知全类名</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.example.reflect.User&quot;</span>);</span><br><span class="line"><span class="comment">//已知某个类的实例</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> user.getClass();</span><br><span class="line"><span class="comment">//已知具体的类</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> User.class;</span><br><span class="line"><span class="comment">//获得父类Class</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c0</span> <span class="operator">=</span> c.getSuperclass();</span><br></pre></td></tr></table></figure>

<p>哪些类型拥有class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class;        <span class="comment">//类</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class;    <span class="comment">//接口</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class;      <span class="comment">//一维数组</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class;       <span class="comment">//二维数组</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Override.class;      <span class="comment">//注解</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span> ElementType.class;   <span class="comment">//枚举</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Integer.class;       <span class="comment">//基本数据类型</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class;          <span class="comment">//void</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class;         <span class="comment">//class</span></span><br></pre></td></tr></table></figure>

<p>只要元素类型一样，就是同一个class</p>
<h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><ul>
<li>类的加载：将类的class文件读入内存，并为之创建一个java.lang.Class对象，此过程由类加载器完成（生成Class对象）</li>
<li>类的链接：将类的数据合并到jre中（为类变量static静态代码块分配内存）</li>
<li>类的初始化：JVM对类进行初始化（执行类构造器<clinit>()方法为对象赋值）</li>
</ul>
<h2 id="类的运行时结构"><a href="#类的运行时结构" class="headerlink" title="类的运行时结构"></a>类的运行时结构</h2><p>测试类：User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.reflect;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> id, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：通过反射获取class对象里的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetClassInfo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">		<span class="comment">//获取类的三种方法</span></span><br><span class="line"><span class="comment">//        Class c = Class.forName(&quot;com.example.reflect.User&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> User.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        User user = new User();</span></span><br><span class="line"><span class="comment">//        Class c = user.getClass();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取包名加类名</span></span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">        <span class="comment">//获得类名</span></span><br><span class="line">        System.out.println(c.getSimpleName());</span><br><span class="line">        <span class="comment">//获得类的属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------分割线(类的公共属性)---------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field[] fields = c.getFields();        <span class="comment">//只能获取public属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;类的公共属性：&quot;</span>+field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------分割线(类的全部属性)---------------------------------&quot;</span>);</span><br><span class="line">        fields = c.getDeclaredFields();  <span class="comment">//可以获取全部属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;类的全部属性：&quot;</span>+field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------分割线(类的特定属性)---------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;类的特定属性：&quot;</span>+c.getDeclaredField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------分割线(本类以及父类的公共方法)---------------------------------&quot;</span>);</span><br><span class="line">        Method[] methods = c.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的公共方法：&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------分割线(本类的全部方法)---------------------------------&quot;</span>);</span><br><span class="line">        methods = c.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类的全部方法：&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------分割线(本类的特定方法)---------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;本类的特定方法：&quot;</span>+c.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;本类的特定方法：&quot;</span>+c.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------分割线(获得公共构造器)---------------------------------&quot;</span>);</span><br><span class="line">        Constructor[] constructors = c.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;公共构造器:&quot;</span>+constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------分割线(获得全部构造器)---------------------------------&quot;</span>);</span><br><span class="line">        constructors = c.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;全部构造器:&quot;</span>+constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------分割线(获得指定构造器)---------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;有参构造&quot;</span>+c.getConstructor(String.class, <span class="type">int</span>.class, <span class="type">int</span>.class));</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>+c.getConstructor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<blockquote>
<p>类的包名加类名：com.example.reflect.User<br>类名：User<br>——————————–分割线(类的公共属性)———————————<br>——————————–分割线(类的全部属性)———————————<br>类的全部属性：private java.lang.String com.example.reflect.User.name<br>类的全部属性：private int com.example.reflect.User.id<br>类的全部属性：private int com.example.reflect.User.age<br>——————————–分割线(类的特定属性)———————————<br>类的特定属性：private java.lang.String com.example.reflect.User.name<br>——————————–分割线(本类以及父类的公共方法)———————————<br>本类以及父类的公共方法：public java.lang.String com.example.reflect.User.toString()<br>本类以及父类的公共方法：public java.lang.String com.example.reflect.User.getName()<br>本类以及父类的公共方法：public int com.example.reflect.User.getId()<br>本类以及父类的公共方法：public void com.example.reflect.User.setName(java.lang.String)<br>本类以及父类的公共方法：public void com.example.reflect.User.setAge(int)<br>本类以及父类的公共方法：public void com.example.reflect.User.setId(int)<br>本类以及父类的公共方法：public int com.example.reflect.User.getAge()<br>本类以及父类的公共方法：public final void java.lang.Object.wait() throws java.lang.InterruptedException<br>本类以及父类的公共方法：public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException<br>本类以及父类的公共方法：public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException<br>本类以及父类的公共方法：public boolean java.lang.Object.equals(java.lang.Object)<br>本类以及父类的公共方法：public native int java.lang.Object.hashCode()<br>本类以及父类的公共方法：public final native java.lang.Class java.lang.Object.getClass()<br>本类以及父类的公共方法：public final native void java.lang.Object.notify()<br>本类以及父类的公共方法：public final native void java.lang.Object.notifyAll()<br>——————————–分割线(本类的全部方法)———————————<br>本类的全部方法：public java.lang.String com.example.reflect.User.toString()<br>本类的全部方法：public java.lang.String com.example.reflect.User.getName()<br>本类的全部方法：public int com.example.reflect.User.getId()<br>本类的全部方法：public void com.example.reflect.User.setName(java.lang.String)<br>本类的全部方法：public void com.example.reflect.User.setAge(int)<br>本类的全部方法：public void com.example.reflect.User.setId(int)<br>本类的全部方法：public int com.example.reflect.User.getAge()<br>——————————–分割线(本类的特定方法)———————————<br>本类的特定方法：public java.lang.String com.example.reflect.User.getName()<br>本类的特定方法：public void com.example.reflect.User.setName(java.lang.String)<br>——————————–分割线(获得公共构造器)———————————<br>公共构造器:public com.example.reflect.User()<br>公共构造器:public com.example.reflect.User(java.lang.String,int,int)<br>——————————–分割线(获得全部构造器)———————————<br>全部构造器:public com.example.reflect.User()<br>全部构造器:public com.example.reflect.User(java.lang.String,int,int)<br>——————————–分割线(获得指定构造器)———————————<br>有参构造public com.example.reflect.User(java.lang.String,int,int)<br>无参构造public com.example.reflect.User()</p>
</blockquote>
<h2 id="class的使用"><a href="#class的使用" class="headerlink" title="class的使用"></a>class的使用</h2><p>获得class对象以后如何才能使用它呢？</p>
<ul>
<li>首先获得类的class对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.example.reflect.User&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过无参构造得到对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过无参构造器创建对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) c.newInstance();   <span class="comment">//本质是调用了类的无参构造器，没有无法构造无法创建</span></span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过有参构造得到对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过有参构造器创建对象</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) constructor.newInstance(<span class="string">&quot;香草拿铁&quot;</span>,  <span class="number">8</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过反射操作方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过无参构造器创建对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) c.newInstance();</span><br><span class="line"><span class="comment">//获取setName方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line"><span class="comment">//调用invoke方法给方法传递参数(对象，方法参数)</span></span><br><span class="line">setName.invoke(user,<span class="string">&quot;香草拿铁&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user.getName());</span><br></pre></td></tr></table></figure>

<ul>
<li>通过反射操作属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过无参构造器创建对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) c.newInstance();</span><br><span class="line"><span class="comment">//获取name属性</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//由于属性是private属性，因此需要添加权限才能修改</span></span><br><span class="line">name.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//给name属性赋值</span></span><br><span class="line">name.set(user,<span class="string">&quot;香草拿铁&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user.getName());</span><br></pre></td></tr></table></figure>

<h2 id="普通方式和反射方式性能对比"><a href="#普通方式和反射方式性能对比" class="headerlink" title="普通方式和反射方式性能对比"></a>普通方式和反射方式性能对比</h2><p>反射机制虽然功能强大，但在性能方面消耗资源的也比较多</p>
<p>测试同时调用一个方法使用的时间对比</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeTest</span> &#123;</span><br><span class="line">    <span class="comment">//普通方式调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> endTime-startTime;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方式执行时间:&quot;</span>+time+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射方式调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> user.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> endTime-startTime;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式执行时间:&quot;</span>+time+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式调用(关闭检测)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> user.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> endTime-startTime;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式(关闭检测)执行时间:&quot;</span>+time+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        test1();</span><br><span class="line">        test2();</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果分析：</p>
<blockquote>
<p>普通方式执行时间:4ms<br>反射方式执行时间:2679ms<br>反射方式(关闭检测)执行时间:1211ms</p>
</blockquote>
<p>很显然，使用反射机制调用时间更长，使用  <strong>反射获取的对象.setAccessible(true);</strong>  关闭检测可以适当提高性能，但却仍比普通方式要慢很多，因此一般情况下不建议大量使用反射机制。</p>
<h2 id="通过反射操作泛型"><a href="#通过反射操作泛型" class="headerlink" title="通过反射操作泛型"></a>通过反射操作泛型</h2><p>通过getGenericParameterTypes()和getGenericReturnType()方法可以获取参数和结果中的泛型信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">(Map&lt;String,User&gt; map, List&lt;String&gt; list)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,User&gt; <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test02&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> MyTest.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method01</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;test01&quot;</span>, Map.class, List.class);</span><br><span class="line">        Type[] genericParameterTypes = method01.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数值泛型信息:&quot;</span>+genericParameterType);</span><br><span class="line">            <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;参数值泛型内部参数信息:&quot;</span>+actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------我是分割线---------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method02</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;test02&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericReturnType</span> <span class="operator">=</span> method02.getGenericReturnType();</span><br><span class="line">        System.out.println(<span class="string">&quot;返回值泛型信息:&quot;</span>+genericReturnType);</span><br><span class="line">        <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;返回值泛型内部参数信息:&quot;</span>+actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：打印出Map和List的信息，以及Map和List内部参数信息</p>
<blockquote>
<p>参数值泛型信息:java.util.Map&lt;java.lang.String, com.example.reflect.User&gt;<br>参数值泛型内部参数信息:class java.lang.String<br>参数值泛型内部参数信息:class com.example.reflect.User<br>参数值泛型信息:java.util.List&lt;java.lang.String&gt;<br>参数值泛型内部参数信息:class java.lang.String<br>—————————————–我是分割线———————————————<br>返回值泛型信息:java.util.Map&lt;java.lang.String, com.example.reflect.User&gt;<br>返回值泛型内部参数信息:class java.lang.String<br>返回值泛型内部参数信息:class com.example.reflect.User</p>
</blockquote>
<h2 id="通过反射操作注解"><a href="#通过反射操作注解" class="headerlink" title="通过反射操作注解"></a>通过反射操作注解</h2><p>通过反射我们还可以获得自定义的一些注解的值。</p>
<ul>
<li>实现两个注解，分别为类注解与属性注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Table&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Filed&#123;</span><br><span class="line">    String <span class="title function_">columnName</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(&quot;db.user&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="meta">@Filed(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@Filed(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Filed(columnName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取注解中的值进行操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnotation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.example.reflect.User&quot;</span>);</span><br><span class="line">        Annotation[] annotations = c.getAnnotations();</span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;类注解对象：&quot;</span>+annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得注解的value值</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> (Table) c.getAnnotation(Table.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;类注解的值：&quot;</span>+table.value());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取特定属性的注解值</span></span><br><span class="line">        Field[] declaredFields = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------------属性名：&quot;</span>+declaredField.getName()+<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">            <span class="type">Filed</span> <span class="variable">annotation</span> <span class="operator">=</span> declaredField.getAnnotation(Filed.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;注解columnName:&quot;</span>+annotation.columnName());</span><br><span class="line">            System.out.println(<span class="string">&quot;注解type:&quot;</span>+annotation.type());</span><br><span class="line">            System.out.println(<span class="string">&quot;注解length:&quot;</span>+annotation.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>输出结果</li>
</ul>
<blockquote>
<p>类注解对象：@com.example.reflect.Table(value&#x3D;db.user)<br>类注解的值：db.user<br>————————–属性名：id———————————-<br>注解columnName:db_id<br>注解type:int<br>注解length:10<br>————————–属性名：age———————————-<br>注解columnName:db_age<br>注解type:int<br>注解length:10<br>————————–属性名：name———————————-<br>注解columnName:db_name<br>注解type:varchar<br>注解length:3</p>
</blockquote>
<p>使用这种方式就可以通过反射获取一些注解的信息，从而进行数据的操作，这种方式被大量运用在框架当中。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解开发</title>
    <url>/post/43fd2e45.html</url>
    <content><![CDATA[<h2 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h2><p>随着Spring功能的不断增加，被称作配置炼狱，一些简单的操作可以由注解来完成。<br>注解的使用</p>
<ul>
<li>在applicationContext.xml中导入注解依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>



<ul>
<li>注入bean可以使用@Component，注入属性可以使用@Value(“value”)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;香草拿铁&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>@Component的衍生注解<br>在web项目中会按照mvc的三层架构分层，@Component注解在每一层都有不同的表现形式<blockquote>
<p>dao层：@Repository<br>service层：@Service<br>controller层：@Controller</p>
</blockquote>
</li>
</ul>
<p>这四个注解都是代表将某个类注入到IOC容器中</p>
<ul>
<li>将其他类自动装配的注解</li>
</ul>
<blockquote>
<p>@Autowired优先通过byType方式实现，如果找不到使用@Qualifier通过byName方式实现。<br>@Resource优先使用byName方式实现，若找不到则自动使用byType方式实现。</p>
</blockquote>
<ul>
<li>设定作用域的注解<blockquote>
<p>@Scope(“singleton”) 单例模式<br>@Scope(“prototype”) 原型模式</p>
</blockquote>
</li>
</ul>
<h2 id="使用Java实现Bean的注入"><a href="#使用Java实现Bean的注入" class="headerlink" title="使用Java实现Bean的注入"></a>使用Java实现Bean的注入</h2><p>我们也可以用一种完全抛弃xml的方式来实现类的注入，我们依然用这个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;香草拿铁&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建config类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(config.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user.name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IOC</title>
    <url>/post/eff096d5.html</url>
    <content><![CDATA[<h2 id="什么是IOC？"><a href="#什么是IOC？" class="headerlink" title="什么是IOC？"></a>什么是IOC？</h2><p>IOC又称控制反转，它是一种Java的思想，这种思想在我看来是一种通过set方法来传递参数，而非重新new一个对象的方式来传递对象，这样当客户需求需要变更时，我们不需要像以前一样改动大量代码，而只需要改动一个参数即可以达到变更需求的作用，这样就把程序的控制权由程序猿反转为客户，从而达到高内聚，低耦合的作用。</p>
<h2 id="DI的实现"><a href="#DI的实现" class="headerlink" title="DI的实现"></a>DI的实现</h2><p>我认为DI(依赖注入)并不等同于IOC，DI仅仅是IOC的一种实现形式，Spring通过DI的方式将IOC思想凝聚，从而形成了DI，它将每个Java的Class类作为一个bean标签，存于一个xml文件中，也可以理解为将所有Class类以bean的形式注入到一个xml的容器中，每次需要的时候则去取出来。</p>
<span id="more"></span>



<h2 id="IOC做了一件什么事"><a href="#IOC做了一件什么事" class="headerlink" title="IOC做了一件什么事"></a>IOC做了一件什么事</h2><p>在传统的开发过程中，项目中的多个对象关系错综复杂，牵一发而动全身。<br><img src="https://img-blog.csdnimg.cn/20200527160711885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而有了Spring，通过IOC可以将所有的对象统一交给Spring管理，当配置的容器生效时，容器中所有的bean都将实例化，我们从中获取的时候将拿到所有的对象(bean)，我们只需要将自己需要的从中取出来就行了。<br><img src="https://img-blog.csdnimg.cn/20200527161050286.png" alt="在这里插入图片描述"><br>我们将IOC容器拿开，我们可以看到各个系统之间已经完全没有依赖关系了，我们就可以更加专注于系统本身业务的处理，而不必担心影响其它内容，因此IOC容器也被称为“粘合剂”。<br><img src="https://img-blog.csdnimg.cn/20200527161448251.png" alt="在这里插入图片描述"></p>
<h2 id="Spring-IOC的注入方式"><a href="#Spring-IOC的注入方式" class="headerlink" title="Spring IOC的注入方式"></a>Spring IOC的注入方式</h2><ol>
<li>新增xml配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>新增实体类(必须存在set方法才能注入成功)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBooks</span><span class="params">(String[] books)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getHobbies</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getCard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getGames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGames</span><span class="params">(Set&lt;String&gt; games)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWife</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWife</span><span class="params">(String wife)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(Properties info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address.toString() +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>向beans中注入对象以及各种属性<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;火星&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;紫色星辰&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;Address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java编程思想<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>高性能MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>深入理解JVM<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123123123&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;学生卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;321321321&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>dota<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>lol<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;班级&quot;</span>&gt;</span>302<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;Student&quot;</span>,Student.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> student.toString();</span><br><span class="line"></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="根据实体类参数不同采取不同注入方法"><a href="#根据实体类参数不同采取不同注入方法" class="headerlink" title="根据实体类参数不同采取不同注入方法"></a>根据实体类参数不同采取不同注入方法</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">		//通过无参构造注入</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">        //通过有参构造注入</span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>两者分别可以对应p标签(无参、普通构造)和c标签(有参、构造器构造)</p>
<ul>
<li><p>头文件导入所需依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>bean标签配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.pojo.Hello&quot;</span> <span class="attr">p:str</span>=<span class="string">&quot;Spring&quot;</span> <span class="attr">c:str</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="自动装配配置"><a href="#自动装配配置" class="headerlink" title="自动装配配置"></a>自动装配配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;dog&quot; ref=&quot;dog&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如上面代码，当有cat和dog两个bean存在时，为了简化去掉注释中的代码引入了自动装配。</p>
</li>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">http://www.springframework.org/schema/context</span><br></pre></td></tr></table></figure></li>
<li><p>通过autowire属性配置自动装配</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//查找上下文bean中的id进行自动匹配</span><br><span class="line">autowire=&quot;byName&quot;   </span><br><span class="line">//查找上下文bean中的class进行自动匹配</span><br><span class="line">autowire=&quot;byType&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>使用注解自动装配</p>
</li>
</ul>
<ol>
<li>添加注解依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在成员变量上添加注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(value = &quot;cat&quot;)</span></span><br><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> Cat cat;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(value = &quot;dog&quot;)</span></span><br><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>
 @Autowired和@Resource的区别：</li>
</ol>
<ul>
<li>@Autowired优先通过byType方式实现，如果找不到使用@Qualifier通过byName方式实现。</li>
<li>@Resource优先使用byName方式实现，若找不到则自动使用byType方式实现。</li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis缓存机制</title>
    <url>/post/ebe8c44.html</url>
    <content><![CDATA[<h2 id="Mybatis缓存分类"><a href="#Mybatis缓存分类" class="headerlink" title="Mybatis缓存分类"></a>Mybatis缓存分类</h2><p>Mybatis包含了查询缓存特性，可以非常方便的查询缓存以提高查询效率。Mybatis默认定义了两种级别的缓存，一级缓存和二级缓存。</p>
<ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
<span id="more"></span>

<h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>一级缓存的生命周期为从一个SqlSession被建立到这个SqlSession被销毁的过程，Mybatis默认为一级缓存，不需要开启，也无法关闭，在一个SqlSession的生命周期内查询同样的信息将会直接从缓存中获取，而不会从数据库再次查询。当查询不同信息的时候，或者进行增删改的时候需要刷新缓存，缓存失效，再次查询时需要从数据库重新获取。</p>
<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>二级缓存也叫全局缓存，作用域比一级缓存要高，是基于namespace级别的缓存，当配置了二级缓存时，一个会话查询一条数据，这个数据会优先存于一级缓存中，当会话消失时，一级缓存会将数据转交给二级缓存，而不是随会话一同消失，不同的mapper查出来的数据会被放在自己对应的缓存中。</p>
<h2 id="配置二级缓存"><a href="#配置二级缓存" class="headerlink" title="配置二级缓存"></a>配置二级缓存</h2><ul>
<li>开启全局缓存</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置cache<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//自定义参数示例</span><br><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
也可以使用默认配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>但使用默认配置时需要对实体类序列化(<strong>继承 Serializable接口</strong>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="客户端访问机制"><a href="#客户端访问机制" class="headerlink" title="客户端访问机制"></a>客户端访问机制</h2><blockquote>
<p>查询&#x3D;&gt;二级缓存&#x3D;&gt;一级缓存&#x3D;&gt;数据库</p>
</blockquote>
<h2 id="自定义缓存-ehcache"><a href="#自定义缓存-ehcache" class="headerlink" title="自定义缓存-ehcache"></a>自定义缓存-ehcache</h2><blockquote>
<p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存</p>
</blockquote>
<ul>
<li>ehcache的使用</li>
</ul>
<ol>
<li>导入maven依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置cache<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置缓存xml文件</li>
</ol>
<blockquote>
<p>如果想自定义缓存,只需实现Cache接口即可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok的使用以及优劣</title>
    <url>/post/fc0e2593.html</url>
    <content><![CDATA[<h2 id="Lombok简介"><a href="#Lombok简介" class="headerlink" title="Lombok简介"></a>Lombok简介</h2><p>Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。仅五个字符(@Data)就可以替换数百行代码从而产生干净，简洁且易于维护的Java类。</p>
<span id="more"></span>

<h2 id="Idea下载Lombok插件"><a href="#Idea下载Lombok插件" class="headerlink" title="Idea下载Lombok插件"></a>Idea下载Lombok插件</h2><ul>
<li>下载插件</li>
</ul>
<p> <img src="https://img-blog.csdnimg.cn/20200523145724149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200523145801376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>导入jar包</li>
</ul>
<p>maven导入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用Lombok优化实体类"><a href="#使用Lombok优化实体类" class="headerlink" title="使用Lombok优化实体类"></a>使用Lombok优化实体类</h2><p>原本实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用Lombok:<br><img src="https://img-blog.csdnimg.cn/20200523150537683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>@Data:：自动生成get、set、equals、hashCode、toString方法<br>@AllArgsConstructor：自动生成包含所有参数的有参构造方法<br>@NoArgsConstructor：自动生成无参构造方法</p>
</blockquote>
<h2 id="Lombok的优缺点"><a href="#Lombok的优缺点" class="headerlink" title="Lombok的优缺点"></a>Lombok的优缺点</h2><p>优点：</p>
<ul>
<li>能通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，提高了一定的开发效率</li>
<li>让代码变得简洁，不用过多的去关注相应的方法</li>
<li>属性做修改时，也简化了维护为这些属性所生成的getter&#x2F;setter方法等</li>
</ul>
<p>缺点：</p>
<ul>
<li>不支持多种参数构造器的重载</li>
<li>虽然省去了手动创建getter&#x2F;setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lombok作为一个工具，确实能够给我们带来便捷，可以减少很多无意义的代码，使我们更加关注其他层面的代码，但却降低了代码的可读性，也改变了代码设计的初衷，对于新手来说不太友好，不利于理解代码设计的逻辑思想，因此对于插件如何使用还是需要具体情况具体分析。</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis配置文件解析</title>
    <url>/post/febd0f91.html</url>
    <content><![CDATA[<h2 id="Mybatis配置文件中的配置"><a href="#Mybatis配置文件中的配置" class="headerlink" title="Mybatis配置文件中的配置"></a>Mybatis配置文件中的配置</h2><p>在Mybatis中<strong>mybatis-config.xml</strong>文件有以下配置选项<br><img src="https://img-blog.csdnimg.cn/20200521171342711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<span id="more"></span>

<h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><ol>
<li>properties（属性）</li>
</ol>
<p>在加载数据库的时候会引入很多属性，properties标签可以帮助我们通过引入外部配置文件的方式获得这些属性。（推荐）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>db.properties内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">123456</span></span><br></pre></td></tr></table></figure>


<p>同时也可以通过标签形式加入其他属性的值。（不推荐）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入配置文件，同时存在，优先取外部配置文件的值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 两者都存在的情况下优先取外部配置文件db.properties的值。</p>
<ol start="2">
<li>environments（环境配置）</li>
</ol>
<p>environments标签里面可以配置数据库环境，可同时配置多套，使用default属性来选择使用的哪一套环境，transactionManager为事务管理器，有<strong>JDBC</strong>和<strong>MANAGED</strong>两种。<br>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施。（推荐）<br>MANAGED – 这个配置几乎没做什么，一般用于适配某些老的框架。（不推荐）</p>
<p>dataSource 用于配置一些数据库连接池相关内容，一般使用<strong>POOLED</strong>。（推荐）<br>可以根据properties 中配置的值动态获取value的值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>类型别名（typeAliases）</li>
</ol>
<p>typeAliases一般有两种方式配置。</p>
<ul>
<li>直接给实体类取别名<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.example.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>给包内所有实体类取别名<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.example.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
别名推荐为类名的首字母小写，如<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//别名默认推荐为user</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
这种方法也可以使用注解**@Alias**自定义别名，如<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>settings（设置）</li>
</ol>
<p>完整的settings 内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>具体含义参考mybatis官方说明文档<br><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">官方文档传送门</a></p>
<ol start="5">
<li>mappers（映射器）</li>
</ol>
<p>常用的几种方法:</p>
<ul>
<li><p>resource引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/example/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方式不受包以及配置名字限制，任何情况都可以引用（推荐）</p>
</li>
<li><p>class引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.example.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方式需要接口与mapper.xml同名且在同一包下才可以引用（不推荐）</p>
</li>
<li><p>package 引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.example.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方式可以引入一个包内所有的配置文件，但也需要接口与mapper.xml同名且在同一包下才可以引用（不推荐）</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis的构建与常见问题</title>
    <url>/post/a4065779.html</url>
    <content><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><p>MyBatis 是一款优秀的持久层框架，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类(pojo)映射成数据库中的记录。</p>
<span id="more"></span>

<h2 id="Mybatis构建"><a href="#Mybatis构建" class="headerlink" title="Mybatis构建"></a>Mybatis构建</h2><ol>
<li><p>引入jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    mysql驱动    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    mybatis    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   junit     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>一个简单的Mybatis案例需要以上三个包，分别是mysql数据库相关包，mybatis相关包，junit用于进行单元测试。</p>
</blockquote>
</li>
<li><p>配置xml文件<br>在resources目录下添加<strong>mybatis-config.xml</strong>，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写mybatis公共类获得SqlSession对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SqlSessionFactory-&gt;sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//获取sqlSessionFactory</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="comment">// 你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Mybatis的诞生本质是为了简化JDBC代码，而公共类中通过sqlSessionFactory获得的sqlSession对象相当于JDBC中的connection对象，可以进行所有的sql操作。</p>
</blockquote>
</li>
<li><p>创建相应的数据库实体类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写Mapper接口，对应着web中的Dao层。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">	<span class="comment">//查询所有用户</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//增加用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="comment">//修改用户信息</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建Mapper.xml，通过xml进行动态配置的方式实现接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对应接口空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user(id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user set name = #&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>此时需要在之前的<strong>mybatis-config.xml</strong>配置中注册mapper，在configuration页签下加入mappers，进行mapper配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/example/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用junit进行单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            List&lt;User&gt; userList = userMapper.getUserList();</span><br><span class="line">            <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;哈哈&quot;</span>, <span class="string">&quot;123333&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.updateUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;嘻嘻&quot;</span>, <span class="string">&quot;123123&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;提交成功!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        mapper.deleteUser(<span class="number">4</span>);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2></li>
</ol>
<ul>
<li><p>使用maven创建项目，目录结构如下，默认的资源配置文件在resources文件夹下，如果xml配置在java文件夹下可能出现找不到资源的情况。<br><img src="https://img-blog.csdnimg.cn/20200521150537135.png" alt="在这里插入图片描述"><br>这是因为maven的约定大于配置原则造成的，如果需要在java中创建xml等文件，则需在pom.xml中添加如下配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Maven clean，重新运行。<br><img src="https://img-blog.csdnimg.cn/20200521151726584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后查看对应的class目录下是否出现。xml文件，如果出现了，则问题解决。<br><img src="https://img-blog.csdnimg.cn/20200521152103352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>某些mybatis版本如果url后面使用<strong>useSSL&#x3D;true</strong>则会报错，不加则会报出警告，改为<strong>useSSL&#x3D;false</strong>即可。</p>
</li>
<li><p>在xml中注释使用中文则会报错，这是因为编码的问题，xml中不是utf-8编码，则会转码成乱码，解决方法：File-&gt;settings-&gt;Editor-&gt;File Encodings，将所有编码改为UTF-8，保存以后中文注释就不会报错了。<br><img src="https://img-blog.csdnimg.cn/20200521151442959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器Filter的使用</title>
    <url>/post/cfab7251.html</url>
    <content><![CDATA[<h2 id="过滤器的实现"><a href="#过滤器的实现" class="headerlink" title="过滤器的实现"></a>过滤器的实现</h2><ul>
<li>过滤器的使用是在开发中比较常见的，在javaweb中过滤器的使用和servlet类似，首先在web.xml中注册过滤器。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<span id="more"></span>



<ul>
<li>实现Filter类</li>
<li>重写init(),doFilter(),destroy()方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行前...&quot;</span>);</span><br><span class="line">        <span class="comment">//让请求继续往下执行，如果没有则程序停止</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤器在服务器启动的时候初始化，在服务器关闭的时候销毁，实时监听请求信息。</p>
]]></content>
      <tags>
        <tag>Javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>请求转发和重定向</title>
    <url>/post/a4d293a7.html</url>
    <content><![CDATA[<ul>
<li><strong>请求转发</strong><blockquote>
<p>将客户端发送过来的请求信息转发出去，并将转发页面返回的信息返回到客户端。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>代码实现：<br>继承HttpServlet类，重写doGet和doPost方法，二者可以互相调用，使用getRequestDispatcher()方法进行转发</p>
</blockquote>
<span id="more"></span>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重定向<blockquote>
<p>收到客户端发送过来的请求信息，并告诉客户端去请求另一个服务。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>继承HttpServlet类，重写doGet和doPost方法，二者可以互相调用，使用sendRedirect()方法进行重定向</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/response/login.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h2><p>页面都会实现跳转，请求转发跳转之后url不会发生变化，而重定向url会变成真实访问的服务的地址。</p>
<p><strong>Status Code:</strong><br>请求转发：307<br>重定向：302<br>成功：200<br>找不到页面：404<br>服务器发生错误：500</p>
]]></content>
      <tags>
        <tag>Javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>网站是如何访问的</title>
    <url>/post/eb2ef1c6.html</url>
    <content><![CDATA[<p>在学习tomcat的时候，当配置好以后在浏览器输入</p>
<blockquote>
<p><a href="http://localhost:8080/">http://localhost:8080/</a></p>
</blockquote>
<p>会跳出tomcat首页，这些是通过tomcat中server.xml进行配置的，配置如下</p>
<blockquote>
<p>Host appBase&#x3D;”webapps” autoDeploy&#x3D;”true” name&#x3D;”localhost” unpackWARs&#x3D;”true”</p>
</blockquote>
<span id="more"></span>



<p>但当我们将localhost改成其他的值进行测试时，会发现并不能访问。</p>
<p>那么域名到底是通过怎么样的方式访问的呢？</p>
<ul>
<li>首先我们输入网站的ip&#x2F;域名以后，发送请求以后系统会根据这个ip去系统文件(windows下目录为<strong>C:\Windows\System32\drivers\etc\hosts</strong>)中查找是否注册。</li>
<li>如果已注册则返回信息到客户端，如果未注册，则去远程DNS查找是否存在ip&#x2F;域名(存放世界上所有的域名)，如果有则返回信息给客户端,否则显示网站无法访问。</li>
</ul>
]]></content>
      <tags>
        <tag>Javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>java实现TCP和HTTP通信</title>
    <url>/post/6c4c9a5b.html</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>近期公司产品对接外部系统，产品内部提供的接口是接收一个外部推送的xml报文并返回成功失败，实际情况是我们需要主动去发送请求并得到一个文件路径，我们去取的文件并从文件中取出信息再自己推送到产品中，而对接外部系统需要的是TCP通信，取文件又需要通过流来操作，推送到产品使用的是HTTP通信，而产品设计的时候并没有主动请求的功能，无奈之下只好自己动手研究TCP和HTTP的实现。</p>
<span id="more"></span>





<h2 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h2><blockquote>
<p>模拟实现客户端向服务端发送请求，并且服务端返回信息到客户端进行接收</p>
</blockquote>
<blockquote>
<p>客户端Demo</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpClientDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello\n&quot;</span> + <span class="string">&quot;世界&quot;</span>;</span><br><span class="line">        TCPClient(ip,port,str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">TCPClient</span><span class="params">(String ip , <span class="type">int</span> port , String str)</span>&#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建连接用于发送信息</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(ip, port);</span><br><span class="line">            <span class="comment">//创建使用默认大小的输出缓冲区的缓冲字符输出流。</span></span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">            out.write(str+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">            System.out.println(<span class="string">&quot;向服务器发送信息:\n&quot;</span>+str);</span><br><span class="line">            <span class="comment">//创建使用默认大小的输入缓冲区的缓冲字符输入流。</span></span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">            <span class="comment">//读取数据</span></span><br><span class="line">            String message=<span class="literal">null</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到服务器信息:&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>((message=in.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">                out.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;断开连接异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>服务端Demo</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpServerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TCPServer(<span class="number">9999</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">TCPServer</span><span class="params">(<span class="type">int</span> port)</span>&#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serversocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//创建连接用于接收信息</span></span><br><span class="line">                    serversocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">                    System.out.println(<span class="string">&quot;启动服务器....&quot;</span>);</span><br><span class="line">                    socket = serversocket.accept();</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端:&quot;</span>+socket.getInetAddress().getLocalHost()+<span class="string">&quot;已连接到服务器&quot;</span>);</span><br><span class="line">                    <span class="comment">//创建使用默认大小的输入缓冲区的缓冲字符输入流。</span></span><br><span class="line">                    in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">                    <span class="comment">//获取信息</span></span><br><span class="line">                    String message=<span class="literal">null</span>;</span><br><span class="line">                    System.out.println(<span class="string">&quot;收到客户端信息:&quot;</span>);</span><br><span class="line">                    <span class="keyword">while</span> ((message = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        System.out.println(message);</span><br><span class="line">                        <span class="comment">//创建使用默认大小的输出缓冲区的缓冲字符输出流。</span></span><br><span class="line">                        out = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">                        out.write(message + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                        out.flush();</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;断开连接&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                    in.close();</span><br><span class="line">                    socket.close();</span><br><span class="line">                    serversocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;断开连接异常&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="HTTP通信"><a href="#HTTP通信" class="headerlink" title="HTTP通信"></a>HTTP通信</h2><blockquote>
<p>HTTP请求Demo</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;…………&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;…………&quot;</span>;</span><br><span class="line">        doPost(url, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(String urlStr,String xmlInfo)</span> &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String str;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlStr);</span><br><span class="line">            conn = (HttpURLConnection)url.openConnection();</span><br><span class="line">            conn.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            conn.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">            conn.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">            conn.setConnectTimeout(<span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">            conn.setReadTimeout(<span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain; charset=UTF-8&quot;</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;logType&quot;</span>, <span class="string">&quot;base&quot;</span>);</span><br><span class="line"></span><br><span class="line">            conn.connect();</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(conn.getOutputStream(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            out.write(xmlInfo);</span><br><span class="line">            out.flush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;urlStr=&quot;</span> + urlStr);</span><br><span class="line">            System.out.println(<span class="string">&quot;xmlInfo=&quot;</span> + xmlInfo);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> conn.getResponseCode();</span><br><span class="line">            <span class="keyword">if</span> (responseCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//得到响应流</span></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> conn.getInputStream();</span><br><span class="line">                <span class="comment">//将响应流转换成字符串</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">returnLine</span> <span class="operator">=</span> getStringFromInputStream(inputStream);</span><br><span class="line">                str = <span class="string">&quot;Success,返回码为&quot;</span> + responseCode + <span class="string">&quot;,返回信息为&quot;</span> + <span class="string">&quot;---&quot;</span> + returnLine;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str = <span class="string">&quot;Error,返回码为&quot;</span> + responseCode + <span class="string">&quot;,返回信息为&quot;</span> + conn.getResponseMessage();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">                conn.disconnect();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;断开连接异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取返回输入流的信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getStringFromInputStream</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="comment">// 把流中的数据转换成字符串, 采用的编码是: utf-8</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> baos.toString();</span><br><span class="line">        baos.close();</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在实现HTTP通信的时候比较曲折，我首先是通过postman发的请求，确定发送的报文能够收到响应，并且能够正确返回，然而代码实现的时候一直报错，返回码是400，开始的时候打断点，在创建输入流的时候报错，后来百度看到这两行代码<strong>conn.setDoOutput(true);  conn.setDoInput(true);</strong> 用来设置允许输入输出流使用，加上后还是报400，相同报文和地址在postman上面成功返回，后来对比了下，发现是<strong>conn.setRequestProperty(“Content-Type”, “text&#x2F;plain; charset&#x3D;UTF-8”);</strong> 这行代码出了问题，之前看百度的时候查到<strong>Content-Type</strong>属性的用法，菜鸟教程中解释如图:<br><img src="https://img-blog.csdnimg.cn/20200429212422795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>第一反应我发的是xml报文，理所当然使用<strong>text&#x2F;xml</strong>，后来发现postman里面报文头<strong>Content-Type</strong>属性使用的是<strong>text&#x2F;plain</strong>，百度了一下。</p>
<blockquote>
<p>text&#x2F;plain是无格式正文<br>text&#x2F;xml忽略xml头所指定编码格式而默认采用us-ascii编码<br>application&#x2F;xml会根据xml头指定的编码格式来编码</p>
</blockquote>
<p>可能是因为text&#x2F;xml属性改变了数据编码导致无法识别，改为<strong>text&#x2F;plain</strong>成功返回200，得到响应报文，问题得以解决。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>jdbc中的sql注入问题</title>
    <url>/post/6f63b354.html</url>
    <content><![CDATA[<h2 id="jdbc连接数据库"><a href="#jdbc连接数据库" class="headerlink" title="jdbc连接数据库"></a>jdbc连接数据库</h2><blockquote>
<p>创建的db.properties工具类获取配置信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">user=root</span><br><span class="line">password=<span class="number">123456</span></span><br></pre></td></tr></table></figure>



<span id="more"></span>



<blockquote>
<p>创建util公共类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection conn, Statement st,ResultSet rs)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过jdbc操作数据库(使用Statement进行操作)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//建立连接</span></span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//执行sql的对象</span></span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VALUES(&#x27;4&#x27;,&#x27;zhaoliu&#x27;,&#x27;123456&#x27;,&#x27;zl@sina.com&#x27;,&#x27;2020-02-01&#x27;)&quot;</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> st.executeLargeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当时用以上方法进行操作时，在封装工具类的时候，进行字符串拼接操作可能会造成sql注入，导致程序极不安全，因此可以改用PreparedStatement进行操作，提前对sql预编译，然后赋值，而不是直接执行sql，从而加大了程序的安全性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//预编译</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//设置参数</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>,<span class="string">&quot;zl@sina.com&quot;</span>);</span><br><span class="line">            <span class="comment">//获取数据库可执行时间</span></span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()));</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>注解的使用</title>
    <url>/post/eda3d9a6.html</url>
    <content><![CDATA[<h2 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h2><p>在java中我们经常会看到很多注解，比如方法重写所用到的 <strong>@Override</strong>，不建议使用或者有更好的方法则可以使用 <strong>@Deprecated</strong>，镇压警告可以使用 **@SuppressWarnings(“all”)**。</p>
<span id="more"></span>

<h2 id="什么是元注解"><a href="#什么是元注解" class="headerlink" title="什么是元注解"></a>什么是元注解</h2><p>元注解就是用来负责定义其他注解的注解，java中定义了4个标准的元注解，分别为</p>
<ul>
<li><strong>@Target</strong> <blockquote>
<p>用于描述注解的使用范围</p>
</blockquote>
</li>
<li><strong>@Retention</strong> <blockquote>
<p>表示需要什么级别保存该注释信息,用于描述注解的生命周期(SOURCE&lt;CLASS&lt;RUNTIME)</p>
</blockquote>
</li>
<li><strong>@Documented</strong><blockquote>
<p>说明该注解将被包含在javadoc中</p>
</blockquote>
</li>
<li><strong>@Inherited</strong><blockquote>
<p>说明子类可以继承父类中的该注解</p>
</blockquote>
</li>
</ul>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>自定义注解需要使用 <strong>@interface</strong>关键词，使用此关键词将自动继承java.lang.annotation.Annotation接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(&quot;参数名&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="comment">//只有参数名为value时可以省略</span></span><br><span class="line">    <span class="meta">@MyAnnotation(&quot;参数名&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解的使用范围(类，方法)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="comment">//什么级别保存该注释信息(运行时)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    <span class="comment">//注解的参数  ：参数类型 + 参数名()</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">18</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>; <span class="comment">//默认为-1则代表不存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程的普通调用和线程池调用</title>
    <url>/post/9f047c75.html</url>
    <content><![CDATA[<h2 id="创建线程类"><a href="#创建线程类" class="headerlink" title="创建线程类"></a>创建线程类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<span id="more"></span>



<blockquote>
<p>线程的普通调用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用线程池调用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextThreadPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程中的生产者消费者问题</title>
    <url>/post/39bc7073.html</url>
    <content><![CDATA[<h1 id="多线程中的生产者消费者问题"><a href="#多线程中的生产者消费者问题" class="headerlink" title="多线程中的生产者消费者问题"></a>多线程中的生产者消费者问题</h1><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><p>在多线程编程过程中，时常会出现多个线程同时操作同一资源，导致了线程的不安全，此时可以用队列加锁的机制来解决。<br>使用<strong>synchronized</strong>关键词可以对一个方法或者一段代码块进行加锁，只有当锁定的线程执行完以后，其它线程才可以进行操作，从而解决线程同步问题，大大加强了线程的安全性。</p>
<span id="more"></span>



<h2 id="生产者消费者问题的提出"><a href="#生产者消费者问题的提出" class="headerlink" title="生产者消费者问题的提出"></a>生产者消费者问题的提出</h2><p>但是很多时候线程之间仅仅同步是不够的，还需要不同线程之间的消息传递通信，因此，提出了生产者消费者问题。</p>
<blockquote>
<p>问题的提出：<br>对于生产者，在生产产品之前需要通知消费者等待，当生产完需要通知消费者消费。<br>对于消费者，在消费完以后需要通知生产者生产产品，当产品为空时需要等待。</p>
</blockquote>
<p>当我们把生产者和消费者当做两个线程来看待时，就需要线程之间的通信才能解决上面的问题了。</p>
<h2 id="生产者消费者问题中需要用到的方法"><a href="#生产者消费者问题中需要用到的方法" class="headerlink" title="生产者消费者问题中需要用到的方法"></a>生产者消费者问题中需要用到的方法</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>方法说明</th>
</tr>
</thead>
<tbody><tr>
<td>wait()</td>
<td>使线程处于等待状态并且释放锁，直到其它线程通知</td>
</tr>
<tr>
<td>wait(long timeout)</td>
<td>指定等待的毫秒数</td>
</tr>
<tr>
<td>notify()</td>
<td>唤醒处于等待状态的线程</td>
</tr>
<tr>
<td>notifyAll()</td>
<td>唤醒同一对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>
</tr>
</tbody></table>
<h2 id="生产者消费者问题的解决方法"><a href="#生产者消费者问题的解决方法" class="headerlink" title="生产者消费者问题的解决方法"></a>生产者消费者问题的解决方法</h2><hr>
<ul>
<li><strong>管程法</strong><br>创建一个缓冲区，生产者和消费者对缓冲区中的资源进行调配操作。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynContainer</span> <span class="variable">synContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynContainer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Productor</span>(synContainer).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(synContainer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    SynContainer synContainer;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Productor</span><span class="params">(SynContainer synContainer)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.synContainer = synContainer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            synContainer.push(<span class="keyword">new</span> <span class="title class_">Chicken</span>(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了第&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    SynContainer synContainer;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SynContainer synContainer)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.synContainer = synContainer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了第&quot;</span>+synContainer.pop().id+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品(KFC)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chicken</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span>&#123;</span><br><span class="line">    <span class="comment">//容器</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> <span class="title class_">Chicken</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//生产者生产产品放入容器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Chicken chicken)</span>&#123;</span><br><span class="line">        <span class="comment">//判断缓冲区是否已满,如果满了，通知消费者消费</span></span><br><span class="line">        <span class="keyword">if</span>(count == chickens.length)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费者从容器取出产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//判断缓冲区是否为空。如果为空，通知生产者生产</span></span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="type">Chicken</span> <span class="variable">chicken</span> <span class="operator">=</span> chickens[count];</span><br><span class="line">        <span class="built_in">this</span>.notify();</span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li><strong>信号灯法</strong><br>通过一个信号灯标志来使线程等待或者唤醒线程。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TV</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TV</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Player</span>(tv).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Watcher</span>(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者(演员)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(TV tv)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.play(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者(观众)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Watcher</span><span class="params">(TV tv)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品(节目)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span>&#123;</span><br><span class="line">    String voice;           <span class="comment">//节目</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;    <span class="comment">//是否存在节目</span></span><br><span class="line">    <span class="comment">//演员表演</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String voice)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了:&quot;</span>+voice);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.voice = voice;</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//观众观看</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">watch</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;观众观看了:&quot;</span>+voice);</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程中的静态代理模式</title>
    <url>/post/bab0f5f6.html</url>
    <content><![CDATA[<h2 id="多线程的实现"><a href="#多线程的实现" class="headerlink" title="多线程的实现"></a>多线程的实现</h2><p>多线程常用的三种实现方法：</p>
<ul>
<li>继承Thread</li>
<li>实现Runnable接口</li>
<li>实现Callable接口</li>
</ul>
<span id="more"></span>

<h2 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h2><p>多线程的几种方法中，Thread类也实现了Runnable接口，因此本质都是实现了Runnable接口中run方法的重写。其中最常用的方式实现Runnable接口就是使用了静态代理模式，我们首先来看以下代码。</p>
<blockquote>
<p>首先定义一个接口类Study</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Study</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>再定义一个实体类Student来继承这个接口类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Study</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我爱学习！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后定义一个代理类Teacher也继承这个接口类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">Study</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Student name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(Student name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name.study();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后来测试一下这个方法的实现过程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Teacher</span>(student).study();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到通过Student类和Teacher类同时实现接口类Study可以使用Teacher类通过传入Student对象来调用Student中重写的study方法。这和多线程中我们所写的类以及Thread类同时实现接口类Runnable极其相似。</p>
<blockquote>
<p>下面对比多线程的实现。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现多线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(proxy).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对比上面可以发现我们把实体Student类比成我们要写的Proxy类，代理类Teacher类比成Thread代理类，接口类Study类比为Runnable类，而study()方法则类比成run()方法，而start()方法在官方api中的作用如下图，为调用run()方法。<br><img src="https://img-blog.csdnimg.cn/20200311012705244.png" alt="在这里插入图片描述"><br>通过以上类比我们可以发现多线程的实现正是通过Thread作为代理类，Runnable作为接口类，我们通过new出不同实体类的静态代理模式来实现的。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IO流实现文件复制</title>
    <url>/post/f31a18bb.html</url>
    <content><![CDATA[<h1 id="使用IO流实现文件复制"><a href="#使用IO流实现文件复制" class="headerlink" title="使用IO流实现文件复制"></a>使用IO流实现文件复制</h1><p>在学习了一些文件相关知识和io流的一些知识以后，写了个小测试类来实现文件和文件夹的创建和文件复制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Copy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建文件并输入内容</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\temp\\temp.txt&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\temp\\temp.txt&quot;</span>);</span><br><span class="line">            outputStream.write(<span class="string">&quot;hello world&quot;</span>.getBytes());</span><br><span class="line">            <span class="comment">//创建文件夹并在文件夹中创建文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\temp\\temp&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!file1.exists())&#123;</span><br><span class="line">                file1.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\temp\\temp\\temp.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!file1.exists())&#123;</span><br><span class="line">                file1.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//读出旧文件内容，写进新文件中</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">outputStream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\temp\\temp\\temp.txt&quot;</span>);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\temp\\temp.txt&quot;</span>);</span><br><span class="line">            <span class="type">int</span> ch;</span><br><span class="line">            <span class="keyword">while</span>((ch=fileInputStream.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println((<span class="type">char</span>)ch);</span><br><span class="line">                outputStream1.write(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">            outputStream1.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<span id="more"></span>



<p>在这个过程中也遇到了一些问题，因此记录下来，以供以后避坑。<br>首先，一开始，我在复制文件这一块是这么写的:</p>
<blockquote>
<p>while((fileInputStream.read()) !&#x3D; -1){<br>         System.out.println((char)fileInputStream.read());<br>         outputStream1.write(fileInputStream.read());<br>     }</p>
</blockquote>
<p>这样就导致读出来的文件内容只有一半，写入的和读出的还不一样。<br>经过一番尝试改成了这样,问题得到了解决。</p>
<blockquote>
<p>int ch;<br>     while((ch&#x3D;fileInputStream.read()) !&#x3D; -1){<br>         System.out.println((char)ch);<br>         outputStream1.write(ch);<br>     }</p>
</blockquote>
<p>原因在于fileInputStream.read()方法读取数据时，会使缓冲区数据减少一位，并返回一个经过编码的int型数字，由于while里面调用了一次方法，write里又调用了一次方法，所以导致打印出来的字符串和写入新文件的字符串都只有一半。问题得到解决。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA网络编程之UDP实例</title>
    <url>/post/1301c95c.html</url>
    <content><![CDATA[<h1 id="UDP简介"><a href="#UDP简介" class="headerlink" title="UDP简介"></a>UDP简介</h1><p>UDP协议是一种处于传输层的协议，主要是通过将数据从发送端打包发往接收端，并且服务端通过接收包来实现数据交互的。</p>
<p><em><strong>实现代码：</strong></em></p>
<p><strong>Client类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//建立socket连接</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">//创建包</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9090</span>;</span><br><span class="line">        <span class="comment">//数据、数组长度、发送对象</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, ip, port);</span><br><span class="line">        <span class="comment">//发送包</span></span><br><span class="line">        socket.send(packet);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<span id="more"></span>



<p><strong>Server类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建接收socket</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9090</span>);</span><br><span class="line">        <span class="comment">//创建数组用于接收</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">        <span class="comment">//接收包</span></span><br><span class="line">        socket.receive(packet);</span><br><span class="line">        System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA网络编程之TCP实例</title>
    <url>/post/ebfd406.html</url>
    <content><![CDATA[<h1 id="TCP简介"><a href="#TCP简介" class="headerlink" title="TCP简介"></a>TCP简介</h1><p>TCP协议是一种处于传输层的协议，主要是通过用户之间的交互并相互确认来建立连接并实现数据传输的。</p>
<p><em><strong>实现代码：</strong></em></p>
<p><strong>Client类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取服务端ip和端口</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//创建连接用于发送信息</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(ip, port);</span><br><span class="line">            <span class="comment">//获取一个输出流并输出消息</span></span><br><span class="line">            out = socket.getOutputStream();</span><br><span class="line">            out.write(<span class="string">&quot;Hello World&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(out!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<span id="more"></span>



<p><strong>Server类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serversocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建连接用于接收信息</span></span><br><span class="line">            serversocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">            socket = serversocket.accept();</span><br><span class="line">            <span class="comment">//获取一个输入流获取信息</span></span><br><span class="line">            in = socket.getInputStream();</span><br><span class="line">            <span class="comment">//创建一个管道流</span></span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="comment">//将得到的数据写入管道流并输出</span></span><br><span class="line">            <span class="keyword">while</span>((len=in.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(baos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(in!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(serversocket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serversocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC的使用及一些问题</title>
    <url>/post/2772b0a2.html</url>
    <content><![CDATA[<h1 id="JDBC的使用及一些问题"><a href="#JDBC的使用及一些问题" class="headerlink" title="JDBC的使用及一些问题"></a>JDBC的使用及一些问题</h1><p><strong>JDBC的使用</strong></p>
<ol>
<li><p>加载数据库驱动</p>
<blockquote>
<p>Class.forName(“com.mysql.jdbc.Driver”);</p>
</blockquote>
</li>
<li><p>给用户信息和url赋值</p>
<blockquote>
<p>String url &#x3D; “jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbcstudy？useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false”;<br> String username &#x3D; “root”;<br> String password &#x3D; “123456”;</p>
</blockquote>
</li>
</ol>
<span id="more"></span>





<ol start="3">
<li>连接成功，获得数据库对象 connection代表数据库<blockquote>
<p>Connection connection &#x3D; DriverManager.getConnection(url, username, password);</p>
</blockquote>
</li>
<li>创建执行sql的对象 statement<blockquote>
<p>Statement statement &#x3D; connection.createStatement();<br>String sql &#x3D; “SELECT * FROM users”;</p>
</blockquote>
</li>
<li>执行sql，返回结果集<blockquote>
<p>ResultSet resultSet &#x3D; statement.executeQuery(sql);<br>while(resultSet.next()){<br> System.out.println(“id&#x3D;”+ resultSet.getObject(“id”));<br> System.out.println(“name&#x3D;”+ resultSet.getObject(“NAME”));<br> System.out.println(“pwd&#x3D;”+ resultSet.getObject(“PASSWORD”));<br> System.out.println(“email&#x3D;”+ resultSet.getObject(“email”));<br> System.out.println(“birth&#x3D;”+ resultSet.getObject(“birthday”));<br> }</p>
</blockquote>
</li>
<li>释放连接<blockquote>
<p>resultSet.close();<br> statement.close();<br> connection.close();</p>
</blockquote>
</li>
</ol>
<p><strong>可能存在的问题和报错（mysql数据库）</strong></p>
<ul>
<li>Sat Mar 07 01:47:21 CST 2020 WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL&#x3D;false, or set useSSL&#x3D;true and provide truststore for server certificate verification.</li>
</ul>
<p><strong>错误原因：加粗部分未加上</strong><br>String url&#x3D;”jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbcstudy？useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;<strong>useSSL&#x3D;false</strong>“;</p>
<hr>
<ul>
<li>The last packet successfully received from the server was 1,238 milliseconds ago.  The last packet sent successfully to the server was 1,231 milliseconds ago.</li>
</ul>
<p><strong>错误原因：加粗部分写成useSSL&#x3D;true</strong><br>String url&#x3D;”jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbcstudy？useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;<strong>useSSL&#x3D;false</strong>“;</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库删除表操作中delete和truncate的区别</title>
    <url>/post/8cf5252b.html</url>
    <content><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>数据库操作中通过delete关键词和truncate关键词都可以达到删除表(删库跑路)的作用，首先来看看他们的用法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test`</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `test`</span><br></pre></td></tr></table></figure>


<span id="more"></span>



<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>它们的区别在于:</p>
<ul>
<li>truncate删除表的同时会清空并重新设置自增列，而delete则不会</li>
<li>truncate不会影响事务</li>
</ul>
<h1 id="对不同引擎的现象"><a href="#对不同引擎的现象" class="headerlink" title="对不同引擎的现象"></a>对不同引擎的现象</h1><p>对于mysql数据库，较早的版本默认使用的是MyISAM引擎，后面的版本则使用了InnoDB引擎。<br>如果使用delete删除，在重启数据库的使用根据引擎的区别会有以下现象：</p>
<ul>
<li>MyISAM  从上一个自增量开始，这是因为数据存在于文件夹当中。</li>
<li>InnoDB   自增列从1开始，这是因为数据存在内存当中。</li>
</ul>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Static关键字的使用与类加载</title>
    <url>/post/43572ee2.html</url>
    <content><![CDATA[<h2 id="Static关键字的使用"><a href="#Static关键字的使用" class="headerlink" title="Static关键字的使用"></a>Static关键字的使用</h2><p>static关键字用来定义静态数据，可用于所有对象中，并且不同对象数据可以互通，我们来看以下一个简单的例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">        System.out.println(<span class="string">&quot;num=&quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        t1.add();</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        t2.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<span id="more"></span>



<p>输出结果如下:<br><img src="https://img-blog.csdnimg.cn/20200229163055834.png" alt="在这里插入图片描述"><br>为了探究其原因，我们来看下以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String test1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String test2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(test1);</span><br><span class="line">        System.out.println(test2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(test1);<span class="comment">//编译报错</span></span><br><span class="line">        System.out.println(test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们定义了一个普通变量和一个静态变量以及一个普通方法和一个静态方法，如图显示，普通方法可以随意的调用普通变量和静态变量，静态方法也可以调用静态变量，但当静态方法调用普通变量的时候则会报错。</p>
<p>如果需要能够调用则需要做以下处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">//   System.out.println(test1);//编译报错</span></span><br><span class="line">    <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    System.out.println(test.test1);</span><br><span class="line">    System.out.println(test2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了探究这一现象形成的原因，可以做以下尝试。</p>
<h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>我们可以将一个类分为匿名代码块，静态代码块，构造方法三部分，并且初始化这个类，以此来查看类在加载的过程中对不同部分的处理顺序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果如下:<br><img src="https://img-blog.csdnimg.cn/20200229160124571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由此可知当一个类加载的时候首先加载的是静态代码块，然后才会加载匿名代码块和构造方法。为了更进一步理解为什么静态方法一开始不能调用普通变量，而创建对象后就可以调用了，可以做以下尝试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的结果如下图:<br><img src="https://img-blog.csdnimg.cn/20200229161459638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>显而易见，静态代码块只会在开始的时候执行一次，此时普通变量并没有被加载，因此静态方法无法使用普通变量，而随着对象的创建，普通变量逐渐被加载了，此时静态方法便可以调用普通变量了。<br>而正是因为静态代码区只会在开始调用一次，而其他模块会在每次创建对象的时候调用一次，因此不同对象操作的静态数据是同一份，所以数据互通。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于基本数据类型的一些问题</title>
    <url>/post/27b88637.html</url>
    <content><![CDATA[<h1 id="关于基本数据类型的一些问题"><a href="#关于基本数据类型的一些问题" class="headerlink" title="关于基本数据类型的一些问题"></a>关于基本数据类型的一些问题</h1><h2 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h2><p><strong>不同进制的表示方法</strong></p>
<p>二进制(0b)  八进制(0)  十六进制(0x)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0b10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i8</span> <span class="operator">=</span> <span class="number">010</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i16</span> <span class="operator">=</span> <span class="number">0x10</span>;</span><br></pre></td></tr></table></figure>



<!--  more  -->



<h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>由于浮点数是有限离散的，存在舍入误差，常常表现为接近但不等于，因此在一些银行业务中最好完全避免使用浮点数进行比较。我们来看以下两个例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.1f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0</span>/<span class="number">10</span>;</span><br><span class="line">System.out.println(f==d);</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">233333333333333f</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">233333333333333f</span>+<span class="number">1</span>;</span><br><span class="line">System.out.println(d1==d2);</span><br></pre></td></tr></table></figure>

<p>得出的结果为第一个为<strong>false</strong>，第二个为<strong>true</strong>，因此通过浮点数比较是不准确的。</p>
<p>在进行银行业务处理时，为了避免误差可以使用一个叫BigDecimal的数学工具类进行处理。</p>
<h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>字符的本质是数字，是通过Unicode编码的，占2字节，范围是0-65536。</p>
<p><strong>转义字符</strong></p>
<p><strong>\t    制表符</strong></p>
<p><strong>\n   换行符</strong></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>初识markdown</title>
    <url>/post/71d93f18.html</url>
    <content><![CDATA[<h1 id="Markdown学习-（-）"><a href="#Markdown学习-（-）" class="headerlink" title="Markdown学习  （#）"></a>Markdown学习  （#）</h1><h2 id="标题-（-）"><a href="#标题-（-）" class="headerlink" title="标题  （##）"></a>标题  （##）</h2><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>Hello World!</strong>  **</p>
<p><em>Hello World!</em>   *</p>
<p><em><strong>Hello World!</strong></em>   ***</p>
<p><del>Hello World!</del>   ~~</p>
<span id="more"></span>





<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>引用他人文章   (&gt;)</p>
</blockquote>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>(—)或者（***）</p>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://img-blog.csdnimg.cn/20200226223724341.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMzU5Mzgx,size_16,color_FFFFFF,t_70" alt="啦啦啦"></p>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://www.csdn.net/">点击跳转到CSDN博客</a></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol>
<li>A （1.）</li>
<li>B</li>
<li>C</li>
</ol>
<ul>
<li>A  (-)</li>
<li>B</li>
<li>C</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>名字</th>
<th>性别</th>
<th>生日</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>男</td>
<td>1996.10.23</td>
</tr>
</tbody></table>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>(&#96;&#96;&#96;代码语言)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Elasticsearch 节点磁盘使用率过高，导致ES索引无法写入</title>
    <url>/post/e061730c.html</url>
    <content><![CDATA[<p>解决一下因为 Elasticsearch 节点磁盘使用率过高，导致 ES 索引无法写入的问题。</p>
<span id="more"></span>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>经过查阅<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#disk-based-shard-allocation">官方文档</a>，我们可以看到 ES 的默认配置是当集群中的某个节点磁盘达到使用率为 <code>85%</code> 的时候，就不会在该节点进行创建副本，当磁盘使用率达到 <code>90%</code> 的时候，尝试将该节点的副本重分配到其他节点。当磁盘使用率达到 <code>95%</code> 的时候，当前节点的所有索引将被设置为只读索引。</p>
<blockquote>
<ul>
<li><code>cluster.routing.allocation.disk.threshold_enabled</code><br>(Dynamic) Defaults to . Set to to disable the disk allocation decider. truefalse</li>
<li><code>cluster.routing.allocation.disk.watermark.low</code><br>(Dynamic) Controls the low watermark for disk usage. It defaults to , meaning that Elasticsearch will not allocate shards to nodes that have more than 85% disk used. It can also be set to an absolute byte value (like ) to prevent Elasticsearch from allocating shards if less than the specified amount of space is available. This setting has no effect on the primary shards of newly-created indices but will prevent their replicas from being allocated. 85%500mb</li>
<li><code>cluster.routing.allocation.disk.watermark.high</code><br>(Dynamic) Controls the high watermark. It defaults to , meaning that Elasticsearch will attempt to relocate shards away from a node whose disk usage is above 90%. It can also be set to an absolute byte value (similarly to the low watermark) to relocate shards away from a node if it has less than the specified amount of free space. This setting affects the allocation of all shards, whether previously allocated or not. 90%</li>
<li><code>cluster.routing.allocation.disk.watermark.enable_for_single_data_node</code><br>(Static) For a single data node, the default is to disregard disk watermarks when making an allocation decision. This is deprecated behavior and will be changed in 8.0. This setting can be set to to enable the disk watermarks for a single data node cluster (will become default in 8.0). true</li>
<li><code>cluster.routing.allocation.disk.watermark.flood_stage</code><br>(Dynamic) Controls the flood stage watermark, which defaults to 95%. Elasticsearch enforces a read-only index block () on every index that has one or more shards allocated on the node, and that has at least one disk exceeding the flood stage. This setting is a last resort to prevent nodes from running out of disk space. The index block is automatically released when the disk utilization falls below the high watermark.index.blocks.read_only_allow_delete</li>
</ul>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="调整物理环境"><a href="#调整物理环境" class="headerlink" title="调整物理环境"></a>调整物理环境</h3><p>扩大磁盘，或者删除部分数据来空出一些磁盘，这个没什么好多说的。</p>
<h3 id="调整-es-配置"><a href="#调整-es-配置" class="headerlink" title="调整 es 配置"></a>调整 es 配置</h3><h4 id="通过配置文件-需要重启"><a href="#通过配置文件-需要重启" class="headerlink" title="通过配置文件(需要重启)"></a>通过配置文件(需要重启)</h4><p>更改配置文件<code>elasticsearch.yml</code>，调高锁定的阈值，需要重启 ES。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.routing.allocation.disk.threshold_enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cluster.routing.allocation.disk.watermark.low:</span> <span class="number">90</span><span class="string">%</span></span><br><span class="line"><span class="attr">cluster.routing.allocation.disk.watermark.high:</span> <span class="number">95</span><span class="string">%</span></span><br><span class="line"><span class="attr">cluster.routing.allocation.disk.watermark.flood_stage:</span> <span class="number">98</span><span class="string">%</span></span><br></pre></td></tr></table></figure>

<h4 id="通过接口-无需重启"><a href="#通过接口-无需重启" class="headerlink" title="通过接口(无需重启)"></a>通过接口(无需重启)</h4><p>通过 ES api 调整配置。transient 临时更改，persistent 是永久更改。</p>
<ul>
<li><p>永久更改 <code>persistent</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;persistent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.low&quot;</span><span class="punctuation">:</span> <span class="string">&quot;90%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.high&quot;</span><span class="punctuation">:</span> <span class="string">&quot;95%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.flood_stage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;98%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster.info.update.interval&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1m&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>临时更改 <code>transient</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;transient&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.low&quot;</span><span class="punctuation">:</span> <span class="string">&quot;90%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.high&quot;</span><span class="punctuation">:</span> <span class="string">&quot;95%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster.routing.allocation.disk.watermark.flood_stage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;98%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster.info.update.interval&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1m&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过向<code>/_cluster/settings</code>提交<code>PUT</code>请求来修改，示例如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Content-Type: application/json&quot;</span> -XPUT localhost:9200/_cluster/settings  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;transient&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;cluster.routing.allocation.disk.watermark.low&quot;: &quot;90%&quot;,</span></span><br><span class="line"><span class="string">    &quot;cluster.routing.allocation.disk.watermark.high&quot;: &quot;95%&quot;,</span></span><br><span class="line"><span class="string">    &quot;cluster.routing.allocation.disk.watermark.flood_stage&quot;: &quot;98%&quot;,</span></span><br><span class="line"><span class="string">    &quot;cluster.info.update.interval&quot;: &quot;1m&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img.iszy.xyz/20210309190311.png"></p>
<h2 id="解锁已经锁定的索引"><a href="#解锁已经锁定的索引" class="headerlink" title="解锁已经锁定的索引"></a>解锁已经锁定的索引</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Content-Type: application/json&quot;</span> -XPUT http://localhost:9200/_cluster/settings -d <span class="string">&#x27;&#123;&quot;transient&quot;:&#123;&quot;cluster.routing.allocation.disk.threshold_enabled&quot;:false&#125;&#125;&#x27;</span></span><br><span class="line">curl -H <span class="string">&quot;Content-Type: application/json&quot;</span> -XPUT http://localhost:9200/_all/_settings -d <span class="string">&#x27;&#123;&quot;index.blocks.read_only_allow_delete&quot;:null&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>让一切被中断的重新启动</title>
    <url>/post/15d4b5dc.html</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/cxlyp3.jpg" alt="cxlyp3"></p>
<span id="more"></span>

<p>2020年因为疫情原因导致自己浑浑噩噩地度过了半年时间，博客一直都没有更新，甚至都不知道自己每天在干什么。相比于 2019 年每天都拍一点视频记录一下自己干了些什么之外（其实每天也是一样枯燥无聊），2020 年这大半年好像是突然就消失掉了。</p>
<p>想要做的事情还有很多，所以今天打算整理一下思绪，三省一下吾身🧐。在 新公司工作 8 个月以来，好像失去了斗志，在这里每天做着一些简单的貌似无法提升自己的工作，其实有一些倦了。哎不过提升不提升都是看自己，也许是我现在太浮躁了。</p>
<p>从杭州回来之前想着每天工作轻松了可以做一些副业或者其他，比如视频剪辑，继续学习 <code>POPPIN</code> 之类的事情，但是现实是每天回到家就躺尸。西安的夏天每天8点才日落，真的感觉好浪费时间啊，大好的光阴都被自己挥霍掉了。20 年的后半年立一些F🚩L🇨🇳A🏳️‍🌈G吧，例如，多剪辑一些有趣的 VLOG（这个需要灵感），存一下钱（还好股票已经回本了），多去西安周边走一走（有驾照就方便了），谈个女朋友（这个对我来说其实是最难的，因为我发现自己其实是一个很闷的人，有时候就想一个人呆着不想和别人说话，和别人相处真的好累），还有健身（至少增重到 125 斤吧）先练出来一个好看的身体。</p>
<h3 id="剪辑"><a href="#剪辑" class="headerlink" title="剪辑"></a>剪辑</h3><p>2019 年每天都有拍一段小视频，20 年后半年不打算这样拍了，很耗费精力。也许在遇到一些好玩的东西的时候可以不用照片记录，而用一段简短的小视频记录下来（说到这里想起来 iPhone 的实况拍照功能，长按可以播放拍摄当时的视频片段，真的非常好用）。</p>
<p>也许可以花点时间学习一下稍微高级一点的剪辑技巧，emmm…看天分了吧，随缘学习。</p>
<h3 id="存钱"><a href="#存钱" class="headerlink" title="存钱"></a>存钱</h3><p>过年的时候数了数自己的存款发现也有十万呢，结果 20 年大半年过去了还是这个数目，不知道自己这大半年钱都去哪儿了。不科学啊，股票也回本了呢，在朋友那里放了 5 万，自己股票中留了 6 万，最近感觉牛市快来了呢，希望能够让我赚一些吧。有个在杭州的朋友最近遇到一些棘手的事情，需要打官司，可能还得赔十几万。哎，早就劝过他脚踏实地的赚钱，他从来没有听进去过我的一句话，其实我早就已经非常失望了。</p>
<p>以后我管好自己就行了，不去管别人好不好。</p>
<h3 id="户外"><a href="#户外" class="headerlink" title="户外"></a>户外</h3><p>回到西安以后好像就前段时间去了牛背梁。本来在五一的时候和成他们去太白山，因为一场婚礼没有去成，下一个目的地应该就是太白山了吧，和同事一起去。不过目前现阶段对我最重要的还是先尽快拿一下驾照。有了驾照会开车以后，秦岭我能每天下班去一趟哈哈。</p>
<p>哦对，我应该把去一些 livehouse，看糖蒜铺子脱口秀、看电影等等这种活动也算在户外这里，疫情原因有些一直都看不成，好气啊！</p>
<h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><p>前段时间称了下体重，<em>57.8KG</em>， 好气啊，可能我的饮食习惯也不太好。我们组有三个同事都是健身大神，猛的不行。也许我也需要办一个健身卡？跟着大佬们把我这核心力量，手臂背胸肌练一练哈哈。🌚 短期目标 125 斤！</p>
<p>2020 年下半年就暂时立这么写 FALG 吧，希望都能够完成！</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>直接修改和替换Jar包中文件的几种方式</title>
    <url>/post/2a3cd76b.html</url>
    <content><![CDATA[<p>在我们日常打包部署 Jar 包的时候，时常会出现需要修改少量内容或替换某个文件的时候，重新打包完整 Jar 包并在网上传输费时费力，所以需要直接修改 Jar 包，这里就对直接修改 和替换 Jar 包中文件的几种方式做一下总结。</p>
<span id="more"></span>

<h2 id="通用方法——解压后重新打包-Jar-包"><a href="#通用方法——解压后重新打包-Jar-包" class="headerlink" title="通用方法——解压后重新打包 Jar 包"></a>通用方法——解压后重新打包 Jar 包</h2><p>这个通用方法，就是将 Jar 包进行解压，修改或替换文件后，重新打包成 Jar 包的方式。这个方法需要部署 JAVA jdk，需要用到其中的 jar 命令。</p>
<p>我们可以先看下 jar 命令的官方说明，<code>0</code>参数是关键。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用法: jar &#123;ctxui&#125;[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...</span><br><span class="line">选项:</span><br><span class="line">    -c  创建新档案</span><br><span class="line">    -t  列出档案目录</span><br><span class="line">    -x  从档案中提取指定的 (或所有) 文件</span><br><span class="line">    -u  更新现有档案</span><br><span class="line">    -v  在标准输出中生成详细输出</span><br><span class="line">    -f  指定档案文件名</span><br><span class="line">    -m  包含指定清单文件中的清单信息</span><br><span class="line">    -n  创建新档案后执行 Pack200 规范化</span><br><span class="line">    -e  为捆绑到可执行 jar 文件的独立应用程序</span><br><span class="line">        指定应用程序入口点</span><br><span class="line">    -0  仅存储; 不使用任何 ZIP 压缩</span><br><span class="line">    -P  保留文件名中的前导 &#x27;/&#x27; (绝对路径) 和 &quot;..&quot; (父目录) 组件</span><br><span class="line">    -M  不创建条目的清单文件</span><br><span class="line">    -i  为指定的 jar 文件生成索引信息</span><br><span class="line">    -C  更改为指定的目录并包含以下文件</span><br><span class="line">如果任何文件为目录, 则对其进行递归处理。</span><br><span class="line">清单文件名, 档案文件名和入口点名称的指定顺序</span><br><span class="line">与 &#x27;m&#x27;, &#x27;f&#x27; 和 &#x27;e&#x27; 标记的指定顺序相同。</span><br><span class="line"></span><br><span class="line">示例 1: 将两个类文件归档到一个名为 classes.jar 的档案中:</span><br><span class="line">       jar cvf classes.jar Foo.class Bar.class</span><br><span class="line">示例 2: 使用现有的清单文件 &#x27;mymanifest&#x27; 并</span><br><span class="line">           将 foo/ 目录中的所有文件归档到 &#x27;classes.jar&#x27; 中:</span><br><span class="line">       jar cvfm classes.jar mymanifest -C foo/ .</span><br></pre></td></tr></table></figure>

<p>所以流程就是这样的，首先解压 jar 包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 解压</span><br><span class="line">jar -xvf test.jar</span><br></pre></td></tr></table></figure>

<p>进入文件夹编辑或者替换需要更改的文件，然后重新进行打包，加了 <code>0</code> 参数表示只打包不压缩。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 压缩</span><br><span class="line">jar -cvf0m test.jar ./META-INF/MANIFEST.MF .</span><br></pre></td></tr></table></figure>

<p>不要漏了这个 MANIFET.MF 文件，，这个文件里面记录了该 JAR 包的版本、创建人和类搜索路径等信息。如果一个 JAR 文件被当作可执行文件，则其中的 MANIFEST 文件需要指出该程序的主类文件，漏掉了则不能正常执行。</p>
<h2 id="Windows-方式"><a href="#Windows-方式" class="headerlink" title="Windows 方式"></a>Windows 方式</h2><p>在 Windows 上因为有许多完善好用的 GUI 应用，编辑起来就简单很多。Jar 包通常可以通过安装的压缩软件直接打开，所以至少要安装一个压缩软件，我想基本上每个人都会有的。</p>
<h3 id="仅文本文件"><a href="#仅文本文件" class="headerlink" title="仅文本文件"></a>仅文本文件</h3><p>对于文本文件来说，一般可以直接在 Jar 包里打开，修改保存后，压缩软件会提醒说文件已经修改，是否更新到 Jar 包中，点确定即可。</p>
<p><img src="https://img.iszy.xyz/20200517234204.png"></p>
<h3 id="所有文件"><a href="#所有文件" class="headerlink" title="所有文件"></a>所有文件</h3><p>所有文件，都可以通过将文件拖进 Jar 包的方式，添加或替换内容。需要注意的是，压缩方式需要选择存储&#x2F;不压缩，或是其他类似的表达。当然也可以通过上面的通用方法解决。</p>
<p><img src="https://img.iszy.xyz/20200517234555.png"></p>
<h2 id="Linux-方式"><a href="#Linux-方式" class="headerlink" title="Linux 方式"></a>Linux 方式</h2><p>我指的 Linux 方式，基本就是指命令行的方式，不包含桌面操作，那个我不是很了解，或许会和 Windows 上的操作比较接近。</p>
<h3 id="仅文本文件-1"><a href="#仅文本文件-1" class="headerlink" title="仅文本文件"></a>仅文本文件</h3><p>首先需要系统里面安装 vim 和 zip 两个包，如果是 Ubuntu，可以运行<code>sudo apt install vim zip -y</code>安装。</p>
<p>然后你可能已经想到了，那就是通过 vim 工具打开 Jar 包，将会显示 Jar 包中的所有文件夹和文件绝对路径，每行显示一个。</p>
<p><img src="https://img.iszy.xyz/20200518084041.png"></p>
<p>通过将光标移动到需要修改的文件上，回车进入文件，像编辑普通文件一样进行修改，修改完成后，<code>:wq</code>退出返回到文件列表。</p>
<p>接下来可以选择继续编辑其他文件或退出 Jar 包。退出 Jar 包时，请一定要通过<code>:q</code>退出，这个很重要，如果你像上面保存文件一样加了 w 参数，这个 Jar 包就废了，它将会变成保存了文件列表的一个文本文件。所以请千万通过<code>:q</code>参数退出 Jar 包，切记！</p>
<h3 id="所有文件-1"><a href="#所有文件-1" class="headerlink" title="所有文件"></a>所有文件</h3><p>这个我暂时只知道通过上面说明的通用方法进行修改替换文件，如有小伙伴知道其他方法，希望可以告诉我，十分感谢。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Github自建图床的几种方式</title>
    <url>/post/d48d3421.html</url>
    <content><![CDATA[<p>本文我来简单讲一下利用 Github 自建图床的几种方式，希望能对大家有些帮助。</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来我是在自己服务器上搭的图床，套上 cdn，使用体验挺好。为什么想到用 Github 来自建图床呢，主要是考虑到以下几个方面。</p>
<ol>
<li>首先，Github 有着免费的存储空间，不用占据自己的硬盘。当然，虽然官方对 repo 没有磁盘限制，但是推荐在 1GB 以下，超过 1GB 会有邮件通知。上传超过 50M 的单个文件会 warning，无法上传超过 100M 的单个文件。不过，对于我这样用于博客图床的，图片容量不会很大，其实已经很够用了。</li>
<li>其次，我使用 Github 主要是出于版本管理和迁移成本的考虑。由于图片放在 Github 上，当我想要迁移到其他地方，只需要简单的 git clone 以下即可，想要回退版本，防止误操作也很方便。</li>
<li>此外，Github 使用人数很多，所以各种基于 Github 的工具和使用案例很多，不会给自己增添麻烦。比如 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a>，一个用于快速上传图片并获取图片 URL 链接的工具，其中就支持 Github，也可以自定义链接，很好用。</li>
</ol>
<p>这么来看，Github 是一个很好的图床承载工具。</p>
<h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><h3 id="建立-Repo"><a href="#建立-Repo" class="headerlink" title="建立 Repo"></a>建立 Repo</h3><p>我们要用 Github 做图床，首先建个 Repo 应该不难理解吧，这个就是你用来存储图片的仓库了。<a href="https://github.com/new">点击前往</a></p>
<p><img src="https://img.iszy.xyz/20200505113214.png"></p>
<p>点击 Create repository，这个仓库就建好了。</p>
<p><img src="https://img.iszy.xyz/20200505113547.png"></p>
<p>比如我这里建立了一个名为 img-hosting 的仓库作为示例，链接形如</p>
<p><a href="https://github.com/ZvonimirSun/img-hosting">https://github.com/ZvonimirSun/img-hosting</a></p>
<h3 id="上传工具"><a href="#上传工具" class="headerlink" title="上传工具"></a>上传工具</h3><p>既然要用 GitHub 作为图床，如果没有一个方便的上传图片的方式，用起来就很难受了。这边推荐下我主要在用的工具，也就是我前面提到的 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a>，文档比较完善，我这边就不再细说，大家可以直接看下官方说明，配置很简单的。</p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">传送门</a></p>
<p><img src="https://img.iszy.xyz/20200505114811.png"></p>
<p>通过设定自定义域名，就可以每次自动获取你需要的链接格式。</p>
<h2 id="获取图片链接方案"><a href="#获取图片链接方案" class="headerlink" title="获取图片链接方案"></a>获取图片链接方案</h2><h3 id="直连方案"><a href="#直连方案" class="headerlink" title="直连方案"></a>直连方案</h3><p>这个方案听着就很简单了，就是直接使用 Github 存储的直链，形如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/ZvonimirSun/my-img-hosting/master/20190317184116.png</span><br></pre></td></tr></table></figure>

<p>只要把链接里的 GitHub 用户名，和你的 repo 名替换即可。master 是分支名，一般没有特别设置都是这个，不用改动。最后跟上你的图片目录即可。</p>
<p>PicGo 中可以把自定义域名配置为<code>https://raw.githubusercontent.com/ZvonimirSun/my-img-hosting/master</code></p>
<p>有些人说要使用用 Github Pages，我是觉得没有必要的。一是因为 GitHub Pages 有 1GB 容量限制，二是因为 GitHub Pages 渲染页面比较容易失败，徒增麻烦。不过 Github Pages 可以配置自定义域名，有这个需求的可以尝试，在此我就不推荐了。</p>
<h3 id="公用-CDN-方案"><a href="#公用-CDN-方案" class="headerlink" title="公用 CDN 方案"></a>公用 CDN 方案</h3><p>众所周知，GitHub 在国内因为某些不可描述之事使用体验不佳，用户在加载图片的时候会十分缓慢，这时候一个 CDN 就帮助很大了。</p>
<p>这不就巧了吗，jsDelivr 为开发者提供了免费公共 CDN 加速服务，其中就对 Github 进行了加速，只要通过 jsDelivr 的链接引用你的资源，就能获得 jsDelivr 全球 CDN 的加速效果。鉴于 jsDelivr 是在国内有节点的，使用体验就很好了。</p>
<p>使用方法很简单，jsDelivr 加速 GitHub 文件的链接格式如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/user/repo@version/file</span><br></pre></td></tr></table></figure>

<p>上面的示例就改成这样即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/ZvonimirSun/my-img-hosting@master/20190317184116.png</span><br></pre></td></tr></table></figure>

<p>PicGo 中可以把自定义域名配置为<code>https://cdn.jsdelivr.net/gh/ZvonimirSun/my-img-hosting@master</code></p>
<h3 id="Nginx-反代-CDN"><a href="#Nginx-反代-CDN" class="headerlink" title="Nginx 反代+CDN"></a>Nginx 反代+CDN</h3><p>这个方案吧，感觉稍微有点憨。就是我想用自己的域名，正好我的 VPS 不缺流量，还有个百度云加速 CDN 可以用。于是我采用了 Nginx 反代 GitHub 直链，然后给我的域名套 CDN 的方式。</p>
<p>这是我的 Nginx 配置，大家可以参考下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        #listen [::]:80;</span><br><span class="line">        server_name img.iszy.xyz;</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line"></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">        #listen [::]:443 ssl http2;</span><br><span class="line">        server_name img.iszy.xyz;</span><br><span class="line"></span><br><span class="line">        include conf.d/iszyxyz-ssl.conf;</span><br><span class="line"></span><br><span class="line">        location ~ ^(.*)/$ &#123;</span><br><span class="line">            add_header Access-Control-Allow-Origin *;</span><br><span class="line">            add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">            add_header Access-Control-Allow-Headers &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line"></span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                return 204;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass https://raw.githubusercontent.com/ZvonimirSun/my-img-hosting/master/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次支付宝反欺诈体验</title>
    <url>/post/4ea292c1.html</url>
    <content><![CDATA[<p>今天买电脑的时候，体验到了一波支付宝的反欺诈措施，感觉还挺新奇，稍微记录一下 hh。</p>
<span id="more"></span>

<p>或许支付宝的反欺诈措施已经实行很久了，我也不是很清楚，不过我还是第一次体验到，感觉还是很不错的。面对欺诈，很多人或许就是脑子一热，就被把钱骗走了，甚至欺骗的手段很多时候也并不高明，错漏百出，不知怎的在被骗的时候真就发现不了，事后才懊恼不已。旁人的一点提醒可能就会让你稍微回过神，理智一些，可能就能发现一些明显的漏洞。</p>
<p>支付宝在平常扫码支付给陌生联系人的时候，一般都会跳出一个简单的提醒，算是最基本的反欺诈吧。今天，我这个措施就更多一些，我在戴尔官网买电脑的时候，结算的时候通过支付宝扫描戴尔官方提供的建设银行的聚合付款码来进行付款。由于金额较大，在即将付款成功时，支付宝对交易做出了拦截，并弹出反欺诈提醒，并让我确认没有问题的话，再次进行支付。在第二次进行支付前，弹出了反欺诈小问卷，包含了几道关于可能受到诈骗的情形和返利刷单违法说明的题目，答案应该是显而易见的，但如果确实受害者是在被骗，可能会在这里意识到自己有可能是其中的某种情况而去重新确认交易。与此同时，会接到支付宝打来的关于反欺诈调查的电话，电话语音应该是 AI 的，确认了一下购买的内容、是否可能是诈骗、有没有进行返利刷单等内容，在听到你语音确认后，会再次对你做出反欺诈的提醒，并挂断电话。在反欺诈小问卷做完提交后，没什么问题，支付才能正常通过。</p>
<p>经过反复确认，我觉得欺诈风险应该是降低了很多，我并没有觉得太繁琐，支付宝对大额交易多做一些确认是对用户负责的表现，也能让用户更多地对在支付宝上进行付款的安全性有信心。不过吧，我也没有真的被骗，不清楚如果真的还是被骗了，支付宝会有些什么样的补救措施，如果有那就更好了。</p>
<p>当然，支付宝做的这些措施并不一定就一定有效了，关键还是要我们自己能够擦亮双眼，识别出骗局，保护好自己的财产。</p>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
  </entry>
  <entry>
    <title>通过Subtree实现Hexo主题自定义配置的同步</title>
    <url>/post/4719a09b.html</url>
    <content><![CDATA[<p>通常我们的 hexo 博客由于都是静态文本文件，比较适合用 git 来进行管理。不过主题我们一般都是用 git clone 直接拉代码的，但 git 无法直接管理子文件夹中的其他 git 项目，所以你会发现直接 add 代码是不会包含主题文件夹中的变化的。不过为了方便迁移，最好还是能够通过 git 管理整个博客文件，包括对主题文件的修改，同时为了便于更新主题也不能舍弃主题的 git。所以我们采用 <code>fork + subtree</code> 的方案来解决这个问题。</p>
<span id="more"></span>

<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>通过<code>fork + subtree</code>的方案来解决 hexo 主题配置同步的问题。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="Fork-主题项目并拉取到本地"><a href="#Fork-主题项目并拉取到本地" class="headerlink" title="Fork 主题项目并拉取到本地"></a>Fork 主题项目并拉取到本地</h3><p>首先呢就是 fork 了，fork 一下主题项目，然后你就获得了一个同名的，完全由你控制的主题项目。</p>
<p>比如说这个<code>NexT</code>，先访问<a href="https://github.com/theme-next/hexo-theme-next">theme-next</a>页面，然后点下右上角的 Fork，这步就算完成了。然后把 Fork 出来的项目给拉取到本地，以备修改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/example/hexo-theme-next.git</span><br></pre></td></tr></table></figure>

<h3 id="处理已有修改-选"><a href="#处理已有修改-选" class="headerlink" title="处理已有修改(选)"></a>处理已有修改(选)</h3><p>这一步是可选的。如果你想要重新进行配置，或是你的博客刚刚创建，还没有及进行主题配置，那这步可以跳过。</p>
<p>出于方便升级的目的，想必你应该不会删除主题目录的<code>.git</code>文件夹吧。首先先在已经修改过的主题目录执行下<code>git pull</code>，以把代码更新到最新，把 conflict 都处理一下，于是我们得到了保留修改的最新主题代码，就跟往常升级主题的处理方法一样。</p>
<p>然后，我们可以清空刚刚拉取到本地的 Fork 版主题项目(除了.git 文件夹)。把刚刚升级好的全部代码复制过来(除了.git 文件夹)。</p>
<p>执行一下<code>git status</code>，我们应该可以看到我们对主题做的所有更改。然后，我们就可以把修改后的主题代码 push 到远程仓库了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;update theme&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h3 id="通过-subtree-集成主题项目到站点项目里"><a href="#通过-subtree-集成主题项目到站点项目里" class="headerlink" title="通过 subtree 集成主题项目到站点项目里"></a>通过 subtree 集成主题项目到站点项目里</h3><p>首先，先删除<code>themes/next</code>文件夹，并将修改 push 到站点仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf themes/next</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;delete theme next&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>然后绑定子项目，即修改后的主题项目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add -f next git@github.com:example/hexo-theme-next.git</span><br><span class="line">git subtree add --prefix=themes/next next master --squash</span><br></pre></td></tr></table></figure>

<p>如果不加 squash 参数，则子项目的 commit 记录都会加入到主项目中；加上 squash 参数则会把子项目的修改打包成一个 commit 加入到主项目中。</p>
<h3 id="更新和修改子项目"><a href="#更新和修改子项目" class="headerlink" title="更新和修改子项目"></a>更新和修改子项目</h3><p>从子项目进行更新，并推送给主项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch next master</span><br><span class="line">git subtree pull --prefix=themes/next next master --squash</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>将修改推送到子项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree push --prefix=themes/next next master</span><br></pre></td></tr></table></figure>

<p>这样主项目就能和子项目保持同步更新，主题配置就不会丢失了。</p>
<h2 id="迁移博客"><a href="#迁移博客" class="headerlink" title="迁移博客"></a>迁移博客</h2><p>当需要迁移博客的时候，只需要<code>git clone</code>你的主站点项目，然后执行以下语句。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add -f next git@github.com:example/hexo-theme-next.git</span><br></pre></td></tr></table></figure>

<p>接下来就可以像之前一样，用更新和修改子项目里的方法进行处理了。</p>
<h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><p>这样子处理后的主题该怎样进行更新呢？</p>
<p>先在主题子项目下拉取官方 theme-next 代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull https://github.com/example/hexo-theme-next.git</span><br></pre></td></tr></table></figure>

<p>处理完 conflict 以后，push 到远程仓库，接着在主项目中更新下子项目即可。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发编程的一些总结</title>
    <url>/post/5f40a740.html</url>
    <content><![CDATA[<blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3></blockquote>
<p>关于JAVA 并发编程的学习，我已零散的并不系统地积累了一些学习博客，如下：</p>
<p><a href="/blog/20190517/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81-%E4%B8%80/">并发编程学习(一)：编写一个简易的可重入锁</a></p>
<p><a href="/blog/20190525/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E4%BA%8C-%EF%BC%9A%E4%BD%BF%E7%94%A8AQS%E7%BC%96%E5%86%99%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/">并发编程学习(二)：使用AQS编写可重入锁</a></p>
<p><a href="/blog/20190602/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E4%B8%89-%EF%BC%9ACountDownLatch%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/">并发编程学习(三)：CountDownLatch的实现原理及使用</a></p>
<p><a href="/blog/20190617/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E5%9B%9B-%EF%BC%9A%E7%90%86%E8%A7%A3ThreadPoolExecutor%E7%BA%BF%E7%A8%8B%E6%B1%A0/">并发编程学习(四)：理解ThreadPoolExecutor线程池</a></p>
<p><a href="/blog/20190623/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E4%BA%94-%EF%BC%9ASemaphore%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/">并发编程学习(五)：Semaphore源码学习及使用案例</a></p>
<p><a href="/blog/20190701/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E5%85%AD-%EF%BC%9AExchanger%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/">并发编程学习(六)：Exchanger的学习及使用场景</a></p>
<p><a href="/blog/20190814/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E4%B8%83-%EF%BC%9AFork-Join%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86%E5%8F%8Ademo/">并发编程学习(七)：Fork&#x2F;Join框架原理及demo</a></p>
<p><a href="/blog/20190716/Synchronized%E4%BD%BF%E7%94%A8%E6%97%B6%E4%B8%80%E4%B8%AA%E4%B8%8D%E8%B5%B7%E7%9C%BC%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/">Synchronized使用时一个不起眼的注意点</a></p>
<p>这篇博客，制作了一个 Slide，来针对 Java 并发编程做一些小小的总结：</p>
<p><a href="/ppt/java-concurrent-knowledge.html">&gt; 点击查看 Slide</a></p>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>LayUI Icon 扩展 Iconfont 图标</title>
    <url>/post/1cb3ee52.html</url>
    <content><![CDATA[<p>layui 的所有图标全部采用字体形式，取材于阿里巴巴矢量图标库（iconfont）。不过 layui 自带的图标太少了，可以说连够用都算不上，所以今天就要用 iconfont 上的图标扩展一下。</p>
<span id="more"></span>

<h2 id="引入图标"><a href="#引入图标" class="headerlink" title="引入图标"></a>引入图标</h2><p>正常引入 layui 和 iconfont 的 css。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/layui/css/layui.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/iconfont/iconfont.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="加入样式"><a href="#加入样式" class="headerlink" title="加入样式"></a>加入样式</h2><p>加入样式，优先采用 layui 自带图标。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.layui-icon</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: layui-icon, iconfont <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-style</span>: normal;</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JQuery</tag>
        <tag>LayUI</tag>
      </tags>
  </entry>
  <entry>
    <title>How to use Junit5 to test you java application elegantly</title>
    <url>/post/a9e45d03.html</url>
    <content><![CDATA[<h1 align="center">Junit5 的一些实际开发中常用的功能【 TDD 向 】</h1>

<p><img src="/junit5.png" alt="Junit"></p>
<span id="more"></span>

<blockquote>
<p>这篇博客本来应该写于鼠年过年之前，谁想到犯了个懒，现在怀着沉重的心情写下这篇博客~</p>
<p>因为中国现在正在受着新型冠状病毒疫情的危害，大过年的门都出不去，都躲在家里生怕被感染。无聊的我只能学习学习来打发一下枯燥的假期生活哈哈~</p>
</blockquote>
<h3 id="Junit5"><a href="#Junit5" class="headerlink" title="Junit5"></a>Junit5</h3><p>说到 JUNIT5 可能很多人都不陌生，就是一个测试框架而已。但是相信大部分的程序员都没有用过，感觉国内好多公司都没有写测试的习惯，也许是产品催需求催的太紧ε&#x3D;(´ο｀*)))。我就不在这里介绍 Junit5 了，没有前置知识的话需要看一下：<a href="https://junit.org/junit5/">Junit5</a>，我只在这篇博客介绍一下我在工作中是如何使用 Junit5 的。</p>
<h3 id="基本的测试代码"><a href="#基本的测试代码" class="headerlink" title="基本的测试代码"></a>基本的测试代码</h3><p>首先 gradle需要引入 Junit5 以及其他相关的依赖：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">testImplementation <span class="string">&#x27;org.mockito:mockito-core:2.24.0&#x27;</span></span><br><span class="line">testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.2.0&#x27;</span></span><br><span class="line">testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-params:5.2.0&#x27;</span></span><br><span class="line">testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.2.0&#x27;</span></span><br><span class="line">testImplementation <span class="string">&quot;org.testcontainers:junit-jupiter:1.12.3&quot;</span></span><br><span class="line">testImplementation <span class="string">&quot;org.testcontainers:postgresql:1.12.3&quot;</span></span><br><span class="line">testImplementation <span class="string">&#x27;org.mockito:mockito-junit-jupiter:3.1.0&#x27;</span></span><br><span class="line">testImplementation <span class="string">&#x27;org.hamcrest:hamcrest:2.2&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后编写一个简单的测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shouldReturnObjectsGivenValidIdWhenGetObjects</span><span class="params">()</span> &#123;</span><br><span class="line">  when(objectService.findApplications(OBJECT_ID)).thenReturn(mockObjects);</span><br><span class="line"></span><br><span class="line">  <span class="type">var</span> <span class="variable">responseEntity</span> <span class="operator">=</span> objectsController.getObjects(<span class="literal">null</span>);</span><br><span class="line">  </span><br><span class="line">  assertThat(HttpStatus.OK).isEqualTo(responseEntity.getStatusCode());</span><br><span class="line">  assertThat(responseEntity.getBody()).isEqualTo(mockGetObjectsResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明一下，以上测试用例的编写需要注意以下几点：</p>
<ol>
<li>方法命名<br>一般的写测试的时候，方法的命名要求解释测试的功能，需要包含 should&#x2F;given&#x2F;when 条件。如以上方法的命名<code>shouldReturnObjectsGivenValidIdWhenGetObjects</code>是指当调用getObjects()的时候，给定一个合法的 ID，能够返回一组 Objects。</li>
<li>方法的条件、执行、以及对于结果的验证的代码换行隔开</li>
<li>使用 assertThat()验证结果：<br><code>assertThat</code>方法是包<code>import static org.assertj.core.api.Assertions.assertThat;</code>中的方法。它接收一个实际的值，然后再使用<code>isEqualTo</code>等方法判断上一个执行结果是否正确。</li>
</ol>
<h3 id="在类中的测试执行之前执行一次代码"><a href="#在类中的测试执行之前执行一次代码" class="headerlink" title="在类中的测试执行之前执行一次代码"></a>在类中的测试执行之前执行一次代码</h3><p>以下代码使用<code>@BeforeAll</code>注解在方法 setupMDC 上面，并且这个方法必须是 static 静态方法。是指在所有类中的测试方法执行之前只执行一次该方法。一般用于设置无状态的全局变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@BeforeAll</span><br><span class="line">static void setupMDC() &#123;</span><br><span class="line">    MDC.put(TRANSACTION_ID, UUID.randomUUID().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在每个测试方法之前都执行一些代码"><a href="#在每个测试方法之前都执行一些代码" class="headerlink" title="在每个测试方法之前都执行一些代码"></a>在每个测试方法之前都执行一些代码</h3><p>以下代码使用<code>@BeforeEach</code>注解，可以在每一个方法执行之前都执行该方法，用于每个方法执行前的初始化或者做一些共同的 mock 操作，相当于 AOP 的 Before。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  when(service.save(any(String.class), any(UUID.class), any(UUID.class))).thenReturn(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他的比如<code>@AfterAll</code> <code>@AfterEach</code>等等功能依次类推。</p>
<h3 id="测试分层"><a href="#测试分层" class="headerlink" title="测试分层"></a>测试分层</h3><p>在使用 Junit5 测试过程中，最让我觉得方便的是对于测试类的结构划分方式：内部类。通过内部类，我们可以将我们要测试的东西使用类结构的形式去进行描述（使用注解<code>@Nested</code>修饰），然后再在类中编写相应的测试方法进行具体的测试。</p>
<p>比如一个 Controller 需要测试 create&#x2F;update&#x2F;get 等方法，就可以将这几个方法依次编写内部类分开描述，然后再在类中对于不同的分支编写测试方法进行单元测试，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(MockitoExtension.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectsControllerTest</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">CreateObjects</span> &#123;</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">someTest</span><span class="params">()</span>&#123;</span><br><span class="line">      	<span class="comment">// some code</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UpdateObjects</span> &#123;</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">someTest</span><span class="params">()</span>&#123;</span><br><span class="line">      	<span class="comment">// some code</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">GetObjects</span> &#123;</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">someTest</span><span class="params">()</span>&#123;</span><br><span class="line">      	<span class="comment">// some code</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是我在编写 unit 测试的时候的一些小小的总结，以后会继续加深对于测试代码编写的学习，实际上测试才是写代码过程中最重要的一环，可以保障系统的功能的正确性，还能保护重构。Junit5 为 JAVA 程序员提供了更强大、方便的测试框架，值得深入研究使用。</p>
]]></content>
      <categories>
        <category>Junit5</category>
        <category>Unit Test</category>
      </categories>
      <tags>
        <tag>Junit5</tag>
        <tag>Java 基础</tag>
        <tag>单元测试</tag>
        <tag>unit test</tag>
      </tags>
  </entry>
  <entry>
    <title>最新Telegram关闭敏感内容过滤方法</title>
    <url>/post/3f90c3b3.html</url>
    <content><![CDATA[<p>分享一下最新的官方 Telegram 关闭敏感内容过滤的方法。</p>
<span id="more"></span>

<h2 id="原由"><a href="#原由" class="headerlink" title="原由"></a>原由</h2><p>为啥在 iOS 上的 Telegram 会有这种敏感内容过滤呢，自然是苹果喜欢多管闲事，限制在苹果设备上的社交 App 中的敏感内容。本来吧，这也是件好事，不过吧，一来，除了 iOS 其他设备都不存在过滤，用户用着就不平衡了；二来，这个 Telegram 的判定机制和申诉的途径比较坑爹，Telegram 中又有一堆喜欢在各种群里面发广告，奇怪图片的机器人，害得一群讨论正常内容的群组在 iOS 上无法进入，且是否能够解封全凭运气，体验极差。</p>
<p>现在 Telegram 官方曲线救国，在其他客户端，比如桌面端，提供了关闭敏感内容过滤的开关。</p>
<blockquote>
<p>想要无障碍地体验流畅不卡顿的 Telegram，可以了解一下优质的网络加速服务。【<a href="/page/bgfw/">优质机场(SS&#x2F;SSR&#x2F;Trojan&#x2F;V2Ray&#x2F;专线)推荐</a>】</p>
</blockquote>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>首先呢，开关在移动端的 App 里是看不到的，可以在网页端或桌面端进行关闭。</p>
<p>如果根据步骤找不到开关，建议检查下 Telegram 版本。</p>
<h3 id="网页端"><a href="#网页端" class="headerlink" title="网页端"></a>网页端</h3><p>地址: <a href="https://web.telegram.org/k/">Telegram Web</a></p>
<p>当前版本 Telegram WebK alpha 0.6.2</p>
<p>步骤:</p>
<ol>
<li><p>点击菜单中的 <code>Settings</code> 打开设置</p>
<p><img src="https://img.iszy.xyz/20210802093233.png" alt="Settings"></p>
</li>
<li><p>点击 <code>Privacy and Security</code></p>
<p><img src="https://img.iszy.xyz/20210802093803.png" alt="Privacy and Security"></p>
</li>
<li><p>打开 <code>Disable filtering</code> 开关</p>
<p><img src="https://img.iszy.xyz/20210802093917.png" alt="Disable filtering"></p>
</li>
<li><p>关闭 Telegram iOS 端，重新打开，你将看到原本被过滤的群组已经可以正常进入了</p>
</li>
</ol>
<h3 id="桌面端"><a href="#桌面端" class="headerlink" title="桌面端"></a>桌面端</h3><p>步骤：</p>
<ol>
<li><p>打开 Telegram 桌面端，登录你需要关闭敏感内容过滤的账号</p>
</li>
<li><p>打开菜单</p>
<p><img src="https://img.iszy.xyz/20210620194729.png" alt="菜单位置"></p>
</li>
<li><p>打开 <code>Settings</code> - <code>Privacy and Security</code> - <code>Sensitive Content</code></p>
<p><img src="https://img.iszy.xyz/20210620194935.png" alt="Settings"></p>
<p><img src="https://img.iszy.xyz/20210620195102.png" alt="Privacy and Security"></p>
</li>
<li><p>打开 <code>Disable filtering</code> 开关</p>
<p><img src="https://img.iszy.xyz/20210620195246.png" alt="Disable filtering"></p>
</li>
<li><p>关闭 Telegram iOS 端，重新打开，你将看到原本被过滤的群组已经可以正常进入了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Telegram</tag>
        <tag>iOS</tag>
        <tag>Nicegram</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署Spark集群记录</title>
    <url>/post/f9eb61c9.html</url>
    <content><![CDATA[<p>今天记录一下，在 Ubuntu 14.04 上部署 Spark 集群的过程。</p>
<span id="more"></span>

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="系统及软件版本说明"><a href="#系统及软件版本说明" class="headerlink" title="系统及软件版本说明"></a>系统及软件版本说明</h3><p>本章操作中所使用的相关操作系统及软件版本如下：</p>
<table>
<thead>
<tr>
<th>软件</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>操作系统</td>
<td>Ubuntu 14.04.1</td>
</tr>
<tr>
<td>JDK</td>
<td>1.8.0</td>
</tr>
<tr>
<td>Hadoop</td>
<td>2.7.3</td>
</tr>
<tr>
<td>Spark</td>
<td>2.2.0</td>
</tr>
</tbody></table>
<h3 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h3><p>集群中每台机器都需要安装 JDK，步骤如下：</p>
<ol>
<li><p>上传<code>jdk-8u191-linux-x64.tar.gz</code>到<code>/opt</code>目录并解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u191-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 JDK 环境变量配置到&#x2F;etc&#x2F;profile 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=/opt/jdk1.8.0_191&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JRE_HOME=/opt/jdk1.8.0_191/jre&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>如有三台机器，分别命名为 master、slave1、slave2。那么我们就分别修改各自机器上<code>/etc/hostname</code>文件中的机器名为上述名称。<br>修改每台机器的&#x2F;etc&#x2F;hosts 文件，添加上述三对网络 IP 和机器名的对应：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">192.168.1.2     master</span><br><span class="line">192.168.1.3     slave1</span><br><span class="line">192.168.1.4     slave2</span><br></pre></td></tr></table></figure>

<h3 id="SSH-免密登录配置"><a href="#SSH-免密登录配置" class="headerlink" title="SSH 免密登录配置"></a>SSH 免密登录配置</h3><p>该操作是要让 master 节点可以无密码 SSH 登陆到各个 slave 节点上。</p>
<ol>
<li><p>首先生成 master 节点的公钥，在 master 节点的终端中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.ssh</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>多次回车完成 ssh 密钥对创建</p>
</li>
<li><p>在各节点上将该公钥加入授权</p>
<p>将公钥加入 master 本机授权，master 节点上执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>完成后执行 <code>ssh master</code> 验证一下（可能需要输入 <code>yes</code>，成功后执行 <code>exit</code> 返回原来的终端）</p>
<p>接着在 master 节点将上公匙分发到 slave1 和 slave2 节点，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@slave1:/root</span><br><span class="line">scp ~/.ssh/id_rsa.pub root@slave2:/root</span><br></pre></td></tr></table></figure>

<p>接着分别在 slave1 和 slave2 节点上，将 ssh 公匙加入授权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.ssh</span><br><span class="line"><span class="built_in">cat</span> ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>这样，在 master 节点上就可以无密码 ssh 登录到各个 slave 节点了，在 master 节点上执行 <code>ssh slave1</code> 和 <code>ssh slave2</code> 命令进行检验。</p>
</li>
</ol>
<h2 id="Hadoop-集群部署"><a href="#Hadoop-集群部署" class="headerlink" title="Hadoop 集群部署"></a>Hadoop 集群部署</h2><p>Spark 配置前需要部署 Hadoop 集群，这个在<a href="/2019/12/01/hadoop-cluster-setup/">上一篇文章</a>里讲过，可以前往查看。</p>
<h2 id="Spark-集群部署"><a href="#Spark-集群部署" class="headerlink" title="Spark 集群部署"></a>Spark 集群部署</h2><h3 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h3><ol>
<li><p>上传 <code>spark-2.2.0-bin-hadoop2.7.tgz</code> 到 <code>/opt</code> 目录并解压。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf spark-2.2.0-bin-hadoop2.7.tgz</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 Spark 环境变量配置到<code>/etc/profile</code>中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export SPARK_HOME=/opt/spark-2.2.0-bin-hadoop2.7&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$SPARK_HOME/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑<code>spark-env.sh</code>文件</p>
<p>复制 <code>spark-env.sh.template</code> 并重命名为 <code>spark-env.sh</code>，编辑<code>spark-env.sh</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /opt/spark-2.2.0-bin-hadoop2.7/conf/spark-env.sh.template /opt/spark-2.2.0-bin-hadoop2.7/conf/spark-env.sh</span><br><span class="line">vi /opt/spark-2.2.0-bin-hadoop2.7/conf/spark-env.sh</span><br></pre></td></tr></table></figure>

<p>添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_191</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_IP=192.168.2.76</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_MEMORY=4g</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/hadoop-2.7.3</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/opt/hadoop-2.7.3/etc/hadoop</span><br></pre></td></tr></table></figure>

<ul>
<li><code>SPARK_MASTER_IP</code>为 master 节点 IP</li>
<li><code>SPARK_WORKER_MEMORY</code>可根据实际情况调整</li>
</ul>
</li>
<li><p>编辑<code>slaves</code>文件</p>
<p>复制 <code>slaves.template</code> 并重命名为 <code>slaves</code>，编辑<code>slaves</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /opt/spark-2.2.0-bin-hadoop2.7/conf/slaves.template /opt/spark-2.2.0-bin-hadoop2.7/conf/slaves</span><br><span class="line">vi /opt/spark-2.2.0-bin-hadoop2.7/conf/slaves</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件配置分发</p>
<p>至此，master 上的 spark 配置已经结束，需将<code>/etc/profile</code>、<code>/opt/spark-2.2.0-bin-hadoop2.7</code>通过 scp 分发至至 slave1、slave2，重新编译 <code>/etc/profile</code> 使生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /etc/profile root@slave1:/etc/profile</span><br><span class="line">scp /etc/profile root@slave2:/etc/profile</span><br><span class="line">scp -r /opt/spark-2.2.0-bin-hadoop2.7 root@slave1:/opt/spark-2.2.0-bin-hadoop2.7</span><br><span class="line">scp -r /opt/spark-2.2.0-bin-hadoop2.7 root@slave2:/opt/spark-2.2.0-bin-hadoop2.7</span><br></pre></td></tr></table></figure>

<p>分别登录 slave1 和 slave2 执行<code>source /etc/profile</code></p>
</li>
</ol>
<h3 id="启动及验证"><a href="#启动及验证" class="headerlink" title="启动及验证"></a>启动及验证</h3><ol>
<li><p>启动 Spark</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/spark-2.2.0-bin-hadoop2.7/start-all.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证</p>
<p>浏览器访问 <a href="http://192.168.1.2:8080/">http://192.168.1.2:8080/</a> (master 节点 IP)，查看 Spark 集群配置及运行情况</p>
</li>
</ol>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Hadoop</tag>
        <tag>集群</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title> 解决@ResuestBody中的 JSON 自动转化非 boolean 为 boolean 值</title>
    <url>/post/9016b35c.html</url>
    <content><![CDATA[<p><img src="/code.jpg" alt="封面"></p>
<span id="more"></span>

<h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>当我们在 SpringBoot 中写 API 的时候，通常我们会使用<code>@RequestBody</code>注解一个参数将这个对象标记之后，然后我们在请求头使用<code>application/json</code>调用这个 API，传入 JSON 的 body 体，就可以自动的将我们的 JSON 转化成 JAVA 对象。但是，当我使用的 JAVA 对象中有个 Boolean 的字段的时候，我的 JSON 的 body 对这个对象传数值、”True”等等其他值得时候，往往会被默认转成相应的 true 或者 false。例如传入{“able”:0}的时候，我的对象中的 able 字段就是 false。但是我不想要这个功能，我希望接口调用者传的类型都是 Boolean 类型。</p>
<h2 id="Debug-源码"><a href="#Debug-源码" class="headerlink" title="Debug 源码"></a>Debug 源码</h2><p>首先你要知道，在 SpringBoot 或者 SpringMVC 中对于request 和 response 的处理是使用的消息转换器处理的。所以我在 debug 源码的时候发现，SpringBoot 使用<code>MappingJackson2HttpMessageConverter</code>处理 JSON 转化成对象，然后实际的转化方法<code>MappingJackson2HttpMessageConverter</code>没有重写，而是交给父类<code>AbstractJackson2HttpMessageConverter</code>的方法，在该类的第239 行会发现实际上是使用的 <code>this.objectMapper.readValue(inputMessage.getBody(), javaType);</code> 将一个 JSON 字符串转化成 JAVA 对象。再进去看下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">readValue</span><span class="params">(InputStream src, JavaType valueType)</span></span><br><span class="line">  <span class="keyword">throws</span> IOException, JsonParseException, JsonMappingException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>而<code>_readMapAndClose</code>方法是这样的(重点看下 4013 行)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">_readMapAndClose</span><span class="params">(JsonParser p0, JavaType valueType)</span></span><br><span class="line">  <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">try</span> (<span class="type">JsonParser</span> <span class="variable">p</span> <span class="operator">=</span> p0) &#123;</span><br><span class="line">    Object result;</span><br><span class="line">    <span class="type">JsonToken</span> <span class="variable">t</span> <span class="operator">=</span> _initForReading(p, valueType);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">DeserializationConfig</span> <span class="variable">cfg</span> <span class="operator">=</span> getDeserializationConfig();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">DeserializationContext</span> <span class="variable">ctxt</span> <span class="operator">=</span> createDeserializationContext(p, cfg);</span><br><span class="line">    <span class="keyword">if</span> (t == JsonToken.VALUE_NULL) &#123;</span><br><span class="line">      <span class="comment">// Ask JsonDeserializer what &#x27;null value&#x27; to use:</span></span><br><span class="line">      result = _findRootDeserializer(ctxt, valueType).getNullValue(ctxt);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) &#123;</span><br><span class="line">      result = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      JsonDeserializer&lt;Object&gt; deser = _findRootDeserializer(ctxt, valueType);</span><br><span class="line">      <span class="keyword">if</span> (cfg.useRootWrapping()) &#123;</span><br><span class="line">        result = _unwrapAndDeserialize(p, ctxt, cfg, valueType, deser);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = deser.deserialize(p, ctxt);</span><br><span class="line">      &#125;</span><br><span class="line">      ctxt.checkUnresolvedObjectId();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cfg.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) &#123;</span><br><span class="line">      _verifyNoTrailingTokens(p, ctxt, valueType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这行代码<code>result = deser.deserialize(p, ctxt);</code>使用一个反序列化对象进行 JSON 的反序列化，这里如果传入的是数字转化成 Boolean的话就是用的是<code>NumberDeserializers</code>中的<code>BooleanDeserializer</code>，而它的<code>deserialize</code>方法是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">deserialize</span><span class="params">(JsonParser p, DeserializationContext ctxt)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">JsonToken</span> <span class="variable">t</span> <span class="operator">=</span> p.getCurrentToken();</span><br><span class="line">  <span class="keyword">if</span> (t == JsonToken.VALUE_TRUE) &#123;</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (t == JsonToken.VALUE_FALSE) &#123;</span><br><span class="line">    <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _parseBoolean(p, ctxt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后<code>_parseBoolean</code>中将其他的数值转化成 Boolean。</p>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>以上就是整个 debug 的全过程了，总结一下就是<code>AbstractJackson2HttpMessageConverter</code>中会默认地将非 Boolean 的数值转化成 Boolean。那么如何解决这个问题呢？</p>
<p>首先使用搜索引擎解决😹然后搜索不到。。。然后我在 StackOverFlow 上提了一个<a href="https://stackoverflow.com/questions/59353379/springboot-atomically-convert-integer-to-boolean-with-requestbody-annotation-h/59355180#59355180">问题 &lt;click</a>。简单来说就是以下这种方式：</p>
<ul>
<li><p>自定义自己的反序列化工具，然后让 Spring 去管理这个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleModule <span class="title function_">addDeserializer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>().addDeserializer(Boolean.class, <span class="keyword">new</span> <span class="title class_">MyDeserializer</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyDeserializer</span> <span class="keyword">extends</span> <span class="title class_">JsonDeserializer</span>&lt;Boolean&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Boolean <span class="title function_">deserialize</span><span class="params">(JsonParser p, DeserializationContext ctxt)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="type">JsonToken</span> <span class="variable">t</span> <span class="operator">=</span> p.getCurrentToken();</span><br><span class="line">            <span class="keyword">if</span> (t == JsonToken.VALUE_TRUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t == JsonToken.VALUE_FALSE) &#123;</span><br><span class="line">                <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t == JsonToken.VALUE_STRING) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> p.getValueAsString();</span><br><span class="line">                <span class="keyword">return</span> value.equals(<span class="string">&quot;true&quot;</span>) ? <span class="literal">true</span> : value.equals(<span class="string">&quot;false&quot;</span>) ? <span class="literal">false</span> : <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这样就将所有 API 中，存在 Boolean 的情况都处理掉了。只能接受 Boolean 值或者字符串的”true”或者”false”。</p>
<p>但是作为一个优秀(pa ma fan)的👩‍💻coder😷，我们应该保证自己修改的代码不会影响到其他人或者其他模块，随便的修改全局的配置不太好。所以我寻找到了一个更加୧(๑•̀◡•́๑)૭的方式 —— 编写一个该属性的 set 方法即可。</p>
<p>因为Deserializer会将读取到的 JSON 的值通过 set 方法填入对象中，所以这种方式也是完全可行的，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAble</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">    able = (Boolean) value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equals(value)) &#123;</span><br><span class="line">    able = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，大功告成。但是实际上整个过程 debug 的时候是最有意思的，可以了解到它在转换的过程中实际上都做了些什么事情。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>JSON</tag>
        <tag>converter</tag>
        <tag>RequestBody</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 SpringCloud 微服务项目中一键部署 docker 启动</title>
    <url>/post/b3e20ead.html</url>
    <content><![CDATA[<p><img src="/docker.jpg"></p>
<span id="more"></span>

<h2 id="如何用-docker-一键启动-SpringCloud-微服务？"><a href="#如何用-docker-一键启动-SpringCloud-微服务？" class="headerlink" title="如何用 docker 一键启动 SpringCloud 微服务？"></a>如何用 docker 一键启动 SpringCloud 微服务？</h2><h3 id="为什么要使用-docker-启动我们的微服务？"><a href="#为什么要使用-docker-启动我们的微服务？" class="headerlink" title="为什么要使用 docker 启动我们的微服务？"></a>为什么要使用 docker 启动我们的微服务？</h3><p>原始传统的部署方式为我们带来了太多问题，比如当你的服务在测试环境正运行的正常，但是部署到生产环境就会出现一大堆未知问题，你查了好久，debug 代码之后发现，仅仅是一个环境变量没有设置正确，导致产生了目前这么一大串问题，浪费了你的时间，拖延了项目上线的时间，甚至产生了严重的生产事故。这个时候，我们就需要一个机制来保证我们的代码在部署到本地、测试以及生产的时候，我们的代码不会受到环境不一致的影响而导致我们部署失败！</p>
<p>还有就是我们可以使用 docker 打包镜像然后使用 docker-compose 编排容器一键启动，让运维自动化，极大的节省我们的工作时间。</p>
<h3 id="在-Spring-Cloud-微服务项目中如何使用-DOCKER？"><a href="#在-Spring-Cloud-微服务项目中如何使用-DOCKER？" class="headerlink" title="在 Spring-Cloud 微服务项目中如何使用 DOCKER？"></a>在 Spring-Cloud 微服务项目中如何使用 DOCKER？</h3><h4 id="首先我们需要将我们的每一个服务打包成镜像"><a href="#首先我们需要将我们的每一个服务打包成镜像" class="headerlink" title="首先我们需要将我们的每一个服务打包成镜像"></a>首先我们需要将我们的每一个服务打包成镜像</h4><p>例如我的<a href="https://github.com/Fatezhang/scaffold-cloud/blob/a6dd55772f59eecd99b099e013ce2ef4470cec91/scaffold-eureka/pom.xml#L43"> Scaffold-Cloud 项目中的 eureka 服务的 pom 文件</a>(点击链接跳转到 github 以下代码行)如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>scaffold-cloud/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">forceTags</span>&gt;</span>true<span class="tag">&lt;/<span class="name">forceTags</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后其他模块也一样，在 pom 文件中加入以上 maven 插件，完整项目代码如下(觉得好用 star✨一下哦)：</p>
<p><a href="https://github.com/Fatezhang/scaffold-cloud">https://github.com/Fatezhang/scaffold-cloud/</a></p>
<h4 id="使用脚本一键创建-docker-镜像"><a href="#使用脚本一键创建-docker-镜像" class="headerlink" title="使用脚本一键创建 docker 镜像"></a>使用脚本一键创建 docker 镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;============start to package with maven and recreate docker image==============&quot;</span><br><span class="line"></span><br><span class="line">SERVICE_FOLDERS=(</span><br><span class="line">  scaffold-eureka</span><br><span class="line">  scaffold-zuul</span><br><span class="line">  scaffold-tx-manager</span><br><span class="line">  scaffold-business/scaffold-business-sys-service</span><br><span class="line">  scaffold-business/scaffold-business-job-service</span><br><span class="line">  scaffold-business/scaffold-business-thirdparty-service</span><br><span class="line">  scaffold-route/scaffold-route-app</span><br><span class="line">  scaffold-route/scaffold-route-openapi</span><br><span class="line">  scaffold-route/scaffold-route-operate</span><br><span class="line">)</span><br><span class="line">path=</span><br><span class="line">for (( i = 0; i &lt; $&#123;#SERVICE_FOLDERS[@]&#125;; i++ )); do</span><br><span class="line">    path=$&#123;SERVICE_FOLDERS[$&#123;i&#125;]&#125;</span><br><span class="line">    echo &quot;进入目录 &gt;&gt;&gt;&gt; cd $&#123;path&#125;&quot;</span><br><span class="line">    cd &quot;$&#123;path&#125;&quot; || exit</span><br><span class="line">    pwd</span><br><span class="line">    mvn clean package docker:build -Pdocker</span><br><span class="line">    cd - || exit</span><br><span class="line">done</span><br><span class="line">echo &quot;============                      create end                     ==============&quot;</span><br></pre></td></tr></table></figure>

<h4 id="编排-docker-compose-启动所有微服务"><a href="#编排-docker-compose-启动所有微服务" class="headerlink" title="编排 docker-compose 启动所有微服务"></a>编排 docker-compose 启动所有微服务</h4><p>然后只需要将所有镜像编排在 docker-compose.yml 文件中即可，其中所有的容器都在同一个网络中以访问到对方服务，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br></pre></td></tr></table></figure>
<p>完整的 docker-compose.yml 文件如下（注意有一个<code>wait-for-it.sh</code>）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">micro-sys:</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="string">tx_manager:7970</span> <span class="string">&#x27;java -jar scaffold-business-sys-service-1.0-SNAPSHOT.jar&#x27;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">scaffold-cloud/scaffold-business-sys-service:1.0-SNAPSHOT</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp:/tmp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.scripts/wait-for-it.sh:/wait-for-it.sh</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8750</span><span class="string">:8750</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">eureka</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rmqbroker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rmqnamesrv</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tx_manager</span></span><br><span class="line">  <span class="attr">route-operate:</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="string">micro-sys:8750</span> <span class="string">&#x27;java -jar scaffold-route-operate-1.0-SNAPSHOT.jar&#x27;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">scaffold-cloud/scaffold-route-operate:1.0-SNAPSHOT</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp:/tmp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.scripts/wait-for-it.sh:/wait-for-it.sh</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8850</span><span class="string">:8850</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">micro-sys</span></span><br><span class="line">  <span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">scaffold-eureka-1.0-SNAPSHOT.jar</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">scaffold-cloud/scaffold-eureka:1.0-SNAPSHOT</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp:/tmp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8761</span><span class="string">:8761</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line">  <span class="attr">zuul:</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="string">eureka:8761</span> <span class="string">&#x27;java -jar scaffold-zuul-1.0-SNAPSHOT.jar&#x27;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">scaffold-cloud/scaffold-zuul:1.0-SNAPSHOT</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp:/tmp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.scripts/wait-for-it.sh:/wait-for-it.sh</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8861</span><span class="string">:8861</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">eureka</span></span><br><span class="line">  <span class="attr">tx_manager:</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="string">mysql:3306,redis:6379</span> <span class="string">&#x27;java -jar scaffold-txmanager-1.0-SNAPSHOT.jar&#x27;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">scaffold-cloud/scaffold-txmanager:1.0-SNAPSHOT</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp:/tmp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.scripts/wait-for-it.sh:/wait-for-it.sh</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8890</span><span class="string">:8890</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7970</span><span class="string">:7970</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">eureka</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql/mysql-server:5.7</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/config/my.cnf:/etc/my.cnf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/init:/docker-entrypoint-initdb.d/</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="string">pwd8ok8</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line">  <span class="attr">rmqnamesrv:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">foxiswho/rocketmq:server-4.5.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rmq/logs:/opt/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rmq/store:/opt/store</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPT_EXT:</span> <span class="string">&quot;-Duser.home=/opt -Xms128m -Xmx128m -Xmn128m&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line">  <span class="attr">rmqbroker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">foxiswho/rocketmq:broker-4.5.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqbroker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rmq/logs:/opt/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rmq/store:/opt/store</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rmq/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPT_EXT:</span> <span class="string">&quot;-Duser.home=/opt -server -Xms128m -Xmx128m -Xmn128m&quot;</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;mqbroker&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;/etc/rocketmq/broker.conf&quot;</span>,<span class="string">&quot;-n&quot;</span>,<span class="string">&quot;rmqnamesrv:9876&quot;</span>,<span class="string">&quot;autoCreateTopicEnable=true&quot;</span>]</span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">rmqconsole:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">styletang/rocketmq-console-ng</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqconsole</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8180</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPTS:</span> <span class="string">&quot;-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">scaffold-cloud:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">scaffold-cloud</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>

<h4 id="如何在启动所有微服务的时候按顺序启动呢？"><a href="#如何在启动所有微服务的时候按顺序启动呢？" class="headerlink" title="如何在启动所有微服务的时候按顺序启动呢？"></a>如何在启动所有微服务的时候按顺序启动呢？</h4><p>我们知道，SpringCloud 微服务中各个服务之间可能存在依赖关系，比如 tx-manager 服务需要等待 MySQL 和 Redis 都启动完成之后才能够顺利启动，但是 docker-compose.yml 文件中的 <code>depends_on</code>只能等待 docker 容器启动成功，而不能等待 docker 容器中的服务启动完成！</p>
<p>docker 官方给出的方案是使用wait-for-it.sh脚本，在容器启动之前执行脚本，判断依赖的服务和端口是否启动成功，然后再执行自己服务的启动命令。</p>
<p>所以我们也是这样去写一个脚本：<code>wait-for-it.sh</code>如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2223</span></span><br><span class="line">: $&#123;SLEEP_SECOND:=2&#125;</span><br><span class="line"></span><br><span class="line">wait_for() &#123;</span><br><span class="line">  echo Waiting for $1 on port $2... ...</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2086</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2188</span></span><br><span class="line">  while ! &lt;/dev/tcp/$1/$2; do</span><br><span class="line">    echo Waiting for $1 on port $2... ...</span><br><span class="line">    sleep $SLEEP_SECOND</span><br><span class="line">  done</span><br><span class="line">  echo Server:&quot;$1&quot; on port:&quot;$2&quot; is running... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SER_STRS=$1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2207</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2006</span></span><br><span class="line">SERVICES_PORTS=($(echo &quot;$SER_STRS&quot; | tr &#x27;,&#x27; &#x27; &#x27;))</span><br><span class="line"></span><br><span class="line">THEN_COMMAND=$2</span><br><span class="line"></span><br><span class="line">for ((i = 0; i &lt; $&#123;#SERVICES_PORTS[@]&#125;; i++)); do</span><br><span class="line">  SERVICE_PORT=$&#123;SERVICES_PORTS[$&#123;i&#125;]&#125;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2207</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2006</span></span><br><span class="line">  array=($(echo &quot;$SERVICE_PORT&quot; | tr &#x27;:&#x27; &#x27; &#x27;))</span><br><span class="line">  servername=$&#123;array[0]&#125;</span><br><span class="line">  serverport=$&#123;array[1]&#125;</span><br><span class="line">  wait_for &quot;$servername&quot; &quot;$&#123;serverport&#125;&quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;start to run command: $THEN_COMMAND&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2004</span></span><br><span class="line">if [ &quot;$THEN_COMMAND&quot; ]; then</span><br><span class="line">  eval &quot;$THEN_COMMAND&quot;</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">shellcheck <span class="built_in">disable</span>=SC2102</span></span><br><span class="line">  echo command: [$THEN_COMMAND] is invalid... ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>上述脚本的作用就是等待启动的服务以及端口启动成功，没有成功的话就继续 wait 等待，默认等待 2 秒，启动成功的话就执行自己的启动命令。</p>
<p>使用方式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tx_manager:</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="string">mysql:3306,redis:6379</span> <span class="string">&#x27;java -jar scaffold-txmanager-1.0-SNAPSHOT.jar&#x27;</span></span><br></pre></td></tr></table></figure>

<p>所以，以上就是使用 docker 启动 SpringCloud 微服务的全部内容，如果你觉得有用，希望能够给我的项目<a href="https://github.com/Fatezhang/scaffold-cloud/%E7%82%B9%E4%B8%AAstar">https://github.com/Fatezhang/scaffold-cloud/点个star</a> 哦~</p>
<p>而且你也可以给我提 issue，提 PR，欢迎一起交流学习，一起开发~</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>微服务</tag>
        <tag>springboot</tag>
        <tag>spring</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署Hadoop集群记录</title>
    <url>/post/5d23809a.html</url>
    <content><![CDATA[<p>今天记录一下，部署 Hadoop 集群的过程。</p>
<span id="more"></span>

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="系统及软件版本说明"><a href="#系统及软件版本说明" class="headerlink" title="系统及软件版本说明"></a>系统及软件版本说明</h3><p>本章操作中所使用的相关操作系统及软件版本如下：</p>
<table>
<thead>
<tr>
<th>软件</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>操作系统</td>
<td>Ubuntu 14.04.1</td>
</tr>
<tr>
<td>JDK</td>
<td>1.8.0</td>
</tr>
<tr>
<td>Hadoop</td>
<td>2.7.3</td>
</tr>
</tbody></table>
<h3 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h3><p>集群中每台机器都需要安装 JDK，步骤如下：</p>
<ol>
<li><p>上传<code>jdk-8u191-linux-x64.tar.gz</code>到<code>/opt</code>目录并解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u191-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 JDK 环境变量配置到&#x2F;etc&#x2F;profile 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=/opt/jdk1.8.0_191&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JRE_HOME=/opt/jdk1.8.0_191/jre&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>如有三台机器，分别命名为 master、slave1、slave2。那么我们就分别修改各自机器上<code>/etc/hostname</code>文件中的机器名为上述名称。<br>修改每台机器的&#x2F;etc&#x2F;hosts 文件，添加上述三对网络 IP 和机器名的对应：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">192.168.1.2     master</span><br><span class="line">192.168.1.3     slave1</span><br><span class="line">192.168.1.4     slave2</span><br></pre></td></tr></table></figure>

<h3 id="SSH-免密登录配置"><a href="#SSH-免密登录配置" class="headerlink" title="SSH 免密登录配置"></a>SSH 免密登录配置</h3><p>该操作是要让 master 节点可以无密码 SSH 登陆到各个 slave 节点上。</p>
<ol>
<li><p>首先生成 master 节点的公钥，在 master 节点的终端中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.ssh</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>多次回车完成 ssh 密钥对创建</p>
</li>
<li><p>在各节点上将该公钥加入授权</p>
<p>将公钥加入 master 本机授权，master 节点上执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>完成后执行 <code>ssh master</code> 验证一下（可能需要输入 <code>yes</code>，成功后执行 <code>exit</code> 返回原来的终端）</p>
<p>接着在 master 节点将上公匙分发到 slave1 和 slave2 节点，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@slave1:/root</span><br><span class="line">scp ~/.ssh/id_rsa.pub root@slave2:/root</span><br></pre></td></tr></table></figure>

<p>接着分别在 slave1 和 slave2 节点上，将 ssh 公匙加入授权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.ssh</span><br><span class="line"><span class="built_in">cat</span> ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>这样，在 master 节点上就可以无密码 ssh 登录到各个 slave 节点了，在 master 节点上执行 <code>ssh slave1</code> 和 <code>ssh slave2</code> 命令进行检验。</p>
</li>
</ol>
<h2 id="Hadoop-集群部署"><a href="#Hadoop-集群部署" class="headerlink" title="Hadoop 集群部署"></a>Hadoop 集群部署</h2><h3 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h3><ol>
<li><p>上传<code>hadoop-2.7.3.tar.gz</code>到<code>/opt</code>目录并解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.7.3.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 hadoop 目录上创建 tmp、dfs、dfs&#x2F;name、 dfs&#x2F;data 文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/hadoop-2.7.3</span><br><span class="line"><span class="built_in">mkdir</span> -p tmp dfs dfs/name dfs/data</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HADOOP_HOME=/opt/hadoop-2.7.3&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$HADOOP_HOME/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<p>切换到<code>/opt/hadoop-2.7.3/etc/hadoop</code>目录下修改配置文件。</p>
<ol>
<li><p>编辑 <code>hadoop-env.sh</code> 文件，将 <code>JAVA_HOME</code>(25 行)配置项为 <code>JDK</code> 安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_191</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>core-site.xml</code> 文件，添加以下内容，其中 <code>master</code> 为计算机名，<code>/opt/hadoop-2.7.3/tmp</code> 为手动创建的目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/hadoop-2.7.3/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abasefor other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>hdfs-site.xml</code> 文件，添加以下内容，其中<code>/opt/hadoop-2.7.3/dfs/name</code> 和 <code>/opt/hadoop-2.7.3/dfs/data</code> 为手动创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop-2.7.3/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop-2.7.3/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave1:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>need not permissions<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>mapred-site.xml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.local.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop-2.7.3/var<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>yarn-env.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/yarn-env.sh</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_191</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>yarn-site.xml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/yarn-env.xml</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- reducer获取数据的方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>slaves</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop-2.7.3/etc/hadoop/slaves</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>文件配置分发</p>
<p>至此，master 上的 hadoop 配置已经结束，需将<code>/etc/profile</code>、<code>/opt/hadoop-2.7.3</code>通过 scp 分发至至 slave1、slave2，重新编译 <code>/etc/profile</code> 使生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /etc/profile root@slave1:/etc/profile</span><br><span class="line">scp /etc/profile root@slave2:/etc/profile</span><br><span class="line">scp -r /opt/hadoop-2.7.3 root@slave1:/opt/hadoop-2.7.3</span><br><span class="line">scp -r /opt/hadoop-2.7.3 root@slave2:/opt/hadoop-2.7.3</span><br></pre></td></tr></table></figure>

<p>分别登录 slave1 和 slave2 执行<code>source /etc/profile</code></p>
</li>
</ol>
<h3 id="启动及验证"><a href="#启动及验证" class="headerlink" title="启动及验证"></a>启动及验证</h3><ol>
<li><p>第一次启动初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/hadoop-2.7.3/bin/hadoop namenode -format</span><br></pre></td></tr></table></figure>

<p>初始化成功后，可以在 <code>/opt/hadoop-2.7.3/dfs/name</code> 目录下看到新增了一个 current 目录以及一些文件。</p>
</li>
<li><p>Hadoop 启动</p>
<ol>
<li><p>启动 hdfs</p>
<p>在 master 节点执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/hadoop-2.7.3/sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 yarn</p>
<p>在 slave1 节点执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/hadoop-2.7.3/sbin/start-yarn.sh</span><br></pre></td></tr></table></figure></li>
</ol>
<p>浏览器输入访问 <a href="http://master:50070/">http://master:50070</a> (替换 master 节点 IP)验证部署成功。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Hadoop</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Write a blog in English</title>
    <url>/post/f7f71700.html</url>
    <content><![CDATA[<h3 id="Improve-my-spoken-English-now-and-written-listen"><a href="#Improve-my-spoken-English-now-and-written-listen" class="headerlink" title="Improve my spoken English now, and written, listen"></a>Improve my spoken English now, and written, listen</h3><p>It’s my third week in ThoughtWorks. And today afternoon, Sam who worked in REA and on business trip here made a session. Obviously, in English. I didn’t understand most contents. Almost all of the session for me is difficully. Except English, I also cannot understand some abbreviations and I didn’t used the services and tools which he refered.  </p>
<p>Tomorrow, I’ll show a card to customers which I paired with Benqing. To tell them what we did and what we are going to do for this card. </p>
<p>Emmm.. How to say, it’s magically, working in a foreign company. Lots of smart people and interesting colleagues. Before I entried TW I thought that this is not a company with good technology, but I’m wrong, at least I am the worst one.</p>
<p>Keep going, man! Don’t be discouraged! When you want to do something succed, just like you want breath every second, you will success.</p>
]]></content>
      <categories>
        <category>English study</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
        <tag>English study</tag>
        <tag>English blogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Scaffold-Cloud —— SpringCloud微服务架构实践</title>
    <url>/post/9cfc71b8.html</url>
    <content><![CDATA[<center><u style="font-size=16px;"><a href="/">Scaffold-Cloud: SpringCloud微服务脚手架</a></u></center> [幕布](https://mubu.com/doc/6NZlNw3DIw)
Scaffold-Cloud 是一个适用于开发者学习的 Spring-Cloud 微服务项目脚手架。项目期望集成大部分目前互联网公司使用的主流的Spring-Cloud微服务相关工具和服务。并结合一些实际的业务增加一些其他功能，如：分布式事务、定时任务、消息队列、日志分析等等，然后加入 CI/CD 并引入 docker 部署。

<p>Scaffold-Cloud 基于 SpringCloud Netflix 全家桶进行微服务项目的构建，所以在这之前，使用 Scaffold-Cloud 需要先了解下 SpringCloud 以及 Netflix 工具全家桶。</p>
<p><img src="/netflix.png"></p>
<center><u style="font-size=6px; color:gray">Sorry, NetFlix is not available in your country yet.</u></center>
<span id="more"></span>

<h2 id="Spring-Cloud-介绍"><a href="#Spring-Cloud-介绍" class="headerlink" title="Spring Cloud 介绍"></a>Spring Cloud 介绍</h2><h4 id="从单体应用到微服务"><a href="#从单体应用到微服务" class="headerlink" title="从单体应用到微服务"></a>从单体应用到微服务</h4><p>在早期的企业中，项目基本上都是单体应用，将一个网站部署在一台单独的服务器上对用户提供服务。但是这样的服务最大的缺点就是，当服务器断电或者服务进程挂掉，用户直接就无法访问。后来演进出集群服务，将同样的服务在多台服务器分别部署，使用负载均衡等手段让服务对于用户来说看到的都是同一个，这样当一台服务器夯机至少还有其他的服务器提供相同的应用。</p>
<p>但是，当企业级服务变得越来越复杂的时候，项目变得越来越庞大，有时甚至影响到了服务的部署，这个时候就应该将庞大的服务拆分成多个子系统，部署在不同的服务器上，这样的服务当遭遇高并发访问的时候也能够将请求压力分摊到多个服务器上，这就是分布式。</p>
<p>而当企业需要开启一个新的项目时，为了避免重复造轮子，往往一些可复用的模块会被拆分出来作为一个微小的系统，它可以独立的开发、设计、运行和运维，只需要使用 ESB企业服务总线将所有服务整合并提供统一的访问入口，就能够复用，这就是 SOA。</p>
<p>而微服务是对以上服务架构的最终演进结构：将服务切分成多个微小的应用，提供统一的服务访问协议HTTP(SpringCloud)&#x2F;TCP(Dubbo)，强调运行时的分散解耦，在业务上也有着高度的抽离。</p>
<blockquote>
<p><code>微服务架构风格</code><strong>是一种将<code>一个单一应用程序</code>开发为<code>一组小型服务</code>的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制</strong>(通常使用HTTP资源API)。这些<strong>服务围绕<code>业务能力</code>构建</strong>，并且可通过<strong>全自动部署机制独立部署</strong>。这些服务共用一个<strong>最小型的集中式的管理</strong>，服务可用不同的语言开发，使用不同的<strong>数据存储技术</strong>。<br><img src="/microservice.webp"><br>—— Martin Fowler</p>
</blockquote>
<p><strong>但是拆分成这么微小的微服务一定会碰到各种各样的问题——如何拆分？服务之间如何发现？如何授权？如何做负载均衡？如何管理多服务配置？如何跟踪调用链路？如何实时查看服务状态等等… … SpringCloud 就是以上一系列问题的 Solver。它提供了一整套的解决方案！</strong></p>
<h4 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h4><p>首先，SpringCloud 并不是一个框架，而是一个微服务的规范，或者说是一个微服务工具集合。</p>
<h5 id="SpringCloud特点："><a href="#SpringCloud特点：" class="headerlink" title="SpringCloud特点："></a>SpringCloud特点：</h5><ul>
<li>约定大于配置，基于 SpringBoot</li>
<li>开发部署于各种环境，AWS，阿里云，PC 等</li>
<li>隐藏组件复杂性，声明式配置，无 xml</li>
<li>开箱即用，快速启动</li>
<li>丰富的轻量级组件</li>
<li>灵活选型，如注册发现可用 eureka，zookeeper 或者 Redis</li>
</ul>
<h5 id="SpringCloud-各版本组件及版本兼容性"><a href="#SpringCloud-各版本组件及版本兼容性" class="headerlink" title="SpringCloud 各版本组件及版本兼容性"></a>SpringCloud 各版本组件及<a href="https://spring.io/projects/spring-cloud">版本兼容性</a></h5><table>
<thead>
<tr>
<th>Component</th>
<th>Edgware.SR6</th>
<th>Greenwich.SR2</th>
<th>Greenwich.BUILD-SNAPSHOT</th>
</tr>
</thead>
<tbody><tr>
<td>spring-cloud-aws</td>
<td>1.2.4.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-bus</td>
<td>1.3.4.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-cli</td>
<td>1.4.1.RELEASE</td>
<td>2.0.0.RELEASE</td>
<td>2.0.1.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-commons</td>
<td>1.3.6.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-contract</td>
<td>1.2.7.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-config</td>
<td>1.4.7.RELEASE</td>
<td>2.1.3.RELEASE</td>
<td>2.1.4.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-netflix</td>
<td>1.4.7.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-security</td>
<td>1.2.4.RELEASE</td>
<td>2.1.3.RELEASE</td>
<td>2.1.4.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-cloudfoundry</td>
<td>1.1.3.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-consul</td>
<td>1.3.6.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-sleuth</td>
<td>1.3.6.RELEASE</td>
<td>2.1.1.RELEASE</td>
<td>2.1.2.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-stream</td>
<td>Ditmars.SR5</td>
<td>Fishtown.SR3</td>
<td>Fishtown.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-zookeeper</td>
<td>1.2.3.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-boot</td>
<td>1.5.21.RELEASE</td>
<td>2.1.5.RELEASE</td>
<td>2.1.8.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-task</td>
<td>1.2.4.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-vault</td>
<td>1.1.3.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-gateway</td>
<td>1.0.3.RELEASE</td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-openfeign</td>
<td></td>
<td>2.1.2.RELEASE</td>
<td>2.1.3.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-function</td>
<td>1.0.2.RELEASE</td>
<td>2.0.2.RELEASE</td>
<td>2.0.3.BUILD-SNAPSHOT</td>
</tr>
</tbody></table>
<h3 id="SpringCloud-全家桶"><a href="#SpringCloud-全家桶" class="headerlink" title="SpringCloud 全家桶"></a><a href="https://spring.io/projects/spring-cloud">SpringCloud 全家桶</a></h3><h4 id="spring-cloud-netflix"><a href="#spring-cloud-netflix" class="headerlink" title="spring-cloud-netflix"></a>spring-cloud-netflix</h4><h5 id="eureka-原理："><a href="#eureka-原理：" class="headerlink" title="eureka 原理："></a>eureka 原理：</h5><ul>
<li>服务启动时，调用 eureka 接口进行注册，Eureka Server 会存储这些信息，IP、端口、微服务名称等</li>
<li>微服务启动之后，会周期性的发送心跳进行“续租”，默认 30 秒</li>
<li>如果一定时间没有“续租”，默认 90 秒，就销毁微服务实例</li>
<li>默认情况下，Eureka Server 也是一个 Eureka Client，集群下会互相复制服务注册表中的信息进行同步</li>
<li>Eureka Client 会缓存注册表的信息，减少Eureka Server 的请求压力，以及容灾</li>
</ul>
<h4 id="spring-cloud-openfeign"><a href="#spring-cloud-openfeign" class="headerlink" title="spring-cloud-openfeign"></a>spring-cloud-openfeign</h4><h4 id="spring-cloud-zuul-微服务网关"><a href="#spring-cloud-zuul-微服务网关" class="headerlink" title="spring-cloud-zuul 微服务网关"></a>spring-cloud-zuul 微服务网关</h4><h4 id="spring-cloud-config-配置中心"><a href="#spring-cloud-config-配置中心" class="headerlink" title="spring-cloud-config 配置中心"></a>spring-cloud-config 配置中心</h4><h2 id="项目创建的目的？"><a href="#项目创建的目的？" class="headerlink" title="项目创建的目的？"></a>项目创建的目的？</h2><p>第一个目的是为了本人能够熟悉和学习 Spring-Cloud 相关知识，不过在做了一段时间之后还是希望能够分享出来让更多的同学一起学习和讨论。</p>
<h2 id="项目结构如何？"><a href="#项目结构如何？" class="headerlink" title="项目结构如何？"></a>项目结构如何？</h2><ul>
<li>scaffold-business <a href="#">业务服务提供者</a> 端口从8850 - 8860<ul>
<li>scaffold-business-sys-service <a href="#">系统业务微服务-业务模块</a> 端口 8850</li>
<li>scaffold-business-job-service <a href="#">定时任务微服务-业务模块</a> 端口 8851</li>
<li>scaffold-business-thirdparty-service <a href="#">第三方业务微服务-业务模块</a> 端口 8852</li>
</ul>
</li>
<li>scaffold-business-api <a href="#">业务API包 用于接口与实现分离</a><ul>
<li>scaffold-business-sys-api <a href="#">系统资源、菜单、权限等API封装</a></li>
<li>scaffold-business-job-api <a href="#">定时任务API封装</a></li>
<li>scaffold-business-thirdparty-api <a href="#">第三方服务API封装</a></li>
</ul>
</li>
<li>scaffold-core <a href="#">工具类以及各种公共代码</a><ul>
<li>scaffold-core-code <a href="#">每个模块都会用到的公共代码，Bean，config等</a></li>
<li>scaffold-core-common <a href="#">工具类模块，公共代码</a></li>
<li>scaffold-core-plugin <a href="#">自动代码生成插件模块</a></li>
</ul>
</li>
<li>scaffold-eureka <a href="#">注册中心Eureka</a> 端口 8761 - 8771</li>
<li>scaffold-zuul <a href="#">网关服务</a> 端口 8861 - 8870</li>
<li>scaffold-config-server <a href="#">配置服务端服务</a> 端口 8871 - 8881</li>
<li>scaffold-config-client <a href="#">配置客户端服务</a> 端口 8880 - 8891</li>
<li>scaffold-tx-manager <a href="#">分布式事务协调服务</a> 端口7970 </li>
<li>scaffold-feign <a href="#">Feign模块</a><ul>
<li>scaffold-feign-sys <a href="#">feign-sys模块</a></li>
<li>scaffold-feign-job <a href="#">feign-job模块</a></li>
<li>scaffold-feign-thirdparty <a href="#">feign-thirdparty模块</a></li>
</ul>
</li>
<li>scaffold-route <a href="#">主业务消费者</a> 端口从8750 - 8760<ul>
<li>scaffold-route-operate <a href="#">后台管理接口及页面</a> 端口 8750</li>
<li>scaffold-route-app <a href="#">APP客户端接口</a> 端口 8751</li>
</ul>
</li>
</ul>
<h2 id="如何快速开始？"><a href="#如何快速开始？" class="headerlink" title="如何快速开始？"></a>如何快速开始？</h2><h3 id="1-本地直接启动"><a href="#1-本地直接启动" class="headerlink" title="1. 本地直接启动"></a>1. 本地直接启动</h3><ul>
<li><p>下载&#x2F;克隆项目到本地 </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/Fatezhang/scaffold-cloud</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装MySql数据库并启动</p>
</li>
<li><p>创建数据库scaffold_cloud_base 和 tx_manager</p>
</li>
<li><p>修改 scaffold-cloud 中微服务的数据库链接配置，本地运行只需要修改application-local.yml</p>
</li>
<li><p>安装redis服务并启动，修改scaffold-core-code配置文件中的配置，同样只需要修改local中的</p>
</li>
<li><p>安装Rocket MQ服务，同样修改配置</p>
</li>
<li><p>如果有需要，注册阿里OSS，并修改配置中的配置</p>
</li>
<li><p>启动EurekaApplication注册中心</p>
</li>
<li><p>启动TxlcnApplication分布式事务协调服务</p>
</li>
<li><p>启动SysServiceApplication，加载数据库字典等配置到缓存、提供后台管理微服务（权限、操作员、角色、国际化配置等）</p>
</li>
<li><p>启动RouteOperateApplication服务，默认端口为8750</p>
</li>
<li><p>访问<a href="http://localhost:8750/%C3%9F%C3%9F">http://localhost:8750/ßß</a></p>
</li>
<li><p>默认账号密码为admin&#x2F;admin123</p>
</li>
</ul>
<h3 id="2-使用-docker-部署"><a href="#2-使用-docker-部署" class="headerlink" title="2. 使用 docker 部署"></a>2. 使用 docker 部署</h3><h4 id="docker-启动-Linux-或者-Mac-下使用如下脚本-Windows-环境自行按照脚本中的示例执行"><a href="#docker-启动-Linux-或者-Mac-下使用如下脚本-Windows-环境自行按照脚本中的示例执行" class="headerlink" title="docker 启动 : Linux 或者 Mac 下使用如下脚本, Windows 环境自行按照脚本中的示例执行"></a>docker 启动 : Linux 或者 Mac 下使用如下脚本, Windows 环境自行按照脚本中的示例执行</h4><h4 id="mvn-clean-package-docker-build-Pdocker"><a href="#mvn-clean-package-docker-build-Pdocker" class="headerlink" title="mvn clean package docker:build -Pdocker"></a><code>mvn clean package docker:build -Pdocker</code></h4><pre><code>1. 进入项目所在目录
2. 执行 `./.scripts/recreate-docker-image.sh` 创建 docker 镜像
3. 执行 `./.scripts/start-docker-service.sh` 即使用 docker-compose 启动
</code></pre>
<h2 id="项目未来还需要做什么？"><a href="#项目未来还需要做什么？" class="headerlink" title="项目未来还需要做什么？"></a>项目未来还需要做什么？</h2><ul>
<li>更改项目注册发现中心，也许用 nacos 或者 zookeeper</li>
<li>加入更多 spring-cloud 周边服务，包括各种监控平台等</li>
<li>CI&#x2F;CD 使用 Jenkins 或者 BuildKite</li>
<li>使用 docker 容器化部署</li>
<li>ElasticSearch 日志收集</li>
<li><a href="https://github.com/xuxueli/xxl-job">xxl-job</a> 分布式定时任务 <a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a></li>
<li>整合<a href="https://github.com/justauth/JustAuth">第三方开源库</a>用以登录、支付等</li>
<li>最后，实际开发一些业务功能</li>
</ul>
<hr>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><blockquote>
<p><a href="https://juejin.im/post/5c28f2fe51882565a15776fb">https://juejin.im/post/5c28f2fe51882565a15776fb</a></p>
<p><a href="https://juejin.im/post/5de740566fb9a0165721b744">https://juejin.im/post/5de740566fb9a0165721b744</a></p>
<p><a href="https://juejin.im/post/5dc220126fb9a04aa660dcfb">https://juejin.im/post/5dc220126fb9a04aa660dcfb</a></p>
</blockquote>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>微服务</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>The second day on the job in ThoughtWorks</title>
    <url>/post/2b1638b7.html</url>
    <content><![CDATA[<p><img src="/fm.png"></p>
<span id="more"></span>

<h3 id="来到了一个我曾经羡慕的公司"><a href="#来到了一个我曾经羡慕的公司" class="headerlink" title="来到了一个我曾经羡慕的公司"></a>来到了一个我曾经羡慕的公司</h3><p>大学毕业之后，我去了杭州，同花顺，一个说起来还是某行业顶尖的服务提供商，算是很有名的大公司吧，但是却是996。甚至不止996，我曾经一段时间连着每天2、3点下班。每当我看到一个去了TW的大学同学的朋友圈之后，我承认我酸了。</p>
<p><img src="/wx.jpg"></p>
<p>上图就是在TW的同学，出差去泰国时候的朋友圈。我当时就在想，难道大学毕业之后去一个“奋斗比”公司，真的就比在一个“养老型”公司技术提升的就快么？后来我仔细想了下，如果真的是一个好学的人，在一个轻松的公司，照样每天下班后可以学习，而如果在一个业务繁重的公司中的话，也许每天因为敲业务代码，学习、看书的时间都没有了，更何况出去玩？</p>
<p>所以，我很羡慕去TW工作的，尤其是，这算是为数不多的在西安的比较好点儿的公司了。</p>
<p>然而也许是命运看到了我的愿望，两年后的昨天，我入职了ThoughtWorks。</p>
<h3 id="入职感受"><a href="#入职感受" class="headerlink" title="入职感受"></a>入职感受</h3><p>第一天入职的时候，感觉公司好小好拥挤（不过后来知道是在同一层楼的三幢楼都有办公区域），而且好吵。然后工作常用语言是英语，想了想自己的英语水平，瞬间就怂了。第一天就乖乖的找个每人的角落，配置下电脑，办理一下入职流程。</p>
<p>今天是我入职的第二天，我被带到了一个项目组。对国外的客户做了英文的自我介绍（还好自我介绍这种东西我之前也都有准备过）。然后中午参加了一场与国外客户的英文视频会议。</p>
<p>其实感受就是，尽快把英语练好，然后努力工作，接下来的日子，好好生活吧。下一个目标就是出国工作喽！</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>我项目中使用的分布式事务：LCN</title>
    <url>/post/ac4ab9dd.html</url>
    <content><![CDATA[<p><img src="/tx.png" alt="官网首页"></p>
<center><a href="#more2">其他关于分布式事务的总结整理</a></center>


<span id="more"></span>


<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>由于公司项目是使用dubbo进行开发的分布式服务，所以项目中有很多涉及到分布式事务问题的场景。比如有两个模块：用户模块和账户资金模块。有一个场景是用户被邀请成为系统的新用户，需要先初始化用户信息，然后再去账户资金模块初始化用户账户信息。两个不同的模块为两个不同的RPC服务，分别被调用然后插入数据，这时候如果账户资金插入失败，不加入分布式事务的话用户直接初始化成功。我们希望这种情况下用户插入的信息被回滚，所以需要引入分布式事务来进行业务处理。</p>
<h4 id="使用的框架"><a href="#使用的框架" class="headerlink" title="使用的框架"></a>使用的框架</h4><p>经过调研，我们发现TX-LCN框架比较适合我们的业务场景，我们打算引入并使用LCN事务模式来进行服务中的分布式事务的业务处理。关于LCN、TCC、TXC几种事务模式的区别在<a href="#more2">下面</a>整理。</p>
<p>在<a href="https://www.txlcn.org/zh-cn/index.html">官网</a>下载对应的服务，并引入项目或者单独启动：</p>
<p><img src="/tx.png" alt="官网首页"></p>
<p>引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.codingapi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transaction-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lcn.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.codingapi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tx-plugins-db<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lcn.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<p>在服务的发起方使用注解<code>@TxTransaction(isStart = true)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@TxTransaction(isStart = true)</span></span><br><span class="line"><span class="keyword">public</span> ExperienceLogVO <span class="title function_">doUseExperience</span><span class="params">(Long userId, Long experienceRecordId, ExperienceLogCreateModel createModel)</span> &#123;</span><br><span class="line"> 	<span class="comment">// ... do something  ...</span></span><br><span class="line">    userFacade.insert();</span><br><span class="line"> 	<span class="comment">// ... do something  ...</span></span><br><span class="line">    accountFacede.insert();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在服务的参与方使用注解<code>@TxTransaction</code>标识即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TxTransaction</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"> 	<span class="comment">// ... do something  ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再启动项目之前，先启动tx-manager服务，作为协调者的角色存在，然后启动项目，调用接口的时候就可以使用分布式事务了。</p>
<p><a id="more2" class="active"></a></p>
<h4 id="其他关于分布式事务的总结整理"><a href="#其他关于分布式事务的总结整理" class="headerlink" title="其他关于分布式事务的总结整理"></a>其他关于分布式事务的总结整理</h4><h5 id="关于Tx-LCN-官网文档"><a href="#关于Tx-LCN-官网文档" class="headerlink" title="关于Tx-LCN - 官网文档"></a>关于Tx-LCN - <a href="https://www.txlcn.org/zh-cn/docs/preface.html">官网文档</a></h5><p>Tx-LCN早期是为了设计出LCN分布式事务而命名的，不过在5.0之后可以支持LCN、TXC、TCC三种分布式事务模式。LCN框架定位为<code>不生产事务，只做事务的搬运工</code>。即TX-LCN是一款事务协调框架，本身并不操作事务，只是基于对事务的协调从而达到事务一致性的效果。</p>
<p>最新版本的TX-LCN同时支持多种事务模式。并支持多种不同的数据源同时使用分布式事务，完全达到拔插效果。以下是三种事务模式的介绍、区别及优缺点。</p>
<h6 id="LCN事务模式"><a href="#LCN事务模式" class="headerlink" title="LCN事务模式"></a>LCN事务模式</h6><ul>
<li>仅仅作为事务的协调者，本身不生产事务。原理是在事务发起方创建事务分组，并通过Http&#x2F;Tcp协议调用的时候将事务分组传递到事务参与方。事务参与方的本地事务执行成功之后，根据事务分组ID通知事务的发起方提交所有事务。在全部事务成功通知之前，其各个本地事务均为假关闭，等待TxManager协调完成事务之后再关闭连接。</li>
<li>LCN事务对于代码几乎没有嵌入性，只需要添加注解即可实现分布式事务。</li>
<li>LCN的事务提交与回滚都有本地事务保障，更安全的确保数据一致性。</li>
<li>但是LCN仅限于存在本地事务并且可以通过连接对象控制事务模块的系统。</li>
<li>LCN模式依赖于连接代理服务，事务的发起方与参与方要一起连接与释放，较耗性能。</li>
<li><img src="/LCN1.png" alt="情况1"></li>
<li><img src="/LCN2.png" alt="情况1"></li>
<li><img src="/LCN3.png" alt="情况1"><h6 id="TCC事务模式"><a href="#TCC事务模式" class="headerlink" title="TCC事务模式"></a>TCC事务模式</h6></li>
<li>TCC事务模式不依赖于资源管理器对于XA的支持，而是通过业务系统提供的业务逻辑的调度来实现分布式事务。即编写三步操作：Try：尝试执行业务（先插入一条数据，状态为Try）、Confrim：确认执行业务（成功后状态改为Confrim）、Cancel：取消执行业务（需要回滚的话根据前两个步骤的id继续更改状态或者删除数据）。</li>
<li>TCC模式对于代码的侵入性很高，基本上一个接口需要拆分成3个，对于程序员的编码要求很高，业务的正确性、数据一致性都由开发者来保证</li>
<li>优点是TCC模式对于有无本地事务的场景都适用，甚至可以跨数据源，针对MySQL、redis、Mongo等整合成一个大的事务<h6 id="TXC事务模式"><a href="#TXC事务模式" class="headerlink" title="TXC事务模式"></a>TXC事务模式</h6></li>
<li>其来源于阿里巴巴的一个分布式事务中间件，可以通过极少量的代码侵入，实现分布式事务。原理是在执行SQL之前，先查询SQL的影响数据，然后保存执行的SQL快照信息并创建锁。当需要回滚的时候就采用这些记录回滚数据库。目前实现锁使用的是redis分布式锁控制。</li>
<li>TXC事务模式同样对代码的侵入性低</li>
<li>该模式仅限于对支持SQL方式的模块支持</li>
<li>该模式由于每次执行SQL之前需要先查询影响数据，因此相比LCN模式更消耗性能</li>
<li>TXC事务模式不会占用数据库资源</li>
<li>关于TXC事务的详细介绍可以查看<a href="https://blog.csdn.net/m0_38110132/article/details/77043580">这篇博客</a></li>
</ul>
<h5 id="CAP理论和BASE理论"><a href="#CAP理论和BASE理论" class="headerlink" title="CAP理论和BASE理论"></a>CAP理论和BASE理论</h5><h6 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h6><p>CAP理论即数据一致性、服务可用性和分区容错性的简称。</p>
<ul>
<li>Consistency 数据一致性：一次完整的更新操作，所有节点在同一时刻访问到的数据是一致的</li>
<li>Availability 服务可用性：服务一直可用，并且是正常响应时间</li>
<li>Partition tolerance 分区容错性：分布式多节点在某几个节点挂掉后仍然可以对外提供正常的服务</li>
</ul>
<p>事实上，CAP这三种并无法保证完全满足，一般只能满足其二。对于分布式系统来说，分区容错性是最基本需要满足的条件，否则不能称为分布式系统，只满足CA 其实是传统的单机服务。那么在满足P（分区容错）的时候，就需要在C和A之间权衡。事实上，分布式系统下一般会保证A（服务可用）P，放弃数据的强一致性，只保证数据的最终一致性。这样就衍生出了BASE理论。</p>
<h6 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h6><p>BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的。BASE理论的核心思想是：<strong>即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性</strong>。</p>
<ul>
<li>基本可用：在分布式系统中，允许在出现不可预知故障的情况下损失部分可用性（并不是允许系统不可用），允许响应时间上的确实和部分系统功能的错误（并发场景下拒绝服务产生报错等）</li>
<li>软状态：即允许数据存在中间状态，允许不同节点的数据之间存在时间上的数据差异</li>
<li>最终一致性：强调所有数据副本能够最终一致，不需要保证数据实时强一致。</li>
</ul>
<p>传统事务的ACID机制追求强一致性，而BASE理论为分布式系统而生，主张牺牲强一致性，使得服务达到高可用。不过在分布式系统中，不同场景下对于数据的一致性又是不同的，所以才会有分布式事务来保证数据的一致，即ACID与BASE理论结合使用。</p>
<h5 id="2PC和3PC"><a href="#2PC和3PC" class="headerlink" title="2PC和3PC"></a>2PC和3PC</h5><h6 id="2PC-二段式提交"><a href="#2PC-二段式提交" class="headerlink" title="2PC - 二段式提交"></a>2PC - 二段式提交</h6><p>2PC，是Two-Phase Commit的缩写。过程如下：</p>
<ul>
<li><p>阶段一：提交事务请求</p>
<ul>
<li>协调者询问参与方是否可以执行提交操作并等待响应</li>
<li>参与者执行询问为止的所有事务操作</li>
<li>参与者响应协调者，返回事务执行成功与否</li>
</ul>
</li>
<li><p>阶段二：执行事务提交</p>
<ul>
<li><p>协调者收到所有第一阶段响应之后发起正式提交请求</p>
</li>
<li><p>参与者正式完成操作并释放整个事务期间占用的资源</p>
</li>
<li><p>反馈事务提交结果</p>
</li>
<li><p>协调者收到所有完成的消息后，完成事务。</p>
</li>
<li><p>如果任意参与者在第一阶段返回执行失败或者超时的消息，中断事务</p>
</li>
<li><p>参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源。</p>
</li>
<li><p>参与者节点向协调者节点发送”回滚完成”消息。</p>
</li>
<li><p>协调者节点受到所有参与者节点反馈的”回滚完成”消息后，取消事务。</p>
</li>
<li><p>不管最后结果如何，第二阶段都会结束当前事务</p>
</li>
</ul>
<p><strong>2PC的缺点：</strong> 执行过程中所有节点都是同步阻塞的；如果协调者是单点并且发生故障，参与者将一直阻塞；如果在第二阶段协调者正式向所有参与者发送正式提交事务的请求，其中部分因为网络问题没有收到，另一部分却已经提交无法回滚，出现数据不一致的情况；协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。</p>
<p>由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。</p>
</li>
</ul>
<h6 id="3PC-三段式提交"><a href="#3PC-三段式提交" class="headerlink" title="3PC - 三段式提交"></a>3PC - 三段式提交</h6><p>3PC将2PC的准备阶段又划分为两次准备，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。。并且在协调者与参与者中都引入超时机制。</p>
<ul>
<li><p>CanCommit阶段</p>
<ul>
<li>同2PC的准备阶段，协调者向参与者发送事务提交请求，询问并等待响应</li>
<li>得到响应之后进入预备提交阶段</li>
</ul>
</li>
<li><p>PreCommit阶段</p>
<ul>
<li>所有参与者第一阶段都返回成功状态，那么就会开始事务的预执行</li>
<li>进入PreCommit并执行事务操作，全部成功就返回给提交者</li>
<li>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。发送中断请求协调者向所有参与者发送abort请求;中断事务参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</li>
</ul>
</li>
<li><p>doCommit阶段</p>
<ul>
<li><p>发送提交请求协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。</p>
</li>
<li><p>事务提交参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。</p>
</li>
<li><p>响应反馈事务提交完之后，向协调者发送Ack响应。</p>
</li>
<li><p>完成事务协调者接收到所有参与者的ack响应之后，完成事务。</p>
</li>
</ul>
<p>中断事务协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。</p>
<ul>
<li><p>发送中断请求协调者向所有参与者发送abort请求</p>
</li>
<li><p>事务回滚参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</p>
</li>
<li><p>反馈结果参与者完成事务回滚之后，向协调者发送ACK消息</p>
</li>
<li><p>中断事务协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</p>
</li>
</ul>
<p>相比于2PC，3PC最关键要解决的就是协调者和参与者同时挂掉的问题，所以3PC把2PC的准备阶段再次一分为二。在第一阶段只是询问所有参与者是否都可以执行事务操作，并不在本阶段执行事务操作。当协调者收到所有的参与者都返回YES时，在第二阶段才执行事务操作，然后在第三阶段在执行commit或者rollback。</p>
<p><strong>3PC存在的问题：</strong> 在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者abort请求时，会在等待超时之后，会继续进行事务的提交。这样与其他执行回滚的参与者就会出现数据不一致的情况。</p>
</li>
</ul>
<hr>
<blockquote>
<p>参考：</p>
<ul>
<li><p><a href="https://www.hollischuang.com/archives/1580">https://www.hollischuang.com/archives/1580</a></p>
</li>
<li><p><a href="http://anruence.com/2018/03/05/tcc-2pc-3pc/">http://anruence.com/2018/03/05/tcc-2pc-3pc/</a></p>
</li>
<li><p><a href="http://blog.jobbole.com/95632/">http://blog.jobbole.com/95632/</a></p>
</li>
<li><p><a href="http://blog.csdn.net/zhangjq520/article/details/78433686">http://blog.csdn.net/zhangjq520/article/details/78433686</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/48627764/answer/111983553">https://www.zhihu.com/question/48627764/answer/111983553</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/d3eda795188a">https://www.jianshu.com/p/d3eda795188a</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>分布式</category>
        <category>分布式事务</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>微服务</tag>
        <tag>分布式</tag>
        <tag>分布式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>最新开启Nicegram Debug方法</title>
    <url>/post/235071f9.html</url>
    <content><![CDATA[<p>记录一下最新的开启<code>Nicegram Debug</code>的方式，帮助有需要的人。官方 Telegram 已支持解锁，建议使用官方客户端。</p>
<span id="more"></span>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Nicegram 曾在<code>5.11(57)</code>版本中移除了 <code>NG Debug</code>，大家都开始采用回退版本的方法来开启<code>NG Debug</code>，在之后的版本中此方法失效。我看了下测试版的更新说明，可以在<code>5.11(59)</code>版本的更新说明中看到，<code>Nicegram Debug</code>已经回归，采用了全新的开启方式，不能再从 Nicegram App 中开启，而是采用 Web 或 Telegram bot 的方式开启。</p>
<p><img src="https://img.iszy.xyz/20191015145457.png" alt="更新说明"></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>访问<a href="https://my.nicegram.app/">my.nicegram.app</a>，通过 Telegram 登录你需要开启<code>Nicegram Debug</code>的账户。注意是 Telegram，不是 Nicegram。</p>
<p><img src="https://img.iszy.xyz/20191015141146.png" alt="my.nicegram.app"></p>
<p>然后将看到开启开关。</p>
<p><img src="https://img.iszy.xyz/20191015141021.png" alt="开关"></p>
<p>将两个开关均打开，重新启动 Nicegram，该账号已经能够正常访问苹果封锁的群组了。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Telegram</tag>
        <tag>iOS</tag>
        <tag>Nicegram</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Telegram机器人管理ASF</title>
    <url>/post/eab30379.html</url>
    <content><![CDATA[<p>个人比较喜欢 Node.js，最近用 Node.js 弄了个简单的 Telegram 机器人用于管理 ASF，即 <a href="https://github.com/JustArchiNET/ArchiSteamFarm">ArchiSteamFarm</a>。现在我把代码放 GitHub 上面，有需要的可以尝试一下。</p>
<span id="more"></span>

<h2 id="准备信息"><a href="#准备信息" class="headerlink" title="准备信息"></a>准备信息</h2><h3 id="创建-Telegram-机器人"><a href="#创建-Telegram-机器人" class="headerlink" title="创建 Telegram 机器人"></a>创建 Telegram 机器人</h3><p>在 Telegram 里，搜索 @BotFather 机器人并启用。</p>
<p>发送以下命令：</p>
<ol>
<li>创建机器人：<code>/newbot</code></li>
<li>设定 bot 名称：<code>ASF</code>(任取，可重复，这里只是个例子)</li>
<li>设定 bot 用户名：<code>test_asf_bot</code>(任取，不可重复，这里只是个例子)</li>
</ol>
<p><code>@BotFather</code> 会发给你一串 token，形如 <code>987654321:XXXXXX-XXXXXXXXXX</code>，注意保留。</p>
<h3 id="查询-Chat-ID"><a href="#查询-Chat-ID" class="headerlink" title="查询 Chat ID"></a>查询 Chat ID</h3><p>在 Telegram 里，搜索 <code>@FalconGate_Bot</code> 机器人并启用。</p>
<p>发送命令：<code>/get_my_id</code></p>
<p><code>@FalconGate_Bot</code> 会发给你一串数字，即是你的 Chat ID。</p>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>项目地址: <a href="https://github.com/ZvonimirSun/node-asf-bot">node-asf-bot</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ZvonimirSun/node-asf-bot.git</span><br><span class="line"><span class="built_in">cd</span> node-asf-bot</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><ul>
<li>Node.js</li>
<li>ASF IPC</li>
</ul>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>配置环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The API token of your Telegram bot</span></span><br><span class="line"><span class="built_in">export</span> TELEGRAM_TOKEN=987654321:XXXXXX-XXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line"><span class="comment"># Your Telegram number ID (not the username)</span></span><br><span class="line"><span class="built_in">export</span> ADMIN_ID=123456789</span><br><span class="line"><span class="comment"># ASF IPC address</span></span><br><span class="line"><span class="built_in">export</span> IPC_ADDR=http://127.0.0.1:1242/</span><br><span class="line"><span class="comment"># ASF IPC password</span></span><br><span class="line"><span class="built_in">export</span> IPC_PASS=PASSWORD</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h3><ul>
<li>docker-ce</li>
<li>docker-compose</li>
<li>ASF IPC</li>
</ul>
<h3 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h3><p>修改<code>docker-compose.yml</code>文件配置环境变量。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">TELEGRAM_TOKEN=987654321:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ADMIN_ID=123456789</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IPC_ADDR=http://127.0.0.1:1242</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IPC_PASS=password</span></span><br></pre></td></tr></table></figure>

<p>将对应配置项替换。</p>
<h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="Webhooks-方式运行-选"><a href="#Webhooks-方式运行-选" class="headerlink" title="Webhooks 方式运行(选)"></a>Webhooks 方式运行(选)</h2><p>在上面的环境变量或<code>docker-compose.yml</code>中添加<code>URL</code>配置项，即可转为 Webhooks 方式运行，比 polling 方式响应更及时。</p>
<p>注意，此种方式，必须拥有自己的域名，且必须采用 https，不支持<code>SSL V2/V3</code>等过旧的协议，推荐采用<code>TLS V1.2</code>。</p>
<h3 id="配置应用"><a href="#配置应用" class="headerlink" title="配置应用"></a>配置应用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> URL=https://asfbot.example.com</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">URL=https://asfbot.example.com</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>Nginx 反代 3000 端口，部分配置示例如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:3000;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header X_FORWARDED_PROTO https;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Telegram</tag>
        <tag>Nodejs</tag>
        <tag>ASF</tag>
      </tags>
  </entry>
  <entry>
    <title>其实我不太想离开这里</title>
    <url>/post/1339e588.html</url>
    <content><![CDATA[<p><img src="/fm.png" alt="杭州西湖"></p>
<span id="more"></span>


<h4 id="序"><a href="#序" class="headerlink" title="序"></a>序</h4><p>我要离开了。离开杭州，离开这个生活了快三年的地儿。放弃要去一线大公司的欲望，放弃年薪百万的梦想，放弃温柔可爱的南方姑娘，放弃我毕业之前一直向往的自由和远方… … 最让我难受的，在杭州两年认识的几个朋友，也许以后再难见上一面。还有，回到了家乡，我是否就此过上一个安逸的生活，还能否保持目前的这份斗志。杭州被程序员论坛称为“奋斗逼之都”，源于马老师的福报，我虽不喜欢这种996的工作节奏，但是离开这里，真的要放弃很多。</p>
<h4 id="辞职"><a href="#辞职" class="headerlink" title="辞职"></a>辞职</h4><p>2019年8月21日，在被称为互联网寒冬的这年，我辞职了。因为这一年以来，公司的经营状况出了很大的问题，8月，线上服务器关闭了，这意味着理财业务此时已经完全停止，公司金融部门用仅剩的海外贷款业务维持着最后一线生机。这种时刻，但凡是觉得自己在离开之后能够找到合适工作的人，都不会想要再继续再公司呆下去。我就是其中之一，所以我向老大说，我想走了！</p>
<p>后来，我们一起去吃了散伙饭，又是火锅，每次都是。为什么说“每次”呢？因为在我之前，还有5个人。我想我也不会是最后一个吧。</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>事实上半年以来我都在使用空闲时间学习、刷算法题、写博客、点亮GitHub绿点以期望自己在之后找工作能够靠着博客和GitHub的活跃程度吸引到某公司的面试官（后来事实证明，这个做法还挺管用，当然我的确有在丰富自己的知识而不只是点“绿点”）。这半年以来，在公司所做的工作几乎可以用杂活来形容！不过这些杂活，为我营造了充足的学习时间的同时，却也让我后来的简历上难以写上一些有含金量的项目。</p>
<p>今年以来，我写了大概30多篇博客，有段时间几乎是一周两篇，就在公司用上班时间写！博客主要学习和整理一些Java基础、多线程并发编程系列的知识，以及整理一些我在实际项目中的一些需求的解决方案。除了博客，我还在GitHub整理了自己在公司使用的一些基础框架，然后自己搭建了一个spring cloud版本的脚手架：<a href="https://github.com/Fatezhang/scaffold-cloud">Scaffold-Cloud</a>。还在幕布上整理了大篇幅的<a href="https://mubu.com/doc/hpBd1e5h6z">Java学习大纲</a>和一些面试题目、Java知识点、阿里Java开发手册，不过到目前还没有整理完成，因为实在是太多了，Java基础、设计模式、数据结构与算法、分布式、数据库、计算机网络等等，一点点敲下来也是非常费时间的。</p>
<h4 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h4><p>说了这么多，你可能以为离职之后我找到了一个好工作。然而，在离职后的一周，我在某直聘APP上投递了几十家简历，在八月的最后一周，我面试了五家公司，包括一家仅有电话面试的公司。事实上在面试之前，我对自己还是很有自信的，毕竟学了半年，怎么着小公司的offer还是可以拿到手的，拿到小公司offer在开始投大公司，开启offer收割机模式。然而我的脸被现实狠狠的打肿了。我面试了鲸灵、大华、兑吧、涂鸦！现实告诉我：你就是个彩笔！还他么想拿大厂的offer？做梦去吧！</p>
<p>事实上，我在面试的时候基本上都能够回答的出来面试官的问题，尤其是多线程和一些分布式相关的问题，Java基础、JVM更是一直在我的复习范围。然而，当面试官问到一些实际项目遇到的问题以及自己是如何解决的，我就歇菜了。例如实际生产中是如何做性能调优的，实际项目中遇到了哪些问题，是如何解决的？我知道面试官是想考察我解决问题的思路，然而当我将自己工作中所做的全盘托出，换来的却是面试官的鄙视！因为实在是太没有技术含量了，而我自己也确实没有在实际生产中遇到一些比较棘手的问题。这一周的面试将我的信心打压到谷底。</p>
<h4 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h4><p>幸运的是，我在正式办好离职手续的最后一个礼拜，一个大学的时候进了西安一个比较好的外企的同学告诉我，他们公司招人，问我要不要试一下。在从同花顺离职的时候，也就是一年之前，我有尝试面试过这家公司，可惜在homework阶段由于代码没有写的很好被淘汰了。这次，我要求自己要做好充足的准备。</p>
<p>他们公司面试不像杭州这边的互联网公司，面试总爱问一些高并发、分布式等等只会出现在面试中而不会出现在实际工作中的问题（当然这种说法也很片面）。这个外企的面试流程是给出一道程序设计题，3天时间提交代码，审核代码的质量以及是否优雅的完成题目要求，然后二面针对所做的题目增加需求，考察应试者实际动手能力以及程序设计能力。三面针对项目经验、工作经验再进行一轮面试。</p>
<p>9月6日周五下午4:19，我收到了这家公司的offer，丰厚的报酬和福利，还有离家近的条件让我无法拒绝这样一个offer。再加上在杭州这边面试的不顺利，我决定回去了。在我最后一个面试——杭州涂鸦的时候，我清楚地记得涂鸦HR很明确的告诉我，公司加班严重，大小周。我想，这样的公司是我想要去为之奋斗的吗？不，对于公司来说，员工都只是公司的一颗颗的螺丝钉，都是可被替代的零件，为何要为这种血汗工厂去牺牲自己的生活，杭州的996相必在最近五年之内都会是这个城市程序员的梦魇，最让人无奈的是，有些人竟然真的认为自己是在为自己“奋斗”，殊不知他们是被压迫的社会底层的劳动者，忘记了曾经的“8小时工作制”是由一些多么向往自由的人反抗争取来的，真正宣传996“福报”的资本家已经赚足了钱退休了（写于2019年9月10日）。</p>
<h4 id="回首"><a href="#回首" class="headerlink" title="回首"></a>回首</h4><p>我在写这篇博客的时候，脑中不断地回忆起17年2月底来到杭州直到现在发生的种种事情。确实由那句话所说，很多年后回想起来，你什么时候准备考研、出国留学、工作、恋爱、结婚生子、跳槽，都有可能会是人生中的一个大的转折点，而自己当时还只是认为这些事只是人生中很小的一件事情。</p>
<p>从同花顺跳槽去杭州的第二家公司工作，是我这两年最后悔的事情。如果我当时不从同花顺走，或者说在同花顺能有一些好的工作体验，也许目前就是另一种状态了吧。原本我跳槽后的计划是，在新的公司将自己沉淀两三年，将技术提升上去，三年后跳槽去一线大公司，但是无奈公司连支持我待够两年都做不到。2019年，其实是我最抑郁，世界最黑暗的一年。这年来，在新的公司工作，公司发展不顺利，志同道合的朋友也渐少，以前几个老朋友从每周几次在一起吃饭、玩的状态突然就变成一个月都见不了一面。也许是他们也都有了自己的女朋友，有了自己的生活，顾不上我了吧。而我每周末都想出去玩，却找不到同行的伙伴。</p>
<p>在杭州的两年时间，我去了周边的很多地方，刚毕业那会也许想的是，我终于获得了自己想要的自由生活，工资也足以让我到处去旅游。我曾经想，自己家要是江浙沪这一带的该有多好，西安那边真的很落后，虽然城市中不太看得出差距，但是城市周边的市、县、村，却是西北那边怎么也追赶不上来的。而且我在这边能够接触到更新的东西，一些新兴的互联网产品都会在这一带优先投放，例如共享单车、共享充电宝、智慧城市服务等等。我想杭州应该会是最优先开始智能化、互联网化的城市之一吧。</p>
<p>可惜了，即将离开这里，放弃两年来在这边拥有的一切。我的朋友，还有我的生活。虽然很不想说再见，但是谁又能主导自己的命运呢。</p>
<p>杭州，有缘再见吧！</p>
<p><img src="/mu.jpg"></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>ArcGIS批量生成UUID作为唯一ID</title>
    <url>/post/4ec1fc2e.html</url>
    <content><![CDATA[<p>最近需要将一批数据添加唯一 ID，UUID 作为一个具有唯一性的通用编号方案，正适合承担这个任务。</p>
<span id="more"></span>

<h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h2><p>通用唯一识别码（英语：Universally Unique Identifier，缩写：UUID）是用于计算机体系中以识别信息数目的一个 128 位标识符，还有相关的术语：全局唯一标识符（GUID）。根据标准方法生成，不依赖中央机构的注册和分配，UUID 具有唯一性，这与其他大多数编号方案不同。重复 UUID 码概率接近零，可以忽略不计。</p>
<p>UUID 主要有五个算法，也就是五种方法来实现：</p>
<table>
<thead>
<tr>
<th>算法</th>
<th>方式</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>uuid1</td>
<td>基于时间戳</td>
<td>由 MAC 地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，但 MAC 的使用同时带来安全性问题，局域网中可以使用 IP 来代替 MAC。</td>
</tr>
<tr>
<td>uuid2</td>
<td>基于分布式计算环境 DCE</td>
<td>算法与 uuid1 相同，不同的是把时间戳的前 4 位置换为 POSIX 的 UID。实际中很少用到该方法。</td>
</tr>
<tr>
<td>uuid3</td>
<td>基于名字的 MD5 散列值</td>
<td>通过计算名字和命名空间的 MD5 散列值得到，保证了同一命名空间中不同名字的唯一性，和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的 uuid。</td>
</tr>
<tr>
<td>uuid4</td>
<td>基于随机数</td>
<td>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</td>
</tr>
<tr>
<td>uuid5</td>
<td>基于名字的 SHA-1 散列值</td>
<td>算法与 uuid3 相同，不同的是使用 Secure Hash Algorithm 1 算法</td>
</tr>
</tbody></table>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过上面的介绍，我们可以看出来，为了保证全局的唯一性，我们将使用 uuid1 方法来完成这项工作。</p>
<p>我们用 ArcGIS 打开我们需要创建唯一字段的矢量数据属性表，创建一个类型为 text 的新字段，打开字段编辑器(Field Calculator)。Parser 选择<code>Python</code>，勾选<code>Show Codeblock</code>，分别输入以下内容。</p>
<ul>
<li><p>Pre-Logic Script Code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUUID</span>():</span><br><span class="line">  val=(<span class="built_in">str</span>(uuid.uuid1())).lower()</span><br><span class="line">  <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure>
</li>
<li><p>UUID &#x3D; (你刚刚创建的字段名)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">getUUID()</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://img.iszy.xyz/20190909102342.png?x-oss-process=style/mystyle"></p>
<p>点击 OK，等待运算完成，你将能看到所有的 feature 已经被赋予了 UUID。</p>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>ArcGIS</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程学习(七)：Fork/Join框架原理及demo</title>
    <url>/post/19c6e00c.html</url>
    <content><![CDATA[<p><img src="/fm.jpg" alt="fm.jpg"></p>
<span id="more"></span>

<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Fork&#x2F;Join框架是jdk1.7引入的一个基于“分治”思想的多线程框架。它的功能是将一个大任务切分(<strong>fork</strong>)成多个相同逻辑的小任务，分而治之，当子任务全都执行完成之后，将结果合并(<strong>join</strong>)起来，最终成为整体任务的执行结果。原理可以抽象成下图表示：</p>
<p><img src="/fj.png" alt="Fork/Join"></p>
<h3 id="Fork-x2F-Join相关代码原理及思想"><a href="#Fork-x2F-Join相关代码原理及思想" class="headerlink" title="Fork&#x2F;Join相关代码原理及思想"></a>Fork&#x2F;Join相关代码原理及思想</h3><h6 id="Fork-x2F-Join执行步骤"><a href="#Fork-x2F-Join执行步骤" class="headerlink" title="Fork&#x2F;Join执行步骤"></a>Fork&#x2F;Join执行步骤</h6><ol>
<li><p>进行任务分割：将任务分割成小任务，然后这个小任务有可能还需要继续分割，直到足够小。</p>
</li>
<li><p>执行并合并结果：分割的子任务分别放在双端队列里，然后几个启动线程分别从双端队列里获取任务执行。子任务执行完的结果都统一放在一个队列里，启动一个线程从队列里拿数据，然后合并这些数据。</p>
</li>
</ol>
<p>Fork&#x2F;Join使用两个类完成以上步骤：</p>
<ul>
<li><strong>ForkJoinTask</strong>：<ul>
<li>Fork&#x2F;Join提供了两个子类：RecursiveAction：用于没有返回结果的任务；RecursiveTask ：用于有返回结果的任务</li>
</ul>
</li>
<li><strong>ForkJoinPool</strong> ：<code>public class ForkJoinPool extends AbstractExecutorService&#123; ... &#125;</code>ForkJoinTask需要通过ForkJoinPool来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。这种算法成为<strong>工作窃取算法(work-stealing)</strong></li>
</ul>
<h6 id="工作窃取算法-work-stealing"><a href="#工作窃取算法-work-stealing" class="headerlink" title="工作窃取算法(work-stealing)"></a>工作窃取算法(work-stealing)</h6><ul>
<li><p>Fork&#x2F;Join框架内部实现了一个类似于LinkedBlockingDeque的双端队列用作工作线程的任务队列<strong>WorkQueue</strong>。使用<code>ForkJoinWorkerThread</code>保存工作线程，<code>ForkJoinPool.WorkQueue</code>就在其内部。</p>
</li>
<li><p>Fork&#x2F;Join每个工作线程在运行中产生了新的任务(通常是调用fork方法)的时候，将任务加入WorkQueue尾部，并且工作线程每次取出任务执行也是从队尾取出执行，即LIFO</p>
</li>
<li><p>每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务（或是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的工作队列），窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是 FIFO 方式。</p>
</li>
<li><p>在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。</p>
</li>
<li><p>在既没有自己的任务，也没有可以窃取的任务时，进入休眠。</p>
</li>
</ul>
<h3 id="Fork-x2F-Join-demo演示"><a href="#Fork-x2F-Join-demo演示" class="headerlink" title="Fork&#x2F;Join demo演示"></a>Fork&#x2F;Join demo演示</h3><blockquote>
<p>使用Fork&#x2F;Join完成大量有序数字的加和</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCalculateTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREADSHOLD</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyCalculateTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, List&lt;String&gt; list)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.start = start;</span><br><span class="line">    <span class="built_in">this</span>.end = end;</span><br><span class="line">    <span class="built_in">this</span>.list = list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (end - start &lt; THREADSHOLD) &#123;</span><br><span class="line">      <span class="comment">// 当两数字之间差值小于指定值 就不再查分成小任务 </span></span><br><span class="line">      <span class="type">String</span> <span class="variable">so</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        so += list.get(i) + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot;处理 &quot;</span> + so + <span class="string">&quot; 的数据&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">      <span class="comment">// 一分为二 拆分任务</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">MyCalculateTask</span> <span class="variable">left</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalculateTask</span>(start, mid, list);</span><br><span class="line">      <span class="keyword">final</span> <span class="type">MyCalculateTask</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalculateTask</span>(mid, end, list);</span><br><span class="line">      left.fork();</span><br><span class="line">      right.fork();</span><br><span class="line">      sum += left.join();</span><br><span class="line">      sum += right.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      list.add(<span class="string">&quot;i-&quot;</span> + i);</span><br><span class="line">      sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">MyCalculateTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalculateTask</span>(<span class="number">0</span>, count, list);</span><br><span class="line">    <span class="keyword">final</span> ForkJoinTask&lt;Integer&gt; submit = pool.submit(task);</span><br><span class="line">    System.out.println(<span class="string">&quot;sum = &quot;</span> + sum + <span class="string">&quot; --- submit.get() = &quot;</span> + submit.get());</span><br><span class="line">    pool.awaitTermination(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    pool.shutdown();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Fork&#x2F;Join框架可以帮助我们完成很多这种大任务可以拆分成小任务执行的场景，不过上面的方法并不是最佳执行调用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left.fork();  </span><br><span class="line">right.fork();</span><br><span class="line">替换为</span><br><span class="line">invokeAll(left, right);</span><br></pre></td></tr></table></figure>

<p>因为对于Fork&#x2F;Join模式，假如Pool里面线程数量是固定的，那么调用子任务的fork方法相当于A先分工给B，然后A当监工不干活，B去完成A交代的任务。所以上面的模式相当于浪费了一个线程。那么如果使用invokeAll相当于A分工给B后，A和B都去完成工作。这样可以更好的利用线程池，缩短执行的时间。</p>
<blockquote>
<p>参考：<a href="http://ifeve.com/talk-concurrency-forkjoin/">http://ifeve.com/talk-concurrency-forkjoin/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
        <tag>Fork/Join框架</tag>
        <tag>ForkJoinPool</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)Javascript模块化编程（三）：require.js的用法</title>
    <url>/post/df35c56a.html</url>
    <content><![CDATA[<blockquote>
<p>原文链接: <a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html">Javascript 模块化编程（三）：require.js 的用法</a> —— 阮一峰</p>
</blockquote>
<span id="more"></span>

<p>这个系列的<a href="https://www.iszy.cc/2019/08/14/javascript_module/">第一部分</a>和<a href="https://www.iszy.cc/2019/08/14/asynchronous_module_definition/">第二部分</a>，介绍了 Javascript 模块原型和理论概念，今天介绍如何将它们用于实战。</p>
<p>我采用的是一个非常流行的库<a href="http://requirejs.org/">require.js</a>。</p>
<p><img src="https://img.iszy.xyz/20190814101519.png?x-oss-process=style/mystyle"></p>
<h2 id="为什么要用-require-js？"><a href="#为什么要用-require-js？" class="headerlink" title="为什么要用 require.js？"></a>为什么要用 require.js？</h2><p>最早的时候，所有 Javascript 代码都写在一个文件里面，只要加载这一个文件就够了。后来，代码越来越多，一个文件不够了，必须分成多个文件，依次加载。下面的网页代码，相信很多人都见过。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;6.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码依次加载多个 js 文件。</p>
<p>这样的写法有很大的缺点。首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；其次，由于 js 文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的 1.js 要在 2.js 的前面），依赖性最大的模块一定要放到最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p>require.js 的诞生，就是为了解决这两个问题：</p>
<ul>
<li>实现 js 文件的异步加载，避免网页失去响应；</li>
<li>管理模块之间的依赖性，便于代码的编写和维护。</li>
</ul>
<h2 id="require-js-的加载"><a href="#require-js-的加载" class="headerlink" title="require.js 的加载"></a>require.js 的加载</h2><p>使用 require.js 的第一步，是先去官方网站<a href="http://requirejs.org/docs/download.html">下载</a>最新版本。</p>
<p>下载后，假定把它放在 js 子目录下面，就可以加载了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有人可能会想到，加载这个文件，也可能造成网页失去响应。解决办法有两个，一个是把它放在网页底部加载，另一个是写成下面这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/require.js&quot;</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>async 属性表明这个文件需要异步加载，避免网页失去响应。IE 不支持这个属性，只支持 defer，所以把 defer 也写上。</p>
<p>加载 require.js 以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是 main.js，也放在 js 目录下面。那么，只需要写成下面这样就行了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/require.js&quot;</span> <span class="attr">data-main</span>=<span class="string">&quot;js/main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>data-main 属性的作用是，指定网页程序的主模块。在上例中，就是 js 目录下面的 main.js，这个文件会第一个被 require.js 加载。由于 require.js 默认的文件后缀名是 js，所以可以把 main.js 简写成 main。</p>
<h2 id="主模块的写法"><a href="#主模块的写法" class="headerlink" title="主模块的写法"></a>主模块的写法</h2><p>上一节的 main.js，我把它称为”主模块”，意思是整个网页的入口代码。它有点像 C 语言的 main()函数，所有代码都从这儿开始运行。</p>
<p>下面就来看，怎么写 main.js。</p>
<p>如果我们的代码不依赖任何其他模块，那么可以直接写入 javascript 代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;加载成功！&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>但这样的话，就没必要使用 require.js 了。真正常见的情况是，主模块依赖于其他模块，这时就要使用 AMD 规范定义的的 require()函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&quot;moduleA&quot;</span>, <span class="string">&quot;moduleB&quot;</span>, <span class="string">&quot;moduleC&quot;</span>], <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  moduleA,</span></span><br><span class="line"><span class="params">  moduleB,</span></span><br><span class="line"><span class="params">  moduleC</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// some code here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>require()函数接受两个参数。第一个参数是一个数组，表示所依赖的模块，上例就是[‘moduleA’, ‘moduleB’, ‘moduleC’]，即主模块依赖这三个模块；第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。</p>
<p>require()异步加载 moduleA，moduleB 和 moduleC，浏览器不会失去响应；它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。</p>
<p>下面，我们看一个实际的例子。</p>
<p>假定主模块依赖 jquery、underscore 和 backbone 这三个模块，main.js 就可以这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;jquery&quot;</span>, <span class="string">&quot;underscore&quot;</span>, <span class="string">&quot;backbone&quot;</span>], <span class="keyword">function</span> (<span class="params">$, _, Backbone</span>) &#123;</span><br><span class="line">  <span class="comment">// some code here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>require.js 会先加载 jQuery、underscore 和 backbone，然后再运行回调函数。主模块的代码就写在回调函数中。</p>
<h2 id="模块的加载"><a href="#模块的加载" class="headerlink" title="模块的加载"></a>模块的加载</h2><p>上一节最后的示例中，主模块的依赖模块是[‘jquery’, ‘underscore’, ‘backbone’]。默认情况下，require.js 假定这三个模块与 main.js 在同一个目录，文件名分别为 jquery.js，underscore.js 和 backbone.js，然后自动加载。</p>
<p>使用 require.config()方法，我们可以对模块的加载行为进行自定义。require.config()就写在主模块（main.js）的头部。参数就是一个对象，这个对象的 paths 属性指定各个模块的加载路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;jquery.min&quot;</span>,</span><br><span class="line">    <span class="attr">underscore</span>: <span class="string">&quot;underscore.min&quot;</span>,</span><br><span class="line">    <span class="attr">backbone</span>: <span class="string">&quot;backbone.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的代码给出了三个模块的文件名，路径默认与 main.js 在同一个目录（js 子目录）。如果这些模块在其他目录，比如 js&#x2F;lib 目录，则有两种写法。一种是逐一指定路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;lib/jquery.min&quot;</span>,</span><br><span class="line">    <span class="attr">underscore</span>: <span class="string">&quot;lib/underscore.min&quot;</span>,</span><br><span class="line">    <span class="attr">backbone</span>: <span class="string">&quot;lib/backbone.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>另一种则是直接改变基目录（baseUrl）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&quot;js/lib&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;jquery.min&quot;</span>,</span><br><span class="line">    <span class="attr">underscore</span>: <span class="string">&quot;underscore.min&quot;</span>,</span><br><span class="line">    <span class="attr">backbone</span>: <span class="string">&quot;backbone.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果某个模块在另一台主机上，也可以直接指定它的网址，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>require.js 要求，每个模块是一个单独的 js 文件。这样的话，如果加载多个模块，就会发出多次 HTTP 请求，会影响网页的加载速度。因此，require.js 提供了一个<a href="http://requirejs.org/docs/optimization.html">优化工具</a>，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少 HTTP 请求数。</p>
<h2 id="AMD-模块的写法"><a href="#AMD-模块的写法" class="headerlink" title="AMD 模块的写法"></a>AMD 模块的写法</h2><p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>
<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在 define()函数之中。</p>
<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: add,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>加载方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&quot;math&quot;</span>], <span class="keyword">function</span> (<span class="params">math</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(math.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果这个模块还依赖其他模块，那么 define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&quot;myLib&quot;</span>], <span class="keyword">function</span> (<span class="params">myLib</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    myLib.<span class="title function_">doSomething</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: foo,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>当 require()函数加载上面这个模块的时候，就会先加载 myLib.js 文件。</p>
<h2 id="加载非规范的模块"><a href="#加载非规范的模块" class="headerlink" title="加载非规范的模块"></a>加载非规范的模块</h2><p>理论上，require.js 加载的模块，必须是按照 AMD 规范、用 define()函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如 jQuery）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？</p>
<p>回答是可以的。</p>
<p>这样的模块在用 require()加载之前，要先用 require.config()方法，定义它们的一些特征。</p>
<p>举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">shim</span>: &#123;</span><br><span class="line">    <span class="attr">underscore</span>: &#123;</span><br><span class="line">      <span class="attr">exports</span>: <span class="string">&quot;_&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">backbone</span>: &#123;</span><br><span class="line">      <span class="attr">deps</span>: [<span class="string">&quot;underscore&quot;</span>, <span class="string">&quot;jquery&quot;</span>],</span><br><span class="line">      <span class="attr">exports</span>: <span class="string">&quot;Backbone&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>require.config()接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义（1）exports 值（输出的变量名），表明这个模块外部调用时的名称；（2）deps 数组，表明该模块的依赖性。</p>
<p>比如，jQuery 的插件可以这样定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　　<span class="attr">shim</span>: &#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="string">&#x27;jquery.scroll&#x27;</span>: &#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="attr">deps</span>: [<span class="string">&#x27;jquery&#x27;</span>],</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="attr">exports</span>: <span class="string">&#x27;jQuery.fn.scroll&#x27;</span></span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<h2 id="require-js-插件"><a href="#require-js-插件" class="headerlink" title="require.js 插件"></a>require.js 插件</h2><p>require.js 还提供一系列<a href="https://github.com/jrburke/requirejs/wiki/Plugins">插件</a>，实现一些特定的功能。</p>
<p>domready 插件，可以让回调函数在页面 DOM 结构加载完成后再运行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;domready!&quot;</span>], <span class="keyword">function</span> (<span class="params">doc</span>) &#123;</span><br><span class="line">  <span class="comment">// called once the DOM is ready</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>text 和 image 插件，则是允许 require.js 加载文本和图片文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&quot;text!review.txt&quot;</span>, <span class="string">&quot;image!cat.jpg&quot;</span>], <span class="keyword">function</span> (<span class="params">review, cat</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(review);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(cat);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>类似的插件还有 json 和 mdown，用于加载 json 文件和 markdown 文件。</p>
<p>（完）</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>转载</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)Javascript模块化编程（二）：AMD规范</title>
    <url>/post/b97e41af.html</url>
    <content><![CDATA[<blockquote>
<p>原文链接: <a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html">Javascript 模块化编程（二）：AMD 规范</a> —— 阮一峰</p>
</blockquote>
<span id="more"></span>

<p>这个系列的<a href="https://www.iszy.cc/2019/08/14/javascript_module/">第一部分</a>介绍了 Javascript 模块的基本写法，今天介绍如何规范地使用模块。</p>
<p><img src="https://img.iszy.xyz/20190814100700.png?x-oss-process=style/mystyle"></p>
<p>（接<a href="https://www.iszy.cc/2019/08/14/javascript_module/">上文</a>）</p>
<h2 id="模块的规范"><a href="#模块的规范" class="headerlink" title="模块的规范"></a>模块的规范</h2><p>先想一想，为什么模块很重要？</p>
<p>因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。</p>
<p>但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到 Javascript 模块现在还没有官方规范，这一点就更重要了。</p>
<p>目前，通行的 Javascript 模块规范共有两种：<a href="http://wiki.commonjs.org/wiki/Modules/1.1">CommonJS</a> 和 <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a>。我主要介绍 AMD，但是要先从 CommonJS 讲起。</p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>2009 年，美国程序员 Ryan Dahl 创造了<a href="http://nodejs.org/">node.js</a>项目，将 javascript 语言用于服务器端编程。</p>
<p><img src="https://img.iszy.xyz/20190814100903.png?x-oss-process=style/mystyle"></p>
<p>这标志”Javascript 模块化编程”正式诞生。因为老实说，在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。</p>
<p>node.js 的<a href="http://nodejs.org/docs/latest/api/modules.html">模块系统</a>，就是参照 <a href="http://wiki.commonjs.org/wiki/Modules/1.1">CommonJS</a> 规范实现的。在 CommonJS 中，有一个全局性方法 require()，用于加载模块。假定有一个数学模块 math.js，就可以像下面这样加载。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>然后，就可以调用模块提供的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>);</span><br><span class="line"></span><br><span class="line">math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>因为这个系列主要针对浏览器编程，不涉及 node.js，所以对 CommonJS 就不多做介绍了。我们在这里只要知道，require()用于加载模块就行了。</p>
<h2 id="浏览器环境"><a href="#浏览器环境" class="headerlink" title="浏览器环境"></a>浏览器环境</h2><p>有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。</p>
<p>但是，由于一个重大的局限，使得 CommonJS 规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题，你能看出来吗？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>);</span><br><span class="line"></span><br><span class="line">math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>
<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>
<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>
<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p><a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a>是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>
<p>AMD 也采用 require()语句加载模块，但是不同于 CommonJS，它要求两个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="variable language_">module</span>], callback);</span><br></pre></td></tr></table></figure>

<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数。如果将前面的代码改写成 AMD 形式，就是下面这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;math&quot;</span>], <span class="keyword">function</span> (<span class="params">math</span>) &#123;</span><br><span class="line">  math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>math.add()与 math 模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD 比较适合浏览器环境。</p>
<p>目前，主要有两个 Javascript 库实现了 AMD 规范：<a href="http://requirejs.org/">require.js</a> 和 <a href="https://github.com/cujojs/curl">curl.js</a>。本系列的第三部分，将通过介绍 require.js，进一步讲解 AMD 的用法，以及如何将模块化编程投入实战。</p>
<p>（完）</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>转载</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)Javascript模块化编程（一）：模块的写法</title>
    <url>/post/7244329a.html</url>
    <content><![CDATA[<p>最近学习这个模块化编程，转载几篇大佬文章学习一下。</p>
<blockquote>
<p>原文链接: <a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html">Javascript 模块化编程（一）：模块的写法</a> —— 阮一峰</p>
</blockquote>
<span id="more"></span>

<p>随着网站逐渐变成”<a href="http://en.wikipedia.org/wiki/Web_application">互联网应用程序</a>“，嵌入网页的 Javascript 代码越来越庞大，越来越复杂。</p>
<p><img src="https://img.iszy.xyz/20190814094600.png?x-oss-process=style/mystyle"></p>
<p>网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试等等……开发者不得不使用软件工程的方法，管理网页的业务逻辑。</p>
<p>Javascript 模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p>
<p>但是，Javascript 不是一种模块化编程语言，它不支持”类”（class），更遑论”模块”（module）了。（正在制定中的 <a href="http://en.wikipedia.org/wiki/ECMAScript">ECMAScript 标准</a>第六版，将正式支持”类”和”模块”，但还需要很长时间才能投入实用。）</p>
<p>Javascript 社区做了很多努力，在现有的运行环境中，实现”模块”的效果。本文总结了当前＂Javascript 模块化编程＂的最佳实践，说明如何投入实用。虽然这不是初级教程，但是只要稍稍了解 Javascript 的基本语法，就能看懂。</p>
<p><img src="https://img.iszy.xyz/20190814094950.png?x-oss-process=style/mystyle"></p>
<h2 id="原始写法"><a href="#原始写法" class="headerlink" title="原始写法"></a>原始写法</h2><p>模块就是实现特定功能的一组方法。</p>
<p>只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">m1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">m2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的函数 m1()和 m2()，组成一个模块。使用的时候，直接调用就行了。</p>
<p>这种做法的缺点很明显：”污染”了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p>
<h2 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h2><p>为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;</span><br><span class="line">  <span class="attr">_count</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">m1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">m2</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的函数 m1()和 m2(），都封装在 module1 对象里。使用的时候，就是调用这个对象的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">module1.<span class="title function_">m1</span>();</span><br></pre></td></tr></table></figure>

<p>但是，这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">module1.<span class="property">_count</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<h2 id="立即执行函数写法"><a href="#立即执行函数写法" class="headerlink" title="立即执行函数写法"></a>立即执行函数写法</h2><p>使用”<a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">立即执行函数</a>“（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> m1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> m2 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">m1</span>: m1,</span><br><span class="line">    <span class="attr">m2</span>: m2,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>使用上面的写法，外部代码无法读取内部的_count 变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(module1.<span class="property">_count</span>); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p>module1 就是 Javascript 模块的基本写法。下面，再对这种写法进行加工。</p>
<h2 id="放大模式"><a href="#放大模式" class="headerlink" title="放大模式"></a>放大模式</h2><p>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用”放大模式”（augmentation）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="keyword">function</span> (<span class="params">mod</span>) &#123;</span><br><span class="line">  mod.<span class="property">m3</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(module1);</span><br></pre></td></tr></table></figure>

<p>上面的代码为 module1 模块添加了一个新方法 m3()，然后返回新的 module1 模块。</p>
<h2 id="宽放大模式（Loose-augmentation）"><a href="#宽放大模式（Loose-augmentation）" class="headerlink" title="宽放大模式（Loose augmentation）"></a>宽放大模式（Loose augmentation）</h2><p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用”宽放大模式”。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="keyword">function</span> (<span class="params">mod</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>.<span class="property">module1</span> || &#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>与”放大模式”相比，＂宽放大模式＂就是”立即执行函数”的参数可以是空对象。</p>
<h2 id="输入全局变量"><a href="#输入全局变量" class="headerlink" title="输入全局变量"></a>输入全局变量</h2><p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。</p>
<p>为了在模块内部调用全局变量，必须显式地将其他变量输入模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="keyword">function</span> (<span class="params">$, YAHOO</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)(jQuery, <span class="variable constant_">YAHOO</span>);</span><br></pre></td></tr></table></figure>

<p>上面的 module1 模块需要使用 jQuery 库和 YUI 库，就把这两个库（其实是两个模块）当作参数输入 module1。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。这方面更多的讨论，参见 Ben Cherry 的著名文章<a href="http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth">《JavaScript Module Pattern: In-Depth》</a>。</p>
<p>这个系列的第二部分，将讨论如何在浏览器环境组织不同的模块、管理模块之间的依赖性。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>转载</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】设计模式基本思想以及23种模式总结整理</title>
    <url>/post/343686fd.html</url>
    <content><![CDATA[<p><img src="/bz.png" alt="封面"></p>
<span id="more"></span>

<h3 id="设计模式主要思想"><a href="#设计模式主要思想" class="headerlink" title="设计模式主要思想"></a>设计模式主要思想</h3><p>设计模式是在长期应用开发过程中，众多开发者总结归纳出来的程序架构与设计思想。是经过实践证明的，可在实际背景下使用的一系列程序设计方案。设计模式产生的根本目的就是为了解决开发过程中重复的代码编写，以及让程序更易扩展复用。</p>
<h4 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h4><ul>
<li>单一职责：每个类都应该实现单一的功能，否则应该将类进行拆分</li>
<li>里氏替换：即继承复用&#x2F;合成复用。尽量使用合成&#x2F;聚合的方式而不是继承。任何父类出现的地方，子类都可以出现。派生类可以在基类的基础上扩展自己的功能实现。是对“开闭原则”的一个补充。在里氏替换原则中，尽量不要对父类进行重载或者重写，因为父类代表一个定义好的结构，通过规范好的接口与外界进行交互，子类不应该随意破坏它，而是对其进行扩展。</li>
<li>依赖倒置：“开闭原则”的基础。即面向接口编程。依赖于抽象而不是依赖于具体的实现，编程时遇到具体的类时，不与具体的类交互，而与抽象接口进行交互。便于增加新的具体类的时候代码可以复用。</li>
<li>接口隔离：每个接口不应该存在子类用不到却必须实现的方法，否则就应该将接口拆分，将职责单一化。</li>
<li>最少知道：即迪米特法则。一个类对于自己依赖的类知道的越少越好，无论被依赖的类多么复杂，都应该将逻辑封装在方法内部，通过一个共有的方法提供给依赖类使用，这样当被依赖类发生改变的时候，才会尽可能少的影响依赖类。</li>
</ul>
<h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><blockquote>
<p>点击对应链接跳转到该设计模式的详细整理与代码示例</p>
</blockquote>
<table>
<thead>
<tr>
<th>范围</th>
<th>创建型模式</th>
<th>结构型模式</th>
<th>行为型模式</th>
</tr>
</thead>
<tbody><tr>
<td>对象创建</td>
<td><a href="http://zhangjiaheng.cn/blog/20190607/%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B/">Singleton（单例模式）</a><br/>Prototype(原型模式)<br/>Factory Method（工厂方法模式）<br/>Abstract Factory（抽象工厂模式）<br/>Builder（建造者模式）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>接口适配</td>
<td></td>
<td>Adapter（适配器模式）<br/>Bridge（桥接模式）<br/>Facade（外观模式）</td>
<td></td>
</tr>
<tr>
<td>对象解耦</td>
<td></td>
<td></td>
<td>Mediator（中介者模式）<br/>Observer（观察者模式）</td>
</tr>
<tr>
<td>抽象集合</td>
<td></td>
<td>Composite（组合模式）</td>
<td>Iterator（迭代器模式）</td>
</tr>
<tr>
<td>行为扩展</td>
<td></td>
<td>Decorator（装饰模式）</td>
<td>Visitor（访问者模式）<br/>Chain of Responsibility（职责链）</td>
</tr>
<tr>
<td>算法封装</td>
<td></td>
<td></td>
<td><a href="http://zhangjiaheng.cn/blog/20190707/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">Template（模板方法模式）</a><br/>Strategy（策略模式）</td>
</tr>
<tr>
<td>性能与对象访问</td>
<td></td>
<td>Flyweight（享元模式）<br/>Proxy（代理模式）</td>
<td></td>
</tr>
<tr>
<td>对象状态</td>
<td></td>
<td></td>
<td>Memento（备忘录模式）<br/>State（状态模式）</td>
</tr>
<tr>
<td>其他</td>
<td></td>
<td></td>
<td>Interpreter（解释器模式）</td>
</tr>
</tbody></table>
<h4 id="总结下设计模式的归类"><a href="#总结下设计模式的归类" class="headerlink" title="总结下设计模式的归类"></a>总结下设计模式的归类</h4><p><img src="/sjmo.png" alt="设计模式分类 - 幕布"></p>
<h4 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h4><p>创建型设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，使调用者无需new对象，在程序中针对给定业务场景去调用特定的对象创建方法，使程序更加灵活。</p>
<h4 id="行为型设计模式"><a href="#行为型设计模式" class="headerlink" title="行为型设计模式"></a>行为型设计模式</h4><p>行为型设计模式主要关注对象之间的通信。</p>
<h4 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h4><p>结构型设计模式关注类和对象的组合，继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>设计模式基本思想</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode - 52. N皇后 II 回溯算法求解</title>
    <url>/post/cd3a834.html</url>
    <content><![CDATA[<h4 id="N皇后问题-leetcode"><a href="#N皇后问题-leetcode" class="headerlink" title="N皇后问题 - leetcode"></a>N皇后问题 - <a href="https://leetcode-cn.com/problems/n-queens-ii/">leetcode</a></h4><p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。<img src="/8-queens.png" alt="8皇后示例"><br>上图为 8 皇后问题的一种解法。给定一个整数 n，返回 n 皇后不同的解决方案的数量。</p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><blockquote>
<p>输入: 4<br>输出: 2<br>解释: 4 皇后问题存在如下两个不同的解法。</p>
</blockquote>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">[&quot;.Q..&quot;,  // 解法 1</span><br><span class="line">&quot;...Q&quot;,</span><br><span class="line">&quot;Q...&quot;,</span><br><span class="line">&quot;..Q.&quot;],</span><br><span class="line">[&quot;..Q.&quot;,  // 解法 2</span><br><span class="line">&quot;Q...&quot;,</span><br><span class="line">&quot;...Q&quot;,</span><br><span class="line">&quot;.Q..&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>使用回溯算法，深度优先搜索，进行遍历查询深度优先搜索的条件是有能够判断棋盘是否能落子的依据。</p>
<p>我这边使用一个长度为N的数组存储第J列是否有棋子，使用两个N*2-1长度的数组分别存储左对角线和右对角线是否有棋子。</p>
<p>对于左右对角线来说，左对角线的每一个位置i与j的和都相同，右对角线的每一个位置的i与j的差都相同，所以可以用来判断某个位置的斜线上是否存在棋子，对应对角线的数组标志为有或者没有。</p>
<h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="comment">/** 总记录数 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/** N皇后 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">  <span class="comment">/** 判断当前位置的左对角线是否存放了棋子 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span>[] left = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">15</span>];</span><br><span class="line">  <span class="comment">/** 判断当前位置的右对角线是否存放了棋子 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span>[] right = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">15</span>];</span><br><span class="line">  <span class="comment">/** 判断当前位置的列是否存放了棋子 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span>[] curn;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.N = n;</span><br><span class="line">    curn = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    left = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span> * n - <span class="number">1</span>];</span><br><span class="line">    right = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span> * n - <span class="number">1</span>];</span><br><span class="line">    calResult(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">calResult</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="comment">// 棋盘第i行 遍历判断第j列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">      <span class="comment">// 开始判断第i行第j列</span></span><br><span class="line">      <span class="comment">// 判断第j列是否已经有棋子；判断(i,j)的左对角线是否有棋子；判断右对角线是否有棋子</span></span><br><span class="line">      <span class="keyword">if</span> (curn[j] == <span class="number">0</span> &amp;&amp; left[i + j] == <span class="number">0</span> &amp;&amp; right[N - <span class="number">1</span> + i - j] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 没有棋子 就可以在(i,j)放置棋子</span></span><br><span class="line">        curn[j] = left[i + j] = right[N - <span class="number">1</span> + i - j] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 如果N行都放置了棋子 total就加1 否则继续放置下一行</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; N - <span class="number">1</span>) &#123;</span><br><span class="line">          calResult(i + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          total++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放置完成之后 (i,j)位置棋子去掉，然后重新走下一步 进行深度优先搜索</span></span><br><span class="line">        curn[j] = left[i + j] = right[N - <span class="number">1</span> + i - j] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">    solution.totalNQueens(<span class="number">8</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + solution.total);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法题解</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 手动部署 MySQL 5.7</title>
    <url>/post/1555571e.html</url>
    <content><![CDATA[<p>今天来简单记录一下在 CentOS 7 上手动部署 MySQL 5.7 的过程。</p>
<span id="more"></span>

<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>第一步自然是下载安装包，我们在这里下载 5.7 版本，下载下来的文件名为<code>mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz</code>。</p>
<ul>
<li>官网地址: <a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></li>
<li>下载地址: <a href="https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz</a></li>
</ul>
<p><img src="https://img.iszy.xyz/20190804175143.png?x-oss-process=style/mystyle" alt="20190804175143"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install wget -y</span><br><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> mysql-5.7.27-linux-glibc2.12-x86_64 /usr/local/mysql</span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br></pre></td></tr></table></figure>

<h3 id="添加-mysql-用户和组并授权"><a href="#添加-mysql-用户和组并授权" class="headerlink" title="添加 mysql 用户和组并授权"></a>添加 mysql 用户和组并授权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /usr/local/mysql</span><br></pre></td></tr></table></figure>

<h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libaio-devel.x86_64 -y</span><br><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>

<p>注意保留此时打印出的临时 root 密码。</p>
<p><img src="https://img.iszy.xyz/20190805095840.png?x-oss-process=style/mystyle" alt="20190805095840"></p>
<p>为了安全起见，我们仅将 data 目录权限保留给 mysql 用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R root /usr/local/mysql</span><br><span class="line"><span class="built_in">chown</span> -R mysql /usr/local/mysql/data</span><br></pre></td></tr></table></figure>

<p>因为 CentOS 系统自带了 mariadb，我们需要把它卸载并删除相关文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove mari*</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/mysql/*</span><br></pre></td></tr></table></figure>

<h3 id="配置启动及配置文件并启动-MySQL"><a href="#配置启动及配置文件并启动-MySQL" class="headerlink" title="配置启动及配置文件并启动 MySQL"></a>配置启动及配置文件并启动 MySQL</h3><p>将启动文件复制到系统启动目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> ./support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>

<p>创建并编辑配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> /etc/my.cnf</span><br><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>添加如下内容并保存。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">max_allowed_packet = 100M</span><br><span class="line">lower_case_table_names = 1</span><br><span class="line">default-time-zone = &#x27;+8:00&#x27;</span><br><span class="line">net_buffer_length = 100K</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br></pre></td></tr></table></figure>

<p>启动 MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure>

<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>编辑<code>/etc/profile</code>文件，添加环境变量以在任何地方使用 mysql 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<p>在末尾加入如下语句并保存。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure>

<p>应用环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>重启 MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<h3 id="通过命令行登录-MySQL-修改-root-密码"><a href="#通过命令行登录-MySQL-修改-root-密码" class="headerlink" title="通过命令行登录 MySQL 修改 root 密码"></a>通过命令行登录 MySQL 修改 root 密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>输入之前保留的 root 密码即可登录，接着输入以下命令修改 root 密码并授予远程登录权限，注意替换命令中的示例密码为自己的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> authentication_string=password(<span class="string">&quot;ExamplePassword&quot;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;ExamplePassword&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>

<p>接着你就可以通过工具如 Navicat 连接到 MySQL 操作数据库了。</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>如果要修改配置，修改<code>/etc/my.cnf</code>文件后，输入如下命令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql reload</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在JAVA中获取格式化的当前时间</title>
    <url>/post/d903c70c.html</url>
    <content><![CDATA[<p>记录一下如何在 JAVA 中获取格式化的当前时间。</p>
<span id="more"></span>

<h2 id="所需-java-类"><a href="#所需-java-类" class="headerlink" title="所需 java 类"></a>所需 java 类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br></pre></td></tr></table></figure>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">let</span> <span class="variable">dateAfterFormat</span> <span class="operator">=</span> simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">console.log(dateAfterFormat); <span class="comment">// 应当会输出格式化后的当前时间，如&quot;2019-07-25 16:17:30&quot;</span></span><br></pre></td></tr></table></figure>

<p>由于 SimpleDateFormat 不是线程安全的，推荐在需要格式化的时候创建 SimpleDateFormat 的局部变量，而不要公用，否则可能会出现冲突，线程挂死等问题。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在JAVA中比较两个String对象</title>
    <url>/post/ef0aed37.html</url>
    <content><![CDATA[<p>记录一下，最近在 JAVA 中比较两个 String 对象遇到的一个小坑。</p>
<span id="more"></span>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近写程序的时候，遇到了需要比较两个 String 对象是否相等的情况，我习惯性的写了形如<code>if(a == &quot;a&quot;)&#123;&#125;</code>的语句，IDEA 跳出警告，内容如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">String values are compared using &#x27;==&#x27;, not &#x27;equals()&#x27;.</span><br></pre></td></tr></table></figure>

<p>也就是说我刚刚那句话应该写成<code>if(a.equals(&quot;a&quot;))&#123;&#125;</code>才对，果然不再标红了。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>那么，为什么会这样呢？<code>==</code>和<code>equals()</code>分别是什么效果呢？</p>
<p>对于基本数据类型<code>byte</code>(字节型)、<code>short</code>(短整型)、<code>int</code>(整型)、<code>long</code>(长整型)、<code>float</code>(单精度浮点型)、<code>double</code>(双精度浮点型)、<code>boolean</code>(布尔型)、<code>char</code>(字符型)，<code>==</code>比较的就是他们的值，也不存在<code>equals()</code>方法。</p>
<p>而对于<code>String</code>这样的引用数据类型，<code>==</code>比较的是两个对象的<strong>引用地址</strong>即内存地址是否相同，如果内存地址相同，自然就是同一个对象了，同一个对象之间有啥好比的。</p>
<p>我们一般的应用场景主要是要比较两个 String 对象的内容，那就需要使用<code>equals()</code>方法。我们可以看一下<code>java.lang.String</code>中<code>equals()</code>方法的定义，可以看到<code>equals()</code>才是在比较两个 String 对象的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Compares this string to the specified object.  The result is &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">* true&#125; if and only if the argument is not &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">* String&#125; object that represents the same sequence of characters as this</span></span><br><span class="line"><span class="comment">* object.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  anObject</span></span><br><span class="line"><span class="comment">*         The object to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the given object represents a &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment">*          equivalent to this string, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span>  #compareTo(String)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span>  #equalsIgnoreCase(String)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一个特例的情况，比如<code>&quot;abcde&quot; == &quot;abcde&quot;</code>或是<code>&quot;abcde&quot; == &quot;abc&quot; + &quot;de&quot;</code>都是会返回<code>true</code>的，因为双方都是由编译器直接实现的，没有被声明为变量。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>当然，如果你知道自己在做什么，就是要利用<code>==</code>的这个特性，自然是没有问题的。其他时候用<code>equals()</code>方法即可。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode上的几个多线程编程题解</title>
    <url>/post/25508cb9.html</url>
    <content><![CDATA[<p><img src="/fm.png"></p>
<span id="more"></span>

<h3 id="以下所有题目的题解-github"><a href="#以下所有题目的题解-github" class="headerlink" title="以下所有题目的题解 - github"></a><a href="https://github.com/Fatezhang/DataStructureAndAlgorithm/tree/master/src/main/java/Alogrithm/Alogrithm">以下所有题目的题解 - github</a></h3><h4 id="1、按序打印"><a href="#1、按序打印" class="headerlink" title="1、按序打印"></a>1、<a href="https://leetcode-cn.com/problems/print-in-order">按序打印</a></h4><ul>
<li>方法一：使用volatile变量控制顺序</li>
<li>思路：利用volatile语义，实现变量的内存可见性，使得别的线程在修改完state状态变量的时候结果对于另一个线程立即可见。这样每个线程在打印的时候就可以通过状态判断是不是该轮到自己执行了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">first</span><span class="params">(Runnable printFirst)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (state != <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printFirst.run() outputs &quot;first&quot;. Do not change or remove this line.</span></span><br><span class="line">        printFirst.run();</span><br><span class="line">        state = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">second</span><span class="params">(Runnable printSecond)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (state != <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printSecond.run() outputs &quot;second&quot;. Do not change or remove this line.</span></span><br><span class="line">        printSecond.run();</span><br><span class="line">        state = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">third</span><span class="params">(Runnable printThird)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (state != <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printThird.run() outputs &quot;third&quot;. Do not change or remove this line.</span></span><br><span class="line">        printThird.run();</span><br><span class="line">        state = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：使用CountDownLatch控制顺序（只适用于执行一次。。。可以使用循环栅栏改一下~）</li>
<li>CountDownLatch俗称“闭锁”。使用闭锁来控制线程是否该执行，在没有达到条件时，闭锁阻塞线程。这样在第一个线程执行完成之后打开第二个线程的闭锁，第二个执行完成之后打开第三个线程的闭锁，实现按照顺序打印。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">first</span><span class="params">(Runnable printFirst)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        countDownLatch3.await();</span><br><span class="line">        countDownLatch2.await();</span><br><span class="line">        <span class="comment">// printFirst.run() outputs &quot;first&quot;. Do not change or remove this line.</span></span><br><span class="line">        printFirst.run();</span><br><span class="line">        countDownLatch2.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">second</span><span class="params">(Runnable printSecond)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        countDownLatch3.await();</span><br><span class="line">        countDownLatch2.await();</span><br><span class="line">        <span class="comment">// printSecond.run() outputs &quot;second&quot;. Do not change or remove this line.</span></span><br><span class="line">        printSecond.run();</span><br><span class="line">        countDownLatch3.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">third</span><span class="params">(Runnable printThird)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        countDownLatch3.await();</span><br><span class="line">        <span class="comment">// printThird.run() outputs &quot;third&quot;. Do not change or remove this line.</span></span><br><span class="line">        printThird.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2、交替打印FooBar"><a href="#2、交替打印FooBar" class="headerlink" title="2、交替打印FooBar"></a>2、<a href="https://leetcode-cn.com/problems/print-foobar-alternately">交替打印FooBar</a></h4><ul>
<li>思路：使用显示可重入锁加上Condition条件阻塞机制，再加上volatile修饰的状态变量控制打印顺序。线程打印时加锁，如果状态是使当前线程打印，就打印并且转换状态，然后唤醒另一个线程。下一次再判断当前状态不适合打印，就使用第一个条件锁阻塞当前线程。以此类推。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@Author</span> zhangjiaheng <span class="doctag">@Description</span> 交替打印FooBar */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FooBar</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">FooBar</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">c1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">c2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(Runnable printFoo)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                c1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// printFoo.run() outputs &quot;foo&quot;. Do not change or remove this line.</span></span><br><span class="line">            printFoo.run();</span><br><span class="line">            flag = !flag;</span><br><span class="line">            c2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">(Runnable printBar)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                c2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// printBar.run() outputs &quot;bar&quot;. Do not change or remove this line.</span></span><br><span class="line">            printBar.run();</span><br><span class="line">            flag = !flag;</span><br><span class="line">            c1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="3、打印0与奇偶数"><a href="#3、打印0与奇偶数" class="headerlink" title="3、打印0与奇偶数"></a>3、<a href="https://leetcode-cn.com/problems/print-zero-even-odd">打印0与奇偶数</a></h4><ul>
<li>思路：也是使用显示可重入锁加上条件阻塞机制，加上volatile修饰的状态变量控制奇偶数的打印。不符合当前执行的状态就使用condition阻塞，符合就执行并且转换状态，然后唤醒其他线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.function.IntConsumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhangjiaheng <span class="doctag">@Description</span> https://leetcode-cn.com/problems/print-zero-even-odd</span></span><br><span class="line"><span class="comment"> * 3个线程交替打印奇偶数和0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZeroEvenOdd</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ZeroEvenOdd</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">c1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">c2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">c3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 0-打印0 1-打印奇数 2-打印偶数 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zero</span><span class="params">(IntConsumer printNumber)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag != <span class="number">0</span>) &#123;</span><br><span class="line">          c1.await();</span><br><span class="line">        &#125;</span><br><span class="line">        printNumber.accept(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">          flag = <span class="number">1</span>;</span><br><span class="line">          c3.signal();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          flag = <span class="number">2</span>;</span><br><span class="line">          c2.signal();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">even</span><span class="params">(IntConsumer printNumber)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag != <span class="number">2</span>) &#123;</span><br><span class="line">          c2.await();</span><br><span class="line">        &#125;</span><br><span class="line">        printNumber.accept(i);</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        c1.signal();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">odd</span><span class="params">(IntConsumer printNumber)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag != <span class="number">1</span>) &#123;</span><br><span class="line">          c3.await();</span><br><span class="line">        &#125;</span><br><span class="line">        printNumber.accept(i);</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        c1.signal();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ZeroEvenOdd</span> <span class="variable">zeroEvenOdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZeroEvenOdd</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">pools</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, TimeUnit.MINUTES, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>), r -&gt; <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;某线程&quot;</span>));</span><br><span class="line">    pools.execute(</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            zeroEvenOdd.zero(System.out::print);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    pools.execute(</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            zeroEvenOdd.even(System.out::print);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    pools.execute(</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            zeroEvenOdd.odd(System.out::print);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="4、H2O生成"><a href="#4、H2O生成" class="headerlink" title="4、H2O生成"></a>4、<a href="https://leetcode-cn.com/problems/building-h2o">H2O生成</a></h4><ul>
<li>方法一：使用显示锁和condition</li>
<li>思路：老生常谈的思路了，同上面一样的原理。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@Author</span> zhangjiaheng <span class="doctag">@Description</span> 水分子生成 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">H2O</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">H2O</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">H</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">O</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">hCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hydrogen</span><span class="params">(Runnable releaseHydrogen)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">while</span> (hCount == <span class="number">2</span>) &#123;</span><br><span class="line">        H.await();</span><br><span class="line">      &#125;</span><br><span class="line">      hCount++;</span><br><span class="line">      releaseHydrogen.run();</span><br><span class="line">      <span class="keyword">if</span> (hCount == <span class="number">2</span>) &#123;</span><br><span class="line">        O.signal();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        H.signal();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oxygen</span><span class="params">(Runnable releaseOxygen)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">while</span> (hCount != <span class="number">2</span>) &#123;</span><br><span class="line">        O.await();</span><br><span class="line">      &#125;</span><br><span class="line">      hCount = <span class="number">0</span>;</span><br><span class="line">      releaseOxygen.run();</span><br><span class="line">      H.signal();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;HHOOOHHHH&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">H2O</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">H2O</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;H&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                    o.hydrogen(() -&gt; System.out.print(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            .start();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                    o.oxygen(() -&gt; System.out.print(<span class="string">&quot;O&quot;</span>));</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            .start();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：使用信号量控制通知线程</li>
<li>思路：使用信号量控制线程间的通信。分别分为执行信号和唤醒信号，氢原子的执行信号首先为2，氧原子的执行信号首先为1。氢氧线程执行时消耗执行信号量，当一个氢原子执行后，氢原子的释放信号开始释放（只有一个氧线程等待其释放），然后等待氧原子释放信号释放（即一个氧原子已经产生），之后产生一个氢原子在释放请求信号。氧线程执行时，开始请求释放一个氧原子，成功之后氧线程释放信号开始释放（因为2个氢线程等待所以释放两个信号），然后等待氢线程释放两个信号（说明已经有两个氢原子生成）。然后再生成氧原子，成功之后在释放氧线程的请求信号。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@Author</span> zhangjiaheng <span class="doctag">@Description</span> 使用信号量控制水分子生成 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">H2O_2</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Semaphore hAcquire, oAcquire, hRelease, oRelease;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">H2O_2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// H 原子线程 请求信号</span></span><br><span class="line">    hAcquire = <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// O 原子线程 请求信号</span></span><br><span class="line">    oAcquire = <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// H 原子线程 释放信号</span></span><br><span class="line">    hRelease = <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// O 原子线程 释放信号</span></span><br><span class="line">    oRelease = <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hydrogen</span><span class="params">(Runnable releaseHydrogen)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    hAcquire.acquire(); <span class="comment">// H线程开始请求</span></span><br><span class="line">    hRelease.release(); <span class="comment">// 通知一个H线程即将释放 因为一个H线程释放最多只有一个O线程等待其释放</span></span><br><span class="line">    oRelease.acquire(); <span class="comment">// 等待O线程释放 一个O线程释放就可以通过</span></span><br><span class="line">    releaseHydrogen.run();</span><br><span class="line">    hAcquire.release(); <span class="comment">// 唤醒H线程请求</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oxygen</span><span class="params">(Runnable releaseOxygen)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    oAcquire.acquire(); <span class="comment">// O线程开始请求</span></span><br><span class="line">    oRelease.release(<span class="number">2</span>); <span class="comment">// 通知一个O线程即将释放 因为一个O线程释放 会有两个H线程等待其释放</span></span><br><span class="line">    hRelease.acquire(<span class="number">2</span>); <span class="comment">// 等待H线程释放 要等待两次释放 才可以通过</span></span><br><span class="line">    releaseOxygen.run();</span><br><span class="line">    oAcquire.release(); <span class="comment">// 唤醒O线程请求</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHOOHHOOOOOHOOOHHHOHHHHOOOHHHOOOHOHOHOHHOHOOHHHOOHOOOHHOOOOHOHHHHOOOOOHHHOOOHOHOHOOOHHOHOOHHOHHHHHHHHHHHHHHHHHHHHHHHHHHH&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">H2O_2</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">H2O_2</span>();</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">pool</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">300</span>,</span><br><span class="line">            <span class="number">300</span>,</span><br><span class="line">            <span class="number">10</span>,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">100</span>),</span><br><span class="line">                (ThreadFactory) Thread::<span class="keyword">new</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;H&#x27;</span>) &#123;</span><br><span class="line">        pool.execute(</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>));</span><br><span class="line">                o.hydrogen(() -&gt; System.out.print(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pool.execute(</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>));</span><br><span class="line">                o.oxygen(() -&gt; System.out.print(<span class="string">&quot;O&quot;</span>));</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>leetcode</tag>
        <tag>算法题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Synchronized使用时一个不起眼的注意点</title>
    <url>/post/85068484.html</url>
    <content><![CDATA[<h4 id="Synchronized-前情提要"><a href="#Synchronized-前情提要" class="headerlink" title="Synchronized 前情提要"></a>Synchronized 前情提要</h4><p>Synchronized是Java中用来进行方法或者代码同步的一个内置锁机制。这种内置锁机制可以保证代码执行的原子性、可见性，但是并不能屏蔽代码的重排序。Synchronized可以修饰方法、对象以及代码块，并可以保证被修饰的方法或者代码块，在同一个时刻只能有一个线程能够访问得到。</p>
<ul>
<li>修饰静态方法：锁的是当前类的class对象，修饰方法时Synchronized没有表现在字节码指令中，而是在class文件的方法表中将该方法的access_flags值置为1。表示该方法是同步方法，并使用调用该方法的对象或该方法所属的 Class 在 JVM 的内部对象表示 Klass 作为锁对象。</li>
<li>修饰普通方法：锁的是当前实例对象，修饰方法时同上。</li>
<li>修饰代码块：锁的是Synchronized()中的对象，编译后的字节码会在代码块前后插入monitorenter 和monitorexit。JVM需要每一个monitorenter都有一个monitorexit与之对应，任何对象都有一个monitor与之相对应，当一个monitor被持有，即线程执行到monitorenter时，对象将处于锁定状态。</li>
</ul>
<p>Synchronized是Java内置的重量级锁，在jdk1.6之后引入了自旋锁、轻量级锁、适应性自旋、锁粗化、锁消除、偏向锁等技术来减少Synchronized的性能开销。</p>
<span id="more"></span>

<h4 id="切入正题"><a href="#切入正题" class="headerlink" title="切入正题"></a>切入正题</h4><p>以上知识点想必刚开始学习并发编程的程序员都会先学习以上知识，但是很多程序员在使用Synchronized的时候有可能会发现，我明明加锁了，但是方法却并没有同步执行，这到底是什么原因？先看下如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">cn</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (cn) &#123;</span><br><span class="line">                        cn++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码启动了20个线程，对Integer变量cn进行自增。很多人在写Synchronized的时候都有可能出现这种问题。这样的写法是错误的！</p>
<p>因为<code>cn++</code>这句代码的原理是将cn指向一个cn+1的新的Integer对象！</p>
<p>修改成如下，然后看看输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">cn</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(size);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">finalJ</span> <span class="operator">=</span> j;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cd.countDown();</span><br><span class="line">                    cd.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (cn) &#123;</span><br><span class="line">                        cn++;</span><br><span class="line">                        System.out.println(</span><br><span class="line">                            <span class="string">&quot;cn&quot;</span> + finalJ + <span class="string">&quot; = &quot;</span> + cn + <span class="string">&quot;\t\t\t&quot;</span> + System.identityHashCode(cn));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>以上代码输出如下 &gt;&gt;</strong></p>
<p><img src="/cons.png" alt="输出"></p>
<p>每次输出的Integer对象的HashCode值并不相同。所以，每次锁的并不是同一个对象！既然不是同一个对象，那么这个方法在多线程访问的时候肯定就不是线程安全的！对于如上这种例子我们当然可以使用原子变量<code>AtomicInteger</code>来实现更高级的同步机制去解决这个问题，但是其他场景下呢？</p>
<p>不仅仅是Integer对象哦！所有的对象都有可能会有这些问题存在！当你在锁这个对象的时候，一定要保证加锁的对象在线程中不被修改成另一个对象！否则就是一个<strong>假的</strong>同步代码块！</p>
<hr>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
        <tag>Synchronized</tag>
      </tags>
  </entry>
  <entry>
    <title>一个[合格]的程序员必须具备的工具和插件</title>
    <url>/post/c367e4c9.html</url>
    <content><![CDATA[<p><img src="/gtx.jpg" alt="封面"></p>
<span id="more"></span>

<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><strong>如题… 是我标题党了，应该这样讲：“合格的程序员”不一定需要会使用哪些工具，但是会使用那些能够有效减少自己工作量的很酷的工具和插件的程序员一定会进步成一个“合格的程序员”。因为他们善于思考，并能够将繁杂的重复性工作交给工具去完成，将精力集中在核心的编码任务上。</strong></p>
<h4 id="逐个介绍那些我自己常用的工具、插件或者网站"><a href="#逐个介绍那些我自己常用的工具、插件或者网站" class="headerlink" title="逐个介绍那些我自己常用的工具、插件或者网站"></a>逐个介绍那些我自己常用的工具、插件或者网站</h4><h5 id="Ghelper"><a href="#Ghelper" class="headerlink" title="Ghelper"></a><a href="http://googlehelper.net/">Ghelper</a></h5><p>说到工具，不会翻墙用啥子工具。Ghelper是一个谷歌浏览器插件，直接下载安装到chrome扩展即可轻松访问谷歌等服务！注意，访问谷歌的相关服务是免费的哦！如果你有需求访问其他的例如YouTuBe、Twitter之类的，可以购买会员服务！这里还有一个谷歌访问助手破解版，我没有试过，有兴趣可以装一下看看：<a href="https://github.com/haotian-wang/google-access-helper">GHelper破解版</a><br>这个工具可以说是以下大部分工具的基础。</p>
<h5 id="FeHelper"><a href="#FeHelper" class="headerlink" title="FeHelper"></a><a href="https://www.baidufe.com/fehelper/feedback.html">FeHelper</a></h5><p>FeHelper是一个在谷歌浏览器上我最常用的一个插件。功能如下，字符串编解码、JSON格式化、时间戳转换等等工具，在做web开发的时候查看某个JSON数据格式是否正确直接黏贴到这个框里就OK，简单暴力~</p>
<p><img src="/feh.png" alt="FeHelper"></p>
<h5 id="油猴儿"><a href="#油猴儿" class="headerlink" title="油猴儿"></a><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">油猴儿</a></h5><p>大名鼎鼎的油猴儿想必很多程序员都了解以及用过吧(没用过别告诉我你是个程序员，死敲代码的)。</p>
<p><img src="/yh.png" alt="油猴儿"></p>
<p>如上图就是我的一些油猴儿插件的已安装的一部分脚本的截图。例如看各大视频网站，不想要买VIP去看，那么直接安装一个VIP视频破解脚本；或者百度网盘，拒绝启动客户端下载文件，安装个油猴脚本直接直链下载！</p>
<p>油猴儿在我看来就是一个浏览器脚本的容器，网上极客众多，你可以找得到任何自己感兴趣的想要安装的插件去完成自己要做的事情。</p>
<p>油猴儿的安装：<a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">谷歌应用商店 - 油猴儿</a>，安装完成之后你就可以找到任何你想要的脚本装在油猴儿里面啦！</p>
<p>这边，我只告诉大家一个终极脚本：<a href="https://greasyfork.org/zh-CN/scripts/24508-userscript-show-site-all-userjs">UserScript+</a>。为啥叫它终极脚本。。。因为安装上它之后，当你打开任何网站，他都会提示你这个网站可以安装的脚本有哪些，这样你就不用在茫茫大海中去寻找自己需要的那些脚本了。</p>
<p><img src="/jb.png" alt="掘金油猴儿脚本"></p>
<p>可以想象，有了这个之后，面向百度编程的程序员是不是不用再被眼花缭乱的广告所骚扰！喜欢使用掘金的程序员也可以设置自己喜欢的页面排版~ 经常水V2EX的程序员也可以在评论区盖楼了！！哈哈想想就刺激呢！</p>
<h5 id="云盘精灵"><a href="#云盘精灵" class="headerlink" title="云盘精灵"></a><a href="https://www.yunpanjingling.com/">云盘精灵</a></h5><p><img src="/ypjl.png" alt="云盘精灵"></p>
<p>云盘精灵是一个下载百度网盘资源的神奇的网站，在这里你几乎可以找到任何您想要的资源去下载。然鹅，需要注册然后使用豆子购买。不过这也是理所应当的，毕竟知识付费的天下。但是需要付的并不多，而且你还可以将你自己的资源分享到云盘精灵，有人下载你也会赚取到相应的豆子。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>将阿里Java编码规范敲成思维导图</title>
    <url>/post/fc722dde.html</url>
    <content><![CDATA[<p><img src="/fm.png" alt="阿里Java编码规范"></p>
<center>阿里Java编码规范</center>
<span id="more"></span>
<center></center>
<center><a href="https://mubu.com/doc/CuUSIfxtSz">可以点击这里查看分享的笔记</a></center>
<center></center>
<center></center>
<center>或者扫描如下二维码获取我分享的《阿里Java开发手册-幕布版》</center>
![](qrcode.png)

<center></center>
<center></center>
<center></center>
-----
<center>最后，思维导图效果如下，密集恐惧症慎入~~</center>
<center>查看清晰完整的效果请去幕布笔记，点击查看思维导图即可</center>
![](阿里Java编码规范.png)]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>突然有一种很强烈的无力感</title>
    <url>/post/9d515d47.html</url>
    <content><![CDATA[<h4 id="突然有一种很强烈的无力感"><a href="#突然有一种很强烈的无力感" class="headerlink" title="突然有一种很强烈的无力感"></a>突然有一种很强烈的无力感</h4><p>刚刚打完三把游戏<br>很罪恶。。。因为自己应该是把晚上这些时间用来学习的<br>但是看到网上那些厉害的大牛<br>他们的一些阿里的面经<br>都答得很好了，却又倒在了HR面<br>我不知道我接下来应该去为自己制定一个怎样的计划了<br>感觉自己应该学习的非常多，但是时间却不够<br>我是个急性子吧？却又有拖延症，做事情又犹豫不决<br>姥姥给家里重新装修不知道花了多少钱<br>昨天没忍住在健身房又办了2800 的一月的私教<br>股票里面还亏着一万多<br>明天上班又会是用怎样摸鱼划水的方式度过？<br>看到B站上一个在国外(加拿大)工作的女生，每天的生活朝九晚五，开着宝马上班<br>看着也是没工作几年的样子<br>我想国外的程序员才配叫程序员吧，国内的只能叫码农<br>在努力进一个像阿里这样的大公司又能怎么样呢？<br>享受福报？给领导卖命？<br>2019年以来感觉自己活在了一个乌云笼罩的一段人生里<br>我知道这一段人生很快会过去<br>后面肯定会越来越舒服的<br>只是不知道是因为习惯了这种平庸的生活而舒服<br>还是会通过自己的努力过上一个真正舒服的生活<br>目前的公司很烂，很烦<br>项目很水，技术很烂，领导很无能，我依然很菜没多少进步<br>我究竟犯了多少错误命运才会让我刚毕业的前几年过的这么坎坷<br>我现在已经有一个中彩票的梦想了(已经被逼到这种地步了唉)<br>如果真的让我有资本随便辞职，我回去拿着钱环游世界的<br>看遍地球上每一个角落，领略那些享受着福报的人永远看不到的风景<br>阿门！</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】模板方法模式</title>
    <url>/post/94b9e3fb.html</url>
    <content><![CDATA[<p><img src="/fm.png" alt="封面"></p>
<span id="more"></span>

<h4 id="什么是模板方法模式"><a href="#什么是模板方法模式" class="headerlink" title="什么是模板方法模式"></a>什么是模板方法模式</h4><p>在计算机程序中，为了将一些具有不同实现但有相同执行步骤的类统一起来，通常我们将这些类抽象成一个模板类。模板类定义了一个算法的框架，使得子类可以不改变算法的结构而去对一些细节实现进行重新定义。</p>
<h4 id="模板方法模式的核心要素"><a href="#模板方法模式的核心要素" class="headerlink" title="模板方法模式的核心要素"></a>模板方法模式的核心要素</h4><h5 id="抽象模板"><a href="#抽象模板" class="headerlink" title="抽象模板"></a>抽象模板</h5><p>抽象模板中定义了两种方法：需要子类去实现的基本方法，以及固定的不需要子类去实现的具体算法步骤的模板方法。基本方法在模板方法中被调用，模板方法一般会是一个具体的算法框架，调度基本方法完成所有功能。</p>
<h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><p>子类具体实现抽象模板中的基本方法，完成对框架中的算法细节进行重新定义。</p>
<h4 id="我在实际项目中使用的案例"><a href="#我在实际项目中使用的案例" class="headerlink" title="我在实际项目中使用的案例"></a>我在实际项目中使用的案例</h4><p>在做某个按需查询不同类别的用户，并将其上传到OSS上，每日发邮件告诉运营人员结果的一个需求的时候，我就用到了模板方法模式。<br>首先定义一个抽象模板，分别有查询用户(每天都不同的SQL)，上传到OSS，发邮件等几个步骤，即基本方法。在模板方法中将这几个步骤封装起来。定义7个子类分别对每天不同的查询、上传、邮件做具体的实现。最后根据策略模式，不同的星期调用不同的对象的模板方法完成核心功能。</p>
<h4 id="模板方法模式代码示例"><a href="#模板方法模式代码示例" class="headerlink" title="模板方法模式代码示例"></a>模板方法模式代码示例</h4><p>如图，有个做饭的抽象模板：定义了[洗菜-炒菜-完成]三个步骤为基本方法，一个<code>ComplateCook</code>方法完成步骤的组装</p>
<p><img src="/bb.png" alt="抽象模板"></p>
<p>一个西红柿炒蛋的实现类</p>
<p><img src="/z1.png" alt="子类1"></p>
<p>一个鱼香肉丝的实现类</p>
<p><img src="/z2.png" alt="子类2"></p>
<p><strong>具体代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CookTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义步骤为抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">wash</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">cook</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">ComplateCook</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始做菜～&quot;</span>);</span><br><span class="line">        wash();</span><br><span class="line">        cook();</span><br><span class="line">        finish();</span><br><span class="line">        System.out.println(<span class="string">&quot;完成做菜步骤～&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XihongshiChaoEgg</span> <span class="keyword">extends</span> <span class="title class_">CookTemplate</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wash</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切西红柿，准备鸡蛋～&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cook</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;炒鸡蛋，然后再炒西红柿～&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;西红柿炒蛋做好了，出锅～&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YuXiangRose</span> <span class="keyword">extends</span> <span class="title class_">CookTemplate</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wash</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;洗胡萝卜～&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;切肉丝～&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cook</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始做鱼香肉丝～&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鱼香肉丝做好了 出锅～&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CookTemplate</span> <span class="variable">cook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XihongshiChaoEgg</span>();</span><br><span class="line">        cook.ComplateCook();</span><br><span class="line">        cook = <span class="keyword">new</span> <span class="title class_">YuXiangRose</span>();</span><br><span class="line">        cook.ComplateCook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="模板方法模式优缺点"><a href="#模板方法模式优缺点" class="headerlink" title="模板方法模式优缺点"></a>模板方法模式优缺点</h4><ul>
<li><p>优点</p>
<ul>
<li>封装了不可变的部分，扩展可变部分</li>
<li>提供公共代码，便于维护</li>
<li>具体行为父类控制，子类只管自己的细节实现，符合开闭原则</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>一个不同的实现都要增加一个子类，会导致代码量很庞大</li>
<li>父类的执行结果会受到子类的影响，在复杂代码的阅读中会给开发人员带来很多麻烦</li>
</ul>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>模板方法模式适用于：有一个固定的算法步骤，但是细节实现存在多种可能的场景，即整体稳定但是个别易变的时候讲会变化的那一部分抽象出来。<br>模板方法模式强调抽象类与子类之间的协作，它将调用权交给父类，是一种控制反转的设计理念。子类不再去完成核心的功能，只需要关注属于自己的那一部分的实现。</p>
<hr>
<ul>
<li>JDK中经典的模板方法模式实现：<strong>AQS</strong></li>
</ul>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>设计模式</tag>
        <tag>模板方法模式模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JanusGraph 图数据库搭建</title>
    <url>/post/c88a8dcb.html</url>
    <content><![CDATA[<p>最近折腾了一波 JanusGraph 图数据库的部署，采用 <code>JanusGraph</code> + <code>HBase</code> + <code>ElasticSearch</code> 架构，在此记录下过程。</p>
<span id="more"></span>

<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h3><p>本文主要记录 JanusGraph 图数据库的部署，需要另行搭建 HBase 和 ElasticSearch，本文以本地已经部署好 HBase 和 ElasticSearch 为例。</p>
<ul>
<li>HBase 地址: <code>127.0.0.1:2181</code></li>
<li>ElasticSearch 地址: <code>127.0.0.1:9200</code></li>
</ul>
<p>另外，系统需安装有<code>unzip</code>、<code>jdk</code>和你喜欢的文本编辑器，且建议在非 root 用户下执行。</p>
<h3 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h3><blockquote>
<p>项目地址: <a href="https://github.com/JanusGraph/janusgraph">JanusGraph&#x2F;janusgraph</a></p>
</blockquote>
<p>在 <a href="https://github.com/JanusGraph/janusgraph/releases">Github release 页面</a>上下载我们所需要的文件，形如<code>janusgraph-&#123;VERSION&#125;-hadoop2.zip</code>，在这里我们下载最新版 <code>0.3.2</code> 版本: <a href="https://github.com/JanusGraph/janusgraph/releases/download/v0.3.2/janusgraph-0.3.2-hadoop2.zip"><code>janusgraph-0.3.2-hadoop2.zip</code></a>，并解压出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/JanusGraph/janusgraph/releases/download/v0.3.2/janusgraph-0.3.2-hadoop2.zip -cO janusgraph-0.3.2-hadoop2.zip</span><br><span class="line">unzip janusgraph-0.3.2-hadoop2.zip</span><br><span class="line"><span class="built_in">mv</span> janusgraph-0.3.2-hadoop2 janusgraph</span><br><span class="line"><span class="built_in">cd</span> janusgraph</span><br></pre></td></tr></table></figure>

<p>接下来的操作大部分在此文件夹内进行，即<code>~/janusgraph</code>文件夹内。</p>
<h3 id="调整-Gremlin-Server-配置"><a href="#调整-Gremlin-Server-配置" class="headerlink" title="调整 Gremlin Server 配置"></a>调整 Gremlin Server 配置</h3><p>通过<code>vi conf/gremlin-server/gremlin-server.yaml</code>打开，有以下部分配置需要改动。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听地址，默认对外开放，若只允许本地访问则更改为 127.0.0.1</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 监听端口，有需要可以更改</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8182</span></span><br><span class="line"><span class="comment"># 服务类型，可选以下内容</span></span><br><span class="line"><span class="comment"># - WebSocketChannelizer 提供WebSocket服务</span></span><br><span class="line"><span class="comment"># - HttpChannelizer 提供Http服务</span></span><br><span class="line"><span class="comment"># - WsAndHttpChannelizer 推荐，同时提供WebSocket和Http服务，从0.2.0版本开始支持</span></span><br><span class="line"><span class="attr">channelizer:</span> <span class="string">org.apache.tinkerpop.gremlin.server.channel.WsAndHttpChannelizer</span></span><br><span class="line"><span class="attr">graphs:</span> &#123;</span><br><span class="line">    <span class="comment"># 所要用到的配置文件路径，可自定义</span></span><br><span class="line">    <span class="attr">graph:</span> <span class="string">conf/gremlin-server/janusgraph.properties</span>,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<details>
  <summary>完整配置</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8182</span></span><br><span class="line"><span class="attr">scriptEvaluationTimeout:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">channelizer:</span> <span class="string">org.apache.tinkerpop.gremlin.server.channel.WsAndHttpChannelizer</span></span><br><span class="line"><span class="attr">graphs:</span> &#123; <span class="attr">graph:</span> <span class="string">conf/gremlin-server/janusgraph.properties</span> &#125;</span><br><span class="line"><span class="attr">scriptEngines:</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">gremlin-groovy:</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">plugins:</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">org.janusgraph.graphdb.tinkerpop.plugin.JanusGraphGremlinPlugin:</span> &#123;&#125;,</span><br><span class="line">            <span class="string">?</span> <span class="string">org.apache.tinkerpop.gremlin.server.jsr223.GremlinServerGremlinPlugin</span></span><br><span class="line">            <span class="string">:</span> &#123;&#125;,</span><br><span class="line">            <span class="string">?</span> <span class="string">org.apache.tinkerpop.gremlin.tinkergraph.jsr223.TinkerGraphGremlinPlugin</span></span><br><span class="line">            <span class="string">:</span> &#123;&#125;,</span><br><span class="line">            <span class="attr">org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin:</span></span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">classImports:</span> [<span class="string">java.lang.Math</span>],</span><br><span class="line">                <span class="attr">methodImports:</span> [<span class="string">java.lang.Math#*</span>],</span><br><span class="line">              &#125;,</span><br><span class="line">            <span class="attr">org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin:</span></span><br><span class="line">              &#123; <span class="attr">files:</span> [<span class="string">scripts/empty-sample.groovy</span>] &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="attr">serializers:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0</span>,</span><br><span class="line">      <span class="attr">config:</span> &#123; <span class="attr">serializeResultToString:</span> <span class="literal">true</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment"># Older serialization versions for backwards compatibility:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoLiteMessageSerializerV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span> &#123; <span class="attr">serializeResultToString:</span> <span class="literal">true</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerGremlinV2d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span> [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerGremlinV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span></span><br><span class="line">            [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistryV1d0</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV1d0</span>,</span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">ioRegistries:</span></span><br><span class="line">            [<span class="string">org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistryV1d0</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.server.op.session.SessionOpProcessor</span>,</span><br><span class="line">      <span class="attr">config:</span> &#123; <span class="attr">sessionTimeout:</span> <span class="number">28800000</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">className:</span> <span class="string">org.apache.tinkerpop.gremlin.server.op.traversal.TraversalOpProcessor</span>,</span><br><span class="line">      <span class="attr">config:</span> &#123; <span class="attr">cacheExpirationTime:</span> <span class="number">600000</span>, <span class="attr">cacheMaxSize:</span> <span class="number">1000</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="attr">metrics:</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">consoleReporter:</span> &#123; <span class="attr">enabled:</span> <span class="literal">true</span>, <span class="attr">interval:</span> <span class="number">180000</span> &#125;,</span><br><span class="line">    <span class="attr">csvReporter:</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">interval:</span> <span class="number">180000</span>,</span><br><span class="line">        <span class="attr">fileName:</span> <span class="string">/tmp/gremlin-server-metrics.csv</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="attr">jmxReporter:</span> &#123; <span class="attr">enabled:</span> <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">slf4jReporter:</span> &#123; <span class="attr">enabled:</span> <span class="literal">true</span>, <span class="attr">interval:</span> <span class="number">180000</span> &#125;,</span><br><span class="line">    <span class="attr">gangliaReporter:</span></span><br><span class="line">      &#123; <span class="attr">enabled:</span> <span class="literal">false</span>, <span class="attr">interval:</span> <span class="number">180000</span>, <span class="attr">addressingMode:</span> <span class="string">MULTICAST</span> &#125;,</span><br><span class="line">    <span class="attr">graphiteReporter:</span> &#123; <span class="attr">enabled:</span> <span class="literal">false</span>, <span class="attr">interval:</span> <span class="number">180000</span> &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="attr">maxInitialLineLength:</span> <span class="number">4096</span></span><br><span class="line"><span class="attr">maxHeaderSize:</span> <span class="number">8192</span></span><br><span class="line"><span class="attr">maxChunkSize:</span> <span class="number">8192</span></span><br><span class="line"><span class="attr">maxContentLength:</span> <span class="number">65536</span></span><br><span class="line"><span class="attr">maxAccumulationBufferComponents:</span> <span class="number">1024</span></span><br><span class="line"><span class="attr">resultIterationBatchSize:</span> <span class="number">64</span></span><br><span class="line"><span class="attr">writeBufferLowWaterMark:</span> <span class="number">32768</span></span><br><span class="line"><span class="attr">writeBufferHighWaterMark:</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure>

</details>

<h3 id="调整-properties-文件"><a href="#调整-properties-文件" class="headerlink" title="调整 properties 文件"></a>调整 properties 文件</h3><p>通过<code>vi conf/gremlin-server/janusgraph.properties</code>打开 properties 文件，加入以下内容。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">gremlin.graph</span> <span class="string">=</span> <span class="string">org.janusgraph.core.JanusGraphFactory</span></span><br><span class="line"><span class="string">storage.backend</span> <span class="string">=</span> <span class="string">hbase</span></span><br><span class="line"><span class="comment"># 可换成远程 HBase 所在 IP</span></span><br><span class="line"><span class="string">storage.hostname</span> <span class="string">=</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment"># 若采用 HBase 集群，使用下面的写法，采用&#x27;,&#x27;分隔各个 IP</span></span><br><span class="line"><span class="comment"># storage.hostname = 192.168.0.1,192.168.0.2</span></span><br><span class="line"><span class="string">storage.port</span> <span class="string">=</span> <span class="number">2181</span></span><br><span class="line"><span class="string">cache.db-cache</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="string">cache.db-cache-clean-wait</span> <span class="string">=</span> <span class="number">20</span></span><br><span class="line"><span class="string">cache.db-cache-time</span> <span class="string">=</span> <span class="number">180000</span></span><br><span class="line"><span class="string">cache.db-cache-size</span> <span class="string">=</span> <span class="number">0.5</span></span><br><span class="line"><span class="string">index.search.backend</span> <span class="string">=</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="comment"># 可换成远程 ElasticSearch 所在地址</span></span><br><span class="line"><span class="string">index.search.hostname</span> <span class="string">=</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9200</span></span><br><span class="line"><span class="comment"># 若采用 ElasticSearch 集群，使用下面的写法，采用&#x27;,&#x27;分隔各个 IP，默认端口可省略</span></span><br><span class="line"><span class="string">index.search.hostname</span> <span class="string">=</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span><span class="string">,192.168.0.2:9200,192.168.0.3</span></span><br></pre></td></tr></table></figure>

<h3 id="临时启用服务"><a href="#临时启用服务" class="headerlink" title="临时启用服务"></a>临时启用服务</h3><p>运行如下命令启动服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/gremlin-server.sh conf/gremlin-server/gremlin-server.yaml</span><br></pre></td></tr></table></figure>

<p>由于使用了默认配置文件，则可以省略配置文件路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/gremlin-server.sh</span><br></pre></td></tr></table></figure>

<p>当屏幕上出现如下内容时，则代表服务已经开启完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[gremlin-server-boss-1] INFO  org.apache.tinkerpop.gremlin.server.GremlinServer  - Channel started at port 8182.</span><br></pre></td></tr></table></figure>

<h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在此以 systemd 为例进行配置，可以参考一下，注意替换文件路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/systemd/system/janusgraph.service</span><br></pre></td></tr></table></figure>

<p>输入以下内容并保存:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=JanusGraph Server</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># Environment=&quot;PATH=yourpath&quot;</span></span><br><span class="line">ExecStart=/root/janusgraph/bin/gremlin-server.sh /root/janusgraph/conf/gremlin-server/gremlin-server.yaml</span><br><span class="line">ExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>可能会遇到错误，显示<code>java: command not found</code>，请把上面的备注取消掉，替换上自己的系统环境变量。</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>启用服务: <code>sudo service janusgraph start</code></li>
<li>关闭服务: <code>sudo service janusgraph stop</code></li>
<li>重启服务: <code>sudo service janusgraph restart</code></li>
<li>开机启动: <code>sudo systemctl enable janusgraph</code></li>
<li>取消开机启动: <code>sudo systemctl disable janusgraph</code></li>
<li>查看日志: <code>sudo journalctl -u janusgraph --since tody</code></li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="测试-WebSocket"><a href="#测试-WebSocket" class="headerlink" title="测试 WebSocket"></a>测试 WebSocket</h3><p>运行<code>bin/gremlin.sh</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[admin@localhost janusgraph]$ bin/gremlin.sh</span><br><span class="line"></span><br><span class="line">         \,,,/</span><br><span class="line">         (o o)</span><br><span class="line">-----oOOo-(3)-oOOo-----</span><br><span class="line">plugin activated: janusgraph.imports</span><br><span class="line">plugin activated: tinkerpop.server</span><br><span class="line">plugin activated: tinkerpop.utilities</span><br><span class="line">plugin activated: tinkerpop.hadoop</span><br><span class="line">plugin activated: tinkerpop.spark</span><br><span class="line">plugin activated: tinkerpop.tinkergraph</span><br><span class="line">gremlin&gt; :remote connect tinkerpop.server conf/remote.yaml</span><br><span class="line">==&gt;Configured localhost/127.0.0.1:8182</span><br><span class="line">gremlin&gt; :&gt; g.V().count()</span><br><span class="line">==&gt;0</span><br><span class="line">gremlin&gt;</span><br></pre></td></tr></table></figure>

<p>如能正常响应，则表示部署成功。</p>
<h3 id="测试-Http"><a href="#测试-Http" class="headerlink" title="测试 Http"></a>测试 Http</h3><p>运行如下命令测试 http 能否正常响应。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -Hcontent-<span class="built_in">type</span>:application/json -d <span class="string">&#x27;&#123;&quot;gremlin&quot;:&quot;g.V().count()&quot;&#125;&#x27;</span> http://localhost:8182</span><br></pre></td></tr></table></figure>

<p>应有类似如下返回内容，则为正常。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;requestId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;47608dd1-275d-4708-acf7-fa1e6355328b&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g:Map&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;@value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g:List&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g:Int64&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;@value&quot;</span><span class="punctuation">:</span> <span class="number">0</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g:Map&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;@value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="可能遇到的坑"><a href="#可能遇到的坑" class="headerlink" title="可能遇到的坑"></a>可能遇到的坑</h2><p>别问我怎么知道的</p>
<ol>
<li>本地是否安装 java</li>
<li>配置文件路径是否正确</li>
<li>远程 hbase 和 es 端口防火墙是否开放</li>
<li>远程 hbase 和 es 是否监听的是本地地址</li>
</ol>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>JanusGraph</tag>
        <tag>Hbase</tag>
        <tag>Gremlin</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程学习(六)：Exchanger的学习及使用场景</title>
    <url>/post/72d2f841.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在JUC包中，除了一些常用的或者说常见的并发工具类(ReentrantLock，CountDownLatch，CyclicBarrier，Semaphore)等，还有一个不常用的线程同步器类 —— Exchanger。<br></p>
<p>Exchanger是适用在两个线程之间数据交换的并发工具类，它的作用是找到一个同步点，当两个线程都执行到了同步点(<strong>exchange方法</strong>)之后(<em>有一个没有执行到就一直等待，也可以设置等待超时时间</em>)，就将自身线程的数据与对方交换。</p>
<span id="more"></span>

<div style="text-align: center" center><a href="javascript:">Exchanger工具类UML</a></div>
![UML](exc.png)

<h4 id="Exchanger类结构"><a href="#Exchanger类结构" class="headerlink" title="Exchanger类结构"></a>Exchanger类结构</h4><p>如上图UNML，Exchanger类中有两个内部类，一个Node，一个Participant。</p>
<p>Participant继承了ThreadLocal并且重写了其initialValue方法，返回一个Node对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The corresponding thread local class */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Participant</span> <span class="keyword">extends</span> <span class="title class_">ThreadLocal</span>&lt;Node&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">initialValue</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Node类封装了两个线程存储的数据对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nodes hold partially exchanged data, plus other per-thread</span></span><br><span class="line"><span class="comment"> * bookkeeping. Padded via <span class="doctag">@sun</span>.misc.Contended to reduce memory</span></span><br><span class="line"><span class="comment"> * contention.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> index;              <span class="comment">//  node 在 arena 数组下标</span></span><br><span class="line">    <span class="type">int</span> bound;              <span class="comment">//  交换器的最后记录值 </span></span><br><span class="line">    <span class="type">int</span> collides;           <span class="comment">//  记录的 CAS 失败数</span></span><br><span class="line">    <span class="type">int</span> hash;               <span class="comment">//  伪随机的自旋数</span></span><br><span class="line">    Object item;            <span class="comment">//  这个线程的数据项</span></span><br><span class="line">    <span class="keyword">volatile</span> Object match;  <span class="comment">//  另一个线程的数据项</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread parked; <span class="comment">//  当阻塞时，设置此线程，不阻塞的话会自旋</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Exchanger源码分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">exchange</span><span class="params">(V x)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    Object v;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">item</span> <span class="operator">=</span> (x == <span class="literal">null</span>) ? NULL_ITEM : x; <span class="comment">// translate null args</span></span><br><span class="line">    <span class="keyword">if</span> ((arena != <span class="literal">null</span> || <span class="comment">// 是null就执行后面的方法</span></span><br><span class="line">         (v = slotExchange(item, <span class="literal">false</span>, <span class="number">0L</span>)) == <span class="literal">null</span>) &amp;&amp;</span><br><span class="line">        <span class="comment">// 如果执行slotExchange有结果就执行后面的，否则返回</span></span><br><span class="line">        ((Thread.interrupted() || <span class="comment">// 非中断则执行后面的方法</span></span><br><span class="line">          (v = arenaExchange(item, <span class="literal">false</span>, <span class="number">0L</span>)) == <span class="literal">null</span>)))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">    <span class="keyword">return</span> (v == NULL_ITEM) ? <span class="literal">null</span> : (V)v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>exchange</code>方法的步骤：</p>
<ul>
<li>如果执行slotExchange有结果就执行后面的arenaExchange</li>
<li>如果solt被占用，就执行arenaExchange</li>
<li>返回的数据v是对方线程的数据项</li>
<li>总结即：如果A线程先调用，那么A的数据项存储的item中</li>
<li>则B线程的数据项存储在match中</li>
<li>当没有多线程并发操作 Exchange 的时候，使用 slotExchange 就足够了。 slot 是一个 node 对象。</li>
<li>当出现并发了，一个 slot 就不够了，就需要使用一个 node 数组 arena 操作了。</li>
</ul>
<p>​    </p>
<h4 id="Exchanger的使用"><a href="#Exchanger的使用" class="headerlink" title="Exchanger的使用"></a>Exchanger的使用</h4><p>下面的例子模拟一个队列中数据的交换使用的场景：</p>
<ul>
<li>线程A往队列中存入数据</li>
<li>线程B从队列中消耗数据</li>
<li>当线程A存满的时候</li>
<li>才交换给线程B</li>
<li>当线程B消耗完成之后才交换给线程A。</li>
<li>线程A、B的生产和消耗的速率有可能不同</li>
<li>对方线程调用exchange之前，另一个线程执行到exchange会阻塞</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 在对方线程调用exchange之前，另一个线程执行到exchange会阻塞 直到双方都调用exchange */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangerStudy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ArrayBlockingQueue&lt;String&gt; initialFillQueue </span><br><span class="line">      = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ArrayBlockingQueue&lt;String&gt; initialEmptyQueue </span><br><span class="line">      = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Exchanger&lt;ArrayBlockingQueue&lt;String&gt;&gt; exchanger </span><br><span class="line">      = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 填充缓存队列的线程 */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FillingRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      ArrayBlockingQueue&lt;String&gt; current = initialEmptyQueue;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> StrUtil.uuid();</span><br><span class="line">          System.out.println(<span class="string">&quot;生产了一个序列：&quot;</span> + str + <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;加入到交换区&quot;</span>);</span><br><span class="line">          Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            current.add(str);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列已满，换一个空的&quot;</span>);</span><br><span class="line">            current = exchanger.exchange(current);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 填充缓存队列的线程 */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmptyingRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      ArrayBlockingQueue&lt;String&gt; current = initialFillQueue;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!current.isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> current.poll();</span><br><span class="line">            System.out.println(<span class="string">&quot;消耗一个数列：&quot;</span> + str);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列空了，换个满的&quot;</span>);</span><br><span class="line">            current = exchanger.exchange(current);</span><br><span class="line">            System.out.println(<span class="string">&quot;换满的成功~~~~~~~~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">FillingRunnable</span>()).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">EmptyingRunnable</span>()).start();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p><a href="https://juejin.im/post/5ae7554ff265da0b86360880">&gt;&gt;&gt;&gt;&gt; 更详细的源码解析 - 掘金</a></p>
</blockquote>
<p><img src="https://user-gold-cdn.xitu.io/2018/5/1/16317a536c642f7c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="结尾"></p>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
        <tag>Exchanger</tag>
        <tag>线程交换器</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程学习(五)：Semaphore源码学习及使用案例</title>
    <url>/post/cd7b2e93.html</url>
    <content><![CDATA[<p><img src="/fm.png"></p>
<span id="more"></span>

<h3 id="Semaphore同步工具类之信号量介绍"><a href="#Semaphore同步工具类之信号量介绍" class="headerlink" title="Semaphore同步工具类之信号量介绍"></a>Semaphore同步工具类之信号量介绍</h3><h4 id="什么是Semaphore"><a href="#什么是Semaphore" class="headerlink" title="什么是Semaphore"></a>什么是Semaphore</h4><ul>
<li>Semaphore是JUC包中的一个很简单的工具类，用来实现多线程下对于资源的同一时刻的访问线程数限制</li>
<li>Semaphore中存在一个【许可】的概念，即访问资源之前，先要获得许可，如果当前许可数量为0，那么线程阻塞，直到获得许可</li>
<li>Semaphore内部使用AQS实现，由抽象内部类Sync继承了AQS。因为Semaphore天生就是共享的场景，所以其内部实际上类似于共享锁的实现。</li>
<li>Semaphore机制是提供给线程抢占式获取许可，所以他可以实现公平或者非公平，类似于ReentrantLock。</li>
<li>Semaphore提供两个构造方法，用来传入许可数量以及公平或者非公平：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits)</span> &#123;</span><br><span class="line">    sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(permits);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits, <span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>(permits) : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Semaphore的使用场景"><a href="#Semaphore的使用场景" class="headerlink" title="Semaphore的使用场景"></a>Semaphore的使用场景</h4><ul>
<li>限流：并发环境(例如有1000个线程)下只允许100个线程访问数据库某资源</li>
<li>亦例如实际的，停车场只有10个车位，目前有15个汽车要来停车，多出的5个需要等其他车辆离开之后才能进行停车</li>
</ul>
<h3 id="Semaphore源码解读"><a href="#Semaphore源码解读" class="headerlink" title="Semaphore源码解读"></a>Semaphore源码解读</h3><p>分为公平与非公平</p>
<h4 id="获取许可的非公平的实现"><a href="#获取许可的非公平的实现" class="headerlink" title="获取许可的非公平的实现"></a>获取许可的非公平的实现</h4><p>在抽象类Sync中实现了非公平的消耗“许可”的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">nonfairTryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">available</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="type">int</span> <span class="variable">remaining</span> <span class="operator">=</span> available - acquires;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">        	compareAndSetState(available, remaining))</span><br><span class="line">        <span class="keyword">return</span> remaining;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>首先获取当前许可数量</p>
</li>
<li><p>判断消耗许可之后的剩余数量是否&gt;&#x3D;0</p>
</li>
<li><p>是的话执行<code>compareAndSetState(available, remaining)</code>设置许可之后返回</p>
</li>
<li><p>否则返回的负数会使得其在<code>doAcquireSharedInterruptibly</code>中等待许可并挂起，直到被唤醒(这步骤在AQS中实现，如下)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//如果线程被中断了，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">    <span class="comment">//获取许可失败，将线程加入到等待队列中</span></span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">    	doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="获取许可的公平实现"><a href="#获取许可的公平实现" class="headerlink" title="获取许可的公平实现"></a>获取许可的公平实现</h4><p>首先会在获取许可之前，判断<code>hasQueuedPredecessors()</code>，是否有线程在等待队列中等待许可，有的话直接返回-1，这个底层实现在AQS中已经实现好了。接下来剩下的操作就和非公平的基本一致了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2014338818796000944L</span>;</span><br><span class="line"></span><br><span class="line">    FairSync(<span class="type">int</span> permits) &#123;</span><br><span class="line">        <span class="built_in">super</span>(permits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasQueuedPredecessors())</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">available</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="type">int</span> <span class="variable">remaining</span> <span class="operator">=</span> available - acquires;</span><br><span class="line">            <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                compareAndSetState(available, remaining))</span><br><span class="line">                <span class="keyword">return</span> remaining;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasQueuedPredecessors</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// The correctness of this depends on head being initialized</span></span><br><span class="line">    <span class="comment">// before tail and on head.next being accurate if the current</span></span><br><span class="line">    <span class="comment">// thread is first in queue.</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; <span class="comment">// Read fields in reverse initialization order</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">    Node s;</span><br><span class="line">    <span class="comment">// 判断头节点不等于尾节点并且（头节点的下一节点为空或者其为当前线程）</span></span><br><span class="line">    <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">        ((s = h.next) == <span class="literal">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="许可的释放"><a href="#许可的释放" class="headerlink" title="许可的释放"></a>许可的释放</h4><p>许可的释放对于公平和非公平的实现都是一致的，定义在Sync类中。因为是共享式的，释放的时候没有像ReentrantLock一样去判断是否是当前线程来释放许可。释放许可也是采用原子操作将需要释放的许可加回去就完成了。</p>
<p>一旦线程调用<code>releaseShared</code>释放许可成功，就会同时调用<code>doReleaseShared</code>方法，其中会对阻塞的线程进行环型，下面是<code>tryReleaseShared</code>的源码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 拿到当前的许可数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="comment">// 加上还回来的许可</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> current + releases;</span><br><span class="line">        <span class="keyword">if</span> (next &lt; current) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum permit count exceeded&quot;</span>);</span><br><span class="line">        <span class="comment">// 原子操作 归还许可</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="减少许可数量以及将剩余许可数量都取走"><a href="#减少许可数量以及将剩余许可数量都取走" class="headerlink" title="减少许可数量以及将剩余许可数量都取走"></a>减少许可数量以及将剩余许可数量都取走</h4><p>Semaphore还提供了几个额外的操作许可的方法</p>
<ul>
<li><p>减少许可数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">reducePermits</span><span class="params">(<span class="type">int</span> reductions)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> current - reductions;</span><br><span class="line">        <span class="keyword">if</span> (next &gt; current) <span class="comment">// underflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Permit count underflow&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取走剩余全部许可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">drainPermits</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="number">0</span> || compareAndSetState(current, <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="实际使用信号量的代码实例"><a href="#实际使用信号量的代码实例" class="headerlink" title="实际使用信号量的代码实例"></a>实际使用信号量的代码实例</h3><p>如下：使用信号量做了一个限流的功能。</p>
<p>在1000个线程并发访问的情况下，每次限制只有100个线程能够获取到资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreStudy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 许可的数量</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">  <span class="comment">// 线程数量</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">  <span class="comment">// 获取许可失败的次数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">F</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">  <span class="comment">// 获取许可成功的次数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">S</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">  <span class="comment">// 声明许可</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Semaphore</span> <span class="variable">store</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(N);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> BrokenBarrierException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 使用栅栏模拟1000并发</span></span><br><span class="line">    <span class="type">CyclicBarrier</span> <span class="variable">BARRIER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(M + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 使用线程池创建线程</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">      pool.execute(</span><br><span class="line">          () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              BARRIER.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            getData();</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;等待2秒执行并发1000线程&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">// 等待两秒后打开栅栏 并发获取数据开始执行</span></span><br><span class="line">    BARRIER.await();</span><br><span class="line">    pool.shutdown();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 模拟获取数据或者业务处理 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!store.tryAcquire()) &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5000</span> + <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1000</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;没有可用资源，等待一小会儿: &quot;</span> + a + <span class="string">&quot;，目前：&quot;</span> + F.incrementAndGet());</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(a);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;成功拿到资源&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    store.release();</span><br><span class="line">    System.out.println(<span class="string">&quot;释放资源，现在：&quot;</span> + S.incrementAndGet());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
        <tag>Semaphore</tag>
        <tag>信号量</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程学习(四)：理解ThreadPoolExecutor线程池</title>
    <url>/post/d6c0aa75.html</url>
    <content><![CDATA[<p><img src="/xcc.png" alt="线程池"></p>
<span id="more"></span>

<h3 id="前言：关于ThreadPoolExecutor"><a href="#前言：关于ThreadPoolExecutor" class="headerlink" title="前言：关于ThreadPoolExecutor"></a>前言：关于ThreadPoolExecutor</h3><p><strong>ThreadPoolExecutor</strong>即我们常说的线程池。《阿里巴巴Java手册》中对于线程池的使用规定如下：</p>
<blockquote>
<p><strong>3.【强制】线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。</strong><br/><br><strong>说明：使用线程池的好处是减少线程在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量的同类线程而导致消耗完内存或者“过度切换”的问题​</strong></p>
</blockquote>
<h3 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h3><h4 id="使用线程池创建线程可以"><a href="#使用线程池创建线程可以" class="headerlink" title="使用线程池创建线程可以"></a>使用线程池创建线程可以</h4><ul>
<li>避免在应用中频繁的创建和销毁线程</li>
<li>使用线程池创建线程可以复用CPU资源</li>
<li>提高线程的可管理性</li>
</ul>
<h3 id="使用线程池的风险"><a href="#使用线程池的风险" class="headerlink" title="使用线程池的风险"></a>使用线程池的风险</h3><h4 id="线程饥饿死锁"><a href="#线程饥饿死锁" class="headerlink" title="线程饥饿死锁"></a>线程饥饿死锁</h4><p>线程池为“死锁”这一概念带来了一种新的可能：线程饥饿死锁。在线程池中，如果一个任务将另一个任务提交到同一个Executor，那么通常会引发死锁。第二个线程停留在工作队列中等待第一个提交的任务执行完成，但是第一个任务又无法执行完成，因为它在等待第二个任务执行完成。如下代码所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyThreadPoolDeadLock &#123;</span><br><span class="line">    static ExecutorService singlePool = Executors.newSingleThreadExecutor();</span><br><span class="line">    static class MyTask implements Callable&lt;String&gt; &#123;</span><br><span class="line">        String name;</span><br><span class="line">        public MyTask(String name) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public String call() throws Exception &#123;</span><br><span class="line">            Future&lt;String&gt; inner = singlePool.submit(new MyTask(&quot;inner&quot;));</span><br><span class="line">            return inner.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        Future&lt;String&gt; result = singlePool.submit(new MyTask(&quot;outer&quot;));</span><br><span class="line">        System.out.println(result.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在更大的线程池中，如果所有线程都由于等待其他仍处于工作队列的任务而阻塞，那么会发生同样的问题，这种情况被称为线程饥饿死锁。</p>
<h4 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h4><p>除了Thread 对象所需的内存之外，每个线程都需要两个可能很大的执行调用堆栈。除此以外，JVM 可能会为每个 Java 线程创建一个本机线程，这些本机线程将消耗额外的系统资源。如果线程池的大小设置的不合理就会有可能导致内存溢出的风险。还有就是Java预置线程池FixedThreadPool 和 SingleThreadPool中的阻塞队列使用的无界队列，最多可以保存2147483647个任务，如果代码编写不严谨就会堆积大量请求导致内存溢出。</p>
<h4 id="线程泄漏"><a href="#线程泄漏" class="headerlink" title="线程泄漏"></a>线程泄漏</h4><p>各种线程池都会导致一种问题就是线程泄漏。当从线程池取出一个线程去执行任务时，如果任务抛出RuntimeException 或一个Error而未捕获异常时，那么线程只会退出而线程池的大小将永远减少一个，当这种情况发生多次时，线程池最终就会为空并且因为没有可用的线程来处理任务。</p>
<h3 id="如果要自己实现线程池需要关注哪些点"><a href="#如果要自己实现线程池需要关注哪些点" class="headerlink" title="如果要自己实现线程池需要关注哪些点"></a>如果要自己实现线程池需要关注哪些点</h3><ul>
<li>首先要有一个存放线程的容器并设置容量</li>
<li>还需要一个存放用户提交的任务的容器，阻塞队列，有界还是无界</li>
<li>线程池创建的时候需要将指定数量的线程启动</li>
<li>用户提交任务的时候如果线程池没有空闲的线程如何创建线程并放入线程池</li>
<li>线程数量远大于用户提交的任务数量需要有一个回收线程的机制</li>
<li>线程全部在执行任务的时候存放的任务需要等待还是怎样或者再新加入任务时要提供一个饱和策略</li>
</ul>
<h3 id="ThreadPoolExecutor构造函数参数意义"><a href="#ThreadPoolExecutor构造函数参数意义" class="headerlink" title="ThreadPoolExecutor构造函数参数意义"></a>ThreadPoolExecutor构造函数参数意义</h3><p><img src="/gzhs.png" alt="构造函数"><br>ThreadPoolExecutor提供了四种构造函数，总共有如下几种参数，意义为：</p>
<ul>
<li><code>int corePoolSize</code>: 核心线程数的大小，在线程池创建的时候就会创建这么多线程待命，用户提交任务之后立即开始执行任务</li>
<li><code>int maximumPoolSize</code>: 最大线程数的大小，即最多会创建这么多线程，当超过这个数目的时候可能会在执行完任务之后回收多于核心线程数的线程</li>
<li><code>long keepAliveTime</code>: 线程最大存活时间，是相对于核心线程数来讲的。没有超过核心线程数的会一直存活的。超过的才有存活时间的限制</li>
<li><code>TimeUnit unit</code>: 时间单位</li>
<li><code>BlockingQueue&lt;Runnable&gt; workQueue</code>: 阻塞队列，用于存放用户提交的任务。系统预置的线程池的阻塞队列一般都是无界的LinkBlockingQueue，但是建议使用有界队列，对于非常大或者无界的线程池，可以使用同步移交队列控制避免排队，直接将任务从生产者移交到工作者线程。</li>
<li><code>ThreadFactory threadFactory</code>: 线程工厂接口。只有一个newThread方法。便于用户根据业务需要实现自己的线程创建机制。</li>
<li><code>RejectedExecutionHandler handler</code>: 饱和策略。默认四种，在下面讲解。</li>
</ul>
<h3 id="几种默认的饱和策略"><a href="#几种默认的饱和策略" class="headerlink" title="几种默认的饱和策略"></a>几种默认的饱和策略</h3><p>当有界队列被填满后，用户创建的任务无法再添加到线程池中保存，饱和策略开始发挥作用。如果某个任务被提交到已关闭的Executors时，饱和策略也会被执行。饱和策略的实现需要实现接口<code>RejectedExecutionHandler</code>。<br><img src="/bhcl.png" alt="四种默认的饱和策略"><br>如上，在ThreadPoolExecutor类中有四个内部类实现了<code>RejectedExecutionHandler</code>接口。分别是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static class AbortPolicy implements RejectedExecutionHandler &#123;...&#125;</span><br><span class="line">public static class DiscardPolicy implements RejectedExecutionHandler &#123;...&#125;</span><br><span class="line">public static class DiscardOldestPolicy implements RejectedExecutionHandler &#123;...&#125;</span><br><span class="line">public static class CallerRunsPolicy implements RejectedExecutionHandler &#123;...&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AbortPolicy"><a href="#AbortPolicy" class="headerlink" title="AbortPolicy"></a>AbortPolicy</h4><p>“中止”策略是默认的饱和策略，该策略将会抛出一个异常<code>RejectedExecutionException</code>，调用者可以捕获这个异常然后编写自己的业务代码。</p>
<h4 id="DiscardPolicy"><a href="#DiscardPolicy" class="headerlink" title="DiscardPolicy"></a>DiscardPolicy</h4><p>“抛弃”策略会在新提交的任务无法保存在队列中等待执行时将其抛弃掉。</p>
<h4 id="DiscardOldestPolicy"><a href="#DiscardOldestPolicy" class="headerlink" title="DiscardOldestPolicy"></a>DiscardOldestPolicy</h4><p>同“抛弃”策略，这种策略会将即将执行的那个任务抛弃掉，即抛弃最老的任务然后尝试提交新的任务。如果工作队列使用的是优先队列，那么会导致优先级最高的任务被抛弃，<strong>慎用</strong>！</p>
<h4 id="CallerRunsPolicy"><a href="#CallerRunsPolicy" class="headerlink" title="CallerRunsPolicy"></a>CallerRunsPolicy</h4><p>“调用者执行”策略即在队列满的时候由调用者去执行该任务。不会在线程池的某个线程中执行新的任务。</p>
<blockquote>
<p>《阿里巴巴Java开发手册》中强调使用线程池的时候尽量使用ThreadPoolExecutor，目的在于让程序员更加明确线程池的工作机制，实际业务中不可能在任务满时将任务抛弃掉，所以实现自己的饱和策略是有必要的。</p>
</blockquote>
<h3 id="Java预置线程池及其使用场景"><a href="#Java预置线程池及其使用场景" class="headerlink" title="Java预置线程池及其使用场景"></a>Java预置线程池及其使用场景</h3><p>如图是Executors类中的所有方法<br><img src="/yzxcgz.png" alt="预置线程池构造"></p>
<h4 id="Executors-newCachedThreadPool"><a href="#Executors-newCachedThreadPool" class="headerlink" title="Executors.newCachedThreadPool()"></a>Executors.newCachedThreadPool()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                              <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                              <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>无限容量的线程池(最大为2147483647)，调用ThreadPoolExecutor构造传入的核心线程数为0。适合场景为创建执行时间短效快速的线程任务，线程在执行完成之后直接被回收。阻塞队列使用SynchronousQueue，这是一个不保存数据的队列，因为该线程池有任务提交就会创建线程去执行，所以不需要保存</p>
<h4 id="Executors-newFixedThreadPool-nThreads"><a href="#Executors-newFixedThreadPool-nThreads" class="headerlink" title="Executors.newFixedThreadPool(nThreads)"></a>Executors.newFixedThreadPool(nThreads)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建固定数量的线程池。调用ThreadPoolExecutor的构造函数传入的核心线程数等于最大线程数。该线程池中的阻塞队列也使用的是无界的LinkedBlockingQueue。</p>
<h4 id="Executors-newSingleThreadExecutor-："><a href="#Executors-newSingleThreadExecutor-：" class="headerlink" title="Executors.newSingleThreadExecutor()："></a>Executors.newSingleThreadExecutor()：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次都只有一个线程去执行任务，用户提交的任务都会排队阻塞在阻塞队列中等待上一个任务执行完之后执行下一个。适用场景为后面任务依赖前面任务的情况。该线程池中的阻塞队列也使用的是无界的LinkedBlockingQueue。使用这个线程池需要小心<a href="#线程饥饿死锁">线程饥饿死锁</a></p>
<h4 id="Executors-newWorkStealingPool"><a href="#Executors-newWorkStealingPool" class="headerlink" title="Executors.newWorkStealingPool()"></a>Executors.newWorkStealingPool()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newWorkStealingPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span></span><br><span class="line">        (Runtime.getRuntime().availableProcessors(),</span><br><span class="line">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">         <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取当前可用的线程数量进行创建作为并行级别，通过源码可以看出底层调用的是ForkJoinPool线程池，newWorkStealingPool适合使用在很耗时的操作，但是newWorkStealingPool不是ThreadPoolExecutor的扩展，它是新的线程池类ForkJoinPool的扩展，但是都是在统一的一个Executors类中实现，由于能够合理的使用CPU进行对任务操作（并行操作），所以适合使用在很耗时的任务中。</p>
<h4 id="Executors-newScheduledThreadPool"><a href="#Executors-newScheduledThreadPool" class="headerlink" title="Executors.newScheduledThreadPool()"></a>Executors.newScheduledThreadPool()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">newScheduledThreadPool</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line">↑↑↑</span><br><span class="line">↓↓↓</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledThreadPoolExecutor</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ScheduledExecutorService</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ScheduledThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">DelayedWorkQueue</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设定延迟时间，定期执行。通过源码可以看出底层调用的是一个ScheduledThreadPoolExecutor，然后传入线程数量。同newWorkStealingPool一样也不是直接使用ThreadPoolExecutor进行扩展。可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景。</p>
<h3 id="优雅的关闭线程池"><a href="#优雅的关闭线程池" class="headerlink" title="优雅的关闭线程池"></a>优雅的关闭线程池</h3><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><p>设置线程池状态为关闭，但是只会关闭已经执行完成的线程，对于还未执行完成的线程，会等待执行完成再关闭。</p>
<p>当我们使用shuwdown方法关闭线程池时，一定要确保任务里不会有永久阻塞等待的逻辑，否则线程池就关闭不了。</p>
<h4 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow"></a>shutdownNow</h4><p>立马关闭线程池，线程池里的任务不再执行。</p>
<p>如果我们调用shutdownNow方法时，线程处于从队列里读取任务而阻塞中，则会导致抛出InterruptedException异常</p>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
        <tag>线程池</tag>
        <tag>ThreadPoolExecutor</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的几种非递归遍历</title>
    <url>/post/4c17ba50.html</url>
    <content><![CDATA[<p><img src="/fm.jpg" alt="封面"></p>
<span id="more"></span>

<h2 id="二叉树的几种非递归遍历解法"><a href="#二叉树的几种非递归遍历解法" class="headerlink" title="二叉树的几种非递归遍历解法"></a>二叉树的几种非递归遍历解法</h2><p>二叉树的递归遍历想必了解递归以及二叉树的同学都能够轻松写出正确答案，然而二叉树的非递归遍历确是很多人难以理解学会的，所以我在这里进行一下归纳总结，主要是复习巩固一下这方面的知识。</p>
<h3 id="非递归先序遍历"><a href="#非递归先序遍历" class="headerlink" title="非递归先序遍历"></a>非递归先序遍历</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul>
<li>首先将根节点入栈</li>
<li>然后循环判断栈不为空</li>
<li>则弹出栈顶元素</li>
<li>如果弹出元素的右子树不为空则入栈</li>
<li>如果弹出元素的左子树不为空则入栈</li>
<li>继续循环</li>
</ul>
<p>解析：由于先序遍历为[根-左-右]，所以根节点应该先入栈，然后出栈的同时依次入栈右-左子树即可。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">frontPrintByLoop</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非递归中序遍历"><a href="#非递归中序遍历" class="headerlink" title="非递归中序遍历"></a>非递归中序遍历</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul>
<li>首先将根节点入栈</li>
<li>循环判断根节点是否有左子树，有则入栈继续循环，否则循环结束</li>
<li>然后循环判断栈不为空</li>
<li>则弹出栈顶元素</li>
<li>如果栈顶元素右子树不为空</li>
<li>则循环入栈右子树及其右子树的左子树</li>
<li>继续循环</li>
</ul>
<p>解析：因为中序遍历为[左-根-又]，所以树的左子树应该先入栈，循环入栈左子树之后循环出栈，出栈的同时判断出栈元素是否有右子树，如果右子树不为空则对右子树执行相同的操作，即入栈右子树的左子树。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">midPrintByLoop</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        stack.push(node);</span><br><span class="line">        <span class="keyword">while</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            node = stack.pop();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">n</span> <span class="operator">=</span> node.right;</span><br><span class="line">            <span class="keyword">while</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(n);</span><br><span class="line">                n = n.left;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非递归后序遍历"><a href="#非递归后序遍历" class="headerlink" title="非递归后序遍历"></a>非递归后序遍历</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h4><ul>
<li>逆向思考先序遍历，因为后序遍历为[根-左-右]，我们可以以类似先序遍历的方式先将[右-左-根]的顺序找出来存入另一个栈，然后再依次出栈该栈元素即可</li>
</ul>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码 1"></a>代码 1</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lastPrintByOtherStack</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> Stack&lt;TreeNode&gt; stackReverse = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                stackReverse.push(node);</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stack.push(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stack.push(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stackReverse.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stackReverse.pop();</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h4><ul>
<li>只使用一个栈</li>
<li>先将根节点入栈</li>
<li>设置一个标识引用 h首先指向root</li>
<li>循环判断栈非空</li>
<li>在循环中判断栈顶元素node</li>
<li>如果node左子树不为空并且左右子树都不为h指向的元素</li>
<li>入栈左子树</li>
<li>否则再判断右子树是否为空以及右子树是否为h节点</li>
<li>入栈右子树</li>
<li>否则，弹出栈顶元素，并且将h指向该弹出的栈顶元素</li>
</ul>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码 2"></a>代码 2</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lastPrintByOneStack</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != root) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">h</span> <span class="operator">=</span> root;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(h);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.left != h &amp;&amp; node.right != h) &#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">null</span> != node.right &amp;&amp; node.right != h) &#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = stack.pop();</span><br><span class="line">                System.out.print(node.val + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">                h = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解析：使用一个栈进行后序遍历的时候需要使用一个h引用来标识上一个节点是否被遍历过，是的话就往上判断之后的树节点即可。</p>
<h3 id="按层遍历二叉树"><a href="#按层遍历二叉树" class="headerlink" title="按层遍历二叉树"></a>按层遍历二叉树</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>以上前中后序遍历二叉树都是用到了栈这种数据结构，而按层遍历二叉树就非常简单了，只需要引入先入先出的队列，然后依次在出队的时候将出队元素的左右子树入队即可。</p>
<ul>
<li>根节点入队</li>
<li>队列不为空则开始循环</li>
<li>如果队首元素左子树不为空，就入队</li>
<li>右子树不为空，也入队</li>
<li>队首元素出队输出</li>
</ul>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">levelPrintOutTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != root) &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">i</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(i.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(i.right);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i.val + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">            queue.poll();</span><br><span class="line">            i = queue.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>二叉树</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>用Scoop包管理器管理你的Windows软件</title>
    <url>/post/5fa2f280.html</url>
    <content><![CDATA[<p>用过 Linux 的都知道包管理器吧，不像 Windows 上装软件需要找官网下安装包安装、在控制面板中卸载，包管理器能够提供一种非常简洁的软件管理体验，一句命令安装、升级、卸载等，完全不需要操心。Scoop 作为一个包管理器，个人使用体验相当不错，在此推荐一下。</p>
<span id="more"></span>

<h2 id="Scoop-优势"><a href="#Scoop-优势" class="headerlink" title="Scoop 优势"></a>Scoop 优势</h2><p>Scoop 作为一个包管理器，安装软件是其最重要的功能。先来看看，我以前是怎么做的。</p>
<p>最开始吧，我喜欢通过软件管家之类的软件进行软件管理，总的来说体验还不错。不过那是以前了，现在软件公司大多作恶，越来越不喜欢把功能独立出来，我就想弄个软件管理，非得让我装上整个全家桶，于是就被我抛弃了。然后，出于对国内互联网公司的不信任，我安装软件一定会找到官方网站下载最新的版本，这样子其实也还能接受，就是找软件有时候不是那么方便，且对于软件更新也不及时。后来吧，看到腾讯有个<a href="https://pc.qq.com/">腾讯软件中心的网页版</a>，感觉还挺不错的，至少有些软件可以直接在这边找了，还不需要另外装个软件，就是注意不要点高速下载，那会下一个腾讯电脑管家下来，就比较烦。</p>
<p>除了找软件的问题，在安装软件上，现在很多软件有的会按照规范安装在<code>Program Files</code>这样的文件夹中，有的会安装在用户<code>AppData\Local\Programs</code>中，还喜欢在系统各处留下许多痕迹。虽说这样子还是比较规范的，但是我还是觉得比较乱。</p>
<p>当我遇到 Scoop 之后，就深深地喜欢上了这个软件。Scoop 是通过 PowerShell 进行软件管理的命令行工具，用 Scoop 进行软件管理:</p>
<ul>
<li>安装卸载升级软件都只需要短短的一句话，支持批量操作。</li>
<li>软件统一安装在用户文件夹下的 scoop 目录中，不污染系统环境，文件结构清晰明了。亦可以根据需要修改路径。</li>
<li>默认为用户权限，不像 Chocolatey 那样永远需要管理员权限。</li>
<li>符合官方标准的软件卸载后不留下一丝痕迹。</li>
<li>每个软件通过一个 json 格式的 manifest 进行描述，可以查看软件安装的全部操作，更加安全。</li>
<li>自动配置环境变量，对开发软件很友好。</li>
</ul>
<h2 id="Scoop-安装"><a href="#Scoop-安装" class="headerlink" title="Scoop 安装"></a>Scoop 安装</h2><p>官网: <a href="https://scoop.sh/">https://scoop.sh/</a></p>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>首先先说下网络的问题，Scoop 软件的关键在于 git 和 <strong>Github</strong>，如果不能正常、流畅地访问 <strong>Github</strong>，使用起来将会是一种折磨，劝你看到这里就放弃吧。</p>
<p>Scoop 要求安装有 <code>PowerShell 5</code> 及以上(包括 <code>PowerShell Core</code>) 以及 <code>.NET Framework 4.5</code>及以上，所以 Windows 版本必须在 Win 7 及以上。</p>
<p>关于 PowerShell 版本，可以打开 PowerShell，输入如下语句查看:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Host</span> | <span class="built_in">Select-Object</span> Version</span><br></pre></td></tr></table></figure>

<p>会返回类似如下字样，值大于 5.0 即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Version</span><br><span class="line">-------</span><br><span class="line">5.1.18362.145</span><br></pre></td></tr></table></figure>

<p>在 Win 10 和 Windows Server 2016 中已经安装了 PowerShell 5.1，如果在使用 Win 7、Windows Server 2008 R2 或 Windows Server 2012 则需要升级，官方提供了升级安装包，<a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-windows-powershell?view=powershell-6">点击此处查看</a>。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下面输入如下语句进行安装，来自 Scoop 官网。</p>
<p>运行如下语句允许本地脚本运行。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned <span class="literal">-scope</span> currentuser</span><br></pre></td></tr></table></figure>

<p>运行以下语句安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">iex</span> (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>安装完成后，可以运行下<code>scoop help</code>尝试是否成功，这条命令会显示出 Scoop 的命令说明。</p>
<p><img src="https://img.iszy.xyz/20190612111652.png?x-oss-process=style/mystyle" alt="20190612111652"></p>
<h2 id="Scoop-使用"><a href="#Scoop-使用" class="headerlink" title="Scoop 使用"></a>Scoop 使用</h2><p>Scoop 有以下常用命令，我来简单介绍一下。</p>
<h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><p>先说下 <code>help</code> 命令，由上文可以看到<code>scoop help</code>会列出所有命令的简单说明。</p>
<p>如果想了解一个具体命令的说明，以<code>update</code>为例，运行<code>scoop help update</code>即可，其他命令也与此类似。</p>
<p><img src="https://img.iszy.xyz/20190612112558.png?x-oss-process=style/mystyle" alt="20190612112558"></p>
<h3 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>search</td>
<td>搜索软件</td>
<td>scoop search chrome</td>
</tr>
<tr>
<td>install</td>
<td>安装软件</td>
<td>scoop install git curl</td>
</tr>
<tr>
<td>uninstall</td>
<td>卸载软件</td>
<td>scoop uninstall wget</td>
</tr>
<tr>
<td>update</td>
<td>更新软件</td>
<td>scoop update vscode</td>
</tr>
<tr>
<td>list</td>
<td>列举已安装软件</td>
<td>scoop list</td>
</tr>
<tr>
<td>info</td>
<td>查看软件信息</td>
<td>scoop info python</td>
</tr>
</tbody></table>
<h3 id="添加存储桶"><a href="#添加存储桶" class="headerlink" title="添加存储桶"></a>添加存储桶</h3><p>Scoop 的每个应用都有一个 manifest，由一个个 manifest 组成的一个文件库就成为了一个存储桶，由 git 提供版本控制。Scoop 初始安装时会下载官方默认的 main 存储库。</p>
<p>Scoop 是由社区支撑的，可以提供的应用很多，但毕竟还是有限的，官方倾向于使用 portable 版本以提供无污染的软件体验，不是所有的软件都能符合官方的标准，于是就需要添加除了 main 存储桶以外的存储桶。</p>
<h4 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h4><p>由于 Scoop 的存储桶本质上都是一个个 git 库，所以想要添加额外的存储库，需要有 git 环境支撑，输入<code>scoop install git</code>进行安装即可。</p>
<h4 id="添加存储桶-1"><a href="#添加存储桶-1" class="headerlink" title="添加存储桶"></a>添加存储桶</h4><p>添加存储库的一般方法如下，以<code>extras</code>存储桶为例，<code>&#39;scoop bucket add&#39; + &#39;存储桶名&#39; + &#39;git 地址&#39;</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras https://github.com/lukesampson/scoop-extras.git</span><br></pre></td></tr></table></figure>

<p>输入<code>scoop bucket known</code>就能查看官方已知的存储桶列表，如图所示。</p>
<p><img src="https://img.iszy.xyz/20190612123004.png?x-oss-process=style/mystyle" alt="20190612123004"></p>
<p>这些存储桶的添加命令可以简化，如以<code>extras</code>存储库为例，输入<code>scoop bucket add extras</code>即可。</p>
<p><img src="https://img.iszy.xyz/20190612123538.png?x-oss-process=style/mystyle" alt="20190612123538"></p>
<p>如果已知存储库中没有你需要的软件，你可以自己创建存储桶，自己来书写 manifest，当然也能添加其他人已经写好的库来用。</p>
<h4 id="推荐存储桶"><a href="#推荐存储桶" class="headerlink" title="推荐存储桶"></a>推荐存储桶</h4><ol>
<li><p>已知存储桶:</p>
<ul>
<li>main(默认)</li>
<li>extras</li>
<li>versions</li>
<li>java</li>
</ul>
</li>
<li><p>大佬的存储桶:</p>
<ul>
<li>Ash258: <a href="https://github.com/Ash258/scoop-Ash258.git">https://github.com/Ash258/scoop-Ash258.git</a></li>
</ul>
</li>
<li><p>我自己的存储桶:</p>
<p>额，这个存储桶就只有几个我自己需要用的应用，如有需要可以看看。</p>
<ul>
<li>iszy: <a href="https://github.com/ZvonimirSun/scoop-iszy.git">https://github.com/ZvonimirSun/scoop-iszy.git</a></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Scoop</tag>
        <tag>PowerShell</tag>
        <tag>包管理器</tag>
      </tags>
  </entry>
  <entry>
    <title>深度分析如何写出一个线程安全的单例</title>
    <url>/post/c12f8fe2.html</url>
    <content><![CDATA[<p><img src="/fm.png" alt="封面"></p>
<span id="more"></span>

<h3 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h3><p>单例模式是在Java编程中除了工厂模式之外最常用的创建型设计模式之一。单例模式提供了一种创建对象的方式，使得每次获取到的该类的实例都是同一个。即所谓的提供了访问该类实例的唯一途径。</p>
<p><strong>单例模式在创建时的注意事项：</strong></p>
<ul>
<li>因为每个类只能创建一个实例，所以需要将其构造方法封闭起来不能被外部调用，即私有化；</li>
<li>需要提供一个获取类实例的公有方法，所有使用该类实例的人都通过这个方法拿到单例对象；</li>
<li>在多线程环境下需要注意线程安全问题，避免多个线程同时创建出多个不同的实例，违背了单例的原则。</li>
</ul>
<h3 id="创建单例模式的方法及其优缺点"><a href="#创建单例模式的方法及其优缺点" class="headerlink" title="创建单例模式的方法及其优缺点"></a>创建单例模式的方法及其优缺点</h3><h4 id="饿汉型"><a href="#饿汉型" class="headerlink" title="饿汉型"></a>饿汉型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HungrySingleton</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">HungrySingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HungrySingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">HungrySingleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类在加载的时候就创建好的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分析：饿汉型单例是最简单的单例创建方法，在类中维护一个该类私有不可变的实例，然后提供一个获取该实例的静态方法即可。</li>
<li>优点：代码编写简单，线程安全（使用类加载机制保证线程安全，classloader在加载类的时候使用synchronized同步）</li>
<li>缺点：无法实现懒加载，在使用较少的时候浪费资源，无法防止反射破坏以及反序列化破坏单例唯一性</li>
</ul>
<h4 id="普通懒汉型"><a href="#普通懒汉型" class="headerlink" title="普通懒汉型"></a>普通懒汉型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton INSTANCE ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == INSTANCE)&#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>分析：这种懒汉型单例也是一种比较简单的单例实现方式，与第一种不同在于这种实例是在调用获取实例的静态方法的时候才创建</li>
<li>优点：代码简单，可以实现懒加载</li>
<li>缺点：多线程环境下会有线程安全问题，多个线程同时走到第8行代码，判断实例未创建，则会创建出多个实例;无法防止反射破坏以及反序列化破坏</li>
</ul>
<p><em>那么为了实现线程安全我们可以在方法上加上同步关键字，但是这种方式的缺点就是多线程环境调用该方法都会阻塞，导致性能存在不必要的浪费</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">null</span> == INSTANCE)&#123;</span><br><span class="line">		INSTANCE = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="双重检测锁实现懒加载单例"><a href="#双重检测锁实现懒加载单例" class="headerlink" title="双重检测锁实现懒加载单例"></a>双重检测锁实现懒加载单例</h4><p>上述懒汉型同步机制可以改进如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLockSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DoubleLockSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DoubleLockSingleton INSTANCE;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DoubleLockSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 进入方法后先判断一次 大幅减少多线程环境同步阻塞问题 </span></span><br><span class="line">	<span class="comment">// 但是这种方式在多线程第一次调用创建实例的时候会出现线程安全问题</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == INSTANCE) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleLockSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == INSTANCE) &#123;</span><br><span class="line">		<span class="comment">// 问题的根源所在</span></span><br><span class="line">		<span class="comment">// 此处可能会出现指令重排序 </span></span><br><span class="line">		<span class="comment">// new对象并不是原子操作</span></span><br><span class="line">		INSTANCE = <span class="keyword">new</span> <span class="title class_">DoubleLockSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>分析：双重检测锁机制在进入<code>getInstance()</code>方法的时候会判断实例是否被创建，如果被创建，那么直接返回，如果没有，进入同步代码块，创建实例。这个方法貌似没有问题，而且还大大减少线程进入同步代码块阻塞的情况（因为只有第一次判断对象还没有创建的时候才会有线程进入同步代码块）。但是这种方法仍然存在线程安全性问题。<font color="#db1414">问题出在第17行：<code>INSTANCE = new DoubleLockSingleton();</code>由于JVM虚拟机内部会对代码进行优化，在使用new创建对象的时候并不是一个原子操作且会被虚拟机进行指令重排序。这个步骤会被分成三步：**1、在堆上为对象分配空间；2、对象进行初始化；3、将引用指向该堆上的地址。 **由于在虚拟机中，指令重排序优化导致第2步和第3步的执行顺序可以被打乱，那么在代码执行到第11行的时候发现，INSTANCE不为null，直接返回一个未初始化完成的对象，导致程序崩溃。</font><strong>注意：synchronzed关键字没有屏蔽指令重排序的功能</strong>，那么如何优化呢？答案是使用<code>volatile</code>关键字修饰实例变量引用，即<code>private volatile static TripleLockSingleton INSTANCE;</code>。<code>volatile</code>关键字才有屏蔽指令重排序的语义。</li>
<li>优点：多线程环境下大部分时间线程安全</li>
<li>缺点：有可能会出现线程安全问题；不能避免反射和反序列化破坏</li>
<li>优化：<code>private volatile static TripleLockSingleton INSTANCE;</code></li>
</ul>
<h4 id="静态内部类单例"><a href="#静态内部类单例" class="headerlink" title="静态内部类单例"></a>静态内部类单例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClassSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StaticInnerClassSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StaticInnerClassSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticInnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>分析：静态内部类实现单例也是借助了类加载的线程安全机制，并同时基于内部类的使用时再创建的懒加载机制实现线程安全的懒加载模式的单例</li>
<li>优点：线程安全，可以实现懒加载</li>
<li>缺点：无法防止被反射以及反序列化破坏单例的唯一性</li>
</ul>
<h4 id="枚举类单例"><a href="#枚举类单例" class="headerlink" title="枚举类单例"></a>枚举类单例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnumSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分析：<strong>Joshua Bloch</strong>大神说过：“单元素的枚举类型已经成为实现Singleton的最佳方法”。足以见证枚举类在创建单例中的优势。</li>
<li>优点：代码简单，线程安全，可以防止反射和反序列化破坏</li>
<li>缺点：暂无</li>
</ul>
<h4 id="CAS创建单例"><a href="#CAS创建单例" class="headerlink" title="CAS创建单例"></a>CAS创建单例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReference&lt;CASSingleton&gt; INSTANCE = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CASSingleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用原子操作 实现获取唯一实例</span></span><br><span class="line"><span class="comment">     * 理论上在大量竞争的环境中 原子操作自旋等待消耗大量性能 但是实际上当一个线程创建好实例之后其余线程不会出现死循环</span></span><br><span class="line"><span class="comment">     * 相对于锁它没有线程切换和阻塞的额外消耗,可以支持较大的并行度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CASSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">CASSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> INSTANCE.get();</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != instance) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">CASSingleton</span>();</span><br><span class="line">            <span class="keyword">if</span> (INSTANCE.compareAndSet(<span class="literal">null</span>, instance)) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分析：使用原子操作<code>AtomicReference</code>进行单例的创建，事实上目前相对于双重检查锁性能上差的也不是也别大</li>
<li>优点：线程安全，懒加载，相对于锁它没有线程切换和阻塞的额外消耗,可以支持较大的并行度</li>
<li>缺点：代码编写相对复杂，不能防止被反射和反序列化破坏</li>
</ul>
<h3 id="防止反射和反序列化破坏单例的方式"><a href="#防止反射和反序列化破坏单例的方式" class="headerlink" title="防止反射和反序列化破坏单例的方式"></a>防止反射和反序列化破坏单例的方式</h3><p>上述几个创建单例的方式中，除了使用枚举类创建单例，都会产生被反射和反序列化破坏的情况，避免该问题的方式如下，大家需要深究的话可以打开搜索引擎… 这里不再展开了~</p>
<h4 id="枚举类防止反射和反序列化破坏"><a href="#枚举类防止反射和反序列化破坏" class="headerlink" title="枚举类防止反射和反序列化破坏"></a>枚举类防止反射和反序列化破坏</h4><blockquote>
<p>** 参考文章：<a href="https://www.cnblogs.com/chiclee/p/9097772.html">https://www.cnblogs.com/chiclee/p/9097772.html</a> **</p>
</blockquote>
<h4 id="防止反射破坏"><a href="#防止反射破坏" class="headerlink" title="防止反射破坏"></a>防止反射破坏</h4><p>因为反射是通过class对象来调用类的构造方法创建对象的，我们只需要在构造方法中进行判断，如果实例已经存在，就抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私有构造</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(INSTANCE != <span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="防止反序列化破坏"><a href="#防止反序列化破坏" class="headerlink" title="防止反序列化破坏"></a>防止反序列化破坏</h4><p>在反序列化的时候<code>ObjectInputStream.readObject()</code>中会去判断是否存在<code>readResolve()</code>方法，如果存在的话会调用该方法返回一个实例，所以在单例类中编写<code>readResolve()</code>方法返回<code>INSTANCE</code>即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在反序列化时，直接调用这个方法，返回指定的对象，无需再新建一个对象</span></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


















]]></content>
      <categories>
        <category>Java基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程学习(三)：CountDownLatch的实现原理及使用</title>
    <url>/post/b77d82d.html</url>
    <content><![CDATA[<p><img src="/cdl.png" alt="什么是CountDownLatch？"></p>
<span id="more"></span>

<h3 id="什么是CountDownLatch？"><a href="#什么是CountDownLatch？" class="headerlink" title="什么是CountDownLatch？"></a>什么是<code>CountDownLatch</code>？</h3><p>  在本篇博客的封面，我放了一个截图，上面对于<code>CountDownLatch</code>的翻译是这样的：<em>闭锁，倒计时门闩</em>。其实顾名思义，<code>CountDownLatch</code>实际上就是一个计数器：<strong>计数-计数完成后做一些事</strong>。其实这个东西可以类比为一个水坝：当水还没有装满水库的时候水坝是关闭的，当水装满之后开闸放水，水库中的水”一起”涌出水库。</p>
<p>  拥有同样功能的还有<code>CyclicBarrier</code>这个类，但是这个类相对较复杂，并且相对于<code>CountDownLatch</code>还可以重复使用，实际上前者一般被叫做线程计数器，后者被叫做循环屏障，还是有很大区别的。这个 <strong>在后面再进行源码学习</strong>。</p>
<h3 id="CountDownLatch是如何实现的？"><a href="#CountDownLatch是如何实现的？" class="headerlink" title="CountDownLatch是如何实现的？"></a><code>CountDownLatch</code>是如何实现的？</h3><p>  同<code>ReentrantLock</code>类似，内部也是有一个实现了<code>AbstractQueueSynchronizer</code>的内部类。内部类做了父类的共享式的显示锁的方法实现，维护一个初始为N的状态<code>state</code>，每次有线程调用之后阻塞，然后<code>state</code>减1，直到减为0之后所有阻塞的线程重新开始执行。</p>
<h4 id="首先是内部类Sync的实现"><a href="#首先是内部类Sync的实现" class="headerlink" title="首先是内部类Sync的实现"></a>首先是内部类Sync的实现</h4><p>  构造器接收一个int参数初始化state的值。<code>tryAcquireShared()</code>方法不会对state做改变，当state不为0的时候返回-1即失败，当state等于0其返回1，表示计数器已经计数完成，<code>await()</code>方法不再阻塞。<code>tryReleaseShared()</code>方法会使用原子操作当<code>countDown()</code>被调用的时候释放一个state的占用，即state-1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4982264981922014374L</span>;</span><br><span class="line">      Sync(<span class="type">int</span> count) &#123;</span><br><span class="line">          setState(count);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> getState();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">          <span class="comment">// Decrement count; signal when transition to zero</span></span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">              <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">              <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c-<span class="number">1</span>;</span><br><span class="line">              <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                  <span class="type">return</span> <span class="variable">nextc</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CountDownLatch的countDown方法"><a href="#CountDownLatch的countDown方法" class="headerlink" title="CountDownLatch的countDown方法"></a>CountDownLatch的countDown方法</h4><p>  countDown方法主要作用就是使state-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countDown</span><span class="params">()</span> &#123;</span><br><span class="line">    sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  AQS中的<code>releaseShared()</code>方法的实现，如果释放成功执行<code>doReleaseShared();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">releaseShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CountDownLatch的await方法"><a href="#CountDownLatch的await方法" class="headerlink" title="CountDownLatch的await方法"></a>CountDownLatch的await方法</h4><p>  await方法会等待当前state值是否是0，如果不是的话就一直阻塞。直到state为0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">await</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  AQS中的<code>acquireSharedInterruptibly()</code>方法实现如下，在AQS的实现中，判断当前线程是否中断，是的话抛出中断异常，否则判断当前线程是否继续需要阻塞，即调用<code>tryAcquireShared()</code>。是的话进入<code>doAcquireSharedInterruptibly()</code>方法，不断的判断<code>int r = tryAcquireShared(arg);</code>，state如果一直不等于0，r就一直是负数，就会继续进入循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Acquires in shared interruptible mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arg the acquire argument</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAcquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addWaiter(Node.SHARED);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> tryAcquireShared(arg);</span><br><span class="line">                <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    setHeadAndPropagate(node, r);</span><br><span class="line">                    p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实以上代码的整体流程非常简单，即初始化<code>CountDownLatch</code>的state&#x3D;N，每次调用countDown时state-1，减到0的时候停止阻塞，继续向下执行。</p>
<h3 id="我可以用CountDownLatch来做什么事情？"><a href="#我可以用CountDownLatch来做什么事情？" class="headerlink" title="我可以用CountDownLatch来做什么事情？"></a>我可以用<code>CountDownLatch</code>来做什么事情？</h3><h4 id="使用CountDownLatch模拟并发场景"><a href="#使用CountDownLatch模拟并发场景" class="headerlink" title="使用CountDownLatch模拟并发场景"></a>使用<code>CountDownLatch</code>模拟并发场景</h4><ul>
<li>可以使用<code>CountDownLatch</code>，创建多个线程并等待线程全部就绪之后唤醒所有线程。可以用这种方式测试代码的可用性，或者测试单例类等；</li>
</ul>
<p>我在自己学习过程中也有写过类似的测试类 - <a href="https://github.com/Fatezhang/Concurrent/tree/master/src/main/java/com/mime/concurrent/CountDownLatchStudy">github</a></p>
<h4 id="使用CountDownLatch等待依赖线程执行"><a href="#使用CountDownLatch等待依赖线程执行" class="headerlink" title="使用CountDownLatch等待依赖线程执行"></a>使用<code>CountDownLatch</code>等待依赖线程执行</h4><ul>
<li><code>CountDownLatch</code>用来等待其他依赖服务都启动好之后在进行自身线程的任务处理</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  <code>CountDownLatch</code>是面试的时候多线程这块很容易被问到的点，实际上会考察这几个方面：</p>
<ul>
<li>1、内部实现原理 <strong>——</strong> 使用内部类继承AQS实现；</li>
<li>2、需要注意的方面 <strong>——</strong> 计数器为0时，await后面的方法才会执行，否则一直阻塞，countDown方法尽量写在finally代码块中，避免出现异常导致死锁；</li>
<li>3、使用场景 <strong>——</strong> 监控一些依赖服务启动完成之后执行代码，或者造“水坝”，即模拟大量并发场景等。</li>
</ul>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
        <tag>AQS</tag>
        <tag>CountDownLatch</tag>
      </tags>
  </entry>
  <entry>
    <title>编写自己的SpringMVC框架</title>
    <url>/post/a5fdd05d.html</url>
    <content><![CDATA[<p><img src="/aaa.jpeg" alt="封面"></p>
<span id="more"></span>
<h2 id="Summer项目"><a href="#Summer项目" class="headerlink" title="Summer项目"></a>Summer项目</h2><p><strong><a href="https://github.com/Fatezhang/Summer">项目github地址</a></strong></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>Summer项目是本人在学习Spring源码的时候按照SpringMVC的流程编写的一个简易的SpringMVC框架，主要完成以下功能：<ul>
<li>读取配置文件进行包的扫描</li>
<li>对所有加入注解的bean进行装配</li>
<li>对加了注解的字段进行依赖自动注入</li>
<li>URL与相应方法的映射</li>
<li>请求的分发处理</li>
</ul>
</li>
</ul>
<p>项目通过实现以上流程完成SpringMVC框架工作的整体过程演示</p>
<h3 id="以下是框架流程的详细步骤说明"><a href="#以下是框架流程的详细步骤说明" class="headerlink" title="以下是框架流程的详细步骤说明"></a>以下是框架流程的详细步骤说明</h3><h4 id="项目的结构"><a href="#项目的结构" class="headerlink" title="项目的结构"></a>项目的结构</h4><p>Summer项目仅仅是一个单独的Servlet项目，没有引入Spring相关的任何依赖，仅仅使用了一些外部的工具类，我的pom.xml文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.3.12.v20160915<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>项目使用jetty启动，所以我还配置了jetty插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- jetty插件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>0<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/Summer<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">connectors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">connector</span> <span class="attr">implementation</span>=<span class="string">&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">port</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">connectors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="整体框架结构"><a href="#整体框架结构" class="headerlink" title="整体框架结构"></a>整体框架结构</h4><p><img src="/zj.png" alt="注解"><br>除了自定义的这几个注解之外其他的就和平常编写Controller以及Service的流程一样，我的核心代码主要在MyServlet中</p>
<h4 id="MyServlet主要做了什么"><a href="#MyServlet主要做了什么" class="headerlink" title="MyServlet主要做了什么"></a>MyServlet主要做了什么</h4><h5 id="加载配置文件，首先读取web-xml中配置的配置文件"><a href="#加载配置文件，首先读取web-xml中配置的配置文件" class="headerlink" title="加载配置文件，首先读取web.xml中配置的配置文件"></a>加载配置文件，首先读取web.xml中配置的配置文件</h5><p>把扫描到的所有类全链路径名保存在list中</p>
<blockquote>
<p>以下是servlet的配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明Servlet对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上面一句指定Servlet对象的名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhang.summer.servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上面一句指定Servlet对象的完整位置，包含包名和类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下面一句是在启动时加载servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射Servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;servlet-name&gt;与上面&lt;Servlet&gt;标签的&lt;servlet-name&gt;元素相对应，不可以随便起名  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上面一句话用于映射访问URL --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="遍历所有类，使用反射创建对象class-forName"><a href="#遍历所有类，使用反射创建对象class-forName" class="headerlink" title="遍历所有类，使用反射创建对象class.forName"></a>遍历所有类，使用反射创建对象<code>class.forName</code></h5><p>创建对象，将所有我们声明了自己注解的类加入到一个Map中，即IOC-Map</p>
<h5 id="遍历IOC-Map中的所有对象，进行依赖注入"><a href="#遍历IOC-Map中的所有对象，进行依赖注入" class="headerlink" title="遍历IOC-Map中的所有对象，进行依赖注入"></a>遍历IOC-Map中的所有对象，进行依赖注入</h5><p>在这里我只判断是<code>@MyController</code>注解的类才进行依赖注入</p>
<h5 id="处理URL和方法之间的映射"><a href="#处理URL和方法之间的映射" class="headerlink" title="处理URL和方法之间的映射"></a>处理URL和方法之间的映射</h5><p>将注解了<code>@MyRequestMapping</code>的类和方法路径拼接起来，对方法和拼接起来的url路径进行映射，并且对方法参数做特殊处理</p>
<h5 id="请求分发"><a href="#请求分发" class="headerlink" title="请求分发"></a>请求分发</h5><p>在doGet或者doPost请求中通过映射好的url-method找到方法进行请求的分发处理</p>
]]></content>
      <categories>
        <category>SpringMVC框架</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程学习(二)：使用AQS编写可重入锁</title>
    <url>/post/9d7bccde.html</url>
    <content><![CDATA[<p><img src="/aqs.png" alt="AQS中文文档介绍"></p>
<div style="width:100%;text-align: center;"><a href="http://www.matools.com/api/java8">AQS中文文档介绍</a></div>

<span id="more"></span>

<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>** <a href="/blog/20190517/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81-%E4%B8%80/">上一章</a> ** 我使用实现<code>Lock</code>接口的方式并结合<code>Synchronized</code>关键字实现了自己的可重入锁，学习并了解了可重入锁的原理机制。这一章我在学习了AQS之后结合AQS实现自己的显示可重入锁。</p>
<h3 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h3><p>如上所述，Java8中文文档中描述的，AQS即<code>AbstractQueuedSynchronizer</code>。它提供了一个框架，用于实现依赖先进先出（FIFO）等待队列的阻塞锁和相关同步器（信号量，事件等）。该类被设计为大多数类型的同步器的有用依据，这些同步器依赖于单个原子int值来表示状态。 子类必须定义改变此状态的受保护方法，以及根据该对象被获取或释放来定义该状态的含义。 给定这些，这个类中的其他方法执行所有排队和阻塞机制。 子类可以保持其他状态字段，但只以原子方式更新int使用方法操纵值getState() ， setState(int)和compareAndSetState(int, int)被跟踪相对于同步。<strong>子类应定义为非公共内部助手类，用于实现其封闭类的同步属性。 AbstractQueuedSynchronizer类不实现任何同步接口。 相反，它定义了一些方法，如acquireInterruptibly(int) ，可以通过具体的锁和相关同步器来调用适当履行其公共方法。</strong></p>
<p>其实AQS类是一个使用了模板方法模式的抽象框架类。它将核心实现封装在模板方法中，提供给程序员去实现具体的加锁和释放的机制，以便于实现一些特殊功能的锁，比如JDK提供的可重入锁和可重入读写锁等等。</p>
<h3 id="如何使用AQS"><a href="#如何使用AQS" class="headerlink" title="如何使用AQS"></a>如何使用AQS</h3><p><strong>AQS在使用的时候主要需要重写以下方法</strong></p>
<ul>
<li><code>isHeldExclusively()</code>：该线程是否正在独占资源。只有用到condition才需要去实现它。</li>
<li><code>tryAcquire(int)</code>：独占方式。尝试获取资源，成功则返回true，失败则返回false。</li>
<li><code>tryRelease(int)</code>：独占方式。尝试释放资源，成功则返回true，失败则返回false。</li>
<li><code>tryAcquireShared(int)</code>：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li>
<li><code>tryReleaseShared(int)</code>：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</li>
</ul>
<h3 id="使用AQS实现自己的可重入独占非公平锁的伪代码如下"><a href="#使用AQS实现自己的可重入独占非公平锁的伪代码如下" class="headerlink" title="使用AQS实现自己的可重入独占非公平锁的伪代码如下"></a>使用AQS实现自己的可重入独占非公平锁的伪代码如下</h3><h4 id="加锁步骤伪代码"><a href="#加锁步骤伪代码" class="headerlink" title="加锁步骤伪代码"></a>加锁步骤伪代码</h4><p>线程调用<code>lock</code>方法加锁，直接调用<code>sync.acquire(1);</code>，具体实现在<code>tryAcquire</code></p>
<ul>
<li>首先线程进入想要获取锁</li>
<li>拿到当前线程的引用</li>
<li>判断加锁状态，如果是未加锁状态<ul>
<li>使用<code>compareAndSetState</code>自旋原子操作加锁</li>
<li>设置当前线程</li>
<li>返回true加锁成功</li>
</ul>
</li>
<li>如果是加锁状态<ul>
<li>判断是否是当前线程重入</li>
<li>如果是当前线程重入，state加1，并返回true加锁成功</li>
</ul>
</li>
<li>最后如果都不是就返回false加锁失败</li>
</ul>
<h4 id="释放锁步骤伪代码"><a href="#释放锁步骤伪代码" class="headerlink" title="释放锁步骤伪代码"></a>释放锁步骤伪代码</h4><p>线程调用<code>unLock</code>方法加锁，直接调用<code>sync.release(1);</code>，具体实现在<code>tryRelease</code></p>
<ul>
<li>首先线程进入方法想要释放锁</li>
<li>判断如果不是当前线程，就抛出异常</li>
<li>如果是当前线程，state就减1（arg一般为1），表示释放一次</li>
<li>当state释放到0时，设置拥有锁的线程为null，然后返回true</li>
</ul>
<p><strong>具体的代码实现如下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhangjiaheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 使用AQS重写一个可重入锁</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReentrantLockByAQS</span> <span class="keyword">implements</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Sync</span> <span class="variable">sync</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sync</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类Sync ReentrantLock使用的内部抽象类 并派生两个子类实现两种(公平/非公平)锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="comment">// 如果第一个线程进来 可以拿到锁 则返回true</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果第二个线程进来 如果不等于当前线程 返回false 否则更新当前线程值</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="keyword">if</span> (state == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                    setExclusiveOwnerThread(t);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t == getExclusiveOwnerThread()) &#123;</span><br><span class="line">                <span class="comment">// 当前线程再进来</span></span><br><span class="line">                setState(getState() + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">            <span class="comment">// 锁的获取和释放时一一对应的</span></span><br><span class="line">            <span class="comment">// 调用此方法的线程肯定是当前线程</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState() - arg;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            setState(c);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> newCondition();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
        <tag>AQS</tag>
        <tag>可重入锁</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程学习(一)：编写一个简易的可重入锁</title>
    <url>/post/1e870741.html</url>
    <content><![CDATA[<p><img src="/nullIsMistake.jpg" alt="封面"></p>
<span id="more"></span>
<h4 id="什么是可重入锁"><a href="#什么是可重入锁" class="headerlink" title="什么是可重入锁"></a>什么是可重入锁</h4><p>在Java多线程编程中，锁是用来控制代码操作的原子性的重要机制，即对某线程共享的数据进行操作的时候，保证该操作同一时间段只有一个线程操作，整个过程是原子操作，其他线程再操作的时候只能等待锁的释放(排他锁)。一般我们的锁都是声明在方法上或者代码块中，那么在实际编程中我们经常会出现一个类的实例方法调用另一个实例方法的情况，我们不希望这个时候同一个线程进入另一实例方法时还要再去等待锁的释放，可重入锁就是为了解决这个问题，即 <strong>线程可以进入任何一个它已经拥有的锁所同步着的代码块</strong>。</p>
<h4 id="如何实现一个简单的可重入锁"><a href="#如何实现一个简单的可重入锁" class="headerlink" title="如何实现一个简单的可重入锁"></a>如何实现一个简单的可重入锁</h4><ul>
<li>首先加锁的时候需要记录当前是哪一个线程加锁，加锁之后加锁标志位标记锁已被占用</li>
<li>维护一个加锁计数器，线程每次加锁计数器都要加1，每释放一次计数器减1</li>
<li>当非占用锁的线程进来之后自旋等待锁的释放，如果锁还在被占用，就wait();</li>
<li>所释放的时候只有当前获取锁的线程调用才有用，锁释放加锁计数器减1，当减到0的时候，加锁标志位置为false，然后唤醒其他等待的线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">locked</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">// 当前锁是否已经被线程使用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> lockCount;<span class="comment">// 保存当前线程加锁的次数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;<span class="comment">// 保存当前线程是哪一个</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 自旋等待</span></span><br><span class="line">            <span class="comment">// 可重入：如果获取锁的不是当前线程并且当前已经有线程加锁，则等待</span></span><br><span class="line">            <span class="keyword">while</span> (locked &amp;&amp; Thread.currentThread() != <span class="built_in">this</span>.thread) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我等会儿。。。&quot;</span>);</span><br><span class="line">                wait();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果没有线程使用锁或者获取锁的是当前线程 加锁计数器+1 然后thread指向获取锁的线程</span></span><br><span class="line">            <span class="built_in">this</span>.thread = Thread.currentThread();</span><br><span class="line">            lockCount++;</span><br><span class="line">            locked = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果不是当前线程 不需要做任何操作</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.thread == Thread.currentThread())&#123;</span><br><span class="line">                <span class="comment">// 锁计数器减1 如果当前线程获取锁个数释放完成</span></span><br><span class="line">                lockCount--;</span><br><span class="line">                <span class="keyword">if</span>(lockCount == <span class="number">0</span> )&#123;</span><br><span class="line">                    <span class="comment">// 释放完成 加锁标志置为false 再唤醒等待锁的线程</span></span><br><span class="line">                    locked = <span class="literal">false</span>;</span><br><span class="line">                    notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在Java中常用的可重入锁"><a href="#在Java中常用的可重入锁" class="headerlink" title="在Java中常用的可重入锁"></a>在Java中常用的可重入锁</h4><ul>
<li>synchronized 关键字加锁</li>
<li>java.util.concurrent.locks.ReentrantLock</li>
<li>java.util.concurrent.locks.ReentrantReadWriteLock<blockquote>
<p>上述ReentrantLock内部实际上还是使用AQS，关于AQS，后面还要进行学习与整理</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Java基础</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>并发编程</tag>
        <tag>可重入锁</tag>
      </tags>
  </entry>
  <entry>
    <title>无重复字符的最长子串</title>
    <url>/post/4cd9164b.html</url>
    <content><![CDATA[<p><img src="/bb.png" alt="封面"></p>
<h4 id="算法题解：无重复字符的最长子串"><a href="#算法题解：无重复字符的最长子串" class="headerlink" title="算法题解：无重复字符的最长子串"></a>算法题解：无重复字符的最长子串</h4><p>leetcode地址： <a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">leetcode</a></p>
<blockquote>
<p><strong>题目：</strong> 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="string">&quot;abcabcbb&quot;</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">&quot;abc&quot;</span>，所以其长度为 <span class="number">3</span>。</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="解法1：暴力求解"><a href="#解法1：暴力求解" class="headerlink" title="解法1：暴力求解"></a>解法1：暴力求解</h4><ul>
<li><p>思路：遍历字符串，以每一个字符作为子串的起始字符，向后查找直到遇到和该字符相同的字符，记录长度，依次执行直到找到最长长度。</p>
</li>
<li><p>题解如下：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxIndexStrLength</span><span class="params">(String s)</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; s.length(); index++) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= s.length()) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">String</span> <span class="variable">ts</span> <span class="operator">=</span> s.substring(index, i);</span><br><span class="line">           <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">           <span class="keyword">if</span> (ts.contains(c + <span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           length++;</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">       maxLength = maxLength &gt; length ? maxLength : length;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="解法2：滑动窗口法"><a href="#解法2：滑动窗口法" class="headerlink" title="解法2：滑动窗口法"></a>解法2：滑动窗口法</h4><ul>
<li>思路：在使用暴力解法时我们会发现实际上对于无重复子串来讲，我们产生了一些冗余的判断操作。例如对于串<code>sdabcabcbb</code>，判断了子串<code>sdabc</code>之后，当后面再出现字符<code>a</code>，那么重复字符之前的串直接舍弃就好。即直接从<code>bca</code>…开始判断即可。这样可以减少大量的不必要的判断与计算操作。</li>
<li>题解如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxIndexStrLength</span><span class="params">(String s)</span> &#123;</span><br><span class="line">  HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">      <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">      <span class="comment">//如果当前元素与滑动窗口中的元素重复：</span></span><br><span class="line">      <span class="keyword">if</span> (map.containsKey(c) &amp;&amp; map.get(c) &gt;= start) &#123;</span><br><span class="line">          max = Math.max(max, i - start);</span><br><span class="line">          start = map.get(c) + <span class="number">1</span>;</span><br><span class="line">          <span class="comment">//如果当前元素与滑动窗口中的元素不重复，但已经遍历到了最后一个字符：</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">          max = Math.max(max, i - start + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      map.put(c, i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>滑动窗口法的思路可以用来解决很多字符串相关的问题</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Java序列化和transient关键字的理解与学习</title>
    <url>/post/f3c9741d.html</url>
    <content><![CDATA[<h4 id="Java序列化"><a href="#Java序列化" class="headerlink" title="Java序列化"></a>Java序列化</h4><p><img src="/xuliehua.png" alt="Java序列化过程"></p>
<blockquote>
<p>在我们平时开发中，经常会遇到将对象转成可传输的字节流或者保存在某些文件中去使用的场景。这种将对象转成字节序列的过程称之为序列化。反之，将字节序列转成对象的过程我们称之为反序列化。序列化是保存与传输对象相关数据的一种方式，并不是保存类信息的一种方式。</p>
</blockquote>
<span id="more"></span>

<h5 id="Java中如何进行序列化与反序列化"><a href="#Java中如何进行序列化与反序列化" class="headerlink" title="Java中如何进行序列化与反序列化"></a>Java中如何进行序列化与反序列化</h5><ul>
<li>在Java中，对象一般是无法进行序列化与反序列化的。而使得对象能够被序列化的方式也很简单，即实现接口 <code>Serializable</code> 。如下代码即将对象序列化以及反序列化的过程。</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSerializable</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    TestSerializable() &#123;</span><br><span class="line">        age = <span class="number">20</span>;</span><br><span class="line">        name = <span class="string">&quot;aachuanpu&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TestSerializable</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSerializable</span>();</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/test.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        out.writeObject(test);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">        <span class="type">TestSerializable</span> <span class="variable">newTest</span> <span class="operator">=</span> (TestSerializable) in.readObject();</span><br><span class="line">        System.out.println(newTest.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="serialVersionUID的作用"><a href="#serialVersionUID的作用" class="headerlink" title="serialVersionUID的作用"></a>serialVersionUID的作用</h5><ul>
<li>serialVersionUID作为实现序列化接口的一个非必须非必须声明的静态常量经常不被开发者所重视，忘记声明。其实serialVersionUID的作用是为了保证序列化之前和之后的对象是同一对象。我们知道JVM判断对象是否相同是根据对象的类路径全限定名确定的，而虚拟机决定一个对象是否允许序列化和反序列化成这个类还取决于其serialVersionUID是否一致。不一致的话会导致<code>java.io.InvalidClassException的异常</code>，也可以不指定serialVersionUID，如果不指定的话java会根据class计算serialVersionUID。</li>
<li>对于两个相同的类及拥有相同的serialVersionUID，如果两个类字段不一致也会序列化和反序列化成功。这时Java会在反序列化的时候忽略掉不一致的字段。</li>
</ul>
<h5 id="静态变量的序列化"><a href="#静态变量的序列化" class="headerlink" title="静态变量的序列化"></a>静态变量的序列化</h5><ul>
<li><p>在序列化的时候，静态变量能够被序列化成功吗？</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSerializable</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String staticName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    TestSerializable() &#123;</span><br><span class="line">        age = <span class="number">20</span>;</span><br><span class="line">        name = <span class="string">&quot;aachuanpu&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TestSerializable</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSerializable</span>();</span><br><span class="line">        TestSerializable.staticName = <span class="string">&quot;name11111&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/test.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        out.writeObject(test);</span><br><span class="line">        TestSerializable.staticName = <span class="string">&quot;name222&quot;</span>;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">        <span class="type">TestSerializable</span> <span class="variable">newTest</span> <span class="operator">=</span> (TestSerializable) in.readObject();</span><br><span class="line">        System.out.println(newTest.name);</span><br><span class="line">        System.out.println(TestSerializable.staticName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上代码会输出什么？</p>
</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aachuanpu</span><br><span class="line">name222</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<ul>
<li>如上所见：将对象序列化之后，修改静态变量的值，再将对象反序列化，输出的静态变量的值是修改之后的。即序列化保存的是对象的状态，静态变量属于类，因此序列化并不保存静态变量。</li>
</ul>
<h5 id="transient关键字与自定义序列化"><a href="#transient关键字与自定义序列化" class="headerlink" title="transient关键字与自定义序列化"></a>transient关键字与自定义序列化</h5><ul>
<li>对象的序列化是将对象中的数据写入本地文件或者用于网络传输的过程，但是很多时候会有一些数据无需进行序列化保存起来或者传输出去。我们可以使用<code>transient</code>关键字修饰成员变量。那么在Java序列化的时候就<strong>不会使用Java本身的序列化方式对其进行序列化</strong>。但是我们依然可以自定义自己的序列化行为对其进行序列化！</li>
</ul>
<p>  <strong>自定义序列化：</strong> 定义自己的<code>writeObject</code>和<code>readObject</code>方法</p>
<ul>
<li><p>对于使用transient修饰的成员变量，可以编写<code>writeObject</code>和<code>readObject</code>方法实现对于该成员变量(不仅仅只是针对该成员变量)的自定义序列化。在编写<code>writeObject</code>和<code>readObject</code>方法的时候需要注意的地方在于：这俩方法没有在Object中定义，也没有在<code>Serializable</code>接口中声明，JVM是如何调用到这俩方法的呢？答案是通过反射，去根据方法名和参数寻找到相应的方法，找到之后会被ObjectOutputStream调用，没有这俩方法就调用默认的序列化呗。还有就是因为ObjectOutputStream使用getPrivateMethod，所以这些方法不得不被声明为priate以至于供ObjectOutputStream来使用。</p>
</li>
<li><p>通过这种方法，我们实现自己的序列化与反序列化可以实现很多场景下的需求。比如网络传输的时候对于特殊字段进行加密等等。</p>
</li>
<li><p>如下，你会发现我在这俩方法中调用了defaultWriteObject()和defaultReadObject()用于处理未被transient修饰的成员变量。</p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSerializable</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String staticName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">    TestSerializable() &#123;</span><br><span class="line">        age = <span class="number">20</span>;</span><br><span class="line">        name = <span class="string">&quot;aachuanpu&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TestSerializable</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSerializable</span>();</span><br><span class="line">        TestSerializable.staticName = <span class="string">&quot;name11111&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/test.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        out.writeObject(test);</span><br><span class="line">        TestSerializable.staticName = <span class="string">&quot;name222&quot;</span>;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">        <span class="type">TestSerializable</span> <span class="variable">newTest</span> <span class="operator">=</span> (TestSerializable) in.readObject();</span><br><span class="line">        System.out.println(newTest.name);</span><br><span class="line">        System.out.println(TestSerializable.staticName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream oos)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        oos.defaultWriteObject();</span><br><span class="line">        name = <span class="string">&quot;自定义名称&quot;</span>;</span><br><span class="line">        oos.writeObject(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用writeObject&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) ois.readObject();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;读出的name=&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用readObject&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  输出如下：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用writeObject</span><br><span class="line">读出的name=自定义名称</span><br><span class="line">调用readObject</span><br><span class="line">自定义名称</span><br><span class="line">name222</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p>
<h5 id="父类的序列化"><a href="#父类的序列化" class="headerlink" title="父类的序列化"></a>父类的序列化</h5><ul>
<li>一个子类实现了 Serializable 接口，它的父类都没有实现 Serializable 接口，序列化该子类对象，然后反序列化后输出父类定义的某变量的数值，该变量数值与序列化时的数值不同。要想将父类对象也序列化，就需要让父类也实现Serializable 接口。如果父类不实现的话的，就需要有默认的无参的构造函数。 在父类没有实现 Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java 对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取 父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都 是默认声明的值。</li>
</ul>
<h5 id="常问：ArrayList中数组使用transient修饰为何还能被序列化"><a href="#常问：ArrayList中数组使用transient修饰为何还能被序列化" class="headerlink" title="常问：ArrayList中数组使用transient修饰为何还能被序列化"></a>常问：ArrayList中数组使用transient修饰为何还能被序列化</h5><p>  <strong>ArrayList源码：</strong><br>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure><br>  transient用来表示一个域不是该对象序行化的一部分，当一个对象被序行化的时候，transient修饰的变量的值是不包括在序行化的表示中的。但是ArrayList又是可序行化的类，elementData是ArrayList具体存放元素的成员，用transient来修饰elementData，需要实现自己的序列化方式去处理。即对于数组中多余的空间不去进行序列化。如下：<br>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span></span><br><span class="line"><span class="comment"> * is, serialize it).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *             instance is emitted (int), followed by all of its elements</span></span><br><span class="line"><span class="comment"> *             (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment"> * deserialize it).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in capacity</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <strong>elementData是一个缓存数组，它通常会预留一些容量，等容量不足时再扩充容量，那么有些空间可能就没有实际存储元素，采用上诉的方式来实现序列化时，就可以保证只序列化实际存储的那些元素，而不是整个数组，从而节省空间和时间。</strong></p>
<h5 id="其余补充"><a href="#其余补充" class="headerlink" title="其余补充"></a>其余补充</h5><p><a href="https://bluepopopo.iteye.com/blog/486548">来自文章</a> ← 点击链接查看参考博客</p>
<blockquote>
<p>1.Write的顺序和read的顺序需要对应，譬如有多个字段都用wirteInt一一写入流中，那么readInt需要按照顺序将其赋值;</p>
</blockquote>
<blockquote>
<p>2.Externalizable,该接口是继承于Serializable ,所以实现序列化有两种方式。区别在于Externalizable多声明了两个方法readExternal和writeExternal，子类必须实现二者。Serializable是内建支持的也就是直接implement即可，但Externalizable的实现类必须提供readExternal和writeExternal实现。对于Serializable来说，Java自己建立对象图和字段进行对象序列化，可能会占用更多空间。而Externalizable则完全需要程序员自己控制如何写&#x2F;读，麻烦但可以有效控制序列化的存储的内容。</p>
</blockquote>
<blockquote>
<p>3.正如Effectvie Java中提到的，序列化就如同另外一个构造函数，只不过是有由stream进行创建的。如果字段有一些条件限制的，特别是非可变的类定义了可变的字段会反序列化可能会有问题。可以在readObject方法中添加条件限制，也可以在readResolve中做。参考56条“保护性的编写readObject”和“提供一个readResolve方法”。</p>
</blockquote>
<blockquote>
<p>4.当有非常复杂的对象需要提供deep clone时，可以考虑将其声明为可序列化，不过缺点也显而易见，性能开销。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>序列化</tag>
        <tag>transient关键字</tag>
      </tags>
  </entry>
  <entry>
    <title>使用[幕布]创建Java知识体系思维导图</title>
    <url>/post/dd2bd49e.html</url>
    <content><![CDATA[<p><img src="/java_core.png" alt="Java思维导图"></p>
<span id="more"></span>
<p><strong>昨天在V2EX上逛的时候突然发现有人推荐一个很不错的东西——幕布。我本身就是一个对一些名称很敏感的人，看到这个名字就很想知道这到底是个什么东西，没想到竟偶然发现这么一个好东西。</strong></p>
<p>幕布是一个制作笔记与记录事件的文本编辑工具（这样说要把幕布开发者气死了哈哈）。编辑视图如下：<br><img src="/mb.png" alt="幕布"><br>一键转换成思维导图就是本文最上面的那个图片。</p>
<p>其实我个人是比较喜欢幕布的一键转换思维导图的功能，以及它的导出.mm文件的功能，而且可以自动同步云端。这样就可以随时随地无论是在电脑还是手机上都可以打开来编辑以及查看了。</p>
<p>这里是我自己编写的<a href="https://mubu.com/doc/hpBd1e5h6z">Java知识体系</a>，还没有写的很完整。希望自己能够坚持不断更新知识点，总结与巩固自己的技术水平！</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树与完全二叉树</title>
    <url>/post/d4829e47.html</url>
    <content><![CDATA[<h4 id="什么是二叉树？"><a href="#什么是二叉树？" class="headerlink" title="什么是二叉树？"></a>什么是二叉树？</h4><p>在数据结构中，对于树，每一个分支，称之为一个度。那么，度最大为2的树我们称之为二叉树。通常子树我们会称之为左子树和右子树。二叉树通常用于实现二叉查找树和二叉堆。那么在Java中如何定义一个二叉树节点？</p>
<p>首先，每一个节点需要有一个值域。其次，其还应该持有两个树节点的引用，即指向自己的左子树和自己的右子树。</p>
<span id="more"></span>

<p>具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode() &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + val + <span class="string">&quot;)[left:&quot;</span> + left + <span class="string">&quot;,right:&quot;</span> + right + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="如何创建二叉树"><a href="#如何创建二叉树" class="headerlink" title="如何创建二叉树"></a>如何创建二叉树</h4><p>二叉树的节点的数据结构已经用Java代码表示出来了，那么如何用这些节点来构造出一个完整的二叉树呢？请看下图二叉树的结构：</p>
<p><img src="/ecs.png" alt="二叉树结构"></p>
<p>如上图，对于一个二叉树，需要有一个根节点。每个节点最多有两课子树，分别区分左子树还是右子树。即就算有一个子树，还是需要区分是左子树还是右子树。创建二叉树我们只需要将每一个树节点按照这样的规则连接起来即可。</p>
<h5 id="创建二叉搜索树"><a href="#创建二叉搜索树" class="headerlink" title="创建二叉搜索树"></a>创建二叉搜索树</h5><ul>
<li><p>概念：二叉搜索树，又叫二叉查找树。他是一棵特殊的二叉树，对于二叉搜索树中的每一个节点，它的左子树都不大于父节点，右子树都不小于父节点。空树是特殊的二叉搜索树。</p>
</li>
<li><p>创建：本例根据一个已有的数组进行二叉树的创建，基本的思路就是遍历数组，每个元素创建一个树节点，然后继续根据节点值得大小向下遍历判断，最后将值域小的放在节点的左子树，将值大的放在节点的右子树即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title function_">createSearchTree</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(a[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">c</span> <span class="operator">=</span> root;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> c;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">q</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(a[i]);</span><br><span class="line">            <span class="keyword">while</span> (c != <span class="literal">null</span>) &#123;</span><br><span class="line">                p = c;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &lt;= c.val) &#123;</span><br><span class="line">                    c = c.left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = c.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (q.val &lt; p.val) &#123;</span><br><span class="line">                p.left = q;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.right = q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点：二叉搜索树在应用于经常查找元素的场景效率会比较快，因为它的数据结构类似于二分查找，查找元素时根据其特性向下搜索即可。</p>
</li>
</ul>
<h5 id="创建完全二叉树"><a href="#创建完全二叉树" class="headerlink" title="创建完全二叉树"></a>创建完全二叉树</h5><ul>
<li><p>概念：首先介绍一下满二叉树：即树中的所有节点除了叶节点都有左子树和右子树，叶节点的左右子树都为空，这样的树称之为满二叉树。而对于一棵完全二叉树，只有树的最后一层连续缺失右边节点。满二叉树一定是完全二叉树，反之则不一定成立。如图分别是一棵满二叉树和一棵完全二叉树：<br><img src="/mecs.png" alt="满二叉树"><br><img src="/wqecs.png" alt="完全二叉树"></p>
</li>
<li><p>创建： 完全二叉树的创建需要按层去创建。这边我们借助队列的特点，将二叉树的节点连接起来，构造成完全二叉树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title function_">createWholeTree</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(a[<span class="number">0</span>]);</span><br><span class="line">            queue.add(root);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">curn</span> <span class="operator">=</span> queue.get(index);</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">ti</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(a[i]);</span><br><span class="line">                queue.add(ti);</span><br><span class="line">                <span class="keyword">if</span> (curn.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                    curn.left = ti;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curn.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                    curn.right = ti;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点：对于一个h层的完全二叉树，前h-1层是满的，第h层连续缺失右边节点。所以叶子结点只能出现在最下层和次下层，最下层的叶子结点集中在树的左部，倒数第二层若存在叶子结点，一定在右部连续位置，如果结点度为1，则该结点只有左孩子，即没有右子树，同样结点数目的二叉树，完全二叉树深度最小。</p>
</li>
</ul>
<h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><ul>
<li><p>前中后序递归遍历：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归先序遍历二叉树 左-根-右</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">frontPrintOutTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != root) &#123;</span><br><span class="line">        System.out.print(root.val);</span><br><span class="line">        frontPrintOutTree(root.left);</span><br><span class="line">        frontPrintOutTree(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归中序遍历二叉树 左-根-右</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">midPrintOutTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != root) &#123;</span><br><span class="line">        midPrintOutTree(root.left);</span><br><span class="line">        System.out.print(root.val);</span><br><span class="line">        midPrintOutTree(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归先序遍历二叉树 左-根-右</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lastPrintOutTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != root) &#123;</span><br><span class="line">        lastPrintOutTree(root.left);</span><br><span class="line">        lastPrintOutTree(root.right);</span><br><span class="line">        System.out.print(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按层遍历：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按层遍历二叉树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">levelPrintOutTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != root) &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">i</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(i.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(i.right);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i.val);</span><br><span class="line">            queue.poll();</span><br><span class="line">            i = queue.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="以上代码的github地址：GITHUB地址"><a href="#以上代码的github地址：GITHUB地址" class="headerlink" title="以上代码的github地址：GITHUB地址"></a>以上代码的github地址：<a href="https://github.com/Fatezhang/DataStructureAndAlgorithm/tree/master/src/main/java/DataStructure/Tree">GITHUB地址</a></h4></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>二叉树</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在springboot服务启动之后执行一些代码(三种方式)</title>
    <url>/post/e0aebfe4.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  通常的我们的项目开发中，经常会遇到那种在服务一启动就需要自动执行一些业务代码的情况。比如将数据库中的配置信息或者数据字典之类的缓存到redis，或者在服务启动的时候将一些配置化的定时任务开起来。关于spring mvc或者springboot如何在项目启动的时候就执行一些代码，方法其实有很多，我这边介绍一下我使用过的三种。</p>
  <span id="more"></span>
<h4 id="1、-PostConstruct-注解"><a href="#1、-PostConstruct-注解" class="headerlink" title="1、@PostConstruct 注解"></a>1、<code>@PostConstruct</code> 注解</h4><p>从Java EE5规范开始，Servlet中增加了两个影响Servlet生命周期的注解，<code>@PostConstruct</code>和<code>@PreDestroy</code>，这两个注解被用来修饰一个非静态的void（）方法。<code>@PostConstruct</code>会在所在类的构造函数执行之后执行，在init()方法执行之前执行。(<code>@PreDestroy</code>注解的方法会在这个类的destory()方法执行之后执行。)</p>
<ul>
<li>使用示例：在Spring容器加载之后，我需要启动定时任务去做任务的处理（我的定时任务采用的是读取数据库配置的方式）。在这里我使用<code>@PostConstruct</code> 指定了需要启动的方法。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 注意 这里必须有</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartAllJobInit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass().getName());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JobTaskUtil jobTaskUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">// 构造函数之后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;容器启动后执行&quot;</span>);</span><br><span class="line">        startJob();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startJob</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;JobInfoBO&gt; list = jobInfoService.findList();</span><br><span class="line">        <span class="keyword">for</span> (JobInfoBO jobinfo :list) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;0&quot;</span>.equals(jobinfo.getStartWithrun()))&#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;任务&#123;&#125;未设置自动启动。&quot;</span>, jobinfo.getJobName());</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STOP);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;任务&#123;&#125;设置了自动启动。&quot;</span>, jobinfo.getJobName());</span><br><span class="line">                    jobTaskUtil.addOrUpdateJob(jobinfo);</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STARTING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;执行定时任务出错，任务名称 &#123;&#125; &quot;</span>, jobinfo.getJobName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2、实现CommandLineRunner接口并重写run-方法"><a href="#2、实现CommandLineRunner接口并重写run-方法" class="headerlink" title="2、实现CommandLineRunner接口并重写run()方法"></a>2、实现<code>CommandLineRunner</code>接口并重写run()方法</h4><p><code>CommandLineRunner</code>接口文档描述如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface used to indicate that a bean should &lt;em&gt;run&lt;/em&gt; when it is contained within</span></span><br><span class="line"><span class="comment"> * a &#123;<span class="doctag">@link</span> SpringApplication&#125;. Multiple &#123;<span class="doctag">@link</span> CommandLineRunner&#125; beans can be defined</span></span><br><span class="line"><span class="comment"> * within the same application context and can be ordered using the &#123;<span class="doctag">@link</span> Ordered&#125;</span></span><br><span class="line"><span class="comment"> * interface or &#123;<span class="doctag">@link</span> Order <span class="doctag">@Order</span>&#125; annotation.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If you need access to &#123;<span class="doctag">@link</span> ApplicationArguments&#125; instead of the raw String array</span></span><br><span class="line"><span class="comment"> * consider using &#123;<span class="doctag">@link</span> ApplicationRunner&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ApplicationRunner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Callback used to run the bean.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args incoming main method arguments</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception on error</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上所说：接口被用作加入Spring容器中时执行run(String… args)方法，通过命令行传递参数。SpringBoot在项目启动后会遍历所有实现CommandLineRunner的实体类并执行run方法，多个实现类可以并存并且根据order注解排序顺序执行。这边还有个<code>ApplicationRunner</code>接口，但是接收参数是使用的<code>ApplicationArguments</code>。这边不再赘述。</p>
<p><strong>同样是启动时执行定时任务，使用这种方式我的写法如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 注意 这里必须有</span></span><br><span class="line"><span class="comment">//@Order(2) 如果有多个类需要启动后执行 order注解中的值为启动的顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartAllJobInit</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass().getName());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JobTaskUtil jobTaskUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        List&lt;JobInfoBO&gt; list = jobInfoService.findList();</span><br><span class="line">        <span class="keyword">for</span> (JobInfoBO jobinfo :list) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;0&quot;</span>.equals(jobinfo.getStartWithrun()))&#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;任务&#123;&#125;未设置自动启动。&quot;</span>, jobinfo.getJobName());</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STOP);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;任务&#123;&#125;设置了自动启动。&quot;</span>, jobinfo.getJobName());</span><br><span class="line">                    jobTaskUtil.addOrUpdateJob(jobinfo);</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STARTING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;执行定时任务出错，任务名称 &#123;&#125; &quot;</span>, jobinfo.getJobName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、使用ContextRefreshedEvent事件-上下文件刷新事件"><a href="#3、使用ContextRefreshedEvent事件-上下文件刷新事件" class="headerlink" title="3、使用ContextRefreshedEvent事件(上下文件刷新事件)"></a>3、使用<code>ContextRefreshedEvent</code>事件(上下文件刷新事件)</h4><blockquote>
<p>ContextRefreshedEvent 官方在接口上的doc说明<br><br>Event raised when an {@code ApplicationContext} gets initialized or refreshed.</p>
</blockquote>
<p>ContextRefreshedEvent是Spring的ApplicationContextEvent一个实现，ContextRefreshedEvent 事件会在Spring容器初始化完成后以及刷新时触发。</p>
<p><strong>在这里我需要在springboot程序启动之后加载配置信息和字典信息到Redis缓存中去，我可以这样写：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 注意 这个也是必须有的注解 三种都需要 使spring扫描到这个类并交给它管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitRedisCache</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory</span><br><span class="line">            .getLogger(InitRedisCache.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysConfigService sysConfigService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysDictService sysDictService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent contextRefreshedEvent)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;-------加载配置信息 start-------&quot;</span>);</span><br><span class="line">        sysConfigService.loadConfigIntoRedis();</span><br><span class="line">        logger.info(<span class="string">&quot;-------加载配置信息 end-------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;-------加载字典信息 start-------&quot;</span>);</span><br><span class="line">        sysDictService.loadDictIntoRedis();</span><br><span class="line">        logger.info(<span class="string">&quot;-------加载字典信息 end-------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```java</span><br><span class="line">**注意**：这种方式在springmvc-spring的项目中使用的时候会出现执行两次的情况。这种是因为在加载spring和springmvc的时候会创建两个容器，都会触发这个事件的执行。这时候只需要在`onApplicationEvent`方法中判断是否有父容器即可。</span><br></pre></td></tr></table></figure>
<p>@Override<br>  public void onApplicationEvent(ContextRefreshedEvent event) {<br>      if(event.getApplicationContext().getParent() &#x3D;&#x3D; null){&#x2F;&#x2F;root application context 没有parent，他就是老大.<br>           &#x2F;&#x2F;需要执行的逻辑代码，当spring容器初始化完成后就会执行该方法。<br>      }<br>  }  </p>
<pre><code>#### 总结
以上，就是我在实际开发中常用的三种，在项目启动时执行代码的方式，开发者可以根据不同的使用情况选择合适的方法去执行自己的业务逻辑。
</code></pre>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存分配与垃圾回收的复习整理</title>
    <url>/post/e78ccdef.html</url>
    <content><![CDATA[<p><img src="/zy.png" alt="摘要"></p>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>众所周知Java作为一个“一次编译，到处运行”的编译型语言，JVM虚拟机当之无愧的是Java语言世界的先锋将军。作为一个Java程序员，JVM虚拟机其相关知识是我们必须要了解以及深入掌握的重点。在本篇博客我将总结一下JVM虚拟机的内存结构、对象内存分配以及垃圾回收算法。这也是经常找工作求职必问的点。</p>
<span id="more"></span>
<h3 id="Java内存分配与垃圾回收的复习整理"><a href="#Java内存分配与垃圾回收的复习整理" class="headerlink" title="Java内存分配与垃圾回收的复习整理"></a>Java内存分配与垃圾回收的复习整理</h3><h4 id="Java内存区域划分"><a href="#Java内存区域划分" class="headerlink" title="Java内存区域划分"></a>Java内存区域划分</h4><p>Java虚拟机在执行Java程序的过程中会将它所管理的内存划分为若干个不同的区域。每个区域各司其职，其创建与销毁数据的规则也都各不相同。根据《Java虚拟机规范（Java SE 7版）》的规定，主要分为如下图几个区域。</p>
<p><img src="/jvm.png" alt="Java内存划分"></p>
<ul>
<li><strong>程序计数器</strong>：当前线程执行字节码的行号指示器。[<em>线程私有</em>]</li>
<li><strong>虚拟机栈</strong>：每个方法执行时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。平常我们所说的Java虚拟机划分为堆和栈中的“栈”中的一部分就是虚拟机栈。其中局部变量表存放着编译期可知的所有基本数据类型、对象引用等。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法所需要的帧的大小是已经确定了的。[<em>线程私有</em>]</li>
<li><strong>本地方法栈</strong>：与虚拟机栈发挥的作用相似，只不过这个区域执行的是native方法，即由c&#x2F;c++或者其他语言编写的方法。[<em>线程私有</em>]</li>
<li><strong>Java堆</strong>：用来存放对象实例，即我们最熟悉的一块区域。Java堆是垃圾收集器管理的主要区域，所以有时也叫“GC堆”。[<em>线程共享</em>]</li>
<li><strong>方法区</strong>：用于存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据 [<em>线程共享</em>]</li>
<li><strong>运行时常量池</strong>：这是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等信息之外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用。这部分内容将在类加载后进入方法区的运行时常量池中存放。[<em>线程共享</em>]</li>
</ul>
<h4 id="常用的垃圾回收算法"><a href="#常用的垃圾回收算法" class="headerlink" title="常用的垃圾回收算法"></a>常用的垃圾回收算法</h4><blockquote>
<p>在Java代码中，我们程序员通常只关注广义上的“栈”和“堆”这两种区域。上述划分的Java内存区域告诉我们，栈是朝生夕死的一块区域，当线程进入的时候，栈空间被分配，线程结束之后，栈的内存空间即被回收用来去做其他的任务，栈中的栈帧随着线程的进入与退出有条不紊的执行着入栈和出栈的操作，每一个栈帧中分配多少内存基本上是在类结构确定下来就已知的。而堆却不同，我们只有在程序运行期间才会知道创建那些对象，这部分内存分配和回收都是动态的。都由虚拟机的垃圾回收器进行“已死”对象的回收。</p>
</blockquote>
<h5 id="如何判断对象已死"><a href="#如何判断对象已死" class="headerlink" title="如何判断对象已死"></a>如何判断对象已死</h5><ul>
<li><strong>引用计数法</strong>：给对象添加一个引用计数器，每当有引用指向它时计数器加1，引用失效后计数器减1。垃圾回收器回收对象计数器为0的对象昂即可。但是当出现对象之间循环引用，而对象却无实际作用的时候，这种方式就会出现内存泄漏。</li>
<li><strong>可达性分析</strong>：通过一系列的称为“GC ROOTS”的对象作为起点，向下搜索，搜索走过的路径都称为引用链，当一个对象到“GC ROOTS”没有引用链的时候，证明这个对象不可达。此时会被判定为可回收对象。（此时并非一定死亡，在此之后还会进行两次标记处理，与finalize()方法有关，此处不再整理。注意一个知识点：任何对象的finalize()方法只会被系统调用一次，并且不建议使用）</li>
</ul>
<blockquote>
<p>知道哪些对象是“垃圾”，接下来就是回收操作了</p>
</blockquote>
<h5 id="标记-清除法"><a href="#标记-清除法" class="headerlink" title="标记-清除法"></a>标记-清除法</h5><ul>
<li>首先标记出所有需要回收的对象，然后统一回收。是最基础的回收算法。</li>
<li>不足之处：1、效率低下，标记和清除的效率都不高；2、产生大量内存碎片，使得之后程序要分配大对象却没有空间，不得不除法GC。</li>
</ul>
<h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><ul>
<li>首先将内存区域划分为两等分，每次只使用其中一块内存，当用完之后，将活着的对象复制到另一块内存，然后整个回收上一半。这种按顺序分配内存，实现简单，运行高效。</li>
<li>不足之处：直接将内存缩小了一半，产生大量的空间浪费。然而很多垃圾收集器都是用这种方式，但是有过改进。因为堆中的对象90%都是朝生夕死的，只有10%是会长期存活下来的对象，那么对于这90%的对象，完全可以使用这种高效的复制收集算法。首先将内存区域划分三份，10%的对象存在其中较大的一分中，另外的两份等份分配，处理这90%的“死的快”的对象。这就是Form,To,Eden区域。即Eden:From:To&#x3D;8:1:1</li>
</ul>
<h5 id="标记-整理法"><a href="#标记-整理法" class="headerlink" title="标记-整理法"></a>标记-整理法</h5><ul>
<li>标记整理的方式实际上也是先将可回收对象标记起来，然后对于这些存活着的对象，并不直接回收，而是先向一端移动，最后直接回收端边界之外的对象。这种做法解决了处理存活率较高的大对象的回收，适合老年代堆对象回收。</li>
</ul>
<h5 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h5><ul>
<li>当前商业虚拟机基本上都会采取分代收集算法。即根据对象存活周期的不同将内存划分为不同区域，分别使用不同的垃圾回收算法进行垃圾回收。比如在新生代使用复制算法，因为新生代大量对象都是朝生夕死需要很高的回收效率，而对于老年代则使用标记清除或者标记整理。</li>
</ul>
<h4 id="Java虚拟机的对象内存分配"><a href="#Java虚拟机的对象内存分配" class="headerlink" title="Java虚拟机的对象内存分配"></a>Java虚拟机的对象内存分配</h4><p>Java对象内存分配实际上就指的是将对象分配在堆上的过程。不过实际上堆还被虚拟机划分成了不同的区域，并且每个区域的分配策略都不相同。上面我们说到虚拟机根据对象存活周期的不同将对内存分为几种不同的区域，即新生代Eden,From Survivor,To Survivor和老年代。那么这几种区域是如何进行内存分配的呢？</p>
<ul>
<li>对象优先再Eden区域分配：大多数情况下，对象会在Eden区域分配，在Eden区域空间不够的情况下，会先进行一次MinorGC（MinorGC是新生代垃圾回收，Full GC是老年代垃圾回收）。</li>
<li>大对象直接进入老年代：大对象即指的是需要大量连续空间的对象，例如很长的字符串以及数组。虚拟机提供参数<code>-XX:PretenureSizeThreadhold</code>参数设置大于多少算是大对象，避免在新生代几个区域中发生大量的内存复制。</li>
<li>长期存活的对象直接进入老年代：每经过一次MinorGC对象的年龄都会加1。当年龄加到<code>-XX:MaxTenuringThreadhold</code>（默认15）指定的值时，判断为长期存活，对象会被移动到老年代。</li>
<li>动态对象年龄判断：为了适应多变的内存情况，一般虚拟机都会使用动态对象年龄判定。如果Survivor中相同年龄的所有对象大小总和大于该空间的一半，该年龄以上的对象就会直接进入老年代，无需等到年龄大于<code>-XX:MaxTenuringThreadhold</code>（默认15）指定的值。</li>
<li>空间分配担保：在发生MinorGC之前，虚拟机会先检查老年代最大可用连续空间是否大于新生代所有对象总空间，是的话MinorGC可以被认定是安全的。如果不成立，虚拟机会先检查<code>HandlerPromotionFailure</code>参数是否允许担保失败，不允许的话会继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于就尝试进行一次MinorGC，尽管这次MinorGC是有风险的；如果小于的话或者<code>HandlerPromotionFailure</code>设置不允许冒险，那么就会执行一次FullGC。</li>
</ul>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>内存回收与垃圾收集很多时候都是影响系统性能和并发能力的主要因素之一，虚拟机提供了多种垃圾收集器以及大量的调节参数，方便开发人员根据实际应用调整以便程序可以获得最高的性能。这些垃圾收集器和虚拟机参数没有固定的标准的组合，需要开发人员对于内存分配与垃圾回收相当了解，才得以根据实际情况实际配置。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>内存分配</tag>
        <tag>垃圾回收</tag>
      </tags>
  </entry>
  <entry>
    <title>dubbo服务降级</title>
    <url>/post/fe364a39.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在分布式服务或者一些微服务当中，经常性的出现各个服务之间相互调用，业务处理流程耦合起来的情况。比如当用户在平台下单时，我们需要给用户生成订单之后发站内信或者短信通知用户订单生成成功。那么很多时候代码的编写就会是：<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<code>调用订单模块生成订单-&gt;调用短信模块通知用户-&gt;调用其他模块处理更多业务逻辑</code><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;可是当我们无足轻重的一个短信通知模块挂掉或者报错的时候，我们当然不希望整个业务逻辑就这样停止。那么这个时候，就需要引入服务降级的机制，为整个业务逻辑进行解耦合。</p>
<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;使用服务降级可以防止我们服务中间不影响整体流程的模块出错导致整个业务处理雪崩。将核心业务保证完整性，非核心业务弱化。</p>
<span id="more"></span>
<p><em><font style="color: red">本文使用  <code>springboot+dubbo</code> 进行服务降级的演示</font></em></p>
<h3 id="dubbo自带的mock进行服务降级，也叫本地伪装"><a href="#dubbo自带的mock进行服务降级，也叫本地伪装" class="headerlink" title="dubbo自带的mock进行服务降级，也叫本地伪装"></a>dubbo自带的mock进行服务降级，也叫本地伪装</h3><h5 id="dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。"><a href="#dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。" class="headerlink" title="dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。"></a>dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。</h5><p>具体使用</p>
<p>dubbo mock的使用非常简单，即在我们平时进行开发时，编写impl实现类实现接口作为服务提供者的同时，编写mock实现类并覆盖所有接口中的方法。<br>官方更详细的文档<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/local-mock.html">戳这里</a></p>
<p>比如有接口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface SysOperateFacade &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 根据用户名查询操作员信息</span><br><span class="line">     */</span><br><span class="line">    SysOperateVO findByUserName(String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实现类进行相应操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service //这里Service是dubbo的注解</span><br><span class="line">public class SysOperateFacadeImpl implements SysOperateFacade &#123;</span><br><span class="line">  @Resource</span><br><span class="line">  SysOperateService sysOperateService;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public SysOperateVO findByUserName(String username) &#123;</span><br><span class="line">      return sysOperateService.findByUserName(username);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写mock实现类覆盖findByUserName方法 注意 mock的类名必须是 接口名+Mock</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SysOperateFacadeMock implements SysOperateFacade &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public SysOperateVO findByUserName(String username) &#123;</span><br><span class="line">        System.out.println(&quot;调用到dubbo mock 的findByUserName方法。。。。。。。&quot;);</span><br><span class="line">        return new SysOperateVO();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，在调用的地方加上注解<code>@Reference(mock = &quot;true&quot;)</code>进行使用即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/sys/sysOperate&quot;)</span><br><span class="line">public class SysOperateController extends BaseController &#123;</span><br><span class="line"></span><br><span class="line">    @Reference(mock = &quot;true&quot;)</span><br><span class="line">    private SysOperateFacade sysOperateFacade;</span><br><span class="line"></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public SysOperateVO test(String username)&#123;</span><br><span class="line">        return sysOperateFacade.findByUserName(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-spring-cloud-Hystrix进行服务降级"><a href="#使用-spring-cloud-Hystrix进行服务降级" class="headerlink" title="使用 spring cloud Hystrix进行服务降级"></a>使用 spring cloud Hystrix进行服务降级</h3><p>在服务调用方模块加入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>如果出现以下报错也许是由于Springboot与这个依赖版本不对应，修改下版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.NoSuchMethodError: org.springframework.boot.builder.SpringApplicationBuilder.&lt;init&gt;([Ljava/lang/Class;)V at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:170) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:104) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:70) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:325) at org.springframework.boot.SpringApplication.run(SpringApplication.java:296) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) at com.gjj.p2p.BasicsApplication.main(BasicsApplication.java:18)</span><br></pre></td></tr></table></figure>
<h5 id="具体使用hystrix进行服务降级"><a href="#具体使用hystrix进行服务降级" class="headerlink" title="具体使用hystrix进行服务降级"></a>具体使用<code>hystrix</code>进行服务降级</h5><p><code>hystrix</code>的使用也是非常简单，只需要在服务调用方即消费者方springboot启动类上加上注解 <code>@EnableHystrix</code></p>
<p>然后使用如下方式，指定服务出错或者熔断后调用的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">@RequestMapping(&quot;/test&quot;)</span><br><span class="line">@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</span><br><span class="line">public String test(String message)&#123;</span><br><span class="line">    return sysMenuFacade.test(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String fallback(String message)&#123;</span><br><span class="line">    return &quot;sysMenuFacade挂了 调用到fallback &quot; + message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样当出现问题之后就会调用得到fallback方法<br>还可以在这个controller上直接指定注解<code>@DefaultProperties(defaultFallback = &quot;fallback&quot;)</code>以免编写大量重复代码</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>服务降级与熔断机制在我们实际生产以及日常开发中都是是非常有必要使用的，例如我们在日常开发中，需要调用别人的模块，但是又不是非常依赖这个模块的数据，我们可以使用以上的方式构造“假的”调用结果。这样就不用为了调试某行代码去启动大量的服务了。</p>
<p>最后针对dubbo的mock机制以及<code>hystrix</code>，我觉得<code>hystrix</code>更像是try{}catch{}。</p>
]]></content>
      <categories>
        <category>dubbo</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>dubbo</tag>
        <tag>分布式服务降级</tag>
      </tags>
  </entry>
  <entry>
    <title>CMY Network--高端专线SSR/Trojan机场推荐</title>
    <url>//page/cmynetwork/</url>
    <content><![CDATA[<blockquote>
<p><strong>郑重声明</strong>：本文所介绍产品主要是为了方便学习、科研以及外贸工作。请遵守中华人民共和国法律法规，切勿在任何地方发布分裂国家，激化民族矛盾的言论。</p>
</blockquote>
<p>本文来介绍一家高端专线 SSR&#x2F;Trojan 机场，名叫 CMY Network，可满足多种需求。经过长期使用，稳定性和速度上都很不错，推荐一下。</p>
<span id="more"></span>

<p><img src="https://img.iszy.xyz/20210411191903.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://url.iszy.xyz/cmynetwork">官网传送门</a></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#CMYNetwork-%E7%BA%A2%E8%8E%93%E7%BD%91%E7%BB%9C">⭐⭐CMY Network 测速 ⭐⭐</a></p>
<h3 id="优惠"><a href="#优惠" class="headerlink" title="优惠"></a>优惠</h3><blockquote>
<p>本站专属优惠</p>
</blockquote>
<p>使用我的邀请码注册可以获得 <strong>10 元</strong>网站余额红包，可用于购买套餐。此优惠仅可使用一次，同 IP 下多次注册，视为相同账户。</p>
<p>邀请码: <code>iszy</code></p>
<p><img src="https://img.iszy.xyz/20200317212833.png"></p>
<h2 id="CMY-Network-简介"><a href="#CMY-Network-简介" class="headerlink" title="CMY Network 简介"></a>CMY Network 简介</h2><p><strong>CMYNetwork 红莓网络</strong> 隶属于<code>CMYNetwork Technology Co., Ltd</code>，注册于摩纳哥公国，是一家我最近发现一家宝藏机场。除入门套餐外采用全内网中转节点；入门套餐采用 Trojan 新协议，保证稳定性。经测速和日常使用，可以说是稳定高速，高峰期速度也能拉满。提供网页在线客服和工单，服务还不错。持续使用体验仍在继续跟踪。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><strong>套餐分级定制</strong></p>
<ul>
<li>Air 套餐直连线路采用<strong>Trojan</strong></li>
<li>Pro 套餐以上套餐及以上包含全内网中转节点、IPLC 专线</li>
<li>Extreme 套餐提供<strong>IEPL 及游戏专线</strong></li>
</ul>
<p><strong>流媒体解锁</strong></p>
<ul>
<li>提供各种<strong>流媒体解锁</strong>，福利中心对最高级套餐(Extreme 套餐)提供各种视频会员<strong>共享账号</strong></li>
</ul>
<p><strong>多平台多订阅</strong></p>
<ul>
<li>多平台<strong>定制客户端</strong>(windows&#x2F;macos&#x2F;android)，简单易用</li>
<li>提供 Quantumultx、小火箭、ClashR 订阅，支持按等级获取订阅</li>
<li>特别的，提供了按区域订阅链接，更加灵活，暂只筛选了日本、美国、港澳台、新加坡</li>
</ul>
<p><strong>续命灵活</strong></p>
<ul>
<li>有灵活的<strong>叠加流量包</strong>供高速流量将尽时使用</li>
<li>流量用完后，提供<strong>无限量限速流量</strong>，限速 2Mbps</li>
</ul>
<p><strong>合理的同时在线数量限制</strong></p>
<ul>
<li>限制公网 ip 同时在线数量，以公网 IP 为准，<strong>同一台路由器下无论多少设备只算做一个 IP 在线</strong>，适合团队使用</li>
</ul>
<p><strong>注册可试用</strong></p>
<ul>
<li>注册并绑定手机号，赠送 3 天免费试用(非强制)</li>
</ul>
<h2 id="套餐"><a href="#套餐" class="headerlink" title="套餐"></a>套餐</h2><blockquote>
<p>注意，需要专线中转线路，请至少选择 Pro 及以上套餐，专线倍率为 2，需要注意。</p>
</blockquote>
<table>
<tr><th>套餐</th><th>流量</th><th>价格</th><th>公网IP数</th><th>线路</th><th>客服</th></tr>
<tr>
  <td rowspan="4">Air/入门版</td>
  <td rowspan="2">100G/月</td>
  <td>18元/30天</td>
  <td rowspan="4">2</td>
  <td rowspan="4">国际轻量优化链路<br/>解锁Trojan直连线路</td>
  <td rowspan="4">工单客服支持</td>
</tr>
<tr>
  <td>54元/90天</td>
</tr>
<tr>
  <td>125G/月</td>
  <td>108元/180天</td>
</tr>
<tr>
  <td>150G/月</td>
  <td>193元/365天</td>
</tr>
<tr>
  <td rowspan="4">Pro/专业版订阅</td>
  <td rowspan="2">200G/月</td>
  <td>35元/30天</td>
  <td rowspan="4">3</td>
  <td rowspan="4">解锁 CN2 优化直连专线（Trojan）<br>解锁 IPLC 流媒体专线（SSR）<br>解锁港/台/日/美 原生IP线路（Trojan）</td>
  <td rowspan="11">12 x 365在线客服支持</td>
</tr>
<tr>
  <td>105元/90天</td>
</tr>
<tr>
  <td>250G/月</td>
  <td>210元/180天</td>
</tr>
<tr>
  <td>300G/月</td>
  <td>370元/365天</td>
</tr>
<tr>
  <td rowspan="4">Extreme/至尊版</td>
  <td rowspan="2">643G/月</td>
  <td>68元/30天</td>
  <td rowspan="4">4</td>
  <td rowspan="4">免费远程技术支持<br>解锁 IEPL 流媒体专线<br>解锁 IEPL 游戏专线(内网)<br>Netflix/HULU/HBO/Pxxnhub等价值千元福利账号</td>
</tr>
<tr>
  <td>147元/90天</td>
</tr>
<tr>
  <td>768G/月</td>
  <td>399元/180天</td>
</tr>
<tr>
  <td>1024G/月</td>
  <td>696元/365天</td>
</tr>
<tr>
  <td rowspan="2">Business/企业版基础套餐</td>
  <td rowspan="2">1200G/月</td>
  <td>298元/30天</td>
  <td rowspan="2">10</td>
  <td rowspan="2">无定制专线，可自助购买<br>如需要线路定制请查看定制套餐<br>可提供国际电子收据（英文/日文可选）</td>
</tr>
<tr>
  <td>3398元/365天</td>
</tr>
<tr>
  <td>Business/企业专线定制</td>
  <td colspan="4">此为定制方案，可动态根据需求优化，具体详情请咨询客服</td>
</tr>
</table>

<table>
<tr><th>套餐</th><th>流量</th><th>价格</th><th>公网IP数</th><th>备注</th></tr>
<tr>
  <td rowspan="2">Business/企业版基础套餐</td>
  <td rowspan="2">2048G/月</td>
  <td>298元/30天</td>
  <td rowspan="2">10</td>
  <td rowspan="2">无定制专线，可自助购买<br>如需要线路定制请查看定制套餐<br>可提供国际电子收据（英文/日文可选）</td>
</tr>
<tr>
  <td>1788元/180天</td>
</tr>
<tr>
  <td>Business/企业专线定制</td>
  <td colspan="4">此为定制方案，可动态根据需求优化，具体详情请咨询客服</td>
</tr>
</table>

<h2 id="其他的话"><a href="#其他的话" class="headerlink" title="其他的话"></a>其他的话</h2><ul>
<li><a href="https://github.com/caomeicloud/url">官网地址发布页</a>，永不失联</li>
<li><a href="https://caomeijump.com/">最新地址跳转页</a></li>
<li><a href="https://t.me/s/cmynetwork">官方 TG 通知频道</a></li>
<li>可在官网右下角与客服联系(推荐)或提交工单</li>
<li><a href="https://caomei.wiki/">全平台各客户端下载、教程与进阶技巧</a></li>
</ul>
<hr>
<ul>
<li>本站仅做介绍和引荐，不参与购买、服务和售后，此类问题请通过官方联系方式联系官方，一般可以通过<code>工单</code>或 <code>tg 群</code>的方式。</li>
<li>如有疑问，可在评论区回复。</li>
</ul>
]]></content>
      <categories>
        <category>推广</category>
      </categories>
      <tags>
        <tag>翻墙</tag>
        <tag>科学上网</tag>
        <tag>V2Ray</tag>
        <tag>ssr</tag>
        <tag>机场</tag>
        <tag>SS</tag>
        <tag>Trojan</tag>
        <tag>网络加速</tag>
        <tag>代理推荐</tag>
        <tag>酸酸乳</tag>
        <tag>ssr机场</tag>
        <tag>机场推荐</tag>
        <tag>机场评测</tag>
        <tag>V2Ray推荐</tag>
        <tag>代理</tag>
        <tag>推荐</tag>
        <tag>加速</tag>
        <tag>VPS</tag>
        <tag>V2Ray机场</tag>
        <tag>ssr/v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>心阶云--性价比SSR/V2Ray机场推荐</title>
    <url>//page/xinjiecloud/</url>
    <content><![CDATA[<blockquote>
<p><strong>郑重声明</strong>：本文所介绍产品主要是为了方便学习、科研以及外贸工作。请遵守中华人民共和国法律法规，切勿在任何地方发布分裂国家，激化民族矛盾的言论。</p>
</blockquote>
<p>本文来介绍一家性价比超高的 SSR&#x2F;V2Ray 机场，名叫心阶云，可满足多种需求。经过长期使用，稳定性和速度上都很不错，推荐一下。</p>
<span id="more"></span>

<p><img src="https://img.iszy.xyz/20210411143600.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>或许不少人已经对心阶有了不少了解了，在此先提供一下相关的链接和优惠信息。我会尽量保证此处的官网传送门可用。</p>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://url.iszy.xyz/xinjiebak">官网传送门</a></p>
<p>如果需要邀请码，可以使用我的邀请码: <code>iszy</code></p>
<p>机场测速在这里提供下，仅供参考。考虑到测速会占用大量服务器带宽，尤其是在高峰期，或许会影响其他用户的正常使用，在此不会频繁更新测速记录，仅在出现重大情况或是用户要求更新时更新测速。测速时间会在速度图的底部留有记录。</p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#%E5%BF%83%E9%98%B6%E4%BA%91">⭐⭐ 心阶云测速 ⭐⭐</a></p>
<h3 id="优惠"><a href="#优惠" class="headerlink" title="优惠"></a>优惠</h3><blockquote>
<p>官方长期优惠</p>
</blockquote>
<p><strong>￥ 115</strong> 及以上套餐可用</p>
<p>端午节<strong>95 折</strong>礼遇码：<code>FeelHot</code></p>
<h2 id="心阶云简介"><a href="#心阶云简介" class="headerlink" title="心阶云简介"></a>心阶云简介</h2><p><strong>心阶云</strong>是一家长期走中高端路线的 <strong>ShadowsocksR(SSR)</strong> 机场，也提供部分 V2Ray 线路，已经稳定运行多年。实际对比下来，它的性价比还是相当高的，线路又多，提供的流量也十分充足，主要推荐的套餐充分考虑了当前主流用户能够接受的价位，可以说是无可挑剔。现阶段包含大量优质 V2Ray 线路和更多的 SSR 线路，<strong>Lv.2</strong> 节点采用 <strong>SSR 隧道加密</strong>和 V2ray 技术，配合国内 <strong>6Gbps</strong> 机器和负载均衡技术，保证全时段稳定性。用了很久，稳定通过了“多次网络波动”时期，体验极佳，可以放心使用。</p>
<p>和心阶云接触时间也比较久了，一步步看着心阶云成长到现在这样，也是比较感慨。几年前，心阶云曾经比较惨，一度觉得快要跑路了，没想到硬是撑过了困难时期，到现在线路质量越来越好，回购用户越来越多，可以说和商家负责任的态度有很大关系。我觉得吧，姑且还是可以信任的，可以放心购买。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><strong>封闭邀请机制</strong></p>
<p>心阶云需要邀请码才能注册成功，这样的注册机制一定程度确保了服务的稳定性。</p>
<p>如果需要邀请码，可以使用我的邀请码: <code>iszy</code></p>
<p>也可以直接点击我的<a href="https://url.iszy.xyz/xinjie">邀请链接</a>，进入注册。</p>
<p><strong>长期折扣优惠</strong></p>
<p><a href="https://url.iszy.xyz/xinjie">购买套餐</a>时使用优惠码，可享受折扣优惠，优惠码不可叠加使用。</p>
<p><strong>实时服务监控</strong></p>
<p>在心阶的面板中有提供<strong>节点列表</strong>，会展示各种节点信息，方便用户选择空闲优质的节点。你可以轻松地查看到目前所有线路的状况，包括节点已使用流量总量(所有用户)、流量倍率、目前用户量等。当然你也可以轻松的在首页查看到自己套餐流量的使用状况。</p>
<p><strong>每日签到系统</strong></p>
<p>在心阶的面板中，每天可以签到一次，以获得一定量的流量，不会很多，但是在流量即将用尽的情况下能够续续命。不过如果有必要还是推荐选择 5 元 30G 的月重置套餐流量叠加包。</p>
<p><strong>特供打机神线</strong></p>
<p>所谓“打机神线”其实是提供与全球多个海外游戏服务器提供连结的线路，确保国际服游戏玩家在进行游戏时候能获得最佳的低延迟网络质量。也就是说，心阶云提供了降低游戏延迟的国际网络线路，而且据我查看一共提供了两条(香港线路)，应该足以够用。当然，如果有游戏需求，个人推荐最好还是使用游戏加速器效果更佳，毕竟专线专用。</p>
<p><strong>总结</strong></p>
<ul>
<li>SSR 隧道中转 &amp; V2ray</li>
<li>采用封闭邀请，精选客户，稳定可靠安全</li>
<li>定期发放折扣，部分套餐月均低至 9 元，具有极高性价比（可提供企业定制服务）</li>
<li>全面解锁 Netflix,DMM,HULU,TVB 等各类流媒体，YouTube4K-8K 流畅</li>
<li>支持 Windows&#x2F;Mac&#x2F;iOS&#x2F;Android&#x2F; 路由器，支持多设备同时使用</li>
<li>充值采用支付宝 Alipay，支付安全便捷，使用教程简单易用</li>
<li>和多家 IDC 深入合作，如阿里云，GmoCloud，香港宽频，中华电信……</li>
<li>全球线路全面，香港（HK,HKBN,CN2）、日本(IIJ，NTT)，台湾（HiNet，TFN）、新加坡、美国（GIA,NCP）、韩国(AWS)、俄罗斯(KHV)、英国(NTT)、澳门(CTM)等线路可选</li>
<li>提供昂贵的 IPLC，为稳定性需求较高的用户提供了支持，在良好网络环境下可为游戏加速</li>
</ul>
<h2 id="套餐"><a href="#套餐" class="headerlink" title="套餐"></a>套餐</h2><p>心阶云提供了多样种类的套餐分类，具体可分为：</p>
<ul>
<li>按月重置流量的月费套餐</li>
<li>按季度重置流量的季度套餐</li>
<li>按年重置流量的全年套餐</li>
<li>另提供了流量不足时救命的流量叠加包</li>
<li>如有个人&#x2F;企业高端定制的需求，可以找老板详谈</li>
</ul>
<blockquote>
<p>特别的，你可以购买全节点或者部分节点。对应的，全节点套餐赋予用户 2 级用户等级；而部分节点套餐只赋予用户 1 级用户等级。套餐过期后长期不续费或新购套餐的用户账号，用户等级会自动将为 0 级。处于等级 0 长达 30 天且余额小于￥ 5 的账号，将会被清理。</p>
</blockquote>
<p><strong>包年包月套餐</strong></p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>账号等级</th>
<th>付款周期</th>
<th>客户端数量</th>
</tr>
</thead>
<tbody><tr>
<td><strong>月费套餐【全节点】</strong></td>
<td>130G&#x2F;30 天</td>
<td>25 元</td>
<td>2</td>
<td>月付</td>
<td>8</td>
</tr>
<tr>
<td>月费套餐【非全节点】<br>不含 V2Ray 和隧道中转线路及香港台湾地区</td>
<td>70G&#x2F;30 天</td>
<td>20 元</td>
<td>1</td>
<td>月付</td>
<td>8</td>
</tr>
<tr>
<td>月重置套餐流量叠加包</td>
<td>30G</td>
<td>5 元</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>按量付费套餐</strong></p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>账号等级</th>
<th>付款周期</th>
<th>客户端数量</th>
</tr>
</thead>
<tbody><tr>
<td>季度套餐【全节点】</td>
<td>350G&#x2F;90 天</td>
<td>70 元</td>
<td>2</td>
<td>季付</td>
<td>10</td>
</tr>
<tr>
<td><strong>全年 0.5T 轻量【全节点&#x2F;性价比】★</strong></td>
<td>512G&#x2F;360 天</td>
<td>115 元</td>
<td>2</td>
<td>年付</td>
<td>10</td>
</tr>
<tr>
<td><strong>全年 1T 中度【全节点&#x2F;主流】★</strong></td>
<td>1024G&#x2F;360 天</td>
<td>200 元</td>
<td>2</td>
<td>年付</td>
<td>15</td>
</tr>
<tr>
<td><strong>全年 2T 重度【全节点&#x2F;尊享】★</strong></td>
<td>2048G&#x2F;360 天</td>
<td>375 元</td>
<td>2</td>
<td>年付</td>
<td>15</td>
</tr>
<tr>
<td>全年畅享套餐【全节点&#x2F;团队】</td>
<td>6666G&#x2F;360 天</td>
<td>996 元</td>
<td>2</td>
<td>年付</td>
<td>20</td>
</tr>
</tbody></table>
<h2 id="其他的话"><a href="#其他的话" class="headerlink" title="其他的话"></a>其他的话</h2><ul>
<li>使用前请确保设备时间校准精确，使用 V2ray 时服务器时间和本地时间误差不能超过两分钟.</li>
<li>新客初试可选购 <code>月费套餐【全节点】</code>,后期可选购年费套餐,目前暂不支持退款。</li>
<li>使用邀请码(<code>iszy</code>)注册后，在用户面板首页，你可以找到各平台的 SR 和 V2Ray 客户端的下载链接及相关配置教程。<ul>
<li>苹果平台比较特殊，没法提供下载，iOS 可能需要自行在美区苹果商城购买软件，请尝试某宝搜索美区 ID 等关键词。</li>
</ul>
</li>
<li>还可以点击以下心阶全平台订阅教程链接进入，查看教程进行服务订阅。<ul>
<li><a href="https://mirrors.ohmy.cat/">心阶全平台订阅教程</a></li>
</ul>
</li>
<li>订阅地址及节点信息请勿截图发到其他地方，请务必打码。</li>
<li>由于众所周知的原因，官网域名会被迫更换，请务必记下用户首页上的多个域名，以免失联，或从本文中的链接访问。</li>
<li>售后公告请关注 <a href="https://t.me/joinchat/HrJ6BFcUPO-ClrBUroqJUg">TG 群</a>，建议加入获取最新消息。</li>
<li>若有充值、使用问题，请联系 <a href="https://t.me/foreverforfire">TG 群管理员</a>，<strong>请勿通过工单系统提交问题</strong>。</li>
</ul>
<hr>
<ul>
<li>本站仅做介绍和引荐，不参与购买、服务和售后，此类问题请通过官方联系方式联系官方，一般可以通过<code>工单</code>或 <code>tg 群</code>的方式。</li>
<li>如有疑问，可在评论区回复。</li>
</ul>
]]></content>
      <categories>
        <category>推广</category>
      </categories>
      <tags>
        <tag>翻墙</tag>
        <tag>科学上网</tag>
        <tag>V2Ray</tag>
        <tag>ssr</tag>
        <tag>机场</tag>
        <tag>SS</tag>
        <tag>Trojan</tag>
        <tag>网络加速</tag>
        <tag>代理推荐</tag>
        <tag>酸酸乳</tag>
        <tag>ssr机场</tag>
        <tag>机场推荐</tag>
        <tag>机场评测</tag>
        <tag>V2Ray推荐</tag>
        <tag>代理</tag>
        <tag>推荐</tag>
        <tag>加速</tag>
        <tag>VPS</tag>
        <tag>V2Ray机场</tag>
        <tag>ssr/v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试Layui日期控件(layDate)遇到的坑</title>
    <url>/post/b0c3ed17.html</url>
    <content><![CDATA[<p>最近在写个小网页的时候用到了 Layui 的日期控件——layDate，期间遇到了一些小问题，在此记录一下。</p>
<span id="more"></span>

<h2 id="问题简述"><a href="#问题简述" class="headerlink" title="问题简述"></a>问题简述</h2><p>情形大致如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layui.<span class="title function_">use</span>(<span class="string">&quot;laydate&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> laydate = layui.<span class="property">laydate</span>;</span><br><span class="line">  laydate.<span class="title function_">render</span>(&#123;</span><br><span class="line">    <span class="attr">elem</span>: <span class="string">&quot;#date&quot;</span>,</span><br><span class="line">    <span class="attr">change</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="关于layDate的change与done属性"><a href="#关于layDate的change与done属性" class="headerlink" title="关于layDate的change与done属性"></a>关于<code>layDate</code>的<code>change</code>与<code>done</code>属性</h3><p>如果是单独的时间选择，效果类似下图，则选中日期后的回调触发的是<code>change</code>。</p>
<p><img src="https://img.iszy.xyz/20190407214909.png"></p>
<p>如果是时间范围的选择，效果类似下图，则选中日期后的回调触发的是<code>done</code>。</p>
<p><img src="https://img.iszy.xyz/20190407215225.png"></p>
<p>需要根据情况在对应的属性后编写回调函数。</p>
<h3 id="关于-39-date-39-change-不触发"><a href="#关于-39-date-39-change-不触发" class="headerlink" title="关于$(&#39;#date&#39;).change()不触发"></a>关于<code>$(&#39;#date&#39;).change()</code>不触发</h3><p>我本想用<code>$(&#39;#date&#39;).change(function()&#123;&#125;)</code>来在日期变化时做些处理，但我发现 laydate 的日期变化并没有触发 change 事件，十分奇怪。</p>
<p>解决办法：</p>
<p>在<code>layDate</code>的<code>change</code>或<code>done</code>的回调函数中手动触发<code>change</code>事件，即加入以下内容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#date&quot;</span>).<span class="title function_">change</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JQuery</tag>
        <tag>LayUI</tag>
      </tags>
  </entry>
  <entry>
    <title>事务传播机制和事务隔离级别</title>
    <url>/post/f38e6f1f.html</url>
    <content><![CDATA[<h4 id="事务的四个特性-ACID"><a href="#事务的四个特性-ACID" class="headerlink" title="事务的四个特性(ACID)"></a>事务的四个特性(ACID)</h4><ul>
<li><p>原子性<br>  事务执行开始之后的一系列操作都堪称是一个原子操作，要么全部做完，要么全部失败，不能出现部分操作成功的情况。“原子”顾名思义，就是一个不可分割的最小单元。</p>
</li>
<li><p>一致性<br>  事务开始执行之后，数据的正确性需要得到保证。如A向B转账，B却未收到钱。</p>
</li>
<li><p>隔离性<br>  同一时间只能由一个事务对数据进行修改操作，对于其他事务来说这个修改操作时透明的。</p>
</li>
<li><p>持久性<br>  事务对数据进行修改操作完成之后，数据发生的改变是持久不变的，不会自己恢复到改变之前的状态。</p>
</li>
</ul>
<span id="more"></span>
<h4 id="spring中的事务传播机制-以及事务隔离级别"><a href="#spring中的事务传播机制-以及事务隔离级别" class="headerlink" title="spring中的事务传播机制 以及事务隔离级别"></a>spring中的事务传播机制 以及事务隔离级别</h4><p><strong>在接口<code>TransactionDefinition</code>中，定义了7种传播机制</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 事务传播机制</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">PROPAGATION_REQUIRED</span> <span class="operator">=</span> <span class="number">0</span>;	</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_SUPPORTS</span> <span class="operator">=</span> <span class="number">1</span>;		</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_MANDATORY</span> <span class="operator">=</span> <span class="number">2</span>;		</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRES_NEW</span> <span class="operator">=</span> <span class="number">3</span>;		</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NOT_SUPPORTED</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NEVER</span> <span class="operator">=</span> <span class="number">5</span>;				</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NESTED</span> <span class="operator">=</span> <span class="number">6</span>;				</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 事务隔离级别</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_DEFAULT</span> <span class="operator">=</span> -<span class="number">1</span>;				<span class="comment">// 默认级别 </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_READ_UNCOMMITTED</span> <span class="operator">=</span> <span class="number">1</span>;		</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_READ_COMMITTED</span> <span class="operator">=</span> <span class="number">2</span>;		</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_REPEATABLE_READ</span> <span class="operator">=</span> <span class="number">4</span>;		</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_SERIALIZABLE</span> <span class="operator">=</span> <span class="number">8</span>;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="各种传播机制和隔离级别详解"><a href="#各种传播机制和隔离级别详解" class="headerlink" title="各种传播机制和隔离级别详解"></a>各种传播机制和隔离级别详解</h4><h5 id="事务传播机制"><a href="#事务传播机制" class="headerlink" title="事务传播机制"></a>事务传播机制</h5><table>
<thead>
<tr>
<th align="left">事务传播机制</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PROPAGATION_REQUIRED</td>
<td align="left">默认的 也是最常用的 ，如果当前有事务，就加入当前这个事务，如果没有事务，就新建一个事务</td>
</tr>
<tr>
<td align="left">PROPAGATION_SUPPORTS</td>
<td align="left">如果有事务，就加入当前这个事务，如果没有事务，也不新建</td>
</tr>
<tr>
<td align="left">PROPAGATION_MANDATORY</td>
<td align="left">如果有事务，就会使用当前这个事务，如果没有就会抛出异常</td>
</tr>
<tr>
<td align="left">PROPAGATION_REQUIRES_NEW</td>
<td align="left">总是会开启一个新的事务，如果当前已经有事务，就将当前事务挂起</td>
</tr>
<tr>
<td align="left">PROPAGATION_NOT_SUPPORTED</td>
<td align="left">代码总是会在非事务的环境执行，如果当前有事务，先将事务挂起，执行完成之后再恢复</td>
</tr>
<tr>
<td align="left">PROPAGATION_NEVER</td>
<td align="left">绝对不允许代码在有事务的环境执行，有事务就抛出异常停止执行</td>
</tr>
<tr>
<td align="left">PROPAGATION_NESTED</td>
<td align="left">嵌套事务级别：如果没有父事务，就使用默认机制，如果有，子事务执行完成之后父事务才会提交</td>
</tr>
</tbody></table>
<h5 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h5><table>
<thead>
<tr>
<th align="left">通俗名称</th>
<th align="left">事务隔离级别</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">脏读</td>
<td align="left">ISOLATION_READ_UNCOMMITTED</td>
<td align="left">读未提交 即脏读，可以读取别的事务已修改未提交的数据，会导致脏读、幻读和不可重复度</td>
</tr>
<tr>
<td align="left">不可重复读</td>
<td align="left">ISOLATION_READ_COMMITTED</td>
<td align="left">提交读    即不可重复读，一个事物能读取到另一个事务已经提交的数据，在多次读取同一数据时，该数据被另一事务修改，读取的数据不一致</td>
</tr>
<tr>
<td align="left">可重复读</td>
<td align="left">ISOLATION_REPEATABLE_READ</td>
<td align="left">可重复读 即一个事物只能读取到另一事务提交之前的数据，确保每次读取到的数据一致。但是数据又新增或者修改时不可预见</td>
</tr>
<tr>
<td align="left">幻读</td>
<td align="left">ISOLATION_SERIALIZABLE</td>
<td align="left">序列化读 即事务串行读取数据，性能最差，安全性最高，保证数据准确性</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>数据库</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>使用springboot进行国际化时自定义读取数据库配置</title>
    <url>/post/8c928c66.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>springboot默认就支持国际化的，而且不需要你过多的做什么配置，只需要在<code>resources/</code>下创建国际化配置文件即可，注意名称必须以messages开始。 messages.properties （默认的语言配置文件，当找不到其他语言的配置的时候，使用该文件进行展示）。 具体的关于springboot的国际化配置我这边就不再过多介绍(包括Locale的设置以及如何根据区域设置语言等)，关于页面上得使用可以参考：<a href="!https://www.baidu.com/s?word=springboot+%E5%9B%BD%E9%99%85%E5%8C%96">springboot国际化</a>。在这篇博客中，我要介绍的是一个很有用的功能并且绝大部分人也会用得到，就是<br><strong><font color=#0099ff size=5 face="黑体">不使用配置文件<code>messages.properties</code>储存国际化语言，而使用数据库进行动态配置，做到无需重启更改配置。</font></strong></p>
<span id="more"></span>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h4 id="MessageSource介绍"><a href="#MessageSource介绍" class="headerlink" title="MessageSource介绍"></a>MessageSource介绍</h4><p>Spring提供了一个接口MessageSource用于获取国际化信息，ReloadableResourceBundleMessageSource和ResourceBundleMessageSource都是继承了该接口的一个抽象实现类AbstractMessageSource，在spring官网有一段这样介绍messageSource的话：<br><img src="https://img-blog.csdn.net/20180116154941287?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDcyMTEzMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="spring官网对于messageSource的介绍" title="spring官网对于messageSource的介绍"><br>图中红框画起来的意思就是，上下文加载的时候会查询messageSource的bean，如果没有就会创建一个名为<code>messageSource</code>放在上下文中… …等等。</p>
<h4 id="在springboot中注入自定义messageSource"><a href="#在springboot中注入自定义messageSource" class="headerlink" title="在springboot中注入自定义messageSource"></a>在springboot中注入自定义messageSource</h4><p>通过上面的介绍，我们就可以自己定义自己的messageSource进行配置的读取了。<br> ** 我这边是把这个放在了业务层，大家用的时候也可以直接放在控制层(一般都放在控制层，要用到)，使用@Compnent(“messageSource”)注解声明下bean名称即可 **<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyMessageSourceService是我自己的接口 你也可以不需要。使用@Compnent(&quot;messageSource&quot;)注解就行</span></span><br><span class="line"><span class="meta">@Service(&quot;messageSource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageSource</span> <span class="keyword">extends</span> <span class="title class_">AbstractMessageSource</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span>, MyMessageSourceService &#123;</span><br><span class="line"></span><br><span class="line">    ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是用来缓存数据库中获取到的配置的 数据库配置更改的时候可以调用reload方法重新加载</span></span><br><span class="line">    <span class="comment">// 当然 实际使用者也可以不使用这种缓存的方式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Map&lt;String, String&gt;&gt; LOCAL_CACHE = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SysI18nService sysI18nService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyMessageSource.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.reload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新将数据库中的国际化配置加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reload</span><span class="params">()</span> &#123;</span><br><span class="line">        LOCAL_CACHE.clear();</span><br><span class="line">        LOCAL_CACHE.putAll(loadAllMessageResourcesFromDB());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库中获取所有国际化配置 这边可以根据自己数据库表结构进行相应的业务实现</span></span><br><span class="line"><span class="comment">     * 对应的语言能够取出来对应的值就行了 无需一定要按照这个方法来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Map&lt;String, String&gt;&gt; <span class="title function_">loadAllMessageResourcesFromDB</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;SysI18nBO&gt; list = sysI18nService.findList(<span class="keyword">new</span> <span class="title class_">SysI18nAO</span>());</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">final</span> Map&lt;String, String&gt; zhCnMessageResources = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(list.size());</span><br><span class="line">            <span class="keyword">final</span> Map&lt;String, String&gt; enUsMessageResources = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(list.size());</span><br><span class="line">            <span class="keyword">final</span> Map&lt;String, String&gt; idIdMessageResources = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(list.size());</span><br><span class="line">            <span class="keyword">for</span> (SysI18nBO bo : list) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> bo.getModel() + <span class="string">&quot;.&quot;</span> + bo.getName();</span><br><span class="line">                <span class="type">String</span> <span class="variable">zhText</span> <span class="operator">=</span> bo.getZhCn();</span><br><span class="line">                <span class="type">String</span> <span class="variable">enText</span> <span class="operator">=</span> bo.getEnUs();</span><br><span class="line">                <span class="type">String</span> <span class="variable">idText</span> <span class="operator">=</span> bo.getInId();</span><br><span class="line">                zhCnMessageResources.put(name, zhText);</span><br><span class="line">                enUsMessageResources.put(name, enText);</span><br><span class="line">                idIdMessageResources.put(name, idText);</span><br><span class="line">            &#125;</span><br><span class="line">            LOCAL_CACHE.put(<span class="string">&quot;zh&quot;</span>, zhCnMessageResources);</span><br><span class="line">            LOCAL_CACHE.put(<span class="string">&quot;en&quot;</span>, enUsMessageResources);</span><br><span class="line">            LOCAL_CACHE.put(<span class="string">&quot;in&quot;</span>, idIdMessageResources);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MapUtils.EMPTY_MAP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存中取出国际化配置对应的数据 或者从父级获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> locale</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSourceFromCache</span><span class="params">(String code, Locale locale)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">language</span> <span class="operator">=</span> locale.getLanguage();</span><br><span class="line">        Map&lt;String, String&gt; props = LOCAL_CACHE.get(language);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != props &amp;&amp; props.containsKey(code)) &#123;</span><br><span class="line">            <span class="keyword">return</span> props.get(code);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != <span class="built_in">this</span>.getParentMessageSource()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.getParentMessageSource().getMessage(code, <span class="literal">null</span>, locale);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                logger.error(ex.getMessage(), ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面三个重写的方法是比较重要的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = (resourceLoader == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>() : resourceLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> MessageFormat <span class="title function_">resolveCode</span><span class="params">(String code, Locale locale)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> getSourceFromCache(code, locale);</span><br><span class="line">        <span class="type">MessageFormat</span> <span class="variable">messageFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageFormat</span>(msg, locale);</span><br><span class="line">        <span class="keyword">return</span> messageFormat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">resolveCodeWithoutArguments</span><span class="params">(String code, Locale locale)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSourceFromCache(code, locale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p> 至此，自定义国际化配置读取数据库已经完成，只需要在更新数据库配置的时候调用一下reload重置一下缓存中的信息即可。</p>
<blockquote>
<p><a href="!https://blog.csdn.net/u014721131/article/details/79075802">参考博客：spring xml配置自定义读取数据库的messageSource</a></p>
</blockquote>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>国际化</tag>
      </tags>
  </entry>
  <entry>
    <title>layui结合freemarker+springboot进行前端数据表格字典转义</title>
    <url>/post/4e4b12bd.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在layui的开发中，我们经常会用到表格数据展示。但是在数据库中我们通常保存的一些状态等数据，都是枚举值，而我们在前端展示的时候就不能使用这些枚举值了，而要展示枚举值对应的意义数据。比如状态status，1&#x3D;启用，0&#x3D;停用。<br>那么在layui的数据表格中，我们要展示这样的数据，写法可以是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">templet</span>: <span class="keyword">function</span> (<span class="params">d</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(d.<span class="property">status</span> === <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;启用&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(d.<span class="property">status</span> === <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;停用&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这样的写法很low啊，我们在数据库中定义多少枚举值在这里就要写多少代码，一旦有重复使用的情况，这种写法会让我们痛不欲生。<br>在考虑到后台使用freemarker的情况下，配置freemarker自定义标签就能很好地解决这个问题。<br>最后我们的写法就会简化成：<code>&lt;@th type=&quot;template&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code>，接下来看看如何在springboot中配置使用吧。</p>
<span id="more"></span>
<h3 id="freemarker自定义标签介绍及使用"><a href="#freemarker自定义标签介绍及使用" class="headerlink" title="freemarker自定义标签介绍及使用"></a>freemarker自定义标签介绍及使用</h3><p><code>TemplateDirectiveModel</code>接口是freemarker自定标签或者自定义指令的核心处理接口。当模板页面遇到用户自定义的标签指令时，<code>execute()</code>方法会被执行。<code>execute()</code>方法如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(</span></span><br><span class="line"><span class="params">  Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body</span></span><br><span class="line"><span class="params">)</span> <span class="keyword">throws</span> TemplateException, IOException;</span><br></pre></td></tr></table></figure>
<p>我们在使用freemarker自定义标签的时候需要实现该接口并且重写execute方法。</p>
<h4 id="execute-方法参数解释"><a href="#execute-方法参数解释" class="headerlink" title="execute()方法参数解释"></a><code>execute()</code>方法参数解释</h4><ul>
<li><em>Environment env</em>：系统环境变量，通常用它来输出相关内容，如<code>Writer out = env.getOut();</code></li>
<li><em>Map params</em>：自定义标签传过来的对象，就是从页面上获取的参数，其key&#x3D;自定义标签的参数名，value值是TemplateModel类型，而TemplateModel是一个接口类型，通常我们都使用TemplateScalarModel接口来替代它获取一个String 值，如TemplateScalarModel.getAsString();当然还有其它常用的替代接口，如TemplateNumberModel获取number，TemplateHashModel等。<br>在本例使用时，我们会将map转成我们自己的对象进行数据保存。</li>
<li><em>TemplateModel[] loopVars</em>：循环替代变量</li>
<li><em>TemplateDirectiveBody body</em>：标签中嵌套的内容，如<code>&lt;@tag&gt;body&lt;/@tag&gt;</code>，就是这个body</li>
</ul>
<h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><h6 id="定义接收页面参数的对象"><a href="#定义接收页面参数的对象" class="headerlink" title="定义接收页面参数的对象"></a>定义接收页面参数的对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableThTag</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象属性名【需要进行对象属性获取】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String objName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字典标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="实现TemplateDirectiveModel接口并重写execute方法"><a href="#实现TemplateDirectiveModel接口并重写execute方法" class="headerlink" title="实现TemplateDirectiveModel接口并重写execute方法"></a>实现<code>TemplateDirectiveModel</code>接口并重写<code>execute</code>方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableThDirective</span> <span class="keyword">implements</span> <span class="title class_">TemplateDirectiveModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass().getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FreeMarker自定义指令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Environment environment, Map map, TemplateModel[] templateModels,</span></span><br><span class="line"><span class="params">                        TemplateDirectiveBody templateDirectiveBody)</span> <span class="keyword">throws</span> TemplateException, IOException &#123;</span><br><span class="line">        <span class="type">TableThTag</span> <span class="variable">tableThTag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableThTag</span>();</span><br><span class="line">        <span class="comment">//校验参数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//  用来将一些 key-value 的值（例如 hashmap）映射到 bean 中的属性</span></span><br><span class="line">            BeanUtils.populate(tableThTag, map);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(tableThTag.getNid()) || StringUtils.isEmpty(tableThTag.getType())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;nid,type不能为空&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;数据转化异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">html</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 根据类型创建不同的HTML生成器</span></span><br><span class="line">        <span class="type">ThFormatterInterface</span> <span class="variable">thFormatterInterface</span> <span class="operator">=</span> ThFormatterFactory.createThFormatter(tableThTag.getType());</span><br><span class="line">        <span class="keyword">if</span> (thFormatterInterface != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dictHtml</span> <span class="operator">=</span> thFormatterInterface.buildFormatterHtml(tableThTag.getNid(), tableThTag.getFieldName());</span><br><span class="line">            html.append(dictHtml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行真正指令的执行部分:</span></span><br><span class="line">        <span class="type">Writer</span> <span class="variable">out</span> <span class="operator">=</span> environment.getOut();</span><br><span class="line">        out.write(html.toString());</span><br><span class="line">        <span class="keyword">if</span> (templateDirectiveBody != <span class="literal">null</span>) &#123;</span><br><span class="line">            templateDirectiveBody.render(environment.getOut());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeansWrapper <span class="title function_">getBeansWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BeansWrapper</span> <span class="variable">beansWrapper</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BeansWrapperBuilder</span>(Configuration.VERSION_2_3_21).build();</span><br><span class="line">        <span class="keyword">return</span> beansWrapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大家可以看到，在这个方法中，我将页面上的参数转为<code>TableThTag </code>对象。然后再根据前端页面不同的type类型对应<br>实现了<code>ThFormatterInterface </code>的工厂对象，创建不同的html生成器。（这里考虑到扩展性，可能以后不光创建数据表格会用的到，比如下拉框什么的，也可以使用这种方式创建，所以在这里使用抽象工厂依据类型动态创建。）<br>下面就是创建html的具体工厂以及实现方法。</p>
<h6 id="ThFormatterInterface-抽象工厂创建html生成器"><a href="#ThFormatterInterface-抽象工厂创建html生成器" class="headerlink" title="ThFormatterInterface 抽象工厂创建html生成器"></a><code>ThFormatterInterface </code>抽象工厂创建html生成器</h6><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ThFormatterInterface</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造生成枚举html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">buildFormatterHtml</span><span class="params">(String nid, String fieldName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThFormatterFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ThFormatterFactory.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThFormatterInterface <span class="title function_">createThFormatter</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(type))&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">ThFormatterTemplate</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 文件名 如果type传template 就需要有一个名为ThFormatterTemplate的文件</span></span><br><span class="line">        <span class="comment">// 并且实现了ThFormatterInterface以及重写生成html的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;ThFormatter&quot;</span> + StringUtil.firstCharUpperCase(type);</span><br><span class="line">        <span class="comment">//类路径 通过反射去创建实现类</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.module.freemarker.impl.&quot;</span>+fileName;</span><br><span class="line">        <span class="comment">//生成表头格式实现类</span></span><br><span class="line">        <span class="type">ThFormatterInterface</span> <span class="variable">thFormatterInterface</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thFormatterInterface =(ThFormatterInterface) Class.forName(className).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> thFormatterInterface;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThFormatterTemplate</span> <span class="keyword">implements</span> <span class="title class_">ThFormatterInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">buildFormatterHtml</span><span class="params">(String nid, String fieldName)</span> &#123;</span><br><span class="line">        Assert.notEMPTY(nid, <span class="string">&quot;nid不能为空&quot;</span>);</span><br><span class="line">        Assert.notEMPTY(fieldName, <span class="string">&quot;objName不能为空&quot;</span>);</span><br><span class="line">        <span class="type">SysDictService</span> <span class="variable">sysDictService</span> <span class="operator">=</span> SpringContextHolder.getBean(SysDictService.class);</span><br><span class="line">        <span class="comment">// 通过nid查询字典类 这里不需要进行照抄 每个人都会有自己的实现方法</span></span><br><span class="line">        List&lt;SysDictBO&gt; sysDictModelList = sysDictService.findByPartnerNid(nid);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">dictHtml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 反正目的就是根据字典类生成对应的html就行了 需要生成的格式对照template原本应该有的写法就行了</span></span><br><span class="line">        dictHtml.append(<span class="string">&quot;templet: function(d)&#123; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SysDictBO sysDict : sysDictModelList) &#123;</span><br><span class="line">            dictHtml.append(<span class="string">&quot;if(d.&quot;</span> + fieldName + <span class="string">&quot; == &#x27;&quot;</span> + sysDict.getValue() + <span class="string">&quot;&#x27;)&#123; return &#x27;&quot;</span> + sysDict.getName() + <span class="string">&quot;&#x27;;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dictHtml.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dictHtml.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="最后将自定义标签注入到freemarker标签中去"><a href="#最后将自定义标签注入到freemarker标签中去" class="headerlink" title="最后将自定义标签注入到freemarker标签中去"></a>最后将自定义标签注入到freemarker标签中去</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreemarkerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TableThDirective tableThDirective;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSharedVariable</span><span class="params">()</span>&#123;</span><br><span class="line">        configuration.setSharedVariable(<span class="string">&quot;th&quot;</span>,tableThDirective);</span><br><span class="line">        configuration.setSharedVariable(<span class="string">&quot;shiro&quot;</span>,<span class="keyword">new</span> <span class="title class_">ShiroTags</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>这样就大功告成了。</p>
<p>在页面上进行使用吧：<code>&lt;@th type=&quot;template&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code></p>
<p>以后进行扩展什么的也方便，比如生成下拉框：<code>&lt;@th type=&quot;select&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code>这样然后自动生成html的时候查出来所有的字典，根据类型生成多个<option>出来就行了。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>开发日记</tag>
        <tag>springboot</tag>
        <tag>freemarker</tag>
        <tag>工厂模式</tag>
        <tag>layui</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker一键部署LNMP</title>
    <url>/post/1bb52c2e.html</url>
    <content><![CDATA[<p>之前一段时间，我已经把服务器上的应用全部 Docker 化了。我把我服务器上的 LNMP 配置，提取出来，来写一下如何用 Docker 部署一个最简单的 LNMP。</p>
<span id="more"></span>

<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>写了 docker-compose，放在了 Github 上，还有些简单的配置文件。</p>
<p>Github 项目地址: <a href="https://github.com/ZvonimirSun/dnmp">https://github.com/ZvonimirSun/dnmp</a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>通过 Docker 一键部署 LNMP。包含以下内容：</p>
<ul>
<li><code>nginx:alpine</code>:<ul>
<li>说明<ul>
<li>已支持<code>TLS 1.3</code></li>
</ul>
</li>
<li>网站目录: <code>./nginx/html</code>(docker 内<code>/usr/share/nginx/html</code>)</li>
<li>虚拟主机配置目录: <code>./nginx/conf.d</code>(docker 内<code>/etc/nginx/conf.d</code>)</li>
</ul>
</li>
<li><code>mysql:5</code><ul>
<li>数据库目录: <code>./mysql</code></li>
</ul>
</li>
<li><code>php:7-fpm-alpine</code>:<ul>
<li>说明<ul>
<li>基于初始镜像额外安装了<code>pdo_mysql</code>、<code>mysqli</code>、<code>gd</code>插件。</li>
<li>若想安装其他插件，请自行修改<code>Dockerfile</code>。</li>
</ul>
</li>
<li><code>php.ini</code>目录: <code>./php-fpm</code></li>
</ul>
</li>
<li>acme.sh:<ul>
<li>说明:<ul>
<li>用于申请 ssl 证书。</li>
<li>使用方法: 参考<a href="https://github.com/Neilpang/acme.sh">官方文档</a></li>
</ul>
</li>
<li>证书存储目录: <code>./ssl</code></li>
</ul>
</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>请确保已经安装<code>docker</code>和<code>docker-compose</code>。</li>
<li>将项目 clone 到本地</li>
<li>在<code>docker-compose.yml</code>文件中更改你需要的端口和数据库密码。</li>
<li>执行<code>docker-compose up -d</code>，并等待启动完成。</li>
</ul>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>Nginx:</p>
<ul>
<li>检查 Nginx 配置:<ul>
<li><code>docker exec nginx nginx -t</code></li>
</ul>
</li>
<li>Nginx 重载配置:<ul>
<li><code>docker exec nginx nginx -s reload</code></li>
</ul>
</li>
<li>配置:<ul>
<li>启用<code>php</code>: <code>include enable-php.conf</code></li>
<li>启用带<code>pathinfo</code>的<code>php</code>: <code>include enable-php-pathinfo.conf</code></li>
<li>启用<code>HSTS</code>: <code>add_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot; always;</code>(此句可根据需要适当调整)</li>
</ul>
</li>
</ul>
<p>php:</p>
<ul>
<li>安装插件(以 pdo_mysql 为例):<ul>
<li><code>docker exec php docker-php-ext-install pdo_mysql</code></li>
<li>最好修改<code>Dockerfile</code>实现，否则无法保留</li>
</ul>
</li>
<li>访问地址:<ul>
<li><code>docker</code>中访问<code>php</code>: <code>http://php:9000</code></li>
</ul>
</li>
</ul>
<p>mysql:</p>
<ul>
<li>访问地址<ul>
<li><code>docker</code>中访问<code>mysql</code>地址: <code>http://mysql:3306</code></li>
<li>宿主机访问<code>mysql</code>地址: <code>http://localhost:3306</code></li>
</ul>
</li>
<li>如需外部访问 mysql，请自行修改 mysql 的端口映射为<code>3306:3306</code>，并放开防火墙。</li>
<li>连接数据库: <code>docker-compose exec mysql mysql -u root -p</code></li>
</ul>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LNMP</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+shiro解决session污染的问题</title>
    <url>/post/cbe41a97.html</url>
    <content><![CDATA[<h4 id="同一个服务器启动多个web项目造成session污染"><a href="#同一个服务器启动多个web项目造成session污染" class="headerlink" title="同一个服务器启动多个web项目造成session污染"></a>同一个服务器启动多个web项目造成session污染</h4><p>昨天在敲代码的时候遇到了一个问题，同一个项目，我创建了两个分支，分别使用不同的端口。<br>但是在测试环境启动的时候我发现，在同一个浏览器上，我只能登陆其中的一个后台。在登陆另一个后台之后，前面那个<br>又需要再重新登陆了。</p>
<p>原因找了好久，最后F12控制台查看session发现，这两个web项目，使用的都是JSessionId作为cookie的key，在登陆另一个时，浏览器的这个cookie值就会被改变，所以前者就需要在重新登陆了。</p>
<span id="more"></span>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在springboot中，对shiro配置进行更改session保存时的cookie的key名称，如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public DefaultWebSessionManager sessionManager() &#123;</span><br><span class="line">    DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();</span><br><span class="line">    Cookie cookie = sessionManager.getSessionIdCookie();</span><br><span class="line">    cookie.setName(&quot;MySessionId&quot;);</span><br><span class="line">    return sessionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在<code>securityManager</code>中将我们的<code>sessionManager</code>注入进去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * SecurityManager，权限管理，这个类组合了登陆，登出，权限，session的处理，是个比较重要的类。</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public DefaultWebSecurityManager securityManager() &#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">    securityManager.setRealm(myShiroRealm());</span><br><span class="line">    securityManager.setSessionManager(sessionManager());</span><br><span class="line">    return securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只需要这样修改好就可以了。然后重启项目，就会发现，两个web项目都可以同时登陆了。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>shiro</tag>
        <tag>session污染</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js利用async实现sleep功能</title>
    <url>/post/dabcf18e.html</url>
    <content><![CDATA[<p>最近用 Node.js 的 request 调用我的一个 web api，循环访问速度太快，请求就会被丢弃。查找了一下 Node.js 中的 sleep 功能的实现方法，下面的这个方法，用起来效果很好，在此记录一下。</p>
<span id="more"></span>

<h2 id="方法记录"><a href="#方法记录" class="headerlink" title="方法记录"></a>方法记录</h2><h3 id="安装-async"><a href="#安装-async" class="headerlink" title="安装 async"></a>安装 async</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i async --save</span><br></pre></td></tr></table></figure>

<p>然后在你的文件开头引用此 package。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&quot;async&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="sleep-功能定义"><a href="#sleep-功能定义" class="headerlink" title="sleep 功能定义"></a>sleep 功能定义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> <span class="built_in">setTimeout</span>(res, <span class="number">2000</span>));</span><br></pre></td></tr></table></figure>

<p>可以把<code>2000</code>改为你需要的数字，单位为毫秒。</p>
<h3 id="调用-sleep"><a href="#调用-sleep" class="headerlink" title="调用 sleep"></a>调用 sleep</h3><p>在<code>async</code>方法中才能使用<code>await</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//some function</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>随便写个示例，可以类比着来。把 sleep 放在你需要暂停的位置上，外面要套上 async。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&quot;async&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> <span class="built_in">setTimeout</span>(res, <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>机场测速集合</title>
    <url>//page/speed-test-collection/</url>
    <content><![CDATA[<p>这里仅包含我手上保留有套餐或是官方提供的机场测速图，仅供参考。</p>
<span id="more"></span>

<h2 id="心阶云"><a href="#心阶云" class="headerlink" title="心阶云"></a>心阶云</h2><p><a href="https://url.iszy.xyz/xinjiebak">官网传送门</a></p>
<p><strong>SSR 线路测速</strong>（建议使用）</p>
<p>2020-08-07</p>
<p><img src="https://img.iszy.xyz/20210807130828.png" alt="SSR线路"></p>
<p><strong>V2ray 线路测速</strong></p>
<p><img src="https://img.iszy.xyz/20210807132104.png" alt="V2ray线路"></p>
<h2 id="CMYNetwork-红莓网络"><a href="#CMYNetwork-红莓网络" class="headerlink" title="CMYNetwork 红莓网络"></a>CMYNetwork 红莓网络</h2><p><a href="https://url.iszy.xyz/cmynetwork">官网传送门</a></p>
<p><img src="https://img.iszy.xyz/20210110160007.png"></p>
<h2 id="MEET"><a href="#MEET" class="headerlink" title="MEET"></a>MEET</h2><p><a href="https://url.iszy.xyz/fspeed">官网传送门</a></p>
<p><img src="https://img.iszy.xyz/20200815155833.png"></p>
<h2 id="DuangCloud"><a href="#DuangCloud" class="headerlink" title="DuangCloud"></a>DuangCloud</h2><p><a href="https://url.iszy.xyz/duangcloud">官网传送门</a></p>
<p><img src="https://img.iszy.xyz/20200502214205.png"></p>
<h2 id="ByWave"><a href="#ByWave" class="headerlink" title="ByWave"></a>ByWave</h2><p><a href="https://url.iszy.xyz/bywave">官网传送门</a></p>
<p><img src="https://img.iszy.xyz/20200815171242.png"></p>
<h2 id="Blinkload"><a href="#Blinkload" class="headerlink" title="Blinkload"></a>Blinkload</h2><p><a href="https://url.iszy.xyz/blinkload">官网传送门</a></p>
<p><img src="https://img.iszy.xyz/20210112210447.png"></p>
<h2 id="Electry"><a href="#Electry" class="headerlink" title="Electry"></a>Electry</h2><p><a href="https://url.iszy.xyz/electry">官网传送门</a></p>
<p>2021-08-07</p>
<p><img src="https://img.iszy.xyz/20210807123726.png"></p>
<h2 id="V2Club"><a href="#V2Club" class="headerlink" title="V2Club"></a>V2Club</h2><p><a href="https://url.iszy.xyz/lanan">官网传送门</a></p>
<p><img src="https://img.iszy.xyz/20201216180421.jpg"></p>
<h2 id="闲鱼网络"><a href="#闲鱼网络" class="headerlink" title="闲鱼网络"></a>闲鱼网络</h2><p><a href="https://url.iszy.xyz/dinastio">官网传送门</a></p>
<p><img src="https://img.iszy.xyz/20210308200608.png"></p>
<h2 id="Shuttle"><a href="#Shuttle" class="headerlink" title="Shuttle"></a>Shuttle</h2><p><a href="https://url.iszy.xyz/shuttle">官网传送门</a></p>
<p><img src="https://img.iszy.xyz/20210409220158.png"></p>
]]></content>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>小米MI6最新欧版(xiaomi.eu版)MIUI教程</title>
    <url>/post/88741093.html</url>
    <content><![CDATA[<p>最近刚买了小米手环 3 NFC 版，在手环上开好了公交卡，感觉对国内的 MIUI 版本再无留恋。早就想把手机刷成欧版 MIUI 了，碍于想要使用 NFC 公交卡，一直没有执行，现在终于没有牵绊了。现在我就来记录一下流程。注意，刷机前请备份好你的数据。</p>
<span id="more"></span>

<h2 id="解锁手机"><a href="#解锁手机" class="headerlink" title="解锁手机"></a>解锁手机</h2><p>MI6 的 bootloader 是带锁的，需要先到<a href="http://www.miui.com/unlock/index.html">申请解锁小米手机</a>上申请解锁，申请通过后，按照官网流程解锁即可。解锁成功后，手机开机画面最低端会显示<code>Unlocked</code>。</p>
<h2 id="刷-TWRP"><a href="#刷-TWRP" class="headerlink" title="刷 TWRP"></a>刷 TWRP</h2><p>刷第三方 ROM 之前，需要先通过 Fastboot 模式刷入第三方 Recovery，这里以 TWRP 为例。</p>
<h3 id="下载-adb"><a href="#下载-adb" class="headerlink" title="下载 adb"></a>下载 adb</h3><p>adb 全称 Android Debug Bridge，通过这个工具能够在连接的安卓设备上运行命令。</p>
<p><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">点击这里</a>，下载官方 adb 包。下载好后解压出来，会在文件夹中找到<code>adb.exe</code>、<code>fastboot.exe</code>等文件。</p>
<h3 id="下载-TWRP"><a href="#下载-TWRP" class="headerlink" title="下载 TWRP"></a>下载 TWRP</h3><p>TWRP 是一个很强大的第三方 Recovery，我们需要下载对应手机型号的 TWRP 镜像。点击<a href="https://dl.twrp.me/sagit/twrp-3.2.3-2-sagit.img">这里</a>下载 MI6 机型的镜像。</p>
<p>其他机型可以访问<a href="https://twrp.me/Devices/">Devices - TWRP</a>寻找，这里不再介绍。</p>
<h3 id="刷入-TWRP"><a href="#刷入-TWRP" class="headerlink" title="刷入 TWRP"></a>刷入 TWRP</h3><ol>
<li>将刚刚下载的镜像移动到<code>adb.exe</code>等文件的同一目录下，并重命名为<code>twrp.img</code>。</li>
<li>长按手机<code>电源键</code>和<code>下音量键</code>，直到屏幕上出现一个安卓小机器人，进入到 Fastboot 模式。</li>
<li>将手机用数据线连接刀电脑。</li>
<li>在<code>adb.exe</code>所在目录，按住<code>shift</code>并右键，点击<code>在此处打开Powershell窗口</code>&#x2F;<code>在此处打开CMD窗口</code>。</li>
<li>运行如下命令，刷入并重启到 TWRP Recovery。</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">fastboot.exe flash recovery twrp.img</span><br><span class="line">fastboot.exe boot twrp.img</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载系统"><a href="#下载系统" class="headerlink" title="下载系统"></a>下载系统</h3><p>在这里我直接提供一下，我下载的版本的下载链接。</p>
<p>点击下载: <a href="https://jaist.dl.sourceforge.net/project/xiaomi-eu-multilang-miui-roms/xiaomi.eu/MIUI-WEEKLY-RELEASES/9.2.21/xiaomi.eu_multi_MI6_9.2.21_v10-8.0.zip">xiaomi.eu_multi_MI6_9.2.21_v10-8.0.zip</a></p>
<p>其他机型或更新版本，请去<a href="https://xiaomi.eu/community/">xiaomi.eu</a>寻找。</p>
<h3 id="格式化手机"><a href="#格式化手机" class="headerlink" title="格式化手机"></a>格式化手机</h3><p>进入 TWRP 以后，点击<code>Wipe</code>-<code>Format Data</code>，输入<code>yes</code>并确定，这将格式化手机内部存储并清除<code>data</code>分区的加密。</p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>接下来将下载好的系统安装包(zip 格式)拷贝到手机内部目录，当然通过 U 盘插到手机上也是可以的，TWRP 支持使用 MTP 存储。</p>
<p>点击<code>Install</code>，然后选择之前拷贝进去的 zip 包，滑动滑块开始安装。安装完成后，重启即可开始使用新系统。</p>
<p>注意，可能需要登录 Google，自行解决科学上网环境。</p>
<h3 id="ROOT-选"><a href="#ROOT-选" class="headerlink" title="ROOT(选)"></a>ROOT(选)</h3><p>推荐使用 <a href="https://github.com/topjohnwu/Magisk/releases/">Magisk</a>。下载最新 Release 的 zip 安装包，通过 TWRP 直接刷入即可。卸载也是很简单的，下载对应版本<code>Magisk-uninstaller</code>的 zip 包，刷入即可。需要安装 Magisk Manager 进行管理，<a href="https://github.com/topjohnwu/Magisk/releases/download/manager-v7.0.0/MagiskManager-v7.0.0.apk">点击这里</a>下载。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>MIUI</tag>
        <tag>TWRP</tag>
        <tag>MI6</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Docker部署acme.sh</title>
    <url>/post/4aa1535f.html</url>
    <content><![CDATA[<p>本文介绍一下如何通过 Docker 部署 acme.sh 申请证书，并添加 crontab 任务自动更新证书。</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近觉得这个 <code>Docker</code> 超好用啊，<code>docker-compose</code> 也是个神器，折腾了半天，把服务器上跑的所有应用都 docker 化了，用一个 <code>docker-compose.yml</code> 统一管理，怎一个爽字了得。</p>
<p>今天才把 acme.sh 替换成 docker，在此记录一下。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><p>在此以 Ubuntu 为例，其他系统请自己找下方法，教程很多，很容易的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sudo sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意把username换成你自己的用户名，root用户请忽略</span></span><br><span class="line">sudo usermod -aG docker username</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<h3 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h3><p><code>docker-compose</code>作为一个 python 应用，也是可以直接用容器来执行的，下面来安装一下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.23.2/run.sh &gt; /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>下面可以运行一下<code>docker-compose version</code>来检测一下是否成功，第一次运行 docker-compose 命令会自动拉取<code>docker/compose:1.23.2</code>镜像。</p>
<p>安装成功会显示如下内容，可能会与我有些差异。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose version 1.23.2, build 1110ad01</span><br><span class="line">docker-py version: 3.6.0</span><br><span class="line">CPython version: 3.6.7</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0f  25 May 2017</span><br></pre></td></tr></table></figure>

<h2 id="部署-acme-sh"><a href="#部署-acme-sh" class="headerlink" title="部署 acme.sh"></a>部署 acme.sh</h2><h3 id="编写-docker-compose-yml"><a href="#编写-docker-compose-yml" class="headerlink" title="编写 docker-compose.yml"></a>编写 docker-compose.yml</h3><p>本文使用一个<code>docker-compose.yml</code>文件来部署 acme.sh，不使用 docker-compose 的方法呢，请看<a href="https://github.com/Neilpang/acme.sh/wiki/Run-acme.sh-in-docker">官方给出的方法</a>。</p>
<p>在你想要的位置运行如下命令创建<code>docker-compose.yml</code>文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>编辑此文件，加入如下内容。需要使用 dns api 的请参考注释中的添加方法添加环境变量，如果有什么类似 CloudXNS 的 IP 白名单记得要加好。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  acme.sh:</span><br><span class="line">    image: neilpang/acme.sh</span><br><span class="line">    container_name: acme.sh</span><br><span class="line">    restart: always</span><br><span class="line">    command: daemon</span><br><span class="line">    #environment:</span><br><span class="line">    #  - CX_Key=&quot;XXXXXXXXXX&quot;</span><br><span class="line">    #  - CX_Secret=&quot;XXXXXXXXXX&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./ssl:/acme.sh</span><br><span class="line">    network_mode: host</span><br></pre></td></tr></table></figure>

<p>保存后在<code>docker-compose.yml</code>同目录下运行如下命令启动 acme.sh。如果更改了<code>docker-compose.yml</code>文件，只要在此运行如下命令，就能够更新到最新状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><p>所有 acme.sh 的正常命令都能够正常使用，需要做一点小小的更改，比如我演示一下使用 CloudXNS API 申请本站的 ECC 泛域名证书，其他命令也类似进行。由于我的 container_name 也是 acme.sh，所以可以直接使用 docker 而非 docker-compose 命令运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec acme.sh --issue --dns dns_cx -d iszy.cc -d &#x27;*.iszy.cc&#x27; --keylength ec-384</span><br></pre></td></tr></table></figure>

<p>也可以添加一条 alias 来像往常一样运行 acme.sh，可以将这句添加到<code>.bashrc</code>或<code>.zshrc</code>文件中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias acme.sh=&quot;docker exec acme.sh&quot;</span><br></pre></td></tr></table></figure>

<h3 id="设置-crontab-任务自动续签"><a href="#设置-crontab-任务自动续签" class="headerlink" title="设置 crontab 任务自动续签"></a>设置 crontab 任务自动续签</h3><p>运行<code>crontab -e</code>来编辑 crontab 文件，添加如下内容，保存即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 * * * docker exec acme.sh --cron</span><br></pre></td></tr></table></figure>

<p>可以运行<code>crontab -e</code>来查看已经添加的 crontab 任务。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>所以，这就部署好了，还是很方便的，尤其是在你的 VPS 上有不少 docker，并统一使用 docker-compose 进行管理的时候。有兴趣的可以这么折腾一下啦。</p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
        <tag>SSL</tag>
        <tag>acme.sh</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Docker部署Posgresql+Geoserver环境</title>
    <url>/post/7f930cef.html</url>
    <content><![CDATA[<p>本文介绍一下如何通过 Docker 部署 <code>Postgresql</code> + <code>PostGIS</code> + <code>Geoserver</code> 环境。本文操作在 Ubuntu 18.04 中完成，理论上适用于其他可用 Docker 的系统环境。</p>
<span id="more"></span>

<h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>Docker 的安装很简单，教程很多，在这里只列举一下，Ubuntu 和 CentOS 的安装脚本。</p>
<ul>
<li>Ubuntu: <code>wget -qO- https://get.docker.com/ | sudo sh</code></li>
<li>CentOS: <code>curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh</code></li>
</ul>
<h2 id="安装-Postgresql-PostGIS"><a href="#安装-Postgresql-PostGIS" class="headerlink" title="安装 Postgresql + PostGIS"></a>安装 Postgresql + PostGIS</h2><p>在这里使用 kartoza 大佬的 docker 镜像<code>kartoza/postgis:10.0-2.4</code>。</p>
<h3 id="镜像说明"><a href="#镜像说明" class="headerlink" title="镜像说明"></a>镜像说明</h3><ul>
<li>Postgresql: <code>10.3.1</code></li>
<li>PostGIS: <code>2.4.4</code></li>
</ul>
<p>项目地址：<code>https://github.com/kartoza/docker-postgis</code></p>
<h3 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h3><p>运行以下命令部署 Postgresql + PostGis，注意替换命令中的用户名和密码。还有更多环境变量可用，亦可选择其他镜像版本可以参考项目 <a href="https://github.com/kartoza/docker-postgis/blob/develop/README.md">README</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~ &amp;&amp; mkdir postgres_data</span><br><span class="line">docker run --name &quot;postgis&quot; -p 5432:5432 -d -t -v $HOME/postgres_data:/var/lib/postgresql -e POSTGRES_USER=&quot;postgres&quot; -e POSTGRES_PASS=&quot;postgres&quot; -e ALLOW_IP_RANGE=0.0.0.0/0 --restart=always kartoza/postgis:10.0-2.4</span><br></pre></td></tr></table></figure>

<h2 id="安装-Geoserver"><a href="#安装-Geoserver" class="headerlink" title="安装 Geoserver"></a>安装 Geoserver</h2><p>在这里使用我 build 的 docker 镜像<code>zvonimirsun/geoserver:2.14.2</code>。</p>
<h3 id="镜像说明-1"><a href="#镜像说明-1" class="headerlink" title="镜像说明"></a>镜像说明</h3><ul>
<li>Geoserver: <code>2.14.2</code></li>
<li>oraclejdk: <code>8</code></li>
<li>tomcat: <code>8.0-jre8</code></li>
</ul>
<p>项目地址：<code>https://github.com/ZvonimirSun/docker-geoserver</code></p>
<p>本项目 fork 自 kartoza 大佬的<a href="https://github.com/kartoza/docker-geoserver">项目</a>，修复了命令中的一个不知道为何会存在的一个低级错误，替换了过期的下载链接。我只 build 了<code>2.14.2</code>的版本，使用了 oraclejdk8。想要旧版本 geoserver 的可以看 kartoza 大佬的<a href="https://hub.docker.com/r/kartoza/geoserver/tags">镜像</a>，现在的最新版本为<code>geoserver 2.13.0</code>，默认使用的是 openjdk。如果仍旧不是自己想要的版本或是要添加插件，可以根据 <a href="https://github.com/ZvonimirSun/docker-geoserver/blob/master/README.md">README</a> 自行 build。</p>
<h3 id="部署命令-1"><a href="#部署命令-1" class="headerlink" title="部署命令"></a>部署命令</h3><p>运行以下命令部署 Geoserver，注意替换命令中的用户名和密码。还有更多环境变量可用，可以参考项目 <a href="https://github.com/ZvonimirSun/docker-geoserver/blob/master/README.md">README</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~ &amp;&amp; mkdir geoserver_data</span><br><span class="line">docker run -d -p 8080:8080 --name geoserver -v $HOME/geoserver_data:/opt/geoserver/data_dir zvonimirsun/geoserver:2.14.2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>GIS</tag>
        <tag>Postgresql</tag>
        <tag>PostGIS</tag>
        <tag>GeoServer</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Docker快速部署FileBrowser 2.0</title>
    <url>/post/2a6ece32.html</url>
    <content><![CDATA[<p>File Browser 作为一款远端文件浏览器，可以把你的服务器轻松地变为私人网盘。今天我就来简单介绍一下，如何通过 Docker 轻松部署 File Browser 2.0。</p>
<span id="more"></span>

<h2 id="File-Browser-简介"><a href="#File-Browser-简介" class="headerlink" title="File Browser 简介"></a>File Browser 简介</h2><p>File Browser 可以在指定目录中提供文件管理界面，可以上传、删除、预览、重命名和编辑文件。 它允许创建多个用户，每个用户都可以拥有自己的目录。 它可以用作独立应用程序或中间件。</p>
<p>功能概览：</p>
<ul>
<li>简单好用的登录系统</li>
<li>通过流畅的界面管理文件</li>
<li>管理用户，添加权限，设置文件范围</li>
<li>编辑文件</li>
<li>执行自定义命令</li>
<li>个性化界面</li>
</ul>
<h2 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h2><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>Docker 的安装很简单，教程很多，在这里只列举一下，Ubuntu 和 CentOS 的安装脚本。</p>
<ul>
<li>Ubuntu: <code>wget -qO- https://get.docker.com/ | sudo sh</code></li>
<li>CentOS: <code>curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh</code></li>
</ul>
<h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>如果要自定义设置的话，那就要创建一个配置文件，注意配置文件中的路径都是 Docker 容器中的虚拟路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi filebrowser.json</span><br></pre></td></tr></table></figure>

<p>我的配置文件内容如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;baseURL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stdout&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/database.db&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/srv&quot;</span><span class="punctuation">,</span> <span class="comment">// 文件管理根目录</span></span><br><span class="line">  <span class="attr">&quot;cert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/ssl.cer&quot;</span><span class="punctuation">,</span> <span class="comment">// 如果不需要 https 请去掉</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/ssl.key&quot;</span> <span class="comment">//   cert 和 key 两行配置</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果需要更多配置内容，请参考<a href="https://docs.filebrowser.xyz/cli/filebrowser-config-set">官方文档</a>。</p>
<h3 id="创建一个-db-文件"><a href="#创建一个-db-文件" class="headerlink" title="创建一个 db 文件"></a>创建一个 db 文件</h3><p>如果需要长久化存储账号配置等信息，需要提前创建一个空的 db 文件用于存储。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch database.db</span><br></pre></td></tr></table></figure>

<h3 id="启动-File-Browser"><a href="#启动-File-Browser" class="headerlink" title="启动 File Browser"></a>启动 File Browser</h3><p>使用如下命令启动 File Browser。注意替换所有<code>:</code>前的路径为你自己的路径，<code>:</code>后的路径为 docker 容器中的虚拟路径，不要修改。可以把 8888 改成任意你想要的端口。如果上面配置文件里面没有写 https 配置的话，可以不用加上证书和密钥的映射。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-v /your/path:/srv \</span><br><span class="line">-v /your/path/to/example.cer:/ssl.cer \</span><br><span class="line">-v /your/path/to/example.key:/ssl.key \</span><br><span class="line">-v /your/path/to/database.db:/database.db \</span><br><span class="line">-v /your/path/to/filebrowser.json:/.filebrowser.json \</span><br><span class="line">-p 8888:80 \</span><br><span class="line">--name filebrowser \</span><br><span class="line">--restart=always \</span><br><span class="line">filebrowser/filebrowser</span><br></pre></td></tr></table></figure>

<p>访问你的浏览器，现在应该可以开始使用了。如果通过外网访问，别忘了在防火墙打开端口。</p>
<p><img src="https://img.iszy.xyz/20190318213056.png" alt="File Browser"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><p>这里的管理指的是在服务器上对 File Browser 进行管理，File Browser 内的操作我就不再赘述了。</p>
<ul>
<li>关闭 File Browser: <code>docker stop filebrowser</code></li>
<li>开启 File Browser: <code>docker start filebrowser</code></li>
<li>卸载 File Browser: <code>docker rm filebrowser</code></li>
</ul>
<h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>如果需要外网访问，需要在服务器上打开端口，以上面的<code>8888</code>端口为例。</p>
<p>这里仅举例 iptables 和 ufw 的操作。</p>
<h4 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp --dport 8888 -j ACCEPT</span><br><span class="line">sudo iptables -A OUTPUT -p tcp --sport 8888 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h4 id="ufw"><a href="#ufw" class="headerlink" title="ufw"></a>ufw</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 8888</span><br></pre></td></tr></table></figure>

<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>好了，以上就是通过 Docker 在 Linux 系统上安装以及使用 File Browser 的方法。既然是 Docker，那么在其他支持 Docker 的平台也是可以用的，Docker 部分的操作是一致的。</p>
<p>有更多问题，欢迎在评论区留言。</p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>文件管理</tag>
      </tags>
  </entry>
  <entry>
    <title>用标准方式升级Ubuntu内核并启用BBR</title>
    <url>/post/1fd90d9d.html</url>
    <content><![CDATA[<p>Google 的 TCP BBR 拥塞控制算法能够有效地提高网速，根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上网速甚至可以提升好几个数量级。从 4.9 开始，Linux 内核已经用上了该算法，但是不少 VPS 的内核甚至还停留在 4.4，更不要说开启 BBR 了。这篇文章就来讲一下，在 Ubuntu 上如何以标准的方式优雅地升级系统内核，并开启 BBR。</p>
<span id="more"></span>

<h2 id="BBR"><a href="#BBR" class="headerlink" title="BBR"></a>BBR</h2><h3 id="BBR-简介"><a href="#BBR-简介" class="headerlink" title="BBR 简介"></a>BBR 简介</h3><blockquote>
<p>参考来源: <a href="https://zh.wikipedia.org/wiki/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6#TCP_BBR">TCP 拥塞控制 - 维基百科，自由的百科全书</a></p>
</blockquote>
<p>TCP BBR（Bottleneck Bandwidth and Round-trip propagation time）是由 Google 设计，于 2016 年发布的拥塞算法。该算法使用网络最近出站数据分组当时的最大带宽和往返时间来创建网络的显式模型。数据包传输的每个累积或选择性确认用于生成记录在数据包传输过程和确认返回期间的时间内所传送数据量的采样率。Google 在 YouTube 上应用该算法，将全球平均的 YouTube 网络吞吐量提高了 4%，在一些国家超过了 14%。BBR 之后移植入 Linux 内核 4.9 版本，并且对于 QUIC 可用。</p>
<h3 id="监测-BBR-是否开启"><a href="#监测-BBR-是否开启" class="headerlink" title="监测 BBR 是否开启"></a>监测 BBR 是否开启</h3><p>在 VPS 上运行以下命令来返回可用的 TCP 拥塞控制算法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>

<p>如果返回的内容中没有 bbr 字样，比如类似以下的内容，则不能开启。反之，则可以开启，直接跳到后文启用 BBR 部分即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = reno cubic</span><br></pre></td></tr></table></figure>

<p>在 VPS 上运行以下命令来返回现在正在使用的 TCP 拥塞控制算法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>

<p>如果返回的内容中没有 bbr 字样，比如类似以下的内容，则表示未开启 BBR。反之，则表示你的 VPS 已经开启了 BBR，你已经大功告成了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_congestion_control = cubic</span><br></pre></td></tr></table></figure>

<h2 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h2><h3 id="查看当前内核版本"><a href="#查看当前内核版本" class="headerlink" title="查看当前内核版本"></a>查看当前内核版本</h3><p>由于 BBR 只能在 4.9 以上的内核中开启，如果内核低于 4.9 版本，则需要升级内核，4.9 版本以上的就可以跳过这一步了。据我所知，国内云主机很多默认镜像还是 4.4 的内核。输入<code>uname -r</code>可以查看当前的内核版本。</p>
<h3 id="通过-APT-升级内核"><a href="#通过-APT-升级内核" class="headerlink" title="通过 APT 升级内核"></a>通过 APT 升级内核</h3><p>很多开启 BBR 的一键脚本都是手动下载新内核并编译安装的，但是手动升级内核存在着安全隐患，而且无法及时得到更新。</p>
<p>其实 Ubuntu 官方提供了升级最新内核的方式，那就是<code>linux-hwe-generic</code>软件包。Ubuntu 通过 apt 包管理工具提供了两个内核版本，一个是通用版本(General Availability&#x2F;GA)，即最稳定的版本；一个是硬件启用版本(Hardware Enablement&#x2F;HWE)，会跟随最新的内核更新。</p>
<p>我们可以通过输入<code>apt search linux-generic</code>看到这两个软件包。其实那些内核版本旧的装的就是<code>linux-generic</code>这个最稳定版本。</p>
<p>那么好了，这样就很明了了，我们就要安装<code>linux-generic-hwe</code>包即可，可以将 Ubuntu 升级为当前版本可用的最新稳定内核。Ubuntu 16.04 的包叫<code>linux-generic-hwe-16.04</code>，Ubuntu 18.04 的包叫<code>linux-generic-hwe-18.04</code>，可以以此类推。以 Ubuntu 16.04 为例，输入以下命令进行安装即可，重启后才会生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install linux-generic-hwe-16.04 -y</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<p>重启后，我们可以再次输入<code>uname -r</code>查看一下内核版本，我们可以看到，此时我的 Ubuntu 16.04 已经是 4.15 版本的内核了。</p>
<p>大家可能看到了还有一个叫做<code>linux-generic-hwe-16.04-edge</code>的包，那是做什么的呢？这个呢就相当于测试版吧，如果你想要使用更加新的内核，可以使用这个包。</p>
<h2 id="启用-BBR"><a href="#启用-BBR" class="headerlink" title="启用 BBR"></a>启用 BBR</h2><h3 id="装载-BBR"><a href="#装载-BBR" class="headerlink" title="装载 BBR"></a>装载 BBR</h3><p>此时，虽然内核已经升级好了，但还没有正式装载 BBR 模块，还无法在可用拥塞算法中查到。运行以下命令装载 BBR。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo modprobe tcp_bbr</span><br><span class="line">echo &quot;tcp_bbr&quot; | sudo tee -a /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure>

<p>此时，输入<code>sysctl net.ipv4.tcp_available_congestion_control</code>命令，就能看到 bbr 了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br></pre></td></tr></table></figure>

<h3 id="正式启用-BBR"><a href="#正式启用-BBR" class="headerlink" title="正式启用 BBR"></a>正式启用 BBR</h3><p>执行以下命令，将 BBR 配置写入 sysctl.conf 文件，正式启用 BBR。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; | sudo tee -a /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; | sudo tee -a /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure>

<p>此时，BBR 已经启用完成，通过<code>sysctl net.ipv4.tcp_congestion_control</code>验证一下，可以看到现在使用的拥塞算法已经是 BBR 了，如图所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure>

<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>至此，已经完成了 Ubuntu 系统的内核升级和 TCP_BBR 的开启，享受高速网络吧。关于内核提升，虽然编译内核升级的方式也是有效的，但是还是更加推荐通过 APT 的方式升级内核。这既是官方推荐的方式，也是不容易出现问题的方式，还能跟随更新，何乐而不为呢。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>VPS</tag>
        <tag>BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux自建KMS服务器</title>
    <url>/post/49e6adb5.html</url>
    <content><![CDATA[<p>今天来简单介绍一下如何自建 KMS 激活 Windows 以及 Office。不想自己部署的也可以直接跳到<a href="#%E6%BF%80%E6%B4%BB">激活</a>，我提供了自建的 KMS 地址，大家可以使用。</p>
<span id="more"></span>

<h2 id="KMS-简介"><a href="#KMS-简介" class="headerlink" title="KMS 简介"></a>KMS 简介</h2><p>KMS 是一种专为中型和大型企业设计的 Microsoft 产品的激活方法。 在标准 SOHO 环境中，您在安装期间输入产品密钥，然后通过 Internet 激活产品。这是通过向<code>microsoft.com</code>上的服务器发送请求来完成的，然后该服务器授予或拒绝激活。</p>
<p>通过输入称为通用批量许可证密钥（GVLK）的特殊密钥（又名“KMS 客户端密钥”），产品不再要求 Microsoft 服务器进行激活，而是通常驻留在公司内部网中的用户定义服务器（称为 KMS 服务器）。 Microsoft 仅将其 KMS 服务器提供给签署了所谓“选择合同”的公司。</p>
<p>KMS 激活大家应该比较熟悉，网上的激活工具基本都是使用 KMS 激活的，激活的期限一般是 180 天。不过激活工具相当于开了一个 KMS 服务器运行在你的电脑上，每过 180 天，系统会自动连接激活服务器进行激活，所以只要 KMS 服务器还在就不用担心失效的问题。如果 KMS 不在了，换一个即可，180 天总能找到一个，或者像本文这样自建一个就不怕失效了。</p>
<h2 id="vlmscd-介绍和安装"><a href="#vlmscd-介绍和安装" class="headerlink" title="vlmscd 介绍和安装"></a>vlmscd 介绍和安装</h2><p>vlmcsd 是完全与 Microsoft 兼容的 KMS 服务器，是 KMS 服务器的一个独立开源实现，可供所有人使用。可为客户端提供产品激活服务，是 Microsoft KMS 服务器的直接替代品。可以在 Windows 和 Linux 上运行。可以运行在大多数嵌入式系统上，如路由器，NAS，移动电话，平板电脑，电视，机顶盒等。相对于 Microsoft KMS 服务器仅激活客户已支付的产品，vlmcsd 从不拒绝激活。</p>
<p>虽然 vlmcsd 既不需要激活密钥也不需要付费，但它并不是宣扬盗版 Windows。 其目的是确保合法副本的所有者可以无限制地使用他们的软件。例如，如果购买新计算机或主板，由于硬件更改，密钥将无法从 Microsoft 服务器激活，这种情况下可以通过使用 vlmcsd 激活来继续使用。</p>
<p>项目地址：<a href="https://github.com/Wind4/vlmcsd">Wind4&#x2F;vlmcsd</a></p>
<h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>为了避免系统环境不同引发未知问题，在这里使用 Docker。</p>
<p>Ubuntu 安装脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>

<p>CentOS 安装脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>

<h3 id="安装-vlmscd"><a href="#安装-vlmscd" class="headerlink" title="安装 vlmscd"></a>安装 vlmscd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mikolatero/vlmcsd</span><br><span class="line">docker run -d -p 1688:1688 --restart=always --name=<span class="string">&quot;vlmcsd&quot;</span> mikolatero/vlmcsd</span><br></pre></td></tr></table></figure>

<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>需要打开 1688 端口供 vlmcsd 使用。在这里举两个常用的。</p>
<h4 id="UFW"><a href="#UFW" class="headerlink" title="UFW"></a>UFW</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw allow 1688</span><br></pre></td></tr></table></figure>

<h4 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 1688 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 1688 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>在此我提供一下我个人使用的 KMS 服务器，不想自行安装的可以使用以下服务器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KMS服务器: kms.iszy.xyz</span><br><span class="line">端口: 1688</span><br></pre></td></tr></table></figure>

<h3 id="激活-Windows"><a href="#激活-Windows" class="headerlink" title="激活 Windows"></a>激活 Windows</h3><p>用管理员权限打开 cmd(命令提示符)，输入以下命令。</p>
<h4 id="配置-GVLK"><a href="#配置-GVLK" class="headerlink" title="配置 GVLK"></a>配置 GVLK</h4><p>一般情况下，新装的系统，没有输入过其他 key 的，系统会自带 GVLK，可以忽略此步，当然做了也没有影响。输入过其他 key 的则需要此步。</p>
<p>将以下命令中的 Key 替换成对应系统版本的 Key。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#slmgr /ipk GVLK</span></span><br><span class="line"><span class="comment">#Example:</span></span><br><span class="line">slmgr /ipk GCRJD<span class="literal">-8NW9H-F2CDX-CCM8D-9D6T9</span></span><br></pre></td></tr></table></figure>

<p>部分 GVLK 列表</p>
<table>
<thead>
<tr>
<th align="center">GVLK</th>
<th align="left">系统版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TX9XD-98N7V-6WMQ6-BX7FG-H8Q99</td>
<td align="left">Windows 10 Home</td>
</tr>
<tr>
<td align="center">3KHY7-WNT83-DGQKR-F7HPR-844BM</td>
<td align="left">Windows 10 Home N</td>
</tr>
<tr>
<td align="center">7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH</td>
<td align="left">Windows 10 Home Single Language</td>
</tr>
<tr>
<td align="center">PVMJN-6DFY6-9CCP6-7BKTT-D3WVR</td>
<td align="left">Windows 10 Home Country Specific</td>
</tr>
<tr>
<td align="center">789NJ-TQK6T-6XTH8-J39CJ-J8D3P</td>
<td align="left">Windows 8.1 Professional with Media Center</td>
</tr>
<tr>
<td align="center">M9Q9P-WNJJT-6PXPY-DWX8H-6XWKK</td>
<td align="left">Windows 8.1 Core</td>
</tr>
<tr>
<td align="center">7B9N3-D94CG-YTVHR-QBPX3-RJP64</td>
<td align="left">Windows 8.1 Core N</td>
</tr>
<tr>
<td align="center">BB6NG-PQ82V-VRDPW-8XVD2-V8P66</td>
<td align="left">Windows 8.1 Core Single Language</td>
</tr>
<tr>
<td align="center">NCTT7-2RGK8-WMHRF-RY7YQ-JTXG3</td>
<td align="left">Windows 8.1 Core Country Specific</td>
</tr>
<tr>
<td align="center">GNBB8-YVD74-QJHX6-27H4K-8QHDG</td>
<td align="left">Windows 8 Professional with Media Center</td>
</tr>
<tr>
<td align="center">BN3D2-R7TKB-3YPBD-8DRP2-27GG4</td>
<td align="left">Windows 8 Core</td>
</tr>
<tr>
<td align="center">8N2M2-HWPGY-7PGT9-HGDD8-GVGGY</td>
<td align="left">Windows 8 Core N</td>
</tr>
<tr>
<td align="center">2WN2H-YGCQR-KFX6K-CD6TF-84YXQ</td>
<td align="left">Windows 8 Core Single Language</td>
</tr>
<tr>
<td align="center">4K36P-JN4VD-GDC6V-KDT89-DYFKP</td>
<td align="left">Windows 8 Core Country Specific</td>
</tr>
</tbody></table>
<p>更多 GVLK<a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys">点击这里</a>查看。</p>
<h4 id="配置使用-KMS-服务器"><a href="#配置使用-KMS-服务器" class="headerlink" title="配置使用 KMS 服务器"></a>配置使用 KMS 服务器</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># slmgr /skms kms-server[:tcp-port]</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line">slmgr /skms kms.iszy.xyz:<span class="number">1688</span></span><br></pre></td></tr></table></figure>

<p>将 IP 换成你的 vlmscd 所在服务器即可。1688 是默认端口，如果之前是按照本文进行配置，此端口可以不写。</p>
<h4 id="进行激活"><a href="#进行激活" class="headerlink" title="进行激活"></a>进行激活</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure>

<p>等待一会儿会看到激活成功的提示。</p>
<p>可以输入以下命令查看激活状态，一般显示<code>批量激活将于 xxxx/x/x xx:xx:xx 过期</code>，一般是 180 天或 45 天的有效期。过期后，如果 KMS 服务器还在，会自动续期的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">slmgr /xpr</span><br></pre></td></tr></table></figure>

<h3 id="激活-Office"><a href="#激活-Office" class="headerlink" title="激活 Office"></a>激活 Office</h3><p>你需要安装 Vol 版 Office 才能使用 KMS。可以去<a href="https://msdn.itellyou.cn/">MSDN</a>上找一找，一般 Vol 版的文件都带 VL，文件名一般以 SW 开头。</p>
<h4 id="配置-GVLK-1"><a href="#配置-GVLK-1" class="headerlink" title="配置 GVLK"></a>配置 GVLK</h4><p>同样，没装过 key 的，一般可以忽略此步。</p>
<p>将以下命令中的 Key 替换成对应软件版本的 Key。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> exist <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office14\ospp.vbs&quot;</span> (<span class="built_in">cd</span> <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office14&quot;</span>) <span class="keyword">else</span> (<span class="built_in">cd</span> <span class="string">&quot;c:\Program Files\Microsoft Office\Office14&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> exist <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office15\ospp.vbs&quot;</span> (<span class="built_in">cd</span> <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office15&quot;</span>) <span class="keyword">else</span> (<span class="built_in">cd</span> <span class="string">&quot;c:\Program Files\Microsoft Office\Office15&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> exist <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office16\ospp.vbs&quot;</span> (<span class="built_in">cd</span> <span class="string">&quot;C:\Program Files (x86)\Microsoft Office\Office16&quot;</span>) <span class="keyword">else</span> (<span class="built_in">cd</span> <span class="string">&quot;c:\Program Files\Microsoft Office\Office16&quot;</span>)</span><br><span class="line"><span class="comment"># cscript ospp.vbs /inpkey:GVLK</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line">cscript ospp.vbs /inpkey:YC7DK<span class="literal">-G2NP3-2QQC3-J6H88-GVGXT</span></span><br></pre></td></tr></table></figure>

<p>部分 GVLK 列表</p>
<table>
<thead>
<tr>
<th align="center">GVLK</th>
<th align="left">软件版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</td>
<td align="left">Office Professional Plus 2019</td>
</tr>
<tr>
<td align="center">6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK</td>
<td align="left">Office Standard 2019</td>
</tr>
<tr>
<td align="center">B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B</td>
<td align="left">Project Professional 2019</td>
</tr>
<tr>
<td align="center">C4F7P-NCP8C-6CQPT-MQHV9-JXD2M</td>
<td align="left">Project Standard 2019</td>
</tr>
<tr>
<td align="center">9BGNQ-K37YR-RQHF2-38RQ3-7VCBB</td>
<td align="left">Visio Professional 2019</td>
</tr>
<tr>
<td align="center">7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2</td>
<td align="left">Visio Standard 2019</td>
</tr>
<tr>
<td align="center">XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</td>
<td align="left">Office Professional Plus 2016</td>
</tr>
<tr>
<td align="center">JNRGM-WHDWX-FJJG3-K47QV-DRTFM</td>
<td align="left">Office Standard 2016</td>
</tr>
<tr>
<td align="center">YG9NW-3K39V-2T3HJ-93F3Q-G83KT</td>
<td align="left">Project Professional 2016</td>
</tr>
<tr>
<td align="center">GNFHQ-F6YQM-KQDGJ-327XX-KQBVC</td>
<td align="left">Project Standard 2016</td>
</tr>
<tr>
<td align="center">PD3PC-RHNGV-FXJ29-8JK7D-RJRJK</td>
<td align="left">Visio Professional 2016</td>
</tr>
<tr>
<td align="center">7WHWN-4T7MP-G96JF-G33KR-W8GF4</td>
<td align="left">Visio Standard 2016</td>
</tr>
</tbody></table>
<p>更多 GVLK<a href="https://docs.microsoft.com/zh-cn/DeployOffice/vlactivation/gvlks">点击这里</a>查看。</p>
<h4 id="配置使用-KMS-服务器-1"><a href="#配置使用-KMS-服务器-1" class="headerlink" title="配置使用 KMS 服务器"></a>配置使用 KMS 服务器</h4><p>将 IP 换成你的 vlmscd 所在服务器即可。1688 是默认端口，如果之前是按照本文进行配置，第二条命令可以不写。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cscript ospp.vbs /sethst:kms-server</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line">cscript ospp.vbs /sethst:kms.iszy.xyz</span><br><span class="line"><span class="comment"># cscript ospp.vbs /setprt:tcp-port</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line">cscript ospp.vbs /setprt:<span class="number">1688</span></span><br></pre></td></tr></table></figure>

<h4 id="进行激活-1"><a href="#进行激活-1" class="headerlink" title="进行激活"></a>进行激活</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cscript ospp.vbs /act</span><br></pre></td></tr></table></figure>

<p>等一会儿会显示激活成功。</p>
<p>可以输入以下命令查看激活状态，一般是 180 天或 45 天的有效期。过期后，如果 KMS 服务器还在，会自动续期的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cscript ospp.vbs /dstatus</span><br></pre></td></tr></table></figure>

<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>到此，自建 KMS 到激活都介绍完了，按照本文介绍应该已经正常激活了，享受你的软件吧。如果 KMS 服务器出现问题，180 天应该早就解决了吧。</p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>KMS</tag>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>【评测】优质SS/SSR/Trojan/V2Ray机场推荐</title>
    <url>//page/bgfw/</url>
    <content><![CDATA[<blockquote>
<p><strong>郑重声明</strong>：本文所介绍产品主要是为了方便学习、科研以及外贸工作。请遵守中华人民共和国法律法规，切勿在任何地方发布分裂国家，激化民族矛盾的言论。</p>
</blockquote>
<p>现在工作和学习中，尤其是涉及到技术和学术的，难免需要到 Google、Github 查查资料，外贸工作中对于外网的流畅访问也十分重要，代理也逐渐成为了不少人的刚需。话不多说，有需求的看看。通过我的体验和测试，我这里推荐几个稳定性和速度上比较有保障的机场，力图能让各种流量和价位需求的用户找到适合的产品，大家可以参考一下。所有套餐内容及价格以商家说明为准，此处可能更新不及时，不做另外说明。</p>
<span id="more"></span>

<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table>
<thead>
<tr>
<th>机场名称（点击了解更多）</th>
<th>类别</th>
<th>关键词</th>
<th>操作</th>
</tr>
</thead>
<tbody><tr>
<td><a href="/page/xinjiecloud/">心阶云 ⭐</a>【官方长期优惠】</td>
<td>SSR(隧道、专线)&#x2F;V2Ray</td>
<td>性价比高，超多线路，稳定老站</td>
<td><a href="https://url.iszy.xyz/xinjie">官网传送门</a></td>
</tr>
<tr>
<td><a href="/page/cmynetwork/">CMYNetwork 红莓网络</a></td>
<td>SSR(专线)&#x2F;Trojan</td>
<td>稳定平价，超多专线，小众地区线路</td>
<td><a href="https://url.iszy.xyz/cmynetwork">官网传送门</a></td>
</tr>
<tr>
<td><a href="#%E4%B8%89-meet">MEET</a></td>
<td>SSR</td>
<td>专注按量付费，高速稳定</td>
<td><a href="https://url.iszy.xyz/fspeed">官网传送门</a></td>
</tr>
<tr>
<td><a href="#%E5%9B%9B-boomcloud">BoomCloud</a>【官方长期优惠】</td>
<td>V2ray&#x2F;SSR&#x2F;SS</td>
<td>多年老站，附赠丰富</td>
<td><a href="https://url.iszy.xyz/boomcloud">官网传送门</a></td>
</tr>
<tr>
<td><a href="#%E4%BA%94-duangcloud">DuangCloud</a>【专属优惠】</td>
<td>SS(全专线)</td>
<td>平价灵活</td>
<td><a href="https://url.iszy.xyz/duangcloud">官网传送门</a></td>
</tr>
<tr>
<td><a href="#%E5%85%AD-bywave">ByWave</a></td>
<td>V2Ray</td>
<td>高质高端，服务稳定</td>
<td><a href="https://url.iszy.xyz/bywave">官网传送门</a></td>
</tr>
<tr>
<td><a href="#%E4%B8%83-blinkload">Blinkload</a></td>
<td>SS(全专线)</td>
<td>稳定全能，超多专线</td>
<td><a href="https://url.iszy.xyz/blinkload">官网传送门</a></td>
</tr>
<tr>
<td><a href="#%E5%85%AB-%E9%97%B2%E9%B1%BC%E7%BD%91%E7%BB%9C">闲鱼网络</a>(皇朝网络)</td>
<td>SS 隧道</td>
<td>性价比新站</td>
<td><a href="https://url.iszy.xyz/dinastio">官网传送门</a></td>
</tr>
<tr>
<td><a href="#%E4%B9%9D-shuttle">Shuttle</a></td>
<td>V2ray</td>
<td>平价新站，另含超多小众地区线路</td>
<td><a href="https://url.iszy.xyz/shuttle">官网传送门</a></td>
</tr>
</tbody></table>
<blockquote>
<p>本页机场均在上次网络大波动中提供了稳定的服务，还会持续观察未来表现</p>
</blockquote>
<p><strong>点击前往查看测速: <a href="https://www.iszy.cc/page/speed-test-collection/">机场测速集合</a></strong></p>
<details>
<summary style="cursor:pointer"><strong style="color:red">展开查看机场们的介绍~</strong></summary>

<h2 id="一、心阶云"><a href="#一、心阶云" class="headerlink" title="一、心阶云"></a>一、心阶云</h2><p><a href="https://url.iszy.xyz/xinjiebak">官网传送门</a></p>
<p>邀请码: <code>iszy</code></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#%E5%BF%83%E9%98%B6%E4%BA%91">⭐⭐ 测速 ⭐⭐</a> (2020-08-07)</p>
<p><a href="https://www.iszy.cc/page/xinjiecloud/">⭐ 更多详细介绍 ⭐</a></p>
<h3 id="（一）优惠"><a href="#（一）优惠" class="headerlink" title="（一）优惠"></a>（一）优惠</h3><blockquote>
<p>官方长期优惠</p>
</blockquote>
<p><strong>￥ 115</strong> 及以上套餐可用</p>
<p>端午节<strong>95 折</strong>礼遇码：<code>FeelHot</code></p>
<h3 id="（二）简介"><a href="#（二）简介" class="headerlink" title="（二）简介"></a>（二）简介</h3><p><strong>心阶云</strong>是一家长期走中高端路线的 <strong>ShadowsocksR(SSR)</strong> 机场，也提供部分 V2Ray 线路，已经稳定运行多年。实际对比下来，它的性价比还是相当高的，线路又多，提供的流量也十分充足，主要推荐的套餐充分考虑了当前主流用户能够接受的价位，可以说是无可挑剔。现阶段包含大量优质 V2Ray 线路和更多的 SSR 线路，<strong>Lv.2</strong> 节点采用 <strong>SSR 隧道加密</strong>和 V2ray 技术，配合国内 <strong>6Gbps</strong> 机器和负载均衡技术，保证全时段稳定性。用了很久，稳定通过了“多次网络波动”时期，体验极佳，可以放心使用。</p>
<ul>
<li>SSR 隧道中转 &amp; V2ray</li>
<li>采用封闭邀请，精选客户，稳定可靠安全</li>
<li>定期发放折扣，部分套餐月均低至 9 元，具有极高性价比（可提供企业定制服务）</li>
<li>全面解锁 Netflix,DMM,HULU,TVB 等各类流媒体，YouTube4K-8K 流畅</li>
<li>支持 Windows&#x2F;Mac&#x2F;iOS&#x2F;Android&#x2F; 路由器，支持多设备同时使用</li>
<li>充值采用支付宝 Alipay，支付安全便捷，使用教程简单易用</li>
<li>和多家 IDC 深入合作，如阿里云，GmoCloud，香港宽频，中华电信……</li>
<li>全球线路全面，香港（HK,HKBN,CN2）、日本(IIJ，NTT)，台湾（HiNet，TFN）、新加坡、美国（GIA,NCP）、韩国(AWS)、俄罗斯(KHV)、英国(NTT)、澳门(CTM)等线路可选</li>
<li>提供昂贵的 IPLC，为稳定性需求较高的用户提供了支持，在良好网络环境下可为游戏加速</li>
</ul>
<h3 id="（三）套餐"><a href="#（三）套餐" class="headerlink" title="（三）套餐"></a>（三）套餐</h3><p><strong>包年包月套餐</strong></p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>账号等级</th>
<th>付款周期</th>
<th>客户端数量</th>
</tr>
</thead>
<tbody><tr>
<td><strong>月费套餐【全节点】</strong></td>
<td>130G&#x2F;30 天</td>
<td>25 元</td>
<td>2</td>
<td>月付</td>
<td>8</td>
</tr>
<tr>
<td>月费套餐【非全节点】<br>不含 V2Ray 和隧道中转线路及香港台湾地区</td>
<td>70G&#x2F;30 天</td>
<td>20 元</td>
<td>1</td>
<td>月付</td>
<td>8</td>
</tr>
<tr>
<td>月重置套餐流量叠加包</td>
<td>30G</td>
<td>5 元</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>按量付费套餐</strong></p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>账号等级</th>
<th>付款周期</th>
<th>客户端数量</th>
</tr>
</thead>
<tbody><tr>
<td>季度套餐【全节点】</td>
<td>350G&#x2F;90 天</td>
<td>70 元</td>
<td>2</td>
<td>季付</td>
<td>10</td>
</tr>
<tr>
<td><strong>全年 0.5T 轻量【全节点&#x2F;性价比】★</strong></td>
<td>512G&#x2F;360 天</td>
<td>115 元</td>
<td>2</td>
<td>年付</td>
<td>10</td>
</tr>
<tr>
<td><strong>全年 1T 中度【全节点&#x2F;主流】★</strong></td>
<td>1024G&#x2F;360 天</td>
<td>200 元</td>
<td>2</td>
<td>年付</td>
<td>15</td>
</tr>
<tr>
<td><strong>全年 2T 重度【全节点&#x2F;尊享】★</strong></td>
<td>2048G&#x2F;360 天</td>
<td>375 元</td>
<td>2</td>
<td>年付</td>
<td>15</td>
</tr>
<tr>
<td>全年畅享套餐【全节点&#x2F;团队】</td>
<td>6666G&#x2F;360 天</td>
<td>996 元</td>
<td>2</td>
<td>年付</td>
<td>20</td>
</tr>
</tbody></table>
<h2 id="二、CMYNetwork-红莓网络"><a href="#二、CMYNetwork-红莓网络" class="headerlink" title="二、CMYNetwork 红莓网络"></a>二、CMYNetwork 红莓网络</h2><p><a href="https://url.iszy.xyz/cmynetwork">官网传送门</a></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#CMYNetwork-%E7%BA%A2%E8%8E%93%E7%BD%91%E7%BB%9C">⭐⭐ 测速 ⭐⭐</a></p>
<p><a href="https://www.iszy.cc/page/cmynetwork/">⭐ 更多详细介绍 ⭐</a></p>
<h3 id="（一）优惠-1"><a href="#（一）优惠-1" class="headerlink" title="（一）优惠"></a>（一）优惠</h3><blockquote>
<p>本站专属优惠</p>
</blockquote>
<p>使用我的邀请码注册可以获得 <strong>10 元</strong>网站余额红包，可用于购买套餐。此优惠仅可使用一次，同 IP 下多次注册，视为相同账户。</p>
<p>邀请码: <code>iszy</code></p>
<p><img src="https://img.iszy.xyz/20200317212833.png"></p>
<blockquote>
<p>官方优惠</p>
</blockquote>
<p>购买任意年费套餐，可获得 95 折折扣。若同时邀请小伙伴拼团，享受折上折。</p>
<h3 id="（二）简介-1"><a href="#（二）简介-1" class="headerlink" title="（二）简介"></a>（二）简介</h3><p><strong>CMYNetwork 红莓网络</strong> 隶属于<code>CMYNetwork Technology Co., Ltd</code>，注册于摩纳哥公国，是一家我最近发现一家宝藏机场。除入门套餐外采用专线中转节点；入门套餐采用 Trojan 新协议，保证稳定性。经测速和日常使用，可以说是稳定高速，高峰期速度也能拉满。提供网页在线客服和工单，服务还不错。</p>
<ul>
<li>基础线路 Trojan 加成，专业线路 IPLC、IEPL 专线保障</li>
<li>无限低速流量(1Mbps~2Mbps)，流量用完也不会失联</li>
<li>流媒体解锁</li>
<li>Extreme 套餐提供各种视频会员<strong>共享账号</strong></li>
<li>多平台订阅支持</li>
</ul>
<h3 id="（三）套餐-1"><a href="#（三）套餐-1" class="headerlink" title="（三）套餐"></a>（三）套餐</h3><blockquote>
<p>注意，需要专线中转线路，请至少选择 Pro 及以上套餐，专线倍率为 2，需要注意。</p>
</blockquote>
<table>
<tr><th>套餐</th><th>流量</th><th>价格</th><th>公网IP数</th><th>线路</th><th>客服</th></tr>
<tr>
  <td rowspan="4">Air/入门版</td>
  <td rowspan="2">100G/月</td>
  <td>18元/30天</td>
  <td rowspan="4">2</td>
  <td rowspan="4">国际轻量优化链路<br/>解锁Trojan直连线路</td>
  <td rowspan="4">工单客服支持</td>
</tr>
<tr>
  <td>54元/90天</td>
</tr>
<tr>
  <td>125G/月</td>
  <td>108元/180天</td>
</tr>
<tr>
  <td>150G/月</td>
  <td>193元/365天</td>
</tr>
<tr>
  <td rowspan="4">Pro/专业版订阅</td>
  <td rowspan="2">200G/月</td>
  <td>35元/30天</td>
  <td rowspan="4">3</td>
  <td rowspan="4">解锁 CN2 优化直连专线（Trojan）<br>解锁 IPLC 流媒体专线（SSR）<br>解锁港/台/日/美 原生IP线路（Trojan）</td>
  <td rowspan="11">12 x 365在线客服支持</td>
</tr>
<tr>
  <td>105元/90天</td>
</tr>
<tr>
  <td>250G/月</td>
  <td>210元/180天</td>
</tr>
<tr>
  <td>300G/月</td>
  <td>370元/365天</td>
</tr>
<tr>
  <td rowspan="4">Extreme/至尊版</td>
  <td rowspan="2">643G/月</td>
  <td>68元/30天</td>
  <td rowspan="4">4</td>
  <td rowspan="4">免费远程技术支持<br>解锁 IEPL 流媒体专线<br>解锁 IEPL 游戏专线(内网)<br>Netflix/HULU/HBO/Pxxnhub等价值千元福利账号</td>
</tr>
<tr>
  <td>147元/90天</td>
</tr>
<tr>
  <td>768G/月</td>
  <td>399元/180天</td>
</tr>
<tr>
  <td>1024G/月</td>
  <td>696元/365天</td>
</tr>
<tr>
  <td rowspan="2">Business/企业版基础套餐</td>
  <td rowspan="2">1200G/月</td>
  <td>298元/30天</td>
  <td rowspan="2">10</td>
  <td rowspan="2">无定制专线，可自助购买<br>如需要线路定制请查看定制套餐<br>可提供国际电子收据（英文/日文可选）</td>
</tr>
<tr>
  <td>3398元/365天</td>
</tr>
<tr>
  <td>Business/企业专线定制</td>
  <td colspan="4">此为定制方案，可动态根据需求优化，具体详情请咨询客服</td>
</tr>
</table>

<h2 id="三、MEET"><a href="#三、MEET" class="headerlink" title="三、MEET"></a>三、MEET</h2><p><a href="https://url.iszy.xyz/fspeed">官网传送门</a></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#MEET">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）简介"><a href="#（一）简介" class="headerlink" title="（一）简介"></a>（一）简介</h3><p><strong>MEET</strong> 是一家专做按量付费套餐的商家，推荐中低流量用户选择。可以了解一下，买个最便宜的套餐试试看。</p>
<ul>
<li>主打按量付费，套餐有效期长，为中低流量用户准备</li>
<li>主流客户端 SSR 订阅支持</li>
<li>节点高速稳定</li>
<li>不限制设备数，但仅限个人使用，禁止滥用</li>
</ul>
<h3 id="（二）套餐"><a href="#（二）套餐" class="headerlink" title="（二）套餐"></a>（二）套餐</h3><blockquote>
<p>套餐不能叠加使用，请根据自己的使用情况进行选择。</p>
</blockquote>
<table>
<thead>
<tr>
<th>套餐</th>
<th>有效期</th>
<th>流量</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>一年套餐</td>
<td>360 天</td>
<td>800G</td>
<td>239 元</td>
</tr>
<tr>
<td>半年套餐</td>
<td>180 天</td>
<td>300G</td>
<td>109 元</td>
</tr>
<tr>
<td>季度套餐</td>
<td>90 天</td>
<td>100G</td>
<td>49 元</td>
</tr>
<tr>
<td>10G 流量月包</td>
<td>30 天</td>
<td>10G</td>
<td>5 元</td>
</tr>
</tbody></table>
<h2 id="四、BoomCloud"><a href="#四、BoomCloud" class="headerlink" title="四、BoomCloud"></a>四、BoomCloud</h2><p><a href="https://url.iszy.xyz/boomcloud">官网传送门</a></p>
<h3 id="（一）优惠-2"><a href="#（一）优惠-2" class="headerlink" title="（一）优惠"></a>（一）优惠</h3><blockquote>
<p>官方优惠</p>
</blockquote>
<p>选择年付可享<strong>9 折</strong>优惠</p>
<h3 id="（二）简介-2"><a href="#（二）简介-2" class="headerlink" title="（二）简介"></a>（二）简介</h3><p><strong>BoomCloud</strong>是一家采用<strong>SS&#x2F;SSR&#x2F;V2ray</strong>技术提供国际网络加速服务的香港公司。这家机场的服务经过一段时间的试用下来，较为稳定，速度理想。节点采用<strong>全部中继，含 IPLC</strong>。值得一提的是，这家机场的<strong>年付套餐</strong>赠送的<strong>附加服务</strong>十分超值。</p>
<p><strong>优质高速的线路</strong></p>
<ul>
<li>香港、日本、新加坡、美国等，50+中继高速线路</li>
<li>节点全内网中专，拥有 IPLC 线路</li>
</ul>
<p><strong>多平台协议支持</strong></p>
<ul>
<li>同时支持 SS&#x2F;SSR&#x2F;V2ray 协议连接</li>
<li>领先加密技术，隐私保护，数据传输全加密</li>
<li>Windows&#x2F;Mac&#x2F;Android&#x2F;iOS 全平台通用</li>
<li>支持 UDP，支持 TCP</li>
</ul>
<p><strong>流媒体解锁</strong></p>
<ul>
<li>Netflix、TVB、BBC、HBO 支持</li>
</ul>
<p><strong>丰厚附加服务赠送</strong></p>
<p>购买部分年付套餐的用户，可前往【附加服务】，免费领取附加服务订阅，目前支持的附加服务有：</p>
<ol>
<li>G Suite 账户：<ul>
<li>Google Apps 账户，使用包括 Google 云端硬盘、Gmail 在内的多种服务。同时，Boomcloud G Suite 账户提供无限容量的 Google 云端硬盘</li>
<li>需要注意的是，其提供的是独立账号，而非把服务提供到个人账号，属团体订阅</li>
</ul>
</li>
<li>Office 365 ProPlus 订阅：<ul>
<li>Boomcloud 提供的终生 Office 365 订阅（在 Boomcloud 产品有效期内）</li>
<li>包含 OneDrive for Business 和桌面版 Office（最多用于 5 台设备）</li>
<li>需要注意的是，其提供的是独立账号，而非把服务提供到个人账号，属团体订阅</li>
</ul>
</li>
</ol>
<h3 id="（三）套餐-2"><a href="#（三）套餐-2" class="headerlink" title="（三）套餐"></a>（三）套餐</h3><blockquote>
<p>注:<br>由于香港公司的支付货币为港币，套餐定价为人民币，实际支付价格可能会因当日汇率波动而收到影响，购买时需注意。<br>除无限流量套餐外，其他套餐默认可同时登录终端的数量为 5 个，可通过在购买时选择增加到 8 个或无限终端数量（需加价，一般用户不太需要）。</p>
</blockquote>
<h4 id="包年包月服务"><a href="#包年包月服务" class="headerlink" title="包年包月服务"></a>包年包月服务</h4><table>
<tr><th>套餐</th><th>每月流量(G)</th><th>付费周期</th><th>价格(元)</th><th>折合每月每G价格(元)</th></tr>
<tr>
  <td rowspan="4">Silver</td>
  <td rowspan="4">60</td>
  <td>半年</td>
  <td>158</td>
  <td>0.4389</td>
</tr>
<tr>
  <td>每年</td>
  <td>298</td>
  <td>0.4139</td>
</tr>
<tr>
  <td>两年</td>
  <td>588</td>
  <td>0.4083</td>
</tr>
<tr>
  <td>三年</td>
  <td>848</td>
  <td>0.3926</td>
</tr>
<tr>
  <td rowspan="12">Gold</td>
  <td rowspan="6">120</td>
  <td>每月</td>
  <td>38</td>
  <td>0.3167</td>
</tr>
<tr>
  <td>每季</td>
  <td>112</td>
  <td>0.3111</td>
</tr>
<tr>
  <td>半年</td>
  <td>216</td>
  <td>0.3</td>
</tr>
<tr>
  <td>每年</td>
  <td>408</td>
  <td>0.2833</td>
</tr>
<tr>
  <td>两年</td>
  <td>800</td>
  <td>0.2778</td>
</tr>
<tr>
  <td>三年</td>
  <td>1188</td>
  <td>0.275</td>
</tr>
<tr>
  <td rowspan="6">200</td>
  <td>每月</td>
  <td>50</td>
  <td>0.25</td>
</tr>
<tr>
  <td>每季</td>
  <td>148</td>
  <td>0.2467</td>
</tr>
<tr>
  <td>半年</td>
  <td>288</td>
  <td>0.24</td>
</tr>
<tr>
  <td>每年</td>
  <td>552</td>
  <td>0.23</td>
</tr>
<tr>
  <td>两年</td>
  <td>1088</td>
  <td>0.2267</td>
</tr>
<tr>
  <td>三年</td>
  <td>1288</td>
  <td>0.1789</td>
</tr>
<tr>
  <td rowspan="6">Platinum</td>
  <td rowspan="6">300</td>
  <td>每月</td>
  <td>58</td>
  <td>0.1933</td>
</tr>
<tr>
  <td>每季</td>
  <td>172</td>
  <td>0.1911</td>
</tr>
<tr>
  <td>半年</td>
  <td>330</td>
  <td>0.1833</td>
</tr>
<tr>
  <td>每年</td>
  <td>588</td>
  <td>0.1633</td>
</tr>
<tr>
  <td>两年</td>
  <td>1108</td>
  <td>0.1539</td>
</tr>
<tr>
  <td>三年</td>
  <td>1688</td>
  <td>0.1563</td>
</tr>
<tr>
  <td rowspan="2">Team</td>
  <td rowspan="2">不限量</td>
  <td>每季</td>
  <td>3699</td>
  <td rowspan="2">NAN</td>
</tr>
<tr>
  <td>每年</td>
  <td>11888</td>
</tr>
</table>

<h4 id="弹性套餐（固定流量）"><a href="#弹性套餐（固定流量）" class="headerlink" title="弹性套餐（固定流量）"></a>弹性套餐（固定流量）</h4><table>
<thead>
<tr>
<th>弹性套餐</th>
<th>总流量</th>
<th>有效期</th>
<th>线路</th>
<th>价格(元)</th>
<th>折合每 G 价格</th>
</tr>
</thead>
<tbody><tr>
<td>基础流量包</td>
<td>30G</td>
<td>365 天</td>
<td>15+</td>
<td>45</td>
<td>1.5 元&#x2F;G</td>
</tr>
<tr>
<td>飞享流量包</td>
<td>120G</td>
<td>365 天</td>
<td>25+</td>
<td>120</td>
<td>1 元&#x2F;G</td>
</tr>
<tr>
<td>自由流量包</td>
<td>200G</td>
<td>365 天</td>
<td>25+</td>
<td>160</td>
<td>0.8 元&#x2F;G</td>
</tr>
</tbody></table>
<h4 id="企业定制套餐"><a href="#企业定制套餐" class="headerlink" title="企业定制套餐"></a>企业定制套餐</h4><ul>
<li>标准单线 + 高级单线接入点</li>
<li>100Mbps~500Mbps 速率保障</li>
<li>持 TCP 先进加速技术</li>
<li>支持多种扩展连接协议</li>
<li>可选流量范围：3TiB</li>
<li>支持级别：标准支持 + 有限商业支持</li>
<li>支持响应：8 小时（工作时间）</li>
</ul>
<table>
<thead>
<tr>
<th>数据中心分布</th>
<th>每月价格(元)</th>
<th>每年价格(元)</th>
</tr>
</thead>
<tbody><tr>
<td>香港数据中心</td>
<td>2180</td>
<td>22300</td>
</tr>
<tr>
<td>美国数据中心</td>
<td>1280</td>
<td>20800</td>
</tr>
<tr>
<td>日本数据中心</td>
<td>2080</td>
<td>20300</td>
</tr>
<tr>
<td>新加坡数据中心</td>
<td>1280</td>
<td>14800</td>
</tr>
<tr>
<td>德国数据中心</td>
<td>1280</td>
<td>14800</td>
</tr>
<tr>
<td>英国数据中心</td>
<td>1280</td>
<td>14800</td>
</tr>
</tbody></table>
<h3 id="（四）其他说明"><a href="#（四）其他说明" class="headerlink" title="（四）其他说明"></a>（四）其他说明</h3><ul>
<li><p><a href="https://boomcloud-hk.github.io/wiki/#/">BoomCloud Wiki Center</a>，提供 BoomCloud 服务相关教程指引及进阶教程</p>
</li>
<li><p>售后 BoomCloud 售后仅支持服务单，因为这能最直白看到你的账号及套餐使用情况，更快的帮助寻找问题所在</p>
</li>
<li><p>服务单服务时间介绍</p>
<table>
<thead>
<tr>
<th>周期</th>
<th>响应时间</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>工作日</td>
<td>8 小时内</td>
<td>Telegram 紧急反馈</td>
</tr>
<tr>
<td>节假日</td>
<td>48 小时内</td>
<td>Telegram 紧急反馈</td>
</tr>
<tr>
<td>AFF 提现</td>
<td>24 小时内</td>
<td>工单跟进</td>
</tr>
</tbody></table>
</li>
<li><p>BoomCloud 售后服务单仅在网站个人中心后台的服务单回复，邮件仅作为提醒作用，直接回复无效。</p>
</li>
</ul>
<h2 id="五、DuangCloud"><a href="#五、DuangCloud" class="headerlink" title="五、DuangCloud"></a>五、DuangCloud</h2><p><a href="https://url.iszy.xyz/duangcloud">官网传送门</a></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#DuangCloud">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）优惠-3"><a href="#（一）优惠-3" class="headerlink" title="（一）优惠"></a>（一）优惠</h3><blockquote>
<p>专属优惠</p>
</blockquote>
<p>除 light 套餐外，都能使用以下优惠码获取 9 折优惠，走过路过不要错过。</p>
<ul>
<li><strong>9 折</strong>优惠码: <code>iszy.cc</code></li>
</ul>
<p>本站优惠码一个账户仅可享受一次</p>
<blockquote>
<p>转官方优惠公告</p>
</blockquote>
<p>全套餐 8 折优惠码: <code>DuangCloudWula</code></p>
<h3 id="（二）简介-3"><a href="#（二）简介-3" class="headerlink" title="（二）简介"></a>（二）简介</h3><p>这是一家稳定运行半年多的纯 SS 机场，口碑还不错，不过线路确实稳定且质量不错，已经是全 IEPL 专线，价格比较合理，可以推荐。</p>
<ul>
<li>IEPL 专线线路接入</li>
<li>拥有香港、台湾、日本、美国、新加坡节点</li>
<li>1.5G 最高可用速率，满足绝大部分需求</li>
<li>原生 IP 流媒体解锁</li>
<li>无设备数量限制，可多人使用</li>
<li>支持支付宝&#x2F;微信支付</li>
</ul>
<h3 id="（三）套餐-3"><a href="#（三）套餐-3" class="headerlink" title="（三）套餐"></a>（三）套餐</h3><p>可选半年、全年缴费周期。注意，一次性无时间限制 Light 套餐无法叠加无法共存。</p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
<th>流量均价</th>
</tr>
</thead>
<tbody><tr>
<td>Mini</td>
<td>50G&#x2F;月</td>
<td>20 元&#x2F;月 或 200 元&#x2F;年</td>
<td>0.4 元&#x2F;G</td>
</tr>
<tr>
<td>Basic</td>
<td>150G&#x2F;月</td>
<td>35 元&#x2F;月 或 350 元&#x2F;年</td>
<td>0.23 元&#x2F;G</td>
</tr>
<tr>
<td>Pro</td>
<td>300G&#x2F;月</td>
<td>55 元&#x2F;月 或 550 元&#x2F;年</td>
<td>0.18 元&#x2F;G</td>
</tr>
<tr>
<td>Gold</td>
<td>500G&#x2F;月</td>
<td>75 元&#x2F;月 或 750 元&#x2F;年</td>
<td>0.15 元&#x2F;G</td>
</tr>
<tr>
<td>Business</td>
<td>800G&#x2F;月</td>
<td>100 元&#x2F;月 或 1000 元&#x2F;年</td>
<td>0.125 元&#x2F;G</td>
</tr>
<tr>
<td>Light</td>
<td>50G 永久流量</td>
<td>100 元一次性</td>
<td>2 元&#x2F;G</td>
</tr>
</tbody></table>
<h3 id="（四）其他说明-1"><a href="#（四）其他说明-1" class="headerlink" title="（四）其他说明"></a>（四）其他说明</h3><ul>
<li><a href="https://docs.duangcloud.club/">Duang Cloud 使用文档</a>，敬请查阅</li>
<li>官方联系方式，有问题可以联系<ul>
<li>工单方式</li>
<li>tg 群：<a href="https://t.me/duangcloud">DuangCloud 客户群</a></li>
</ul>
</li>
</ul>
<h2 id="六、ByWave"><a href="#六、ByWave" class="headerlink" title="六、ByWave"></a>六、ByWave</h2><p><a href="https://url.iszy.xyz/bywave">官网传送门</a></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#ByWave">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）优惠-4"><a href="#（一）优惠-4" class="headerlink" title="（一）优惠"></a>（一）优惠</h3><blockquote>
<p>本站专属优惠</p>
</blockquote>
<p>使用本站专属优惠码享 <strong>85 折</strong> 循环优惠。</p>
<p>优惠码: <code>iszy</code></p>
<blockquote>
<p>转官方优惠公告</p>
</blockquote>
<p><strong>充值获得赠送金</strong></p>
<ul>
<li>充 100 到账 115</li>
<li>充 200 到账 240</li>
<li>充 500 到账 600</li>
<li>充 1000 到账 1200</li>
</ul>
<h3 id="（二）简介-4"><a href="#（二）简介-4" class="headerlink" title="（二）简介"></a>（二）简介</h3><p><strong>ByWave</strong>，是一家主打高端的 V2ray 机场。已使用一段时间，体验良好。这家机场拥有阿里云&#x2F;WTT&#x2F;HKT 等线路，且全内网中转节点，更提供有 IPLC 专线（专线套餐）。内网中转线路及 IPLC 专线成本极高，但质量极佳，体验十分稳定，在历次冲击下均无影响。</p>
<ul>
<li>线路<strong>全内网中转节点</strong></li>
<li><strong>3Gbps</strong> 带宽专线</li>
<li>速度高端，稳定高端，质量高端价格也高端</li>
<li>拥有港深、香港、美国、东京、俄罗斯等节点</li>
<li>支持 <strong>Win&#x2F;Mac&#x2F;Android&#x2F;iOS</strong>，解锁 <strong>Netflix&#x2F;HBO&#x2F;Hulu</strong> 等访问</li>
<li><strong>对于使用的设备数量没有限制</strong>，单个账号可多台设配使用，若是团队使用购买，可以<strong>分摊成本</strong></li>
<li>支持<strong>支付宝</strong></li>
</ul>
<blockquote>
<p>内网中转线路及 IPLC 专线成本极高，但质量极佳，在抵抗网络冲击和稳定性方面卓有成效。</p>
</blockquote>
<h3 id="（三）套餐-4"><a href="#（三）套餐-4" class="headerlink" title="（三）套餐"></a>（三）套餐</h3><p>以下套餐价格均为<strong>折扣前价格</strong>，两种套餐中包含线路完全相同，仅付费方式不同。专线套餐，将每月重置流量；按量计费版不会重置流量，且流量(套餐)不会过期。</p>
<p><strong>专线套餐</strong></p>
<blockquote>
<p>根据流量单价，<strong>年付</strong>以上更有性价比，大家可以酌情购买。</p>
</blockquote>
<table>
<thead>
<tr>
<th>套餐</th>
<th>每月流量(GB)</th>
<th>月付(元)</th>
<th>季度(元)</th>
<th>半年(元)</th>
<th>年付(元)</th>
<th>两年(元)</th>
<th>三年(元)</th>
</tr>
</thead>
<tbody><tr>
<td>Bronze</td>
<td>100</td>
<td>25</td>
<td>75</td>
<td>150</td>
<td>280</td>
<td>500</td>
<td>720</td>
</tr>
<tr>
<td>Silver</td>
<td>180</td>
<td>45</td>
<td>135</td>
<td>270</td>
<td>480</td>
<td>900</td>
<td>1320</td>
</tr>
<tr>
<td>Gold</td>
<td>265</td>
<td>65</td>
<td>195</td>
<td>390</td>
<td>680</td>
<td>1300</td>
<td>1920</td>
</tr>
<tr>
<td>Platinum</td>
<td>505</td>
<td>125</td>
<td>375</td>
<td>750</td>
<td>1480</td>
<td>2900</td>
<td>4320</td>
</tr>
<tr>
<td>Diamond</td>
<td>850</td>
<td>205</td>
<td>615</td>
<td>1230</td>
<td>2280</td>
<td>4500</td>
<td>6720</td>
</tr>
<tr>
<td>RedBeryl</td>
<td>1700</td>
<td>405</td>
<td>1215</td>
<td>2430</td>
<td>4680</td>
<td>9300</td>
<td>13920</td>
</tr>
</tbody></table>
<p><strong>专线套餐-按量计费版</strong></p>
<blockquote>
<p>该套餐按量付费，流量单价均为 0.67 元&#x2F;GB，且无过期时间，请按照实际需求酌情购买 。</p>
</blockquote>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量(GB)</th>
<th>价格(元)</th>
</tr>
</thead>
<tbody><tr>
<td>OneTimeDataPlan</td>
<td>150</td>
<td>100</td>
</tr>
<tr>
<td></td>
<td>360</td>
<td>240</td>
</tr>
<tr>
<td></td>
<td>660</td>
<td>440</td>
</tr>
<tr>
<td></td>
<td>1230</td>
<td>820</td>
</tr>
</tbody></table>
<h3 id="（四）其他说明-2"><a href="#（四）其他说明-2" class="headerlink" title="（四）其他说明"></a>（四）其他说明</h3><ul>
<li>在此查看最新域名：<a href="https://bywavesite.github.io/">永久域名发布页</a>，永远不用担心失联。</li>
<li>无法使用问题排查<ul>
<li>使用 V2Ray 服务首先需要您的设备时间与标准北京时间相差不超过 30 秒，如遇到无法使用的情况请优先检查时间。</li>
<li>如果时间准确无法使用的话请检查浏览器是否有 SwitchOmega 或者代理相关的插件，如果有的话请先关闭这些插件。</li>
<li>如果还是无法使用的话，请在连接后截图客户端中的日志界面发送到在线客服。</li>
</ul>
</li>
<li>建议采用官网在线客服的方式解决问题</li>
</ul>
<h2 id="七、Blinkload"><a href="#七、Blinkload" class="headerlink" title="七、Blinkload"></a>七、Blinkload</h2><p><a href="https://url.iszy.xyz/blinkload">官网传送门</a></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#Blinkload">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）优惠-5"><a href="#（一）优惠-5" class="headerlink" title="（一）优惠"></a>（一）优惠</h3><blockquote>
<p>专属优惠</p>
</blockquote>
<p>通过努力，和机场主的协商后争取到了本站专属优惠码，凡通过<a href="https://url.iszy.xyz/blinkload">本站链接</a>注册用户，购买套餐时输入优惠码，可享受不同程度优惠.</p>
<ul>
<li><strong>88 折</strong>优惠码: <code>iszy</code></li>
<li><strong>年付</strong>专属<strong>85 折</strong>优惠码: <code>iszyyear</code></li>
</ul>
<p>本站优惠码一个账户仅可享受一次</p>
<blockquote>
<p>官方优惠</p>
</blockquote>
<p><strong>拼团下单</strong>享更多优惠:</p>
<ul>
<li>2 人: 94 折</li>
<li>3 人: 88 折</li>
<li>4 人: 8 折</li>
</ul>
<h3 id="（二）简介-5"><a href="#（二）简介-5" class="headerlink" title="（二）简介"></a>（二）简介</h3><p><strong>Blinkload</strong> 隶属于 <code>Blinkload Technology Co.，Ltd Hong Kong</code>，是一家成立接近 3 年的老站了。套餐层次覆盖到位，轻量或重度用户均可很好的满足，另外还有适合中小企业的企业套餐。该站经过一段时间的整备，已经全面转型为全节点 BGP 入口，IEPL 传输的全内网中转机场，且各项资源均为自有资源，均签署了 SLA 协议。同时支持 SS&#x2F;SSR&#x2F;V2Ray 协议以及各种完备的托管软件，是一家全能高端且极致稳定的机场。还有一点就是售后服务在行业算是非常出众的，网页配备在线客服，另有相应群组专供解决问题使用，解决用户问题非常及时。</p>
<p><strong>绝对稳定优质的线路</strong></p>
<ul>
<li>全节点使用大陆 BGP 入口优化技术，接入全国 7 家运营商；</li>
<li>全节点使用 IEPL 传输手段绕过 gfw 检测，且带宽充裕保障高峰期速率，因此敏感时期也无任何影响；</li>
<li>专属 5Gbps+ L2 Transport 传输资源；</li>
<li>AS9833 自有 ASN IP 段；</li>
<li>在全球多个 PoP 内拥有全万兆架构 并与 10+ 运营商及 IXP 提供互联；</li>
<li>在用户本地网络条件允许的情况下，所有节点均可在任何时间段流畅观看 8K 视频；</li>
</ul>
<p><strong>全节点流媒体解锁</strong></p>
<ul>
<li>全节点原生解锁 Netflix、HBO、Abema、DMM、Happyon、动画疯 等流媒体服务；</li>
</ul>
<p><strong>全面的协议和平台支持</strong></p>
<ul>
<li>全自主开发一键登录客户端 Windows &amp; macOS &amp; iOS (正在内测) ，方便不愿折腾的用户使用；</li>
<li>支持 Windows&#x2F;macOS&#x2F;Android&#x2F;iOS&#x2F;Linux&#x2F;路由器等全平台使用。</li>
<li>支持 SS、SSR、V2Ray、Clash、Surfboard、Surge、Quantumult（X） 订阅托管功能；</li>
</ul>
<p><strong>更好的用户交互体验</strong></p>
<ul>
<li>全自主设计开发面板；</li>
<li>全自动化运维；</li>
<li>官网接入网页客服，可即时沟通；</li>
<li>Telegram 群组每日签到赠送流量；</li>
</ul>
<p><strong>完善的支付方式</strong></p>
<p>由于是香港企业，签约了 Stripe 收款平台，<strong>支持支付宝、微信以及 Paypal 支付</strong>，收款方式十分的完善以及国际化。</p>
<p><strong>拼团功能</strong></p>
<p>充分考虑到用户与家人同事之间的关联性，特别设计了极其实惠的拼团功能，最高和多位朋友一起拼团购买同套餐，可享受每人 8 折优惠（不可与优惠码同享）。</p>
<h3 id="（三）套餐-5"><a href="#（三）套餐-5" class="headerlink" title="（三）套餐"></a>（三）套餐</h3><p>注意：套餐定价为<strong>港元</strong>，请自行根据汇率进行换算。参考汇率 <code>HKD/CNY≈0.9</code>。</p>
<table>
<tr><th>组</th><th>套餐</th><th>价格(<strong>港元</strong>)</th><th>流量</th><th>可用设备</th><th>最高速率</th><th>备注</th></tr>
<tr>
  <td>特别提供</td>
  <td>Special Offer #1</td>
  <td>59.9元/93天</td>
  <td>20G/月</td>
  <td>1</td>
  <td rowspan="6">200 Mbps</td>
  <td>限量套餐，适合小流量用户购买</td>
</tr>
<tr>
  <td rowspan="6">Pro</td>
  <td>Pro 季度套餐</td>
  <td>199.9元/93天</td>
  <td rowspan="3">200G/月</td>
  <td rowspan="3">3</td>
  <td rowspan="6">适合重度使用，对稳定性有绝对要求的用户，封锁期服务绝对保障</td>
</tr>
<tr>
  <td>Pro 半年套餐</td>
  <td>299.9元/183 天</td>
</tr>
<tr>
  <td>Pro 年套餐 #1</td>
  <td>499.9元/365 天</td>
</tr>
<tr>
  <td>Pro 年套餐 #2</td>
  <td>699.9元/365 天</td>
  <td>400G/月</td>
  <td rowspan="2">5</td>
</tr>
<tr>
  <td>Pro 年套餐 #3</td>
  <td>999.9元/365 天</td>
  <td>800G/月</td>
</tr>
<tr>
  <td>Business Pro</td>
  <td>3888元/365 天</td>
  <td>1500G/月</td>
  <td>50</td>
  <td>不限速</td>
</tr>
<tr>
  <td rowspan="4">Lite</td>
  <td>Lite 月度套餐</td>
  <td>69.9元/31天</td>
  <td rowspan="4">100G/月</td>
  <td rowspan="8">3</td>
  <td rowspan="8">200 Mbps</td>
  <td rowspan="4">适合中度用户，提供 Pro 同样节点</td>
</tr>
<tr>
  <td>Lite 季度套餐</td>
  <td>169.9元/93 天</td>
</tr>
<tr>
  <td>Lite 半年套餐</td>
  <td>249.9元/183 天</td>
</tr>
<tr>
  <td>Lite 年度套餐</td>
  <td>399.9元/365 天</td>
</tr>
<tr>
  <td rowspan="4">Micro</td>
  <td>Micro 月度套餐</td>
  <td>39.9元/31天</td>
  <td rowspan="4">50G/月</td>
  <td rowspan="4">适合轻量使用</td>
</tr>
<tr>
  <td>Micro 季度套餐</td>
  <td>79.9元/93 天</td>
</tr>
<tr>
  <td>Micro 半年套餐</td>
  <td>159.9元/186 天</td>
</tr>
<tr>
  <td>Micro 年度套餐</td>
  <td>299.9元/365 天</td>
</tr>
<tr>
  <td rowspan="3">Business</td>
  <td>Business</td>
  <td>2888元/365 天</td>
  <td>1000G/月</td>
  <td>30</td>
  <td rowspan="3">不限速</td>
  <td rowspan="3">适合中小企业多设备使用</td>
</tr>
<tr>
  <td>Business Pro</td>
  <td>3888元/365 天</td>
  <td>1500G/月</td>
  <td>50</td>
</tr>
<tr>
  <td>Business Customized</td>
  <td>6799元/365 天</td>
  <td>1500G/月</td>
  <td>100</td>
</tr>
<tr>
  <td>其他套餐</td>
  <td>100GiB 叠加流量包</td>
  <td>54.9元</td>
  <td>100G</td>
  <td></td>
  <td></td>
  <td>套餐内流量不够时可作为应急⽅案</td>
</tr>
</table>

<h3 id="（四）其他说明-3"><a href="#（四）其他说明-3" class="headerlink" title="（四）其他说明"></a>（四）其他说明</h3><ul>
<li>订阅地址及节点信息请勿截图发到其他地方，请务必打码。</li>
<li>通知公告<a href="https://t.me/thessrchannel">Telegram 频道</a>(Telegram 需挂代理)</li>
<li>售前售后<a href="https://t.me/thessrgroup">Telegram 官方交流群</a>(Telegram 需挂代理)</li>
<li>若有任何问题可联系官网右下角的**网页客服(推荐)<strong>或</strong>Telegram 管理员(推荐)**或发送工单。</li>
</ul>
<!--

## 八、Electry

[官网传送门](https://url.iszy.xyz/electry)

[⭐⭐ 测速 ⭐⭐](https://www.iszy.cc/page/speed-test-collection/#Electry) (2021-08-07)

### （一）简介

**Electry**，同样隶属于 `Blinkload Technology Co.，Ltd Hong Kong`，是一家线路高端稳定的 V2ray 机场，线路丰富，高端 IEPL 专线中继。

- 系统自动检测用户地理位置及运营商，分配对应最近入口，减少延迟；
- 全 BGP 入口中转节点，无视封锁
- 线路优质，高速稳定，不限速套餐经千兆网络测速可跑满
- 所有资源均为机房自有资源，使用 HGC / Cloudn / Hinet / Choopa /CodecCloud 线路
- 支持 Windows/mac OS/Android/iOS
- 解锁 Netflix / HBO / Hulu 等所有流媒体区域限制
- 支付支持支付宝/微信/信用卡
- 全部线路流量消耗均为正常 1 倍率，无高倍率套路

### （二）套餐

所有套餐线路是一样的，均为 IEPL & CN2 中继线路，只有流量和速率的区别。

| 套餐          | 价格          | 流量      | 可用设备 | 最高速率 |
| ------------- | ------------- | --------- | -------- | -------- |
| Air Plan      | 78 元/**季**  | 50GB/月   | 3        | 100Mbps  |
| Lite Plan     | 128 元/**季** | 200GB/月  | 3        | 100Mbps  |
| Standard Plan | 588/年        | 400GB/月  | 4        | 150Mbps  |
| Advanced Plan | 788/年        | 800GB/月  | 5        | 200Mbps  |
| Premium Plan  | 1288/年       | 1000GB/月 | 5        | 不限速   |

-->
<!--

## 九、V2Club

[官网传送门](https://url.iszy.xyz/lanan)

邀请码：`EBtdO6hX`

[⭐⭐ 测速 ⭐⭐](https://www.iszy.cc/page/speed-test-collection/#V2Club)

### （一）简介

V2Club(旧蓝岸)，一家专门提供 v2ray 代理服务的服务商。或许是 V2Ray 的关系，节点一直都挺稳定的，也做了挺长时间了，规模已经蛮大了。经我试验，品质可靠。为了保证服务质量，现在只提供年费套餐了，不过还是可以放心买啦。

**高端稳定的线路**

- 高达 **500Mbps+** 速率可用
- 满足**YouTube 的 4K 视频**流畅播放，国外网游流畅游玩
- 高级**IEPL 专线**接入
- 40+全球落地节点
- 针对国内网络优化的全球极速 CN2 GIA HKT HKBN WTT，让您的网络如虎添翼
- 低延迟，以香港为例，多线路实测 PIN 值均在 10-50ms 范围内

**流媒体解锁**

- 所有套餐均有解锁**Netflix/TVB/DMM** 等特殊在线视频服务

**多平台订阅**

- 提供支持 Win/Mac/Android/iOS 多平台客户端
- 定制的傻瓜式一键 MAC/WIN 客户端

**更好的体验**

- 允许**多设备同时在线**（PC 端/移动端/路由器），若是团队使用购买，**分摊成本**
- IEPL 无审查 + ss 协议，提供更广泛的支持
- 工单系统，有问题可以及时得到解决
- 支持支付宝支付

### （二）套餐

以下价格均为折扣前价格，数量有限欲购从速。

<table>
<tr><th>套餐</th><th>流量</th><th>价格</th><th>备注</th></tr>
<tr>
  <td>Lanan #Lite</td>
  <td>25G/月</td>
  <td>199元/年</td>
  <td rowspan="2">个人+日常网页为主</td>
</tr>
<tr>
  <td>Lanan #Bronze</td>
  <td>60G/月</td>
  <td>299元/年</td>
</tr>
<tr>
  <td>Lanan #Silver</td>
  <td>120G/月</td>
  <td>499元/年</td>
  <td>个人+日常浏览网页+少许视频</td>
</tr>
<tr>
  <td>Lanan #Gold</td>
  <td>240G/月</td>
  <td>899元/年</td>
  <td rowspan="2">个人+日常浏览网页+视频</td>
</tr>
<tr>
  <td>Lanan #Platinum</td>
  <td>360G/月</td>
  <td>1199元/年</td>
</tr>
<tr>
  <td>Lanan #Diamond</td>
  <td>600G/月</td>
  <td>1299/年</td>
  <td>朋友间共享+日常网页+视频</td>
</tr>
<tr>
  <td>Lanan #Master</td>
  <td>1200G/月</td>
  <td>1999元/年</td>
  <td>企业套餐+多员工使用</td>
</tr>
</table>

> **TIPs**<br>选购推荐，轻度用户（浏览网页/查询/社交等轻度流量消耗）建议购买按量付费的套餐；重度用户及长期用户（视频等流量大户）建议购买年付套餐(折扣多流量够)<br>购买时，建议通过本站链接进入，使用优惠码享受折扣优惠。

### （三）其他说明

- 客户端教程和下载
  - [网站](https://url.iszy.xyz/lanan)右上角点击**客户端&教程**即可获取客户端和教程。
  - **注：近期力度加强，为保安全，请挂代理后方可访问**）
- 官方联系
  - 网站提供在线咨询服务
  - [telegram 官方群组](https://t.me/niuniandaji)

-->

<h2 id="八、闲鱼网络"><a href="#八、闲鱼网络" class="headerlink" title="八、闲鱼网络"></a>八、闲鱼网络</h2><p><a href="https://url.iszy.xyz/dinastio">官网传送门</a></p>
<p>邀请码：<code>vXd43WA0</code></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#%E9%97%B2%E9%B1%BC%E7%BD%91%E7%BB%9C">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）简介-1"><a href="#（一）简介-1" class="headerlink" title="（一）简介"></a>（一）简介</h3><p>这是一家比较新的 SS 机场，在 clash 客户端的加持下，简单易用效果好。经过测试，线路体验不错，也有部分解锁流媒体的线路，足够日常使用了。定价较为激进，非常适合价格敏感型用户使用，属于买不了吃亏，买不了上当的类型。</p>
<h3 id="（二）套餐-1"><a href="#（二）套餐-1" class="headerlink" title="（二）套餐"></a>（二）套餐</h3><blockquote>
<p>全国内中继，仅高级订阅包含 IEPL 专线接入。</p>
</blockquote>
<table>
<thead>
<tr>
<th>订阅</th>
<th>流量</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>基础订阅</td>
<td>100G&#x2F;月</td>
<td>20 元&#x2F;季度</td>
</tr>
<tr>
<td>入门订阅</td>
<td>200G&#x2F;月</td>
<td>20 元&#x2F;月</td>
</tr>
<tr>
<td>高级订阅</td>
<td>300G&#x2F;月</td>
<td>30 元&#x2F;月</td>
</tr>
</tbody></table>
<h3 id="（三）其他说明"><a href="#（三）其他说明" class="headerlink" title="（三）其他说明"></a>（三）其他说明</h3><ul>
<li>客户端教程和下载<ul>
<li>进入<a href="https://url.iszy.xyz/dinastio">网站</a>，左侧列表就有使用说明，各平台说明较全。</li>
</ul>
</li>
<li>官方联系<ul>
<li>暂时好像只看到工单系统一种方式</li>
</ul>
</li>
</ul>
<h2 id="九、Shuttle"><a href="#九、Shuttle" class="headerlink" title="九、Shuttle"></a>九、Shuttle</h2><p><a href="https://url.iszy.xyz/shuttle">官网传送门</a></p>
<p><a href="https://www.iszy.cc/page/speed-test-collection/#Shuttle">⭐⭐ 测速 ⭐⭐</a></p>
<h3 id="（一）优惠-6"><a href="#（一）优惠-6" class="headerlink" title="（一）优惠"></a>（一）优惠</h3><blockquote>
<p>本站专属优惠</p>
</blockquote>
<p>使用本站专属优惠码，享 <strong>85 折</strong>优惠！</p>
<p>优惠码: <code>iszy</code></p>
<p>(新购续费均可使用 只能用于季付及以上套餐)</p>
<blockquote>
<p>官方优惠</p>
</blockquote>
<p>以下为旧优惠，不确定还有没有~</p>
<ul>
<li>新购套餐和续费产品同时可用：<ul>
<li>优惠代码 1：<code>P9SHYY0C7E</code><br><strong>7 折优惠</strong><br>适用于年付、两年付、三年付</li>
<li>优惠代码 2：<code>EC7Q4US4AK</code><br><strong>8 折循环优惠</strong><br>适用于月付、季付、半年付</li>
</ul>
</li>
<li>按季度、年度等购买套餐有更多优惠</li>
<li>充值优惠<ul>
<li>充 100 到账 110</li>
<li>充 200 到账 230</li>
<li>充 300 到账 350</li>
<li>充 500 到账 600</li>
<li>充 1000 到账 1200</li>
</ul>
</li>
</ul>
<h3 id="（二）简介-6"><a href="#（二）简介-6" class="headerlink" title="（二）简介"></a>（二）简介</h3><p>这是最近找到的一家 V2ray 机场，价格合适，流量给的也不少，提供 BGP 中转线路和两倍率的 IPLC 专线线路。经过最近一段时间的使用，可以说是非常稳定，速度给力，主流客户端都能够支持的比较好，可以推荐一下。</p>
<p>另外，我发现不少用户其实有小众国家线路的需求，因为使用人数不多，大多数机场一般不提供这些服务。这家机场应用户需求，提供了不少小众国家线路，有此类需求的用户可以考虑一下。</p>
<ul>
<li>线路上，所有节点都提供了一条 BGP 中转和一条两倍率的 IPLC 线路。</li>
<li>除了用户集中的香港有三台服务器节点，也就是六条线路外，其他地区均只有一台服务器节点，也就是两条线路，不过速度上经过测试绝对满足需求。</li>
<li>地区上，除香港外的地区有，美国、台湾、日本、韩国、新加坡、印度、菲律宾、加拿大、阿根廷、英国、法国、德国、荷兰、澳大利亚、俄罗斯、土耳其、埃及</li>
</ul>
<p>使用人数很少的小众地区节点性能不会特别高，有 BGP 中转和 IPLC 专线加持，我觉得应当是够用的，大家可以参考参考<a href="https://www.iszy.cc/page/speed-test-collection/#Shuttle">⭐⭐ 测速 ⭐⭐</a>。</p>
<h3 id="（三）套餐-6"><a href="#（三）套餐-6" class="headerlink" title="（三）套餐"></a>（三）套餐</h3><blockquote>
<p>套餐间线路没有区别，请按需选购。<br>按季度、年度等购买套餐有更多优惠哦。</p>
</blockquote>
<p>订阅服务</p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Nano⭐</strong></td>
<td>200G&#x2F;月</td>
<td>20 元&#x2F;月</td>
</tr>
<tr>
<td>Micro</td>
<td>360G&#x2F;月</td>
<td>36 元&#x2F;月</td>
</tr>
<tr>
<td>Small</td>
<td>520G&#x2F;月</td>
<td>52 元&#x2F;月</td>
</tr>
<tr>
<td>Medium</td>
<td>1000G&#x2F;月</td>
<td>100 元&#x2F;月</td>
</tr>
<tr>
<td>Large</td>
<td>1640G&#x2F;月</td>
<td>164 元&#x2F;月</td>
</tr>
</tbody></table>
<p>不限时流量包</p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>流量</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>Special</td>
<td>160G</td>
<td>80 元</td>
</tr>
<tr>
<td>Lite</td>
<td>340G</td>
<td>170 元</td>
</tr>
<tr>
<td>Pro</td>
<td>700G</td>
<td>350 元</td>
</tr>
<tr>
<td>Ultra</td>
<td>1420G</td>
<td>710 元</td>
</tr>
</tbody></table>
<h3 id="（四）其他说明-4"><a href="#（四）其他说明-4" class="headerlink" title="（四）其他说明"></a>（四）其他说明</h3><ul>
<li>客户端教程和下载<ul>
<li>进入<a href="https://shuttle.onl/index.php?rp=/knowledgebase">帮助中心</a>，说明比较完善。</li>
</ul>
</li>
<li>官方联系<ul>
<li>在官网可以使用工单、在线客服两种方式</li>
<li>还提供了官方 tg 群组，可以随时交流，购买套餐后可在套餐页看到进群链接</li>
</ul>
</li>
</ul>
</details>

<hr>
<ul>
<li>本站仅做介绍和引荐，不参与购买、服务和售后，此类问题请通过官方联系方式联系官方，一般可以通过<code>工单</code>或 <code>tg 群</code>的方式。</li>
<li>如有疑问，可在评论区回复。</li>
</ul>
]]></content>
      <categories>
        <category>推广</category>
      </categories>
      <tags>
        <tag>翻墙</tag>
        <tag>科学上网</tag>
        <tag>V2Ray</tag>
        <tag>ssr</tag>
        <tag>机场</tag>
        <tag>SS</tag>
        <tag>Trojan</tag>
        <tag>网络加速</tag>
        <tag>代理推荐</tag>
        <tag>酸酸乳</tag>
        <tag>ssr机场</tag>
        <tag>机场推荐</tag>
        <tag>机场评测</tag>
        <tag>V2Ray推荐</tag>
        <tag>代理</tag>
        <tag>推荐</tag>
        <tag>加速</tag>
        <tag>VPS</tag>
        <tag>V2Ray机场</tag>
        <tag>ssr/v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>解决WIN 10中Acrobat图标异常问题</title>
    <url>/post/e2fa1522.html</url>
    <content><![CDATA[<p>在 WIN 10 上，Acrobat 的快捷方式图标总是出现异常，令人十分困扰。今天终于找到了解决的方法，在此记录一下。</p>
<span id="more"></span>

<h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p>Acrobat 的图标异常问题，究其原因是 WIN 10 系统自带的照片 APP 并不能很好地支持 ico 文件。而照片 APP 一般会被设置为系统默认图片查看器，有时就会出现图标显示异常的问题。如果有其他的图标出现显示异常，也有可能是这个原因。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>知道了问题，那解决起来就非常简单了。那就是把<code>.ico</code>类型文件的关联程序设置为<code>画图</code>。</p>
<p>设置关联程序的办法有如下几个。</p>
<ol>
<li>找到任意 ico 文件，或将任意文件改为<code>.ico</code>后缀。右键点击该文件，在打开方式中把默认程序设置为画图。</li>
<li>在<code>设置</code>-<code>应用</code>-<code>默认应用</code>-<code>按文件类型指定默认应用</code>中找到<code>.ico</code>，将默认程序设置为画图。</li>
<li>在控制面板中也能找到。在<code>控制面板</code>-<code>程序</code>-<code>默认程序</code>-<code>将文件类型或协议与程序关联</code>中，选择<code>.ico</code>类型进行设置即可。不过最新的 WIN 10，在这里会跳回设置，按照上一种进行设置即可。</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Adobe</tag>
        <tag>Arcobat</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode - Z字形变换</title>
    <url>/post/fd36c6eb.html</url>
    <content><![CDATA[<h4 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h4><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>
<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L   C   I   R</span><br><span class="line">E T O E S I I G</span><br><span class="line">E   D   H   N</span><br></pre></td></tr></table></figure>

<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p>
<span id="more"></span>
<p>请你实现这个将字符串进行指定行数变换的函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure>



<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 3</span><br><span class="line">输出: &quot;LCIRETOESIIGEDHN&quot;</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 4</span><br><span class="line">输出: &quot;LDREOEIIECIHNTSG&quot;</span><br></pre></td></tr></table></figure>

<p>解释:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure>

<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>拿到这个题目，第一时间就可以想到，根据题中图示构造二维数组，先将数据按照相应的样子存储进去，最后再从数组中按行取出，但是这样会有占用更多内存空间的风险。所以，我这边还思考了第二种解法：就是直接根据规律计算出下一个要输出的字符的下标，直接输出即可，无需再创建多余的二维数组。</p>
<ul>
<li>第一种解法：构造二维数组</li>
</ul>
<p>构造二位数组最主要的就是计算出这个二维数组有多少列，列数有了，按照Z型规律将原字符串塞进去就行了，计算列数代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getColNum</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> s.length() / (<span class="number">2</span> * n - <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> s.length() % (<span class="number">2</span> * n - <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> x + <span class="number">1</span> + x * (n - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (y &gt;= n) &#123;</span><br><span class="line">            l = l + <span class="number">1</span> + y % n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种解法：计算下一个要输出的字符的下标<br>直接看github代码吧：<a href="https://github.com/Fatezhang/DataStructureAndAlgorithm/tree/master/Algorithm/src/main/java/Alogrithm/Alogrithm/ZigZagConversion">点这里</a></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中map新的骚操作</title>
    <url>/post/275f7d84.html</url>
    <content><![CDATA[<h4 id="在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下："><a href="#在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：" class="headerlink" title="在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下："></a>在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：</h4><blockquote>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>computeIfPresent</code> 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null<br><code>computeIfAbsent</code>  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值<br><code>compute</code>          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。</p>
</blockquote>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class MapTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(1,&quot;zhang&quot;);</span><br><span class="line">        // computeIfPresent 根据之前的key/value 如果oldValue 不为null 则根据提供的方法返回一个新的值 并进行新值对旧值的替换</span><br><span class="line">        System.out.println(&quot; 1 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class="line">            return key + value;//原值不为null新值不为null 新值替换旧值</span><br><span class="line">        &#125;));</span><br><span class="line">        // 否则删除键值对</span><br><span class="line">        System.out.println(&quot; 2 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class="line">            return null;//原值不为null新值为null 删除键值对</span><br><span class="line">        &#125;));</span><br><span class="line">        map.put(1,null);</span><br><span class="line">        System.out.println(&quot; 3 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class="line">            return &quot;jiaheng&quot;;//原值为null 不做更改</span><br><span class="line">        &#125;));</span><br><span class="line">        // computeIfAbsent 根据之前的key 如果旧值为空或者key不存在 就按照方法用新值替换旧值 新值为null不做替换</span><br><span class="line">        map.put(1,&quot;zhang&quot;);</span><br><span class="line">        System.out.println(&quot; 4 ---&gt; &quot; + map.computeIfAbsent(1,k-&gt;&#123;</span><br><span class="line">            return null;// 不会被替换旧值 返回原值</span><br><span class="line">        &#125;));</span><br><span class="line">        System.out.println(&quot; 5 ---&gt; &quot; + map.computeIfAbsent(2,k-&gt;&#123;</span><br><span class="line">            k = k*k;</span><br><span class="line">            return k.toString();// key=2不存在 直接新建并存入新值</span><br><span class="line">        &#125;));</span><br><span class="line">        // compute类似于computeIfAbsent和computeIfPresent的合体</span><br><span class="line">        map.put(1,null);</span><br><span class="line">        System.out.println(&quot; 6 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class="line">            return &quot;张&quot;;// 原值为null新值不为null 新值替换旧值 此处与computeIfPresent不同</span><br><span class="line">        &#125;));</span><br><span class="line">        System.out.println(&quot; 7 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class="line">            v = (k*10) + v;</span><br><span class="line">            return v;// 新值不为null 替换旧值</span><br><span class="line">        &#125;));</span><br><span class="line">        System.out.println(&quot; 8 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class="line">            return null;// 新值为null 删除键值对</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        // 总结</span><br><span class="line">        // computeIfPresent 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null</span><br><span class="line">        // computeIfAbsent  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值</span><br><span class="line">        // compute          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>开发日记</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Docker快速部署ASF(ArchiSteamFarm)挂卡</title>
    <url>/post/86b0cffd.html</url>
    <content><![CDATA[<p>今天来介绍一下超简单的使用 Docker 部署 ASF 的方法。在部署上，相对一般的部署，使用 Docker 会简单许多，今天我就来介绍一下如何使用 Docker 部署 ASF。</p>
<span id="more"></span>

<h2 id="ArchiSteamFarm"><a href="#ArchiSteamFarm" class="headerlink" title="ArchiSteamFarm"></a>ArchiSteamFarm</h2><p>这个软件就是用来 Steam 挂卡的，相信查到这篇文章的人应该都知道 Steam 挂卡是什么吧。在之前的一篇文章——<a href="https://www.iszy.cc/2018/08/08/asf-steam/">在 Ubuntu 16.04 环境下使用 ASF(v3) 实现云挂卡</a>里，我已经介绍了部署 ArchiSteamFarm 的一般流程，以及 ASF 的两步验证、IPC、在 Telegram 中管理 ASF 等内容，感兴趣的可以了解一下。</p>
<h2 id="为什么使用-Docker"><a href="#为什么使用-Docker" class="headerlink" title="为什么使用 Docker"></a>为什么使用 Docker</h2><p>我也不想多介绍 Docker，大家可以自己去搜索一下。为什么要用 Docker 呢，那就是简单。</p>
<p>由于 Docker 确保了执行环境的一致性，不用在意系统环境，你只需要运行做好的 Docker 镜像，部署就完成了，又快又好。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>我是用一键脚本进行安装的，非常简便。</p>
<p>Ubuntu 系统使用以下脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>

<p>CentOS 系统使用以下脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><p>创建一个文件夹用于存储配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/asf &amp;&amp; cd /home/asf</span><br></pre></td></tr></table></figure>

<h4 id="创建配置文件-1"><a href="#创建配置文件-1" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>一样，我们需要创建 ASF 需要使用的配置文件。建议使用<a href="https://justarchinet.github.io/ASF-WebConfigGenerator/#/">ASF 配置文件生成器</a>进行生成<code>ASF.json</code>和<code>botname.json</code>文件，其中<code>botname</code>为机器人名称。</p>
<p>将生成的全局配置存储为<code>ASF.json</code>，生成的机器人配置存储为<code>botname.json</code>，可以将<code>botname</code>改成你喜欢的名称。</p>
<h4 id="IPC-端口配置"><a href="#IPC-端口配置" class="headerlink" title="IPC 端口配置"></a>IPC 端口配置</h4><p>在使用 docker 镜像的时候，需要让 IPC 在镜像内绑定到<code>0.0.0.0:1242</code>，否则外部无法访问。只需要添加配置文件<code>IPC.config</code>，填入以下内容。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Kestrel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Endpoints&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;HTTP&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://*:1242&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><p>如果还有其他需要配置的文件，也要将配置文件放置在此处，如 2FA 配置文件<code>botname.maFile</code>。</p>
<h3 id="启动-Docker-镜像"><a href="#启动-Docker-镜像" class="headerlink" title="启动 Docker 镜像"></a>启动 Docker 镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull justarchi/archisteamfarm</span><br><span class="line">docker run -it -p 127.0.0.1:1242:1242 -p [::1]:1242:1242 -v /home/asf:/app/config --name asf justarchi/archisteamfarm</span><br></pre></td></tr></table></figure>

<p>注意将<code>/home/asf</code>改成你之前存储配置文件的文件夹。</p>
<p>这个命令运行后，将会进入镜像和程序进行交互，可能会有需要输入的内容，比如 Steam 的二次验证等。等程序正常运行后，按<code>ctrl+P+Q</code>撤出镜像并让镜像继续在后台执行。</p>
<p>这样运行下来，只有本地能够访问 1242 端口，建议保持这样，比较安全，可以使用 Nginx 进行反代 IPC 进行使用。</p>
<p>如果想要直接绑定到<code>0.0.0.0:1242</code>，可以将命令改成如下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -p 1242:1242 -v /home/asf:/app/config --name asf justarchi/archisteamfarm</span><br></pre></td></tr></table></figure>

<h3 id="ASF-的启动和停止"><a href="#ASF-的启动和停止" class="headerlink" title="ASF 的启动和停止"></a>ASF 的启动和停止</h3><ul>
<li>启动: <code>docker start asf</code></li>
<li>停止: <code>docker stop asf</code></li>
</ul>
<h2 id="Nginx-反代-IPC-配置"><a href="#Nginx-反代-IPC-配置" class="headerlink" title="Nginx 反代 IPC 配置"></a>Nginx 反代 IPC 配置</h2><p>可以参考一下，由 ASF 作者提供。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen *:443 ssl;</span><br><span class="line">        server_name asf.mydomain.com;</span><br><span class="line">        ssl_certificate /path/to/your/certificate.crt;</span><br><span class="line">        ssl_certificate_key /path/to/your/certificate.key;</span><br><span class="line"></span><br><span class="line">	location /Api/NLog &#123;</span><br><span class="line">		proxy_pass http://127.0.0.1:1242;</span><br><span class="line">#		proxy_set_header Host 127.0.0.1; # Only if you need to override default host</span><br><span class="line">		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">		proxy_set_header X-Forwarded-Host $host:$server_port;</span><br><span class="line">		proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">		proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">		proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">		# We add those 3 extra options for websockets proxying, see https://nginx.org/en/docs/http/websocket.html</span><br><span class="line">		proxy_http_version 1.1;</span><br><span class="line">		proxy_set_header Connection &quot;Upgrade&quot;;</span><br><span class="line">		proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://127.0.0.1:1242;</span><br><span class="line">#		proxy_set_header Host 127.0.0.1; # Only if you need to override default host</span><br><span class="line">		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">		proxy_set_header X-Forwarded-Host $host:$server_port;</span><br><span class="line">		proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">		proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">		proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
        <tag>Steam</tag>
        <tag>ArchiSteamFarm</tag>
        <tag>挂卡</tag>
      </tags>
  </entry>
  <entry>
    <title>nodepad++不用插件去重的方法</title>
    <url>/post/ccc82c30.html</url>
    <content><![CDATA[<p>在工作中，当我们需要对一个文本中的行进行去重统计的时候，会发现对于文本的去重并不是那么好处理。而nodepad++的去重插件一般人又懒得去安装，不巧在网上找到这样一个去重的小技巧，即使用正则表达式进行去重，简直方便快捷。<br>在这里分享出来，希望大家能够用的上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^(.*?)$\s+?^(?=.*^\1$)</span><br></pre></td></tr></table></figure>
<p><img src="https://blog.yimik.com/wp-content/uploads/2015/11/rm_duplicate_rows.png" alt="使用nodepad++去重"></p>
<p>点击全部替换，就可以将重复行全部去掉喽</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发日记</tag>
        <tag>工作技巧</tag>
        <tag>nodepad++</tag>
      </tags>
  </entry>
  <entry>
    <title>超好用的chrome浏览器增强插件</title>
    <url>/post/a21e1b6c.html</url>
    <content><![CDATA[<p>今天来分享一下一个超好用的 chrome 浏览器增强插件，让 chrome 更加符合国人的使用习惯。</p>
<span id="more"></span>

<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>许多朋友都喜欢 chrome 的简洁、纯净，没有国产套壳浏览器的杂乱、流氓。但是 chrome 的纯净又带来了另一个问题，缺失了许多适应国人使用习惯的常见功能，需要通过扩展插件来实现。而且其实也不太容易找到一个优秀的扩展插件，毕竟在谷歌被 404 的情况下，国人大多还是在使用国内 chromium 内核的浏览器，没有这样的需求。</p>
<p>我一直以来都是使用 chrome 浏览器的，毕竟有条件直接使用谷歌的情况下，chrome 套件用着还是非常舒服的，但是 chrome 没有双击关闭浏览器标签和关闭最后一个标签直接关闭浏览器不太符合我的使用习惯，一直不是很让我满意。你可以说这些都是没有必要的，适应一下就行。比如，可以使用鼠标中键关闭标签这个所有浏览器通用的方法，但是我鼠标中键比较硬，用起来就是没有双击关闭舒服。</p>
<p>当然，我也是不愿意为了这些妥协去用国内的那些流氓浏览器，现在有能够给 chrome 加上这些功能的简单方法，那自然是极好的。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这是一个超好用的 chrome 浏览器增强插件，让 chrome 更加符合国人的使用习惯。</p>
<p>官网链接：<a href="https://shuax.com/portfolio/greenchrome/">点击访问</a></p>
<p>GreenChrome 插件直接下载地址：<a href="https://shuax.com/gc">点击下载</a></p>
<p><img src="https://img.iszy.xyz/20190318220055.png"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>只需要将下载下来的压缩包解压，将其中对应版本的 dll 放置在<code>chrome.exe</code>同目录下即可。再次打开就已经安装成功。</p>
<h3 id="如何判断是否安装成功"><a href="#如何判断是否安装成功" class="headerlink" title="如何判断是否安装成功"></a>如何判断是否安装成功</h3><p>如果安装成功，打开设置页面的侧边栏，可以看到<code>设置GreenChrome</code>选项。</p>
<p><img src="https://img.iszy.xyz/20190318220120.png"></p>
<p>在关于页面，也应该能够看到 GreenChrome 的标记。</p>
<p><img src="https://img.iszy.xyz/20190318220132.png"></p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>以下功能均可在设置页面自行开关，一般情况下，默认即可。</p>
<h3 id="界面增强"><a href="#界面增强" class="headerlink" title="界面增强"></a>界面增强</h3><ul>
<li>双击关闭标签</li>
<li>右键关闭标签页</li>
<li>保留最后标签</li>
<li>悬停快速标签切换</li>
</ul>
<h3 id="功能增强"><a href="#功能增强" class="headerlink" title="功能增强"></a>功能增强</h3><ul>
<li>追加 Chrome 运行参数</li>
<li>启动时运行程序</li>
<li>老板键</li>
<li>空白新标签页</li>
</ul>
<h3 id="鼠标手势"><a href="#鼠标手势" class="headerlink" title="鼠标手势"></a>鼠标手势</h3><ul>
<li>支持任意形状</li>
<li>支持自定义功能</li>
<li>丰富的设置</li>
<li>灵敏度可调节</li>
</ul>
<h3 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h3><ul>
<li>便携化绿色版</li>
<li>内置 hosts</li>
<li>完美支持 32 位，64 位</li>
<li>按键转换</li>
</ul>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="进入设置"><a href="#进入设置" class="headerlink" title="进入设置"></a>进入设置</h3><p>可以通过如下位置进入设置。</p>
<p><img src="https://img.iszy.xyz/20190318220144.png"></p>
<p>如果老版本 chrome 没有出现设置选项，还可以直接点击以下链接进行设置。</p>
<p>设置链接：<a href="http://settings.shuax.com/gc/">settings.shuax.com&#x2F;gc&#x2F;</a></p>
<h3 id="设置界面"><a href="#设置界面" class="headerlink" title="设置界面"></a>设置界面</h3><p><img src="https://img.iszy.xyz/20190318220157.png"></p>
<h3 id="我的设置"><a href="#我的设置" class="headerlink" title="我的设置"></a>我的设置</h3><p>对我来说，以下功能比较有用。</p>
<ul>
<li>双击关闭标签页</li>
<li>防止关闭最后的标签时关闭整个浏览器</li>
<li>新标签打开书签</li>
</ul>
<p>其他高级功能，请看官们自行探索。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Git 进行 Squash commit</title>
    <url>/post/4365214e.html</url>
    <content><![CDATA[<hr>
<h2 id="Git-更改-commit-的操作"><a href="#Git-更改-commit-的操作" class="headerlink" title="Git 更改 commit 的操作"></a>Git 更改 commit 的操作</h2><ol>
<li><p><code> git rebase -i HEAD~&lt;number 代表需要处理几个 commit&gt;</code></p>
</li>
<li><pre><code class="shell"># Rebase ddebba2..a54dc28 onto 9d9ba60 (15 commands)
#
# Commands:
# p, pick &lt;commit&gt; = use commit
# r, reword &lt;commit&gt; = use commit, but edit the commit message
# e, edit &lt;commit&gt; = use commit, but stop for amending
# s, squash &lt;commit&gt; = use commit, but meld into previous commit
# f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit&#39;s log message
# x, exec &lt;command&gt; = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)
# d, drop &lt;commit&gt; = remove commit
# l, label &lt;label&gt; = label current HEAD with a name
# t, reset &lt;label&gt; = reset HEAD to a label
# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]
# .       create a merge commit using the original merge commit&#39;s
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c &lt;commit&gt; to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 根据上面每一个指令操作，更改以下类似内容：</span><br><span class="line"></span><br><span class="line">   ```shell</span><br><span class="line">   pick 54f205a Update README.md</span><br><span class="line">   pick e1deb05 Update README.md</span><br><span class="line">   pick 3a33ad2 Update README.md</span><br><span class="line">   pick 225a513 Update README.md</span><br><span class="line">   pick d44d34b Update README.md</span><br><span class="line">   pick 657d8c2 Update README.md</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pick 54f205a Update README.md</span><br><span class="line">pick e1deb05 Update README.md</span><br><span class="line">squash 3a33ad2 Update README.md</span><br><span class="line">squash 225a513 Update README.md</span><br><span class="line">squash d44d34b Update README.md</span><br><span class="line">squash 657d8c2 Update README.md</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>这样就可以把最上面两个 Message 保留，把后面的 Message 去掉</p>
</li>
<li><p>最后<code>git push --force</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>经典压缩软件WinRAR官方中文无广告正式版</title>
    <url>/post/afe0c04b.html</url>
    <content><![CDATA[<p>国内代理版本的 WinRAR 无论是否有 key，都有广告，这怎么能忍，尤其是其实有简体中文版本的无广告商业付费 WinRAR 的时候。在这里分享一下简体中文版本的无广告商业付费 WinRAR 的地址。</p>
<span id="more"></span>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这个不是中国官网上代理的所谓个人免费版本，无论是否有 key 文件，都会有广告，实在是无法忍受。直接去 WinRAR 官网下载的简体中文版本也是国内代理的版本，也是不对的。</p>
<p>注意，有下图字样的才是正确的版本。</p>
<p><img src="https://img.iszy.xyz/20190318221343.png"></p>
<h2 id="官网下载试用地址"><a href="#官网下载试用地址" class="headerlink" title="官网下载试用地址"></a>官网下载试用地址</h2><p>最新版本<code>5.71</code>，下载链接已更新。</p>
<ul>
<li>简体中文 64 位：<a href="https://www.win-rar.com/fileadmin/winrar-versions/sc20190509/wrr/winrar-x64-571sc.exe">点击下载</a></li>
<li>简体中文 32 位：<a href="https://www.win-rar.com/fileadmin/winrar-versions/sc20190509/wrr/wrar571sc.exe">点击下载</a></li>
</ul>
<h2 id="支持正版"><a href="#支持正版" class="headerlink" title="支持正版"></a>支持正版</h2><p>WinRAR 一路走来，陪伴了我们那么久，也是受盗版侵害非常严重的软件之一。本站不提供破解版和补丁，想要用盗版的，我相信一定有办法找到的，网络上的注册机、破解补丁到现在的最新版本都还是适用的。</p>
<p>如果有能力，还是希望大家能够购买正版支持一下自己一路用下来的软件。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>分享一款安卓开源超强无广告免费追书神器APP——阅读</title>
    <url>/post/6c26f20f.html</url>
    <content><![CDATA[<p>今天发现一个开源的网络小说追书 APP，暂时只支持安卓。由于版权原因并不能上架应用商店，但是不妨碍人家强啊。</p>
<span id="more"></span>

<blockquote>
<p>参考链接: <a href="https://www.hostfans.cn/2162.html">无广告追书神器 APP-阅读</a></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>当您搜索一本书的时，阅读会将该书的书名以关键词的形式提交到各个第三方网络文学网站进行搜索，并通过自定义书源的格式进行解析，方便阅读。</p>
<h2 id="应用界面"><a href="#应用界面" class="headerlink" title="应用界面"></a>应用界面</h2><p><img src="https://img.iszy.xyz/20190318220006.png"></p>
<h2 id="应用特点"><a href="#应用特点" class="headerlink" title="应用特点"></a>应用特点</h2><ul>
<li>兼容安卓 4.4 及以上版本</li>
<li>支持自定义书源，上百个书源不是问题</li>
<li>开发大神 BUG 修的快，功能加的多，日常吐血 2 更</li>
</ul>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><ul>
<li>全局状态栏沉浸</li>
<li>自定义多线程搜索、缓存</li>
<li>支持一键缓存</li>
<li>预加载功能，预加载 5 章</li>
<li>点击章节名跳转小说目录</li>
<li>自定义字体、阅读背景、文字颜色、背景颜色</li>
<li>简繁体转换</li>
<li>自由复制粘贴小说内容</li>
<li>支持本地、网络导入书源</li>
<li>支持本地、网络导入净化规则</li>
<li>等等。。。。。。</li>
</ul>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><ul>
<li>国内商店:<a href="https://www.coolapk.com/apk/com.gedoor.monkeybook">阅读(com.gedoor.monkeybook) - 酷安网</a></li>
<li>Github Release 地址: <a href="https://github.com/gedoor/MyBookshelf/releases">Releases·gedoor&#x2F;MyBookshelf·GitHub</a></li>
</ul>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>与正常小说软件无异，搜索小说，将小说放入书架进行阅读。有章节目录和更新提醒。</p>
<h2 id="书源"><a href="#书源" class="headerlink" title="书源"></a>书源</h2><h3 id="导入书源"><a href="#导入书源" class="headerlink" title="导入书源"></a>导入书源</h3><h4 id="整理版书源"><a href="#整理版书源" class="headerlink" title="整理版书源"></a>整理版书源</h4><p>作者已经维护了一份质量优秀的书源，初次安装没有书源的时候一般会跳出让你导入默认书源的提示。如果没有出现，也可以在<code>菜单栏</code>—<code>书源管理</code>里的右上角菜单里点击<code>书源同步</code>获取。内含 68 个书源，包括 8 个正版书城书源，和 60 个第三方书城的书源，主要是网络小说。</p>
<h4 id="其他书源"><a href="#其他书源" class="headerlink" title="其他书源"></a>其他书源</h4><p>同时，还有一些其他作者写的其他书源暂未包括在软件里，可以点击<a href="https://www.hostfans.cn/booksource">这里</a>前往获取。</p>
<h4 id="书源导入教程"><a href="#书源导入教程" class="headerlink" title="书源导入教程"></a>书源导入教程</h4><ul>
<li><a href="https://www.hostfans.cn/2201.html">网络书源导入教程</a></li>
<li><a href="https://www.hostfans.cn/2171.html">本地书源导入教程</a></li>
</ul>
<h3 id="制作书源"><a href="#制作书源" class="headerlink" title="制作书源"></a>制作书源</h3><p>这里提供了详细的书源制作教程，你可以自行制作添加属于你的书源。</p>
<p>点击前往<a href="https://www.hostfans.cn/make-course">书源制作教程</a>。</p>
<h2 id="阅读-App-爱好者博客"><a href="#阅读-App-爱好者博客" class="headerlink" title="阅读 App 爱好者博客"></a>阅读 App 爱好者博客</h2><p>上面的教程都来自这个<a href="https://www.hostfans.cn/">阅读 App 爱好者博客</a>，大家可以前往查看更多内容。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>阅读 App 是一个相当优秀的阅读软件，省去了大家大量地在网上搜索小说的时间，也让大家免于受到垃圾网站大量广告之苦，这也是我推荐这个应用的原因。但是终究看的还是盗版小说，如果大家喜欢喜欢那本小说，还是最好购买正版支持作者。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title>八数码问题宽度优先算法</title>
    <url>/post/f9578e0c.html</url>
    <content><![CDATA[<p>作业做到八数码问题，在此记录一下我的宽度优先算法的实现。</p>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>3×3 九宫格，放置 1 到 8 的 8 个数和一个空格，通过向空格的移动数字来改变九宫格的布局，最终达到目标状态。</p>
<p>要求：根据给定初始状态和目标状态，如何移动才能从初始状态到达目标状态。</p>
<h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><ul>
<li>宽度优先，open 表先进先出，采用队列实现，可以将 open 表和 close 表简化为同一张表。</li>
<li>约束条件是不能将空格移出九宫格。</li>
<li>只能前进，不允许后退。</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>初始状态存入 open 表</li>
<li>若 open 表为空，则无解</li>
<li>若 open 表不为空，open 表头移入 close 表</li>
<li>扩展该节点并存入 open 表，如果有目标节点，则结束。</li>
<li>没有目标节点，则转到 2。</li>
</ol>
<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><h3 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Node *father;<span class="comment">//父节点</span></span><br><span class="line">	<span class="type">int</span> p;<span class="comment">//八数码空白位置</span></span><br><span class="line">	<span class="type">int</span> cal;<span class="comment">//操作符</span></span><br><span class="line">	<span class="type">int</span> data[<span class="number">9</span>];<span class="comment">//状态数组</span></span><br><span class="line">	Node *next;<span class="comment">//队列下一节点</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">	<span class="built_in">Node</span>(<span class="type">int</span> p, <span class="type">int</span> cal, <span class="type">int</span> d[<span class="number">9</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Node* front;<span class="comment">//头指针</span></span><br><span class="line">	Node* open;<span class="comment">//open表指针</span></span><br><span class="line">	Node* close;<span class="comment">//close表指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Queue</span>();<span class="comment">//队列初始化</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(Node *)</span></span>;<span class="comment">//节点入队</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">DeQueue</span><span class="params">()</span></span>;<span class="comment">//open表移入close表，扩展节点</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">IsEnd</span><span class="params">()</span></span>;<span class="comment">//判断算法终止</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">IsExist</span><span class="params">(<span class="type">int</span> d[<span class="number">9</span>])</span></span>;<span class="comment">//判断状态是否存在</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">PrintResult</span><span class="params">()</span></span>;<span class="comment">//打印结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>几个用到的函数声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> target[<span class="number">9</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span> &#125;;<span class="comment">//目标状态</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CanGo</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;<span class="comment">//判断操作是否可行</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(<span class="type">int</span> d1[<span class="number">9</span>], <span class="type">int</span> d2[<span class="number">9</span>])</span></span>;<span class="comment">//判断状态是否相等</span></span><br></pre></td></tr></table></figure>

<h3 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建节点</span></span><br><span class="line">Node::<span class="built_in">Node</span>(<span class="type">int</span> p, <span class="type">int</span> cal, <span class="type">int</span> d[<span class="number">9</span>]) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;p = p;</span><br><span class="line">	<span class="keyword">this</span>-&gt;cal = cal;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">		data[i] = d[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列初始化</span></span><br><span class="line">Queue::<span class="built_in">Queue</span>() &#123;</span><br><span class="line">	front = close = open = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将节点存入open表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Queue::EnQueue</span><span class="params">(Node *n)</span> </span>&#123;</span><br><span class="line">	n-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	n-&gt;father = close;</span><br><span class="line">	open-&gt;next = n;</span><br><span class="line">	open = n;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一次运算</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Queue::DeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//判断算法是否结束，未结束则将open表开头移入close表</span></span><br><span class="line">	<span class="keyword">if</span> (close-&gt;next) &#123;</span><br><span class="line">		close = close-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//拓展节点并存入open表</span></span><br><span class="line">	<span class="type">int</span> p = close-&gt;p;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">CanGo</span>(p, <span class="number">1</span>)) &#123;</span><br><span class="line">		Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(p - <span class="number">1</span>, <span class="number">1</span>, close-&gt;data);</span><br><span class="line">		n-&gt;data[p - <span class="number">1</span>] = n-&gt;data[p - <span class="number">2</span>]; n-&gt;data[p - <span class="number">2</span>] = <span class="number">0</span>;<span class="comment">//移动空白位置</span></span><br><span class="line">		<span class="comment">//判断是否为目标</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">equal</span>(n-&gt;data, target)) &#123;</span><br><span class="line">			<span class="built_in">EnQueue</span>(n);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//不存在则入队</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">IsExist</span>(n-&gt;data)) <span class="built_in">EnQueue</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">CanGo</span>(p, <span class="number">2</span>)) &#123;</span><br><span class="line">		Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(p - <span class="number">3</span>, <span class="number">2</span>, close-&gt;data);</span><br><span class="line">		n-&gt;data[p - <span class="number">1</span>] = n-&gt;data[p - <span class="number">4</span>]; n-&gt;data[p - <span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">equal</span>(n-&gt;data, target)) &#123;</span><br><span class="line">			<span class="built_in">EnQueue</span>(n);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">IsExist</span>(n-&gt;data)) <span class="built_in">EnQueue</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">CanGo</span>(p, <span class="number">3</span>)) &#123;</span><br><span class="line">		Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(p + <span class="number">3</span>, <span class="number">3</span>, close-&gt;data);</span><br><span class="line">		n-&gt;data[p - <span class="number">1</span>] = n-&gt;data[p + <span class="number">2</span>]; n-&gt;data[p + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">equal</span>(n-&gt;data, target)) &#123;</span><br><span class="line">			<span class="built_in">EnQueue</span>(n);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">IsExist</span>(n-&gt;data)) <span class="built_in">EnQueue</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">CanGo</span>(p, <span class="number">4</span>)) &#123;</span><br><span class="line">		Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(p + <span class="number">1</span>, <span class="number">4</span>, close-&gt;data);</span><br><span class="line">		n-&gt;data[p - <span class="number">1</span>] = n-&gt;data[p]; n-&gt;data[p] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">equal</span>(n-&gt;data, target)) &#123;</span><br><span class="line">			<span class="built_in">EnQueue</span>(n);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">IsExist</span>(n-&gt;data)) <span class="built_in">EnQueue</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断算法是否终止，如果open表为空，说明没有解法</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Queue::IsEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (close == open) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历表，判断状态是否存在过</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Queue::IsExist</span><span class="params">(<span class="type">int</span> d[<span class="number">9</span>])</span> </span>&#123;</span><br><span class="line">	Node* tmp = front;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		tmp = tmp-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">equal</span>(tmp-&gt;data, d)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">while</span> (tmp-&gt;next);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Queue::PrintResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Node* tmp = open;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">		cout &lt;&lt; tmp-&gt;data[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (tmp-&gt;father-&gt;p &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		tmp = tmp-&gt;father;</span><br><span class="line">		cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;\t/\\&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;\t||&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">			cout &lt;&lt; tmp-&gt;data[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断操作是否可行</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CanGo</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> cal)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cal == <span class="number">1</span> &amp;&amp; p != <span class="number">1</span> &amp;&amp; p != <span class="number">4</span> &amp;&amp; p != <span class="number">7</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (cal == <span class="number">2</span> &amp;&amp; p != <span class="number">1</span> &amp;&amp; p != <span class="number">2</span> &amp;&amp; p != <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (cal == <span class="number">3</span> &amp;&amp; p != <span class="number">7</span> &amp;&amp; p != <span class="number">8</span> &amp;&amp; p != <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (cal == <span class="number">4</span> &amp;&amp; p != <span class="number">3</span> &amp;&amp; p != <span class="number">6</span> &amp;&amp; p != <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断两个数组是否完全相等，用于判断八数码状态是否经历过</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(<span class="type">int</span> d1[<span class="number">9</span>], <span class="type">int</span> d2[<span class="number">9</span>])</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (d1[i] != d2[i]) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (i &gt;= <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> d[<span class="number">9</span>] = &#123; <span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">5</span> &#125;;<span class="comment">//初始状态</span></span><br><span class="line">	<span class="type">int</span> success = <span class="number">0</span>;<span class="comment">//结果标志</span></span><br><span class="line">	Node* f = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">8</span>, <span class="number">-1</span>, d);<span class="comment">//建立初始节点</span></span><br><span class="line">	Queue table;<span class="comment">//新建链表</span></span><br><span class="line">	table.<span class="built_in">EnQueue</span>(f);<span class="comment">//将起始节点放入open表</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//当open表不为空，则继续运算</span></span><br><span class="line">	<span class="keyword">while</span> (!table.<span class="built_in">IsEnd</span>()) &#123;</span><br><span class="line">		success = table.<span class="built_in">DeQueue</span>();</span><br><span class="line">		<span class="keyword">if</span> (success == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (success == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (success == <span class="number">1</span>) table.<span class="built_in">PrintResult</span>();<span class="comment">//打印节点</span></span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No result!&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);<span class="comment">//按任意键退出</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://img.iszy.xyz/20190318211228.png"></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>程序不太好看，仅仅满足实现，欢迎指正。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>从namecheap转移域名到阿里云/万网</title>
    <url>/post/3b70a55d.html</url>
    <content><![CDATA[<p>由于国内的政策，在国内使用 cdn 等等网络服务需要使用自己的域名的，都需要一个网站备案。备案除了需要实名认证、国内网站空间、复杂的审核材料之外，还需要经过国内认证的域名注册商。也就是说必须将你要备案的域名也转移到国内才能进行备案，方便随时责任到户啊。今天我就将一个闲置的域名转移到了阿里云，不用白不用，不如备案一下，加速一下网站的静态资源。在这里简单记录下流程。</p>
<span id="more"></span>

<h2 id="获取转移码"><a href="#获取转移码" class="headerlink" title="获取转移码"></a>获取转移码</h2><p>首先需要在 namecheap 处获取转移码。</p>
<h3 id="进入域名转移面板"><a href="#进入域名转移面板" class="headerlink" title="进入域名转移面板"></a>进入域名转移面板</h3><p>首先在个人面板里点击这里。</p>
<p><img src="https://img.iszy.xyz/20190318212633.png"></p>
<h3 id="解锁域名"><a href="#解锁域名" class="headerlink" title="解锁域名"></a>解锁域名</h3><p>如果域名是锁定状态，需要先点击这里进行解锁。</p>
<p><img src="https://img.iszy.xyz/20190318212645.png"></p>
<h3 id="获取转移码-1"><a href="#获取转移码-1" class="headerlink" title="获取转移码"></a>获取转移码</h3><p>解锁后，点击这里获取转移码，namecheap 将会将转移码通过邮箱方式发送到你的邮箱。</p>
<p><img src="https://img.iszy.xyz/20190318212656.png"></p>
<p><img src="https://img.iszy.xyz/20190318212708.png"></p>
<h2 id="转移域名"><a href="#转移域名" class="headerlink" title="转移域名"></a>转移域名</h2><h3 id="实名认证"><a href="#实名认证" class="headerlink" title="实名认证"></a>实名认证</h3><p>首先需要有一套实名认证的模板，在国内需要实名认证这是绕不过去的，在这里添加信息模板并进行实名认证。</p>
<p><img src="https://img.iszy.xyz/20190318212719.png"></p>
<h3 id="进行域名转入"><a href="#进行域名转入" class="headerlink" title="进行域名转入"></a>进行域名转入</h3><p>等实名认证通过以后，进入阿里云<a href="https://wanwang.aliyun.com/domain/transfers">域名转移页面</a>。</p>
<p>在这里按格式填写你要转入的域名和之前获取的转移码。</p>
<p><img src="https://img.iszy.xyz/20190318212733.png"></p>
<h3 id="验证审核"><a href="#验证审核" class="headerlink" title="验证审核"></a>验证审核</h3><p>点击立即转入后，选择刚刚已经实名认证的信息模板，支付转入费用（即续费域名一年），进入转移流程。</p>
<p>之前转入的时候这步没截图，该问题不大。</p>
<p>接下来，将会进行命名审核，验证转移密码，一般会很短时间内完成。</p>
<h2 id="namecheap-通过验证"><a href="#namecheap-通过验证" class="headerlink" title="namecheap 通过验证"></a>namecheap 通过验证</h2><p>阿里云流程结束后，将会等待 namecheap 释放域名，你将会收到一封由 namecheap 发送的验证邮件。</p>
<p><img src="https://img.iszy.xyz/20190318212747.png"></p>
<p>邮件上说，你如果要取消转移，才去点那个链接，需要等 5 天没有收到消息，namecheap 才会释放域名。其实，经过我的验证，点击那个链接，将会有<code>approve</code>和<code>reject</code>两个选项。点击<code>approve</code>以后，namecheap 就会直接通过验证，释放域名，几秒后，就会收到阿里云域名转移成功的通知。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>至此，域名转移成功，再等一段时间，阿里云会自己修改域名信息、实名认证等，过后就能正常操作域名了。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>备案</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>使用telegram来收发微信消息</title>
    <url>/post/a2c60e89.html</url>
    <content><![CDATA[<p>我一直非常喜欢使用 telegram，我个人觉得这是最好用的社交聊天工具。微信，我就用的少很多了，但是有时候说不得还是要用一下的。今天发现了<a href="https://github.com/blueset/ehForwarderBot">EH Forwarder Bot</a>这个好东西，可以用来在 telegram 上收发微信消息，当真是神奇。我马上决定来折腾一下。</p>
<span id="more"></span>

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="首要条件"><a href="#首要条件" class="headerlink" title="首要条件"></a>首要条件</h3><ol>
<li>你需要有一个能翻墙的服务器</li>
<li>你需要有一个 telegram 账号</li>
<li>你需要有一个微信账号</li>
</ol>
<p>差不多就是这样了。</p>
<p>顺便我的系统是<code>Ubuntu 18.04</code>，仅供参考。</p>
<h3 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h3><ol>
<li>这个 bot 其实是对微信网页版的一个封装，或许可能会被封微信网页版。我也不清楚，网上是这么说的来着，要做好心理准备。</li>
<li>虽然可能初始配置比较麻烦，但是想到之后就能用美腻的 tg 来用微信就很期待了。</li>
<li>由于是基于网页版微信，手机上的微信还不能关，但是由于微信支持在网页版微信登录的时候关闭手机上通知，所以还行吧。</li>
<li>需要自行将消息分类，不然会所有消息堆在一起。</li>
</ol>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="安装-python3-amp-pip3"><a href="#安装-python3-amp-pip3" class="headerlink" title="安装 python3 &amp; pip3"></a>安装 python3 &amp; pip3</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install python3-pip python3-dev python3-setuptools libtiff5-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev libmagic-dev ffmpeg -y</span><br></pre></td></tr></table></figure>

<h3 id="安装-EH-Forwarder-Bot"><a href="#安装-EH-Forwarder-Bot" class="headerlink" title="安装 EH Forwarder Bot"></a>安装 EH Forwarder Bot</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install ehforwarderbot</span><br><span class="line">pip3 install efb-telegram-master</span><br><span class="line">pip3 install efb-wechat-slave</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置-telegram"><a href="#配置-telegram" class="headerlink" title="配置 telegram"></a>配置 telegram</h3><h4 id="创建-bot"><a href="#创建-bot" class="headerlink" title="创建 bot"></a>创建 bot</h4><p>搜索<code>botfather</code>，注意是图中圈出的，不要找错了。</p>
<p><img src="https://img.iszy.xyz/20190318212915.png"></p>
<p>然后发送<code>/newbot</code>，开始创建 bot。</p>
<p><img src="https://img.iszy.xyz/20190318212925.png"></p>
<p>如图所示，发过<code>/newbot</code>以后，先发送 bot 的名称，类似于昵称，可以重复。再发送用户名，用户名需要唯一。顺序注意不要搞错。当然左边也有说明，照着说明来一般没有问题。</p>
<p>结束后，就会把你的 http api 给你，注意保存。</p>
<h4 id="配置-bot"><a href="#配置-bot" class="headerlink" title="配置 bot"></a>配置 bot</h4><p>继续在<code>botfather</code>中进行。</p>
<ol>
<li>输入<code>/setprivacy</code>，选择你创建的 bot，选择<code>Disable</code></li>
<li>输入<code>/setjoingroups</code>，选择你创建的 bot，选择<code>Enable</code></li>
<li>输入<code>/setcommands</code>，选择你创建的 bot，输入以下内容：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">link - 将会话绑定到 Telegram 群组</span><br><span class="line">chat - 生成会话头</span><br><span class="line">recog - 回复语音消息以进行识别</span><br><span class="line">extra - 获取更多功能</span><br></pre></td></tr></table></figure>

<p><img src="https://img.iszy.xyz/20190318212939.png"></p>
<p><img src="https://img.iszy.xyz/20190318212953.png"></p>
<p><img src="https://img.iszy.xyz/20190318213004.png"></p>
<h4 id="获取个人-chat-id"><a href="#获取个人-chat-id" class="headerlink" title="获取个人 chat id"></a>获取个人 chat id</h4><p>搜索<code>get_id_bot</code>，同样是图中圈出的。</p>
<p><img src="https://img.iszy.xyz/20190318213016.png"></p>
<p>发送<code>/start</code>即可获取自己的 chat id，留作后用。</p>
<p><img src="https://img.iszy.xyz/20190318213029.png"></p>
<h3 id="配置-EH-Forwarder-Bot"><a href="#配置-EH-Forwarder-Bot" class="headerlink" title="配置 EH Forwarder Bot"></a>配置 EH Forwarder Bot</h3><p>2.0 版本的 EH Forwarder Bot 需要自行创建配置文件。</p>
<h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>输入以下命令创建并编辑配置文件，路径可能不存在，需要另外创建。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.ehforwarderbot/profiles/default/config.yaml</span><br></pre></td></tr></table></figure>

<p>输入以下内容并保存。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">master_channel:</span> <span class="string">&quot;blueset.telegram&quot;</span></span><br><span class="line"><span class="attr">slave_channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;blueset.wechat&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建主端配置"><a href="#创建主端配置" class="headerlink" title="创建主端配置"></a>创建主端配置</h4><p>输入以下命令创建并编辑主端配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.ehforwarderbot/profiles/default/blueset.telegram/config.yaml</span><br></pre></td></tr></table></figure>

<p>输入以下内容并保存，<code>token</code>后替换为之前在<code>botfather</code>处获得的 http api，<code>admins</code>后面替换成<code>get_id_bot</code>处查询到的个人 id。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">token:</span> <span class="string">&quot;88888888:dGDe890Pml9lmp9PO9j9pJ9Pn9NMPO0nnki&quot;</span></span><br><span class="line"><span class="attr">admins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">88888888</span></span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="二维码扫描登录"><a href="#二维码扫描登录" class="headerlink" title="二维码扫描登录"></a>二维码扫描登录</h3><p>首先需要登录一次，以得到相关文件。输入以下内容启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ehforwarderbot</span><br></pre></td></tr></table></figure>

<p>终端上将会显示出一个二维码，使用手机微信扫一扫确认登陆。可以看到很快就会登陆成功，手机微信里也会显示网页微信已登录。</p>
<p>按下<code>ctrl+c</code>终止程序。</p>
<h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>守护进程肯定是需要的，总不能一直开着终端窗口吧。</p>
<p>创建 service 配置文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/ehforwarderbot.service</span><br></pre></td></tr></table></figure>

<p>输入以下内容并保存。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=EH Forwarder Bot instance</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line">Documentation=https://github.com/blueset/ehForwarderBot</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Environment=&#x27;EFB_PROFILE=/root/.ehforwarderbot/profiles/default/&#x27; &#x27;LANG=en_US.UTF-8&#x27; &#x27;PYTHONIOENCODING=utf_8&#x27; &#x27;EFB_DATA_PATH=/root&#x27;</span><br><span class="line">ExecStart=/usr/local/bin/ehforwarderbot --verbose --profile=$&#123;EFB_PROFILE&#125;</span><br><span class="line">Restart=on-abort</span><br><span class="line">KillSignal=SIGINT</span><br><span class="line">StandardOutput=journal+file:/var/log/efb.debug</span><br><span class="line">StardardError=journal+file:/var/log/efb.error</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=efb</span><br><span class="line">Alias=ehforwarderbot</span><br></pre></td></tr></table></figure>

<p><code>ExecStart</code>后的地址可能不同，可以输入<code>which ehforwarderbot</code>来查看你的地址进行替换。</p>
<p>接下来即可使用以下 service 操作。</p>
<ul>
<li><code>service ehforwarderbot start</code>: 启动</li>
<li><code>service ehforwarderbot status</code>: 查看状态</li>
<li><code>service ehforwarderbot stop</code>: 停止</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="添加-bot"><a href="#添加-bot" class="headerlink" title="添加 bot"></a>添加 bot</h3><p>添加刚刚创建的 bot，这个应该都明白吧。</p>
<h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><p>说明一下，后面的联系人参数是模糊查询，会列出找出的联系人并进行下一步操作。联系人包括人、群组、公众号。</p>
<ul>
<li><code>/chat 联系人</code>：聊天</li>
<li><code>/link 联系人</code>：可以进行多种操作，将联系人消息绑定到某个群组，或者设置该联系人免打扰。再次运行可重新绑定或取消免打扰。</li>
</ul>
<p>其他的可以查看参考文档研究研究。</p>
<h3 id="消息分组"><a href="#消息分组" class="headerlink" title="消息分组"></a>消息分组</h3><p>不能让所有消息都发到 bot 里吧，那也太乱了，所以需要对消息进行分组。</p>
<p>我讲一下将公众号消息全部分组到一个群里的过程。</p>
<ol>
<li>首先创建一个群组，似乎创建群组必须拉一个其他人的样子，我是自己有个小号，拉进去创建了群，再踢掉。</li>
<li>进入你刚刚创建的 bot，输入<code>/link 联系人</code>，选择<code>绑定</code>，在弹出的窗口中选择你刚刚创建的群组，bot 将被加入那个群组，以后该联系人的消息将会发送到那个群组中。</li>
<li>多个联系人可以绑定到一个群组中，重复进行第 2 步，即可将公众号都分组到一个群组里。</li>
</ol>
<p>注意：</p>
<ol>
<li>当群组只绑定了一个群组时，直接发消息就是回复该联系人。可以用于绑定单个人或群组。</li>
<li>当群组绑定了多个群组时，我没有试过直接回复会发生什么情况，或许需要使用<code>/chat</code>命令。我觉得一般用于绑定一堆不需要回复的公众号之类。</li>
<li>这个程序仅支持网页版微信支持的消息类型，可能会有部分消息接收不正常，被网页微信截断的情况，会提醒你去移动端查看。</li>
</ol>
<h3 id="使用技巧（转）"><a href="#使用技巧（转）" class="headerlink" title="使用技巧（转）"></a>使用技巧（转）</h3><blockquote>
<p>原文链接：<a href="https://meta.appinn.com/t/efb/3329">Efb 的一些小技巧</a></p>
</blockquote>
<ol>
<li>微信端退出后，可以在<code>Telegram Bot</code>里直接重新登录，但需要第二块屏幕来扫码二维码。</li>
<li>可以将所有公众号绑定到一个<code>Group</code>里</li>
<li>可以防止微信的撤回功能</li>
<li>微信客户端可设置手机静音功能，即开启<code>EFB</code>的时候，微信不发送通知</li>
<li>可以绑定「文件传输助手」，名称是<code>File Helper</code></li>
<li>使用<code>/link 李三</code>来绑定李三至<code>Group</code></li>
<li>使用<code>/info</code>来查看当前<code>Group</code>状态</li>
<li>建议使用与微信相同的联系人头像，且为<code>Group</code>命名为<code>李三.WeChat</code>以便区分</li>
<li>Telegram 的贴纸、GIF 可以直接发往微信，微信可正常显示</li>
<li>微信发来的表情、图片、视频等媒体文件，多数可正常显示，有部分有版权的表情无法显示，取决于微信网页端</li>
<li>红包、语音提醒、位置等功能取决于微信网页端功能（目前 EFB 框架尚无计划支持朋友圈类社交功能和语音&#x2F;视频通话）</li>
<li>在单独绑定的会话中，指定回复一条消息可以在微信中同样引用。（仅适用于文本消息）</li>
<li><code>Group</code>中除了添加<code>bot</code>，还能添加<code>Telegram</code>联系人，此时该<code>Telegram</code>联系人可以扮演老大哥的节奏，可以观察微信聊天，但微信端无法收到该联系人在<code>Group</code>中的消息</li>
<li><code>EFB</code>可以实现微信聊天记录的无限制保存与漫游功能，此后，再也无需备份微信聊天内容，<code>Telegram</code>都帮你保存了。包括语音、视频、文件、位置、分享链接、甚至撤回提示。</li>
<li><code>Telegram Inline Bot</code>生成的（已兼容格式的）内容可以直接发送到微信。</li>
<li>手机微信上的未读数不会自动减少。</li>
</ol>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>我使用微信频率不高，一般也就看看公众号，觉得用着还是非常舒适的，请看官们自行斟酌自己的使用情况。喜欢折腾的也可以自己配置着玩玩，挺有意思的。有点期待，未来会不会也能用 tg 来收发 QQ 消息呢？</p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>微信</tag>
        <tag>Telegram</tag>
        <tag>EH Forwarder Bot</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客文章置顶方式</title>
    <url>/post/dbdbad49.html</url>
    <content><![CDATA[<h3 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h3><h4 id="目前已经有修改后支持置顶的仓库，可以直接用以下命令安装"><a href="#目前已经有修改后支持置顶的仓库，可以直接用以下命令安装" class="headerlink" title="目前已经有修改后支持置顶的仓库，可以直接用以下命令安装"></a>目前已经有修改后支持置顶的仓库，可以直接用以下命令安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="然后在需要置顶的文章的Front-matter中加上top-true即可。比如下面这篇文章："><a href="#然后在需要置顶的文章的Front-matter中加上top-true即可。比如下面这篇文章：" class="headerlink" title="然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章："></a>然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo博客置顶</span><br><span class="line">date: 2017-09-08 12:00:25</span><br><span class="line">categories: 博客搭建系列</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h4 id="到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志："><a href="#到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：" class="headerlink" title="到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志："></a>到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：</h4><h5 id="打开：-x2F-blog-x2F-themes-x2F-next-x2F-layout-x2F-macro-目录下的post-swig文件，定位到-lt-div-class-quot-post-meta-quot-gt-标签下，紧接着下一行插入如下代码："><a href="#打开：-x2F-blog-x2F-themes-x2F-next-x2F-layout-x2F-macro-目录下的post-swig文件，定位到-lt-div-class-quot-post-meta-quot-gt-标签下，紧接着下一行插入如下代码：" class="headerlink" title="打开：&#x2F;blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro 目录下的post.swig文件，定位到&lt;div class=&quot;post-meta&quot;&gt;标签下，紧接着下一行插入如下代码："></a>打开：&#x2F;blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro 目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，紧接着下一行插入如下代码：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>至此，博客置顶的方式就全部完成了</p>
]]></content>
      <categories>
        <category>hexo博客配置</category>
      </categories>
      <tags>
        <tag>开发日记</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>泰国7天6晚自由行攻略</title>
    <url>/post/48f12bd4.html</url>
    <content><![CDATA[<blockquote>
<p>人生不可能是一场说走就走的旅行，但心怀远方的人，一定要时刻做着说走就走的准备！</p>
</blockquote>
<p><font face="STCAIYUN">关于去泰国这件事情，可能发生的很突然，但是没关系，既然决定了，就把它安排在计划里。</font></p>
<h3 id="一、出行前的准备"><a href="#一、出行前的准备" class="headerlink" title="一、出行前的准备"></a>一、出行前的准备</h3><h4 id="1、护照-amp-签证"><a href="#1、护照-amp-签证" class="headerlink" title="1、护照&amp;签证"></a>1、护照&amp;签证</h4><p>我是在杭州工作，在杭州工作社保交满一年，就可以办护照了。拿着身份证在西湖区行政服务中心的出入境管理那儿就可以办理了。现在一楼自助打印下社保证明，然后去后面的楼，出入境办理区按照流程办理即可。大概一个多礼拜就能拿到护照，我也没想到有这么快。</p>
<p>签证是在淘宝上买的，260￥。七个工作日到手。</p>
<h4 id="2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他"><a href="#2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他" class="headerlink" title="2、泰铢&amp;电话卡&amp;出入境&amp;去泰国的必备软件&amp;其他"></a>2、泰铢&amp;电话卡&amp;出入境&amp;去泰国的必备软件&amp;其他</h4><p>泰国新规定，过境签、落地签-10000泰铢或等值外币现金（每人），20000泰铢（家庭）；<br>旅游签-20000泰铢或等值外币现金（每人），40000泰铢（家庭），抽查到概率很低，一般落地签会查的吧。但是网上说好像都不查的，或者很少查，但还是换两千的吧。</p>
<p>然后再淘宝买泰国7天happy卡，<a href="https://traveldetail.fliggy.com/item.htm?spm=a230r.1.14.1.42f77cb9MwHKZ4&id=38255797452&ns=1&abbucket=7&smToken=ef69fda777d249bab6581b59d4cb9a82&smSign=twzGgFTirKEEIRtKkNLrYQ==">我买的是这家的</a>，8天无限流量，4G。</p>
<p>入境时需要填写出入境卡，然后和护照一起交给海关查看盖章。下面是入境卡中文说明图：<br><img src="http://ol3d80aa0.bkt.clouddn.com/%E6%B3%B0%E5%9B%BD%E5%87%BA%E5%85%A5%E5%A2%83%E5%8D%A1%E4%B8%AD%E6%96%87.jpg" alt="出入境卡"></p>
<p>一般情况下，在乘坐航班时常会有工作人员在抵达目的地钱给乘客发放出入境卡，以便乘客提前填好出入境卡，方便出关。护照也很重要，可以在国内出发前复印几份护照一定要放行李箱，不要随身携带。</p>
<span id="more"></span>

<h3 id="END-其他一些实用信息"><a href="#END-其他一些实用信息" class="headerlink" title="END - 其他一些实用信息"></a>END - 其他一些实用信息</h3><blockquote>
<h4 id="大使馆-x2F-领事馆"><a href="#大使馆-x2F-领事馆" class="headerlink" title="大使馆&#x2F;领事馆"></a>大使馆&#x2F;领事馆</h4></blockquote>
<p>中国驻泰国大使馆<br>地址：NO.57, Racgadapisek Road, Bangkok<br>电话：+66-02-2450088<br>领事保护电话：+66-854833327（24小时值班手机），+66-02-2457010（工作日9：00-17：00）</p>
<p>中国驻清迈总领事馆<br>地址：111 Changloh Road, Haiya District, Chiangmai<br>电话：+66-53-280380，+66-53-276125，+66-53-276457</p>
<p>中国驻宋卡总领事馆（近普吉岛、苏梅岛、甲米）<br>地址：9 Sadao Road, Songkhla<br>电话：+66-74-322034<br>领事保护电话：+66-817665560</p>
<p>中国驻宋卡总领馆驻普吉领事办公室<br>电话：+66-76-304219<br>领事保护电话：+66-945956168（中文、泰文），+66-945986859（中文）</p>
<p>中国驻孔敬总领馆<br>地址：142&#x2F;44 Moo 2，Rob-Bueng Rd.，Nai-Muang， Muang， Khon Kaen<br>电话：+66-43-226873</p>
<blockquote>
<h4 id="紧急电话"><a href="#紧急电话" class="headerlink" title="紧急电话"></a>紧急电话</h4></blockquote>
<p>警察:123&#x2F;191<br>火警:199<br>救护:2460199<br>领事:022-457010<br>大使馆:022-457044<br>旅游投诉:1155</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>本站已全面启用AMP</title>
    <url>/post/abe8a6a0.html</url>
    <content><![CDATA[<p>早有听闻 Google 的 AMP，能够显著加快网站的移动访问。现在本站终于全面启用了 AMP，现在已经有部分 AMP 页面加入了索引，效果很不错。</p>
<span id="more"></span>

<h2 id="AMP-简介"><a href="#AMP-简介" class="headerlink" title="AMP 简介"></a>AMP 简介</h2><p>Accelerated Mobile Pages（简称 AMP，意为“加速移动页面”）是 Google 带领开发的开源项目，目的是为提升移动设备对网站的访问速度。AMP 也可指其派生的标准和库等项目成果。AMP 在 HTML 等广泛使用的网络技术基础上进行改良，它的核心称作 AMP HTML，是 HTML 的一种。服务于技术预览期结束后的 2016 年 2 月正式发布。</p>
<p><img src="https://img.iszy.xyz/20190318213401.png"></p>
<h2 id="Hexo-博客启用方式"><a href="#Hexo-博客启用方式" class="headerlink" title="Hexo 博客启用方式"></a>Hexo 博客启用方式</h2><p>本站采用 NexT 主题，就以此作为演示。</p>
<h3 id="安装hexo-generator-amp插件"><a href="#安装hexo-generator-amp插件" class="headerlink" title="安装hexo-generator-amp插件"></a>安装<code>hexo-generator-amp</code>插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-amp --save</span><br></pre></td></tr></table></figure>

<p>如果不成功，加个<code>sudo</code>再试一下。</p>
<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>本文使用的是 NexT 主题 v6.4.0，这个版本已有提供用户自定义增加内容的设置。</p>
<p>打开<code>themes/next/layout/_custom</code>文件夹中的<code>head.swig</code>文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi themes/next/layout/_custom/head.swig</span><br></pre></td></tr></table></figure>

<p>在文件中添加如下内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if is_post() and config.generator_amp %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;amphtml&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./amp/&quot;</span> /&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改站点配置"><a href="#修改站点配置" class="headerlink" title="修改站点配置"></a>修改站点配置</h3><p>打开<strong>站点配置文件</strong><code>_config.yml</code>，加入以下内容。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">generator_amp:</span></span><br><span class="line">  <span class="attr">templateDir:</span> <span class="string">amp-template</span></span><br><span class="line">  <span class="attr">assetDistDir:</span> <span class="string">amp-dist</span></span><br><span class="line">  <span class="attr">logo:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sample/sample-logo.png</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">substituteTitleImage:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sample/sample-substituteTitleImage.png</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">1024</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">800</span></span><br><span class="line">  <span class="attr">warningLog:</span> <span class="literal">false</span> <span class="comment"># To display warning, please set true.</span></span><br><span class="line">  <span class="attr">validateAMP:</span> <span class="literal">true</span> <span class="comment"># To AMP HTML validate automatically, please set true.</span></span><br></pre></td></tr></table></figure>

<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p>在我的每篇文章地址后加上<code>./amp/</code>即可看到效果，以本文为例。</p>
<p><img src="https://img.iszy.xyz/20190318213417.png"></p>
<h2 id="Google-的-AMP-测试"><a href="#Google-的-AMP-测试" class="headerlink" title="Google 的 AMP 测试"></a>Google 的 AMP 测试</h2><p>可以使用 Google 的<a href="https://search.google.com/test/amp">AMP 测试</a>来测试你的 AMP 网页的有效性。然后你就能放心地将网页提交给 Google 和百度了。</p>
<p><img src="https://img.iszy.xyz/20190318213428.png"></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>建站</tag>
        <tag>AMP</tag>
      </tags>
  </entry>
  <entry>
    <title>申请AdSense记录</title>
    <url>/post/575a3296.html</url>
    <content><![CDATA[<p>在我博客改版后第一次尝试申请 Google AdSense，这次希望可以成功。</p>
<span id="more"></span>

<h2 id="开通过程"><a href="#开通过程" class="headerlink" title="开通过程"></a>开通过程</h2><h3 id="检查网站内容"><a href="#检查网站内容" class="headerlink" title="检查网站内容"></a>检查网站内容</h3><p>欸，出师不利，需要修改内容。</p>
<p><img src="https://img.iszy.xyz/20190318211328.png"></p>
<p>在我博客改版以前，我曾经申请过一次 Google AdSense，当时就失败了。和现在的状况其实差不多，就是告诉我发现了一些违规问题，解决以后才能放广告。但是吧，问题就是他并不告诉你到底哪里有问题，只叫你去参阅内容政策或访问帮助中心。当内容很多的时候，就很僵硬了，天知道哪篇内容违规了。</p>
<p>给你们看一下他们内容合作规范，就是禁止的一些内容。</p>
<blockquote>
<p>成人内容<br>老少皆宜内容中的成人主题<br>危险或诋毁内容<br>与消遣性药物和毒品相关的内容<br>与酒精饮料相关的内容<br>与烟草相关的内容<br>与赌博和游戏相关的内容<br>与医疗保健相关的内容<br>与黑客和破解相关的内容<br>为用户操作提供报酬的网页<br>与虚假陈述相关的内容<br>惊悚内容<br>与武器相关的内容<br>助长欺诈行为的内容<br>非法内容</p>
</blockquote>
<p>我前一次申请倒是没什么奇怪的内容，我归结于我文章太少了。这次吧，估计是站里分享了破解软件的问题了。欸，我还是撤掉吧，尊重知识产权也是应该，Google 还是挺有原则的。希望真的只是因为这个原因吧。</p>
<p>话说回来了，我真的希望 Google 能把发现问题的网址列一下，真的很有帮助啊，整改也知道方向啊。</p>
<p><img src="https://img.iszy.xyz/20190318211339.png"></p>
<p>这次似乎有些起色了，我隐约记得刚开始付款和设置两项都是灰的来着(一定是这样，不要打击我)。这次也过了好长时间没有通知我内容违规了，大概是已经在帮我开通 AdSense 了？话说完全激活 AdSense 到底需要多少时间呀，我等的很难受啊。</p>
<p>我真是太天真了，这个激活时间是真的长，6 天过去了，也没啥变化。看论坛里，等个把月的也不是没有。我就放在那里，随缘吧。</p>
<h3 id="成功开通"><a href="#成功开通" class="headerlink" title="成功开通"></a>成功开通</h3><p>我也没有注意究竟花了多长时间，反正是开通成功了。今天偶然在邮箱中看到了 Google AdSense 发来的邮件，通知我已经成功开通，邮件内容大概如下图所示。</p>
<p><img src="https://img.iszy.xyz/20190318211409.png"></p>
<p>有不少新东西需要我来操作呢，我作为一个新手还需要来仔细研究研究，我也不希望我的站上到处出现奇怪的广告打乱我的布局。</p>
<p><img src="https://img.iszy.xyz/20190318211428.png"></p>
<p>在我收入达到 100 刀以前，不需要设置付款方式。</p>
<p><img src="https://img.iszy.xyz/20190318211444.png"></p>
<p>接下来我就去研究怎么放广告去咯。</p>
<h3 id="放置广告"><a href="#放置广告" class="headerlink" title="放置广告"></a>放置广告</h3><p>像我这么懒的人当然会去选择自动广告啦，什么都不用处理，只要把代码复制到 head 中，其他就交给 Google 的 AI 自动解决啦，当然你也可以自行指定广告显示的位置。而且代码就是之前用来验证网站用的代码，也就是说我根本就不用进行修改，只要在 AdSense 当中启用自动广告就好了。</p>
<p>可以看到，可以设置各种各样的广告种类。我没有截全啦，还有其他的。我刚刚启用，暂时还没有看到广告的实际效果，还有待观望。不过嘛，我在其他人的博客上看着觉得效果还是很不错的。</p>
<p><img src="https://img.iszy.xyz/20190318211459.png"></p>
<h2 id="关于付款"><a href="#关于付款" class="headerlink" title="关于付款"></a>关于付款</h2><p>提前稍微研究了下 AdSense 的付款，大陆支持的付款方式大致有三种，支票、西联汇款和电汇三种。</p>
<h3 id="支票"><a href="#支票" class="headerlink" title="支票"></a>支票</h3><p>中国境内的发布商将由香港邮政负责通过普通邮寄方式为其递送付款。</p>
<p>所有支票付款均由花旗银行签发。如果收到的是美元支票，需要向银行确认他们是否与花旗银行存在代理关系。银行必须要有这种代理关系才能处理 AdSense 的美元支票。Google AdSense 支票只用于存款，不能兑现。</p>
<p>嘛，反正看着就很繁琐啦，这种支票不是拿着身份证去银行就能领钱的，还需要什么支票托收。虽然去银行直接交给工作人员办就行了，但我是不高兴弄了，有兴趣的可以自行了解一下。</p>
<h3 id="西联汇款"><a href="#西联汇款" class="headerlink" title="西联汇款"></a>西联汇款</h3><p>西联汇款是一种付款方式，可让您使用西联全球汇款服务以现金形式接收您的 AdSense 付款。选择通过西联汇款接收付款意味着，相比存入支票，您不需要等待支票寄达，同时还可以减少银行费用以及结算时间。</p>
<p>但是，这就需要到西联的代理点去取钱。不是每个银行都支持西联收汇，我得研究一下我的卡能不能行。说是相比电汇没有手续费，要是能行就很棒了。</p>
<h3 id="电汇"><a href="#电汇" class="headerlink" title="电汇"></a>电汇</h3><p>电汇是一种电子转帐方式，您可以通过这种方式直接在您的银行账户中接收资金。Google 会以美元或欧元的形式（具体取决于您的账户币种）将您的收入通过国际电汇汇入您指定的银行，然后您就可以从相应银行账户中取到这笔款项。这是一种快速、简单而又安全的收款方式。</p>
<p>显而易见，这是最方便的收款方式了。我有一张中信的借机卡，特意向中信的客服咨询了一波。以下是我像客服咨询的内容。</p>
<blockquote>
<p>开户行：中信银行北京 xx 支行<br>SWIFT 代码：CIBKCNBJ100<br>是否可以接收国际电汇：是的<br>是否需要美元账户：默认美元可以正常接收，只要资金来源合法<br>是否收手续费：中信接收不扣费，具体收费以转出方为准</p>
</blockquote>
<p>关于手续费，我只是看网上说会有 10 美元手续费，我不知道是哪边收的，反正问了中信是这么答的，或许 Google 会扣费，不管了。如果西联汇款不够方便，那就选择电汇了，方便是第一要义嘛。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>广告</tag>
        <tag>Google AdSense</tag>
      </tags>
  </entry>
  <entry>
    <title>军哥LNMP一键安装包的php扩展安装</title>
    <url>/post/76719043.html</url>
    <content><![CDATA[<p>我站上的 LNMP 用的是军哥的 LNMP 一键安装包，其中的软件都是通过编译安装的，我发现直接通过<code>apt install</code>的方法安装 php 扩展并不会生效，其实有更好的安装方法。</p>
<span id="more"></span>

<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>这里讲的方法适用于使用军哥 LNMP 一键安装包的情况。LNMP 一键安装包官网，请点击<a href="https://lnmp.org/">这里</a>。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>我使用的 LNMP 一键安装包 1.5 版本，默认 php 安装了 php7.0。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在这里以安装 zip 扩展为例。</p>
<h3 id="解压-php-安装包"><a href="#解压-php-安装包" class="headerlink" title="解压 php 安装包"></a>解压 php 安装包</h3><p>先进入 lnmp 安装包目录，我放在了 root 文件夹中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/lnmp/</span><br></pre></td></tr></table></figure>

<p>进入安装包存放位置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd src</span><br></pre></td></tr></table></figure>

<p>解压安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -jxvf php-7.0.30.tar.bz2</span><br></pre></td></tr></table></figure>

<h3 id="进入扩展包存放目录"><a href="#进入扩展包存放目录" class="headerlink" title="进入扩展包存放目录"></a>进入扩展包存放目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd php-7.0.30/ext</span><br></pre></td></tr></table></figure>

<h3 id="进入需要的扩展文件夹"><a href="#进入需要的扩展文件夹" class="headerlink" title="进入需要的扩展文件夹"></a>进入需要的扩展文件夹</h3><p>以 zip 为例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd zip</span><br></pre></td></tr></table></figure>

<h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3><h4 id="执行-phpize"><a href="#执行-phpize" class="headerlink" title="执行 phpize"></a>执行 phpize</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/php/bin/phpize</span><br></pre></td></tr></table></figure>

<p><img src="https://img.iszy.xyz/20190318204059.png"></p>
<h4 id="执行-configure"><a href="#执行-configure" class="headerlink" title="执行 configure"></a>执行 configure</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --with-php-config=&quot;/usr/local/php/bin/php-config&quot;</span><br></pre></td></tr></table></figure>

<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h4 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<h4 id="编译完成"><a href="#编译完成" class="headerlink" title="编译完成"></a>编译完成</h4><p>编译完成后，将在 modules 目录下生成<code>zip.so</code>文件，将其复制到 php 扩展文件夹中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd modules</span><br><span class="line">cp zip.so /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012</span><br></pre></td></tr></table></figure>

<p>可以到<code>/usr/local/php/lib/php/extensions</code>文件夹中看一下，这个文件夹名字可能和我这里有所不同。</p>
<h4 id="配置-php-ini"><a href="#配置-php-ini" class="headerlink" title="配置 php.ini"></a>配置 php.ini</h4><p>经测试，不需要修改 php.ini，可能已经默认包含了所有扩展文件夹中的内容。</p>
<p><del>打开<code>php.ini</code>文件</del></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/local/php/etc/php.ini</span><br></pre></td></tr></table></figure>

<p><del>找到<code>;extension=</code>字样，可以通过输入<code>/;extension=</code>快速找到。</del></p>
<p><del>添加以下内容。</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extension=zip.so</span><br></pre></td></tr></table></figure>

<h3 id="重载-php-fpm"><a href="#重载-php-fpm" class="headerlink" title="重载 php-fpm"></a>重载 php-fpm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lnmp php-fpm reload</span><br></pre></td></tr></table></figure>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>现在你已经成功安装了 zip 扩展，其他扩展也可以类比着来，有什么问题，可以在评论区问我。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>LNMP</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>自建短域名服务——Polr</title>
    <url>/post/c00cbeea.html</url>
    <content><![CDATA[<p>也曾想过自己写一个短域名服务，毕竟原理还是相当简单的。但是前端是真的难搞，我是真的玩不来。既然已经有造好的轮子，干嘛还自己造，是吧。这个 Polr 就是一个非常好用的短域名服务，功能也比较完善。在这里记录一下部署的过程。最近折腾 docker，这玩意在 docker 中表现挺诡异的，我准备切换成现有的 yourls 的 docker 了。</p>
<span id="more"></span>

<h2 id="程序依赖"><a href="#程序依赖" class="headerlink" title="程序依赖"></a>程序依赖</h2><ul>
<li>Apache, nginx, IIS, or lighttpd (Apache preferred)</li>
<li>PHP &gt;&#x3D; 5.5.9</li>
<li>MariaDB or MySQL &gt;&#x3D; 5.5, SQLite alternatively</li>
<li>composer</li>
<li>PHP requirements:<ul>
<li>OpenSSL PHP Extension</li>
<li>PDO PHP Extension</li>
<li>PDO MySQL Driver (php5-mysql on Debian &amp; Ubuntu, php5x-pdo_mysql on FreeBSD)</li>
<li>Mbstring PHP Extension</li>
<li>Tokenizer PHP Extension</li>
<li>JSON PHP Extension</li>
<li>PHP curl extension</li>
</ul>
</li>
</ul>
<h2 id="本人使用环境"><a href="#本人使用环境" class="headerlink" title="本人使用环境"></a>本人使用环境</h2><ul>
<li>Ubuntu 18.04 LTS</li>
<li>Nginx 1.14.0</li>
<li>PHP 5.6.36</li>
<li>Mysql 8.0.11</li>
<li>Composer 1.7.1</li>
</ul>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="LNMP"><a href="#LNMP" class="headerlink" title="LNMP"></a>LNMP</h3><p>我使用的是军哥的 LNMP 一键脚本，点击<a href="https://lnmp.org/">这里</a>前往官网。</p>
<h3 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h3><p>Composer 的安装，我在之前的文章已经叙述过了。请参考：<a href="https://www.iszy.cc/2018/08/09/use-composer/">Ubuntu 安装使用 Composer</a>。</p>
<h2 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su #使用 root 权限</span><br><span class="line">cd /home/wwwroot</span><br><span class="line">git clone https://github.com/cydrobolt/polr.git --depth=1</span><br><span class="line">chmod -R 755 polr</span><br><span class="line">chown -R www:www polr</span><br></pre></td></tr></table></figure>

<h2 id="通过-composer-安装依赖"><a href="#通过-composer-安装依赖" class="headerlink" title="通过 composer 安装依赖"></a>通过 composer 安装依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd polr</span><br><span class="line">composer install --no-dev -o</span><br></pre></td></tr></table></figure>

<h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><p>以 nginx 为例，以下是官方配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Upstream to abstract backend connection(s) <span class="keyword">for</span> php</span></span><br><span class="line">upstream php &#123;</span><br><span class="line">    server unix:/var/run/php-fpm.sock;</span><br><span class="line">    server 127.0.0.1:9000;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HTTP</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       *:80;</span><br><span class="line">    root         /home/wwwroot/polr/public;</span><br><span class="line">    index        index.php index.html index.htm;</span><br><span class="line">    server_name  example.com; # Or whatever you want to use</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>; <span class="comment"># Forces HTTPS, which enables privacy for login credentials.</span></span></span><br><span class="line">                                                 # Recommended for public, internet-facing, websites.</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">            try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">            # rewrite ^/([a-zA-Z0-9]+)/?$ /index.php?$1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">            try_files $uri =404;</span><br><span class="line">            include /etc/nginx/fastcgi_params;</span><br><span class="line"></span><br><span class="line">            fastcgi_pass    php;</span><br><span class="line">            fastcgi_index   index.php;</span><br><span class="line">            fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">            fastcgi_param   HTTP_HOST       $server_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HTTPS</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  listen              *:443 ssl;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  ssl_certificate     /etc/ssl/my.crt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  ssl_certificate_key /etc/ssl/private/my.key;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  root                /home/wwwroot/polr/public;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  index index.php index.html index.htm;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  server_name         example.com;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   location / &#123;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php$is_args<span class="variable">$args</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          <span class="comment"># rewrite ^/([a-zA-Z0-9]+)/?$ /index.php?$1;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  &#125;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   location ~ \.php$ &#123;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          try_files <span class="variable">$uri</span> =404;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          include /etc/nginx/fastcgi_params;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#           fastcgi_pass    php;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          fastcgi_index   index.php;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          fastcgi_param   SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          fastcgi_param   HTTP_HOST       <span class="variable">$server_name</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  &#125;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>登入 mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>创建数据库，名字任取，安装时会用到。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE polrdb;</span><br></pre></td></tr></table></figure>

<p>退出 mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h2 id="进行安装"><a href="#进行安装" class="headerlink" title="进行安装"></a>进行安装</h2><p>复制初始<code>.env</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp .env.setup .env</span><br></pre></td></tr></table></figure>

<p>访问<code>http://你设定的地址/setup/</code>即可进行安装，网页上都有详细解释，就不在这里多说了。</p>
<p>需要注意的是，当安装完成后，只能在<code>polr</code>文件夹中的<code>.env</code>文件修改设置。你将无法再次访问安装页面。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><del>我个人部署的短域名服务：<a href="https://url.iszy.cc/">ISZY Short URL</a>。有需要的可以使用。</del></p>
<p><img src="https://img.iszy.xyz/20190318220031.png"></p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>短域名</tag>
      </tags>
  </entry>
  <entry>
    <title>闲置VPS能用来干点啥</title>
    <url>/post/f951a222.html</url>
    <content><![CDATA[<p>总是看到线路好、价格合适的 VPS 就忍不住剁手，到现在多多少少有几台闲置的 VPS，放着也是放着，能干点啥好呢？</p>
<span id="more"></span>

<ol>
<li><p>建代理</p>
<p>鉴于我国的特色国情，访问外网总还是需要一些辅助。既然有闲置的 VPS，如果是国外的，线路速度也还不错的，可以考虑建个代理。虽然网上老说，会被检测啦，容易被封啦，其实不去选特别热门的商家，代理不要公开，自己好好用，基本也不会被封的。</p>
</li>
<li><p>搭建个人博客</p>
<p>这个么，如果你原本没有博客的话，可以考虑在 VPS 上建个博客。现在建站已经容易很多了，lnmp 一键脚本非常好用，也有免费的宝塔面板。博客可以采用 wordpress，或者静态的 Hexo、Jekyll 等，都有许多模板可用。相比于其他不是自建的博客，自建博客有了更高的自由度，当然也需要你有一定的基础。</p>
</li>
<li><p>云盘</p>
<p>国内许多免费云盘服务都陆续结束了服务，百度云盘又各种限速、审核，国外网盘访问困难。自建私人云盘就自由的多了。如果你有一台流量充足、硬盘足够的 VPS，就可以考虑以下自建云盘了。当然，硬盘不充足还有其他的选择，比如腾讯云和阿里云挂载自家的对象存储到服务器上做硬盘，牺牲了一定的性能，但能弥补硬盘的不足。</p>
</li>
<li><p>PT&#x2F;BT 下载</p>
<p>在允许 BT 下载的服务器上凭借着大带宽、高流量、24 小时不关机，刷刷上传量，造福大众岂不是美滋滋。当然，一定要是服务商允许 BT 才行，不然小心给你封了。</p>
</li>
<li><p>自建 DNS 服务器</p>
<p>不想再被运营商劫持、不想再被 DNS 污染，那就在服务器上自建纯净 DNS 吧。当然要注意打开端口，而且最好不要是 53 端口，不然经过 GFW 就被污染了，一点用都没有。顺便，DNS 不解决翻墙问题。</p>
</li>
<li><p>自建邮箱服务器</p>
<p>厌恶了国内的免费邮箱，想要拥有自己的域名服务器？那么你可以在自己的服务器商搭建邮箱服务器。服务器怎么配置全凭你喜好。当然也有更好的实现方式。像我现在用 mailgun 转发，配合 gmail，用得还是非常舒服的。</p>
</li>
<li><p>虚拟主机</p>
<p>VPS 嘛，虽然说是虚拟服务器，那也是一台服务器啊，那就可以拆分成虚拟主机来卖咯。当然可能大家都得共用一个 IP 了，如果有哪个网站有问题，说不定会牵连同 IP 的其他网站。而且吧，弄成虚拟主机也没那么简单，还有许多工作要做，如果只是简单的 lnmp 一键脚本这样的虚拟主机，还是就跟朋友用用吧，分担一下网费。</p>
</li>
<li><p>搭建感兴趣的其他服务</p>
<p>在 GitHub 上面有许多有意思的项目，如果你比较感兴趣，你可以将其部署到你的服务器上玩一玩。感觉也是非常不错的。</p>
</li>
<li><p>其他</p>
<p>我前面说的基本都是 Linux 主机，Windows 服务器或许也能做吧。但是 Windows 自身内存占用较多，成本或许也更高了。Windows 主机的话还能干些只有 Windows 能干的事，比如说一些挂机的工作，需要运行 exe 程序的。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx启用TLS1.3正式版教程</title>
    <url>/post/e7faa03b.html</url>
    <content><![CDATA[<p>早就听说有 TLS1.3 了，一直心痒痒，想折腾折腾试试。以前浏览器支持的不多，网上也没太多人试过，不太敢趟雷。现在有一些大型网站网站已经弄上了 TLS1.3，也有不少博主给自己的博客升级了 TLS1.3 了，留下了宝贵的经验。我也忍不住了，今天就来折腾一下看看。Openssl 1.1.1 LTS 已经发布，更新一下 TLS1.3 正式版。</p>
<span id="more"></span>

<h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><ul>
<li>Nginx: nginx-1.15.4</li>
<li>OpenSSL: openssl-1.1.1(LTS)</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y build-essential libpcre3 libpcre3-dev zlib1g-dev liblua5.1-dev libluajit-5.1-dev libgeoip-dev google-perftools libgoogle-perftools-dev</span><br></pre></td></tr></table></figure>

<h3 id="下载并解压所需软件"><a href="#下载并解压所需软件" class="headerlink" title="下载并解压所需软件"></a>下载并解压所需软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.15.4.tar.gz</span><br><span class="line">tar zxf nginx-1.15.4.tar.gz</span><br><span class="line">wget https://www.openssl.org/source/openssl-1.1.1.tar.gz</span><br><span class="line">tar zxf openssl-1.1.1.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="OpenSSL-打补丁"><a href="#OpenSSL-打补丁" class="headerlink" title="OpenSSL 打补丁"></a>OpenSSL 打补丁</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pushd openssl-1.1.1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打TLS1.3 Draft 23, 26, 28, Final补丁</span></span><br><span class="line">curl https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/openssl-equal-1.1.1_ciphers.patch | patch -p1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打ignore Strict-SNI <span class="built_in">log</span>补丁</span></span><br><span class="line">curl https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/openssl-ignore_log_strict-sni.patch | patch -p1</span><br><span class="line">popd</span><br></pre></td></tr></table></figure>

<h3 id="Nginx-补丁"><a href="#Nginx-补丁" class="headerlink" title="Nginx 补丁"></a>Nginx 补丁</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pushd nginx-1.15.4</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打SPDY, HTTP2 HPACK, Dynamic TLS Record, Fix Http2 Push Error, PRIORITIZE_CHACHA补丁</span></span><br><span class="line">curl https://raw.githubusercontent.com/kn007/patch/43f2d869b209756b442cfbfa861d653d993f16fe/nginx.patch | patch -p1</span><br><span class="line">curl https://raw.githubusercontent.com/kn007/patch/c59592bc1269ba666b3bb471243c5212b50fd608/nginx_auto_using_PRIORITIZE_CHACHA.patch | patch -p1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打Strict-SNI补丁</span></span><br><span class="line">curl https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/nginx_strict-sni.patch | patch -p1</span><br><span class="line">popd</span><br></pre></td></tr></table></figure>

<h3 id="编译安装-Nginx"><a href="#编译安装-Nginx" class="headerlink" title="编译安装 Nginx"></a>编译安装 Nginx</h3><p>如果原本编译安装过 Nginx，可以输入<code>nginx -V</code>，查看以前的 configure 配置。在后面加上所需参数进行编译。</p>
<p>关键参数：</p>
<ul>
<li>添加<code>--with-openssl=../openssl-1.1.1</code>来指定 OpenSSL 路径</li>
<li><code>HTTP2 HPACK</code>需要加入<code>--with-http_v2_hpack_enc</code>参数。</li>
<li><code>SPDY</code>需要加入<code>--with-http_spdy_module</code></li>
</ul>
<p>注意将<code>--with-openssl</code>参数改为自己的 OpenSSL 文件夹地址。</p>
<p>我的完整 configure 命令如下，请类比进行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx-1.15.4</span><br><span class="line"></span><br><span class="line">./configure \</span><br><span class="line">--user=www \</span><br><span class="line">--group=www \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-pcre-jit \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_ssl_preread_module \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-http_slice_module \</span><br><span class="line">--with-http_geoip_module \</span><br><span class="line">--with-google_perftools_module \</span><br><span class="line">--with-openssl=../openssl-1.1.1 \</span><br><span class="line">--with-http_v2_hpack_enc \</span><br><span class="line">--with-http_spdy_module</span><br></pre></td></tr></table></figure>

<p>configure 完成后，输入以下语句开始编译。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p>编译完成后，如果没有报错，输入以下内容进行安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>

<h3 id="配置-Nginx-虚拟主机"><a href="#配置-Nginx-虚拟主机" class="headerlink" title="配置 Nginx 虚拟主机"></a>配置 Nginx 虚拟主机</h3><p>将以下内容加入你的 conf 文件的相应位置，替换掉原本的相应内容。由于安全性升级的考虑，我删除了 TLS1 和 TLS1.1。除此以外，TLS1.3 的新加密套件只能在 TLS1.3 中使用，旧的加密套件不能用于 TLS1.3。似乎所有虚拟主机都要配置才能使用 TLS1.3。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssl_early_data on;</span><br><span class="line">ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">ssl_ciphers [TLS13+AESGCM+AES128|TLS13+AESGCM+AES256|TLS13+CHACHA20]:[EECDH+ECDSA+AESGCM+AES128|EECDH+ECDSA+CHACHA20]:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:[EECDH+aRSA+AESGCM+AES128|EECDH+aRSA+CHACHA20]:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;</span><br><span class="line">ssl_ecdh_curve X25519:P-256:P-384;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br></pre></td></tr></table></figure>

<p>最后使用<code>nginx -t</code>测试 nginx 配置的正确性。</p>
<h3 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h3><p>重启 Nginx，你会发现你的网站已经是 TLS1.3 连接了。</p>
<p><img src="https://img.iszy.xyz/20190318215152.png"></p>
<p><img src="https://img.iszy.xyz/20190318215203.png"></p>
<h3 id="一点问题"><a href="#一点问题" class="headerlink" title="一点问题"></a>一点问题</h3><p>我原本使用的是 Nginx 1.14.0，现在升级到了 1.15.4，配置文件可能会报以下警告。当然，由于只是警告，并不会影响运行，只是我强迫症受不了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx: [warn] the &quot;ssl&quot; directive is deprecated, use the &quot;listen ... ssl&quot; directive instead in /usr/local/nginx/conf/vhost/www.iszy.cc.conf:22</span><br></pre></td></tr></table></figure>

<p>这是由于在主线版本 v1.15.0 以后，弃用了<code>ssl</code>标识。官方原话是这样的：</p>
<blockquote>
<p>The “ssl” directive is deprecated; the “ssl” parameter of the “listen” directive should be used instead.</p>
</blockquote>
<p>解决方案很简单，只需要删除配置文件中的<code>ssl on</code>语句，采用<code>listen</code>语句替代，如<code>listen 443 ssl</code>。原本就使用<code>listen 443 ssl</code>语句的就更简单了，直接删除<code>ssl on</code>语句即可。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>好了，到这里，教程算是结束了。OpenSSL 1.1.1 LTS 已经正式发布了，TLS1.3 也已经正式公布。现阶段，Nginx、Apache 等主流 web 服务器还没有官方支持，还需要通过打补丁的方式进行支持。期待 TLS1.3 全面铺开后对网络隐私和抗审查作出的贡献。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
        <tag>SSL</tag>
        <tag>Nginx</tag>
        <tag>TLS</tag>
      </tags>
  </entry>
  <entry>
    <title>解决ttyname failed: Inappropriate ioctl for device问题</title>
    <url>/post/29fc6864.html</url>
    <content><![CDATA[<p>在我使用<code>git push</code>、<code>hexo deploy</code>等类似操作时，时常会看到<code>ttyname failed: Inappropriate ioctl for device</code>的报错信息。这怎么能行，不是<code>0 errors,0 warnings</code>能行？这里就来记录一下这个问题的解决办法。</p>
<span id="more"></span>

<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>Ubuntu 知道并不是所有人都会对 root 账户执行图形登录，所以在默认<code>.profile</code>文件中设置了在这种情况下产生虚假错误。你可以看到，在<code>/root/.profile</code>文件末尾有这样一行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mesg n || true</span><br></pre></td></tr></table></figure>

<p>这是什么呢？这是为了防止像<code>talk</code>之类的程序写入你的控制台，这在你通过文本会话登录 root 账户时尤为重要。<code>|| true</code>是为了防止在请求 tty 失败时的错误导致 shell 脚本中止。</p>
<p>把这句话放在<code>.profile</code>文件中，能够让每次运行 bash 的时候，执行这句话。当你从没有 tty 设备的绘画中运行时，你就能看到报错，并且这不会影响其他程序的运行，只是显示一条消息。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>虽说这个消息无害，但是总是看到报错消息还是不太舒服，那就把它去掉吧。</p>
<p>将<code>/root/.profile</code>文件中的<code>mesg n || true</code>改为如下内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tty -s &amp;&amp; mesg n || true</span><br></pre></td></tr></table></figure>

<p>这就能让<code>mesg</code>在没有 tty 时，不发送消息，而在有 tty 时继续调用。现在你可以不用再看到<code>ttyname failed: Inappropriate ioctl for device</code>了。</p>
<p><img src="https://img.iszy.xyz/20190318214328.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 16.04中安装php7.2</title>
    <url>/post/c6d80a7a.html</url>
    <content><![CDATA[<p>本文记录如何在 Ubuntu 16.04 中安装 php-7.2。</p>
<span id="more"></span>

<h2 id="添加-PPA-源"><a href="#添加-PPA-源" class="headerlink" title="添加 PPA 源"></a>添加 PPA 源</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install software-properties-common python-software-properties</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php &amp;&amp; sudo apt update</span><br></pre></td></tr></table></figure>

<h2 id="安装-php7-2"><a href="#安装-php7-2" class="headerlink" title="安装 php7.2"></a>安装 php7.2</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt -y install php7.2</span><br></pre></td></tr></table></figure>

<h2 id="安装-php-扩展"><a href="#安装-php-扩展" class="headerlink" title="安装 php 扩展"></a>安装 php 扩展</h2><p>常用扩展</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install php7.2-fpm php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml php7.2-intl -y</span><br></pre></td></tr></table></figure>

<p>更多需要的扩展，请自行搜索。</p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装使用 Composer</title>
    <url>/post/36706957.html</url>
    <content><![CDATA[<p>今天我想要安装 polr 短域名项目的时候，需要用到 Composer。期间遇到了一些问题，在这里记录一下安装使用 Composer 的问题和解决方案。</p>
<span id="more"></span>

<h2 id="安装-Composer"><a href="#安装-Composer" class="headerlink" title="安装 Composer"></a>安装 Composer</h2><p>我选择使用<code>Composer 中国全量镜像</code>，这个是由 Laravel China 社区联合又拍云与优帆远扬共同合作推出的公益项目，旨在为广大 PHP 用户提供稳定和高速的 Composer 国内镜像服务。</p>
<p>虽然我是腾讯云的香港主机啦，但不知道为什么使用 Composer 官网极慢，所以也选择了使用国内镜像。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用如下命令安装，如遇权限不足，可添加 sudo。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dl.laravel-china.org/composer.phar -O /usr/local/bin/composer</span><br><span class="line">chmod a+x /usr/local/bin/composer</span><br></pre></td></tr></table></figure>

<h3 id="查看当前版本"><a href="#查看当前版本" class="headerlink" title="查看当前版本"></a>查看当前版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer -V</span><br></pre></td></tr></table></figure>

<h3 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h3><p>此处升级命令连接的是官方服务器回合慢，不推荐。建议直接从国内镜像站下载更新。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer selfupdate</span><br></pre></td></tr></table></figure>

<h2 id="切换-Composer-镜像"><a href="#切换-Composer-镜像" class="headerlink" title="切换 Composer 镜像"></a>切换 Composer 镜像</h2><h3 id="全局-推荐"><a href="#全局-推荐" class="headerlink" title="全局(推荐)"></a>全局(推荐)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.laravel-china.org</span><br></pre></td></tr></table></figure>

<h3 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h3><p>如果仅限当前工程使用镜像，去掉 -g 即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer config repo.packagist composer https://packagist.laravel-china.org</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p>已存在 composer.lock 文件，先删除，再运行 composer install 重新生成。</p>
<p>composer.lock 缓存了之前的配置信息，从而导致新的镜像配置无效。</p>
</li>
<li><p>Your requirements could not be resolved to an installable set of packages.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Loading composer repositories with package information</span><br><span class="line">Installing dependencies from lock file</span><br><span class="line">Your requirements could not be resolved to an installable set of packages.</span><br><span class="line"></span><br><span class="line">  Problem 1</span><br><span class="line">    - Installation request for phpoffice/phpexcel 1.8.1 -&gt; satisfiable by phpoffice/phpexcel[1.8.1].</span><br><span class="line">    - phpoffice/phpexcel 1.8.1 requires ext-xml * -&gt; the requested PHP extension xml is missing from your system.</span><br><span class="line">  Problem 2</span><br><span class="line">    - phpoffice/phpexcel 1.8.1 requires ext-xml * -&gt; the requested PHP extension xml is missing from your system.</span><br><span class="line">    - maatwebsite/excel 2.1.6 requires phpoffice/phpexcel 1.8.* -&gt; satisfiable by phpoffice/phpexcel[1.8.1].</span><br><span class="line">    - Installation request for maatwebsite/excel 2.1.6 -&gt; satisfiable by maatwebsite/excel[2.1.6].</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<p>以我使用的 php 版本 php7.2 为例，请根据自己使用的 php 版本进行修改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install php7.2-xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装时出现<code>Unzip with unzip command failed, falling back to ZipArchive class</code></p>
<p>解决方案：</p>
<p>同样以 php7.2 为例。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install php7.2-zip</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 16.04环境下使用ASF(v3)实现云挂卡</title>
    <url>/post/a60a9ecc.html</url>
    <content><![CDATA[<p>挂卡是什么，我再次就不赘述了。Steam 玩家估计都有所了解，还不清楚的可以谷歌一下。今天在此分享一下如何在在 Ubuntu 16.04 环境下使用 ArchiSteamFarm(v3)实现云挂卡，24 小时无人值守。</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>主机：腾讯云香港云主机 1 核 1G</li>
<li>系统：Ubuntu 16.04</li>
<li>软件版本：ArchiSteamFarm V3.2.0.5</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="使用-root-权限"><a href="#使用-root-权限" class="headerlink" title="使用 root 权限"></a>使用 root 权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>

<h3 id="安装-NET-Core"><a href="#安装-NET-Core" class="headerlink" title="安装.NET Core"></a>安装.NET Core</h3><h4 id="注册微软-key-和订阅源"><a href="#注册微软-key-和订阅源" class="headerlink" title="注册微软 key 和订阅源"></a>注册微软 key 和订阅源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb --no-check-certificate</span><br><span class="line">sudo dpkg -i packages-microsoft-prod.deb</span><br></pre></td></tr></table></figure>

<h4 id="安装-NET-SDK"><a href="#安装-NET-SDK" class="headerlink" title="安装.NET SDK"></a>安装.NET SDK</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install apt-transport-https</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install dotnet-sdk-2.1</span><br></pre></td></tr></table></figure>

<h3 id="安装-ASF"><a href="#安装-ASF" class="headerlink" title="安装 ASF"></a>安装 ASF</h3><h4 id="下载最新稳定版-ASF"><a href="#下载最新稳定版-ASF" class="headerlink" title="下载最新稳定版 ASF"></a>下载最新稳定版 ASF</h4><p>建议选用<code>Pre-release</code>版本，<code>Pre-release</code>版本可能存在稳定性问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/JustArchi/ArchiSteamFarm/releases/download/3.3.0.0/ASF-linux-x64.zip --no-check-certificate</span><br></pre></td></tr></table></figure>

<p>在<code>/home</code>中创建<code>asf</code>文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/asf &amp;&amp; <span class="built_in">cd</span> /home/asf</span><br></pre></td></tr></table></figure>

<p>解压软件到该目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip /root/ASF-linux-x64.zip</span><br></pre></td></tr></table></figure>

<h3 id="创建-bot-配置文件"><a href="#创建-bot-配置文件" class="headerlink" title="创建 bot 配置文件"></a>创建 bot 配置文件</h3><p>这里只写最简单的配置，更多高级设置可以到<a href="https://justarchi.github.io/ArchiSteamFarm/#/">ASF web config</a>上生成配置文件。</p>
<p>文件名字自取，这里我取名 test.json，所以这个 bot 的名称就叫 test。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /home/asf/config/test.json</span><br></pre></td></tr></table></figure>

<p>输入以下内容并保存，注意替换为自己的 steam 用户名和密码。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;SteamLogin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yourusername&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SteamPassword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yourpassword&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Enabled&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>由于 asf 就是模拟一个 steam 平台进行游戏，你的好友将会看到你正在游戏的状态。想要让 steam 显示离线状态，可以将配置文件换成以下内容。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;SteamLogin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yourusername&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SteamPassword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yourpassword&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Enabled&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;OnlineStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="赋予执行权限"><a href="#赋予执行权限" class="headerlink" title="赋予执行权限"></a>赋予执行权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x ArchiSteamFarm</span><br></pre></td></tr></table></figure>

<h4 id="开始运行"><a href="#开始运行" class="headerlink" title="开始运行"></a>开始运行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ArchiSteamFarm</span><br></pre></td></tr></table></figure>

<p>如果正常运行，现在已经开始自动挂卡了。</p>
<h3 id="保持后台运行"><a href="#保持后台运行" class="headerlink" title="保持后台运行"></a>保持后台运行</h3><h4 id="方法一：Screen"><a href="#方法一：Screen" class="headerlink" title="方法一：Screen"></a>方法一：Screen</h4><p>安装 screen</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install screen</span><br></pre></td></tr></table></figure>

<p>创建一个名为 asf 的窗口，并在其中执行程序。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S asf</span><br><span class="line">cd /home/asf</span><br><span class="line">./ArchiSteamFarm</span><br></pre></td></tr></table></figure>

<p>按<code>Ctrl+A+D</code>搁置窗口，程序已经在后台运行了，可以放心退出终端了。</p>
<p>其他命令：</p>
<ul>
<li>恢复 screen 窗口命令：<code>screen -r asf</code></li>
<li>退出 screen 窗口：在窗口中，先按<code>Ctrl+A</code>，再按<code>K</code>，最后输入<code>y</code>确认。</li>
</ul>
<h4 id="方法二：Systemd（推荐）"><a href="#方法二：Systemd（推荐）" class="headerlink" title="方法二：Systemd（推荐）"></a>方法二：Systemd（推荐）</h4><p>安装 systemd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install systemd</span><br></pre></td></tr></table></figure>

<p>创建 service 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/asf.service</span><br></pre></td></tr></table></figure>

<p>输入以下内容并保存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Archi Steam Farm</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">EnvironmentFile=/etc/environment</span><br><span class="line">Environment=&quot;&quot;</span><br><span class="line">ExecStart=/home/asf/ArchiSteamFarm</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=15s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>现在可以运行了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service asf start  # 开始运行挂卡</span><br><span class="line">service asf stop   # 停止运行</span><br><span class="line">service asf status # 查看服务状态</span><br></pre></td></tr></table></figure>

<h2 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h2><h3 id="steam-两部验证"><a href="#steam-两部验证" class="headerlink" title="steam 两部验证"></a>steam 两部验证</h3><p>要知道，如果绑定了 steam 手机令牌的话，登录需要输入密钥，显然不可能在挂卡平台每次都手动输入密钥，这也太蠢了。那么我们就需要将令牌导入到 ASF 中，以实现自动登录。</p>
<p>各个平台操作不同，详情请见<a href="https://github.com/JustArchi/ArchiSteamFarm/wiki/Two-factor-authentication">官方 WIKI</a>。我没有其他设备，这里就只说明以下安卓设备的方法。</p>
<h4 id="手机-root"><a href="#手机-root" class="headerlink" title="手机 root"></a>手机 root</h4><p>首先，你需要有系统的 root 权限，这个不多说，每个设备都有所不同。</p>
<h4 id="提取令牌文件"><a href="#提取令牌文件" class="headerlink" title="提取令牌文件"></a>提取令牌文件</h4><p>安装一个能够访问系统根目录的文件管理器，如<a href="https://play.google.com/store/apps/details?id=com.estrongs.android.pop">ES 文件浏览器</a>。</p>
<p>将文件<code>/data/data/com.valvesoftware.android.steam.community/files/Steamguard-XXX</code>复制出来，<code>XXX</code>是你的 SteamID。重命名为<code>BotName.maFile</code>并放置到<code>/home/asf/config</code>目录下，程序会自动检测并读取。如我的 bot 名字为 test，则重命名为<code>test.maFile</code>。</p>
<h4 id="提取设备-ID"><a href="#提取设备-ID" class="headerlink" title="提取设备 ID"></a>提取设备 ID</h4><p>将文件<code>/data/data/com.valvesoftware.android.steam.community/shared_prefs/steam.uuid.xml</code>打开，找到如<code>android:XXXXXXXXXXXXXXXX</code>字样，这就是你的设备 ID，注意保存。</p>
<h4 id="输入设备-ID"><a href="#输入设备-ID" class="headerlink" title="输入设备 ID"></a>输入设备 ID</h4><p>导入好令牌文件以后，首次启动，将会看到如下字样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] INFO: ImportAuthenticator() &lt;1&gt; Converting .maFile into ASF format...</span><br><span class="line">&lt;1&gt; Please enter your Device ID (including &quot;android:&quot;):</span><br></pre></td></tr></table></figure>

<p>这时输入你的设备 ID，连<code>android:</code>字样一起输入，回车。看到如下字样，表示你已经完成，以后启动就不再需要输入了，会自动登录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] INFO: ImportAuthenticator() &lt;1&gt; Successfully finished importing mobile authenticator!</span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><strong>注意：为了你的 steam 账号安全，切勿暴露你的令牌文件和设备 ID。拥有这些内容，将能任意变更你的账户。</strong></p>
<h3 id="启用-IPC"><a href="#启用-IPC" class="headerlink" title="启用 IPC"></a>启用 IPC</h3><p>启用 IPC 将会提供 API 和图形化 GUI，可以远程进行控制。</p>
<p>编辑 ASF 配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /home/asf/config/ASF.json</span><br></pre></td></tr></table></figure>

<p>查找并修改相关内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;IPC&quot;: true,</span><br><span class="line">&quot;IPCPassword&quot;: null,</span><br><span class="line">&quot;IPCPrefixes&quot;: [</span><br><span class="line">    &quot;http://127.0.0.1:1242/&quot;</span><br><span class="line">],</span><br><span class="line">&quot;SteamOwnerID&quot;: &quot;你的64位id&quot;,</span><br></pre></td></tr></table></figure>

<p><code>IPCPassword</code>后改为你想要设置的密码，注意加双引号。<code>IPCPrefixes</code>设置为<code>127.0.0.1</code>，则只能本地访问；设置为<code>*</code>则可以从任意地址访问；可以设置多个监听地址，用逗号隔开。</p>
<h3 id="用-Telegram-远程控制-ASF-挂卡"><a href="#用-Telegram-远程控制-ASF-挂卡" class="headerlink" title="用 Telegram 远程控制 ASF 挂卡"></a>用 Telegram 远程控制 ASF 挂卡</h3><p>提供给有需求的人，要求主机上 python 版本至少为 3.6。</p>
<h4 id="向-Telegram-申请-bot-token"><a href="#向-Telegram-申请-bot-token" class="headerlink" title="向 Telegram 申请 bot token"></a>向 Telegram 申请 bot token</h4><p>在 Telegram 里，搜索<code>@BotFather</code>机器人并启用。</p>
<p>发送以下命令：</p>
<ol>
<li>创建机器人：<code>/newbot</code></li>
<li>设定 bot 名称：<code>ASF</code>(任取，可重复，这里只是个例子)</li>
<li>设定 bot 用户名：<code>test_asf_bot</code>(任取，不可重复，这里只是个例子)</li>
</ol>
<p><code>@BotFather</code>会发给你一串 token，形如<code>123456789:XXXXXX-XXXXXXXXXX</code>，注意保留。</p>
<h4 id="申请-Chat-ID"><a href="#申请-Chat-ID" class="headerlink" title="申请 Chat ID"></a>申请 Chat ID</h4><p>在 Telegram 里，搜索<code>@FalconGate_Bot</code>机器人并启用。</p>
<p>发送命令：<code>/get_my_id</code></p>
<p><code>@FalconGate_Bot</code>会发给你一串数字，即是你的 Chat ID。</p>
<h4 id="安装telegram-bot-asf"><a href="#安装telegram-bot-asf" class="headerlink" title="安装telegram_bot_asf"></a>安装<code>telegram_bot_asf</code></h4><p>请确保 python 版本正确</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/deluxghost/telegram-asf.git</span><br><span class="line">cd telegram-asf</span><br><span class="line">sudo pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>编辑<code>bot.py</code>，修改如下内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">token = <span class="string">&#x27;123456789:XXXXXX-XXXXXXXXXX&#x27;</span> <span class="comment"># 之前获取的bot token</span></span><br><span class="line">admin = <span class="string">&#x27;123456789&#x27;</span> <span class="comment"># 之前获取的Chat ID</span></span><br><span class="line">ipc_address = <span class="string">&#x27;http://127.0.0.1:1242/&#x27;</span> <span class="comment">#填写ASF的IPC监听地址</span></span><br><span class="line">ipc_password = <span class="string">&#x27;&#x27;</span> <span class="comment"># 填写ASF的IPCPassword，留空表示没有密码</span></span><br></pre></td></tr></table></figure>

<h4 id="后台启动-bot"><a href="#后台启动-bot" class="headerlink" title="后台启动 bot"></a>后台启动 bot</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S bot</span><br><span class="line">python3 bot.py</span><br></pre></td></tr></table></figure>

<h4 id="在-Telegram-中使用这个-bot"><a href="#在-Telegram-中使用这个-bot" class="headerlink" title="在 Telegram 中使用这个 bot"></a>在 Telegram 中使用这个 bot</h4><p>搜索刚刚你设定的 bot 用户名，并启用，你已经可以发送命令远程控制 ASF 了。这个机器人只有你能使用。</p>
<p><strong>常见命令</strong>：</p>
<p>帮助命令：<code>help</code></p>
<p><img src="https://img.iszy.xyz/20190318211533.png"></p>
<p>开始命令：<code>start</code></p>
<p><img src="https://img.iszy.xyz/20190318211546.png"></p>
<p>暂停命令：<code>pause</code></p>
<p><img src="https://img.iszy.xyz/20190318211557.png"></p>
<p>继续命令：<code>resume</code></p>
<p><img src="https://img.iszy.xyz/20190318211609.png"></p>
<p>查看状态命令：<code>status</code></p>
<p><img src="https://img.iszy.xyz/20190318211620.png"></p>
<p><img src="https://img.iszy.xyz/20190318211633.png"></p>
<p>查看版本命令：<code>version</code></p>
<p><img src="https://img.iszy.xyz/20190318211805.png"></p>
<p>激活 steam 密钥命令：<code>redeem &lt;key&gt;</code></p>
<p><img src="https://img.iszy.xyz/20190318211831.png"></p>
<p>更多命令，请参<a href="https://github.com/JustArchi/ArchiSteamFarm/wiki/Commands">官方 WIKI</a>。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>现在你已经成功搭建了云挂卡平台，尽情挂卡吧。</p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Steam</tag>
        <tag>ArchiSteamFarm</tag>
        <tag>挂卡</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 16.04搭建Minecraft服务器1.13</title>
    <url>/post/53f11296.html</url>
    <content><![CDATA[<p>在此记录在 Ubuntu 16.04 搭建 Minecraft 服务器 1.13 的全过程。</p>
<span id="more"></span>

<h2 id="安装-Java-运行库"><a href="#安装-Java-运行库" class="headerlink" title="安装 Java 运行库"></a>安装 Java 运行库</h2><p>在前一篇文章——<a href="https://www.iszy.cc/2018/08/05/ubuntu-oracle-java/">在 Ubuntu 16.04 中安装 Oracle Java 8</a>中已经有了详细讲述。</p>
<h2 id="创建新用户和组"><a href="#创建新用户和组" class="headerlink" title="创建新用户和组"></a>创建新用户和组</h2><h3 id="创建用户和组"><a href="#创建用户和组" class="headerlink" title="创建用户和组"></a>创建用户和组</h3><p>创建用户和组 minecraft，用以运行 minecraft 服务端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo adduser minecraft</span><br><span class="line">sudo groupadd minecraft</span><br><span class="line">sudo usermod -a -G minecraft minecraft</span><br></pre></td></tr></table></figure>

<h3 id="登录到用户-minecraft"><a href="#登录到用户-minecraft" class="headerlink" title="登录到用户 minecraft"></a>登录到用户 minecraft</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su minecraft</span><br><span class="line">cd</span><br></pre></td></tr></table></figure>

<h2 id="下载并启动-Minecraft"><a href="#下载并启动-Minecraft" class="headerlink" title="下载并启动 Minecraft"></a>下载并启动 Minecraft</h2><h3 id="下载-Minecraft-服务器"><a href="#下载-Minecraft-服务器" class="headerlink" title="下载 Minecraft 服务器"></a>下载 Minecraft 服务器</h3><p>官方地址：<a href="https://minecraft.net/zh-hans/download/server">下载 MINECRAFT ：JAVA 版的服务器</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://launcher.mojang.com/mc/game/1.13/server/d0caafb8438ebd206f99930cfaecfa6c9a13dca0/server.jar</span><br><span class="line">chmod a+x server.jar</span><br></pre></td></tr></table></figure>

<h3 id="启动-Minecraft"><a href="#启动-Minecraft" class="headerlink" title="启动 Minecraft"></a>启动 Minecraft</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -Xmx1024M -Xms1024M -jar server.jar nogui</span><br></pre></td></tr></table></figure>

<p>如图所示，首次运行需要同意 EULA 协议。</p>
<p><img src="https://img.iszy.xyz/20190318214212.png"></p>
<p>下面编辑生成的<code>eula.txt</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi eula.txt</span><br></pre></td></tr></table></figure>

<p>如图所示，将<code>eula=false</code>改为<code>eula=true</code>。</p>
<p><img src="https://img.iszy.xyz/20190318214227.png"></p>
<p>再次启动，<code>-Xmx</code>和<code>-Xms</code>可以调整内存大小，请自行根据情况调整，内存太少将会卡顿严重。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -Xmx1024M -Xms1024M -jar server.jar nogui</span><br></pre></td></tr></table></figure>

<p>如图所示，你的服务器已经启动成功，注意打开服务器端口。</p>
<p><img src="https://img.iszy.xyz/20190318214241.png"></p>
<p>按<code>Ctrl+C</code>可以中止服务器</p>
<h3 id="打开服务器端口"><a href="#打开服务器端口" class="headerlink" title="打开服务器端口"></a>打开服务器端口</h3><p>使用如下语句打开服务器端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -m tcp --dport 25565 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="注册为-service"><a href="#注册为-service" class="headerlink" title="注册为 service"></a>注册为 service</h2><h3 id="先退出-minecraft-用户"><a href="#先退出-minecraft-用户" class="headerlink" title="先退出 minecraft 用户"></a>先退出 minecraft 用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h3 id="创建-systemd-配置文件"><a href="#创建-systemd-配置文件" class="headerlink" title="创建 systemd 配置文件"></a>创建 systemd 配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/systemd/system/minecraft.service</span><br></pre></td></tr></table></figure>

<p>写入如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=start and stop the minecraft-server</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/home/minecraft</span><br><span class="line">User=minecraft</span><br><span class="line">Group=minecraft</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=20 5</span><br><span class="line">ExecStart=/usr/bin/java -Xms1024M -Xmx1024M -jar server.jar nogui</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=minecraft.service</span><br></pre></td></tr></table></figure>

<h3 id="启动-Minecraft-1"><a href="#启动-Minecraft-1" class="headerlink" title="启动 Minecraft"></a>启动 Minecraft</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service minecraft start</span><br></pre></td></tr></table></figure>

<p>还可以使用如下语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service minecraft stop #停止 Minecraft 服务</span><br><span class="line">service minecraft status # 查看 Minecraft 服务运行状态</span><br></pre></td></tr></table></figure>

<p><img src="https://img.iszy.xyz/20190318214300.png"></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>至此，已经成功在 Ubuntu 16.04 搭建了 Minecraft 服务器 1.13，可以尽情玩耍了。当然，需要获得更好的体验，还有更多调整需要进行。</p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 16.04中安装Oracle Java 8</title>
    <url>/post/5781abdf.html</url>
    <content><![CDATA[<p>在此记录一下在 Ubuntu 16.04 中安装 Oracle Java 8 的过程。</p>
<span id="more"></span>

<h2 id="添加-Oracle-的-PPA"><a href="#添加-Oracle-的-PPA" class="headerlink" title="添加 Oracle 的 PPA"></a>添加 Oracle 的 PPA</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<p><img src="https://img.iszy.xyz/20190318220829.png"></p>
<h2 id="安装-Java-8"><a href="#安装-Java-8" class="headerlink" title="安装 Java 8"></a>安装 Java 8</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install oracle-java8-installer -y</span><br></pre></td></tr></table></figure>

<p>如下图所示，将会跳出一个界面让你同意 Oracle 的 license，切换到 Yes 回车即可。</p>
<p><img src="https://img.iszy.xyz/20190318220840.png"></p>
<h2 id="指定-Java-版本"><a href="#指定-Java-版本" class="headerlink" title="指定 Java 版本"></a>指定 Java 版本</h2><p>一台服务器上可能会安装有多个 Java 版本，通过以下语句指定版本，选择想要的版本即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>

<h2 id="设定JAVA-HOME环境变量"><a href="#设定JAVA-HOME环境变量" class="headerlink" title="设定JAVA_HOME环境变量"></a>设定<code>JAVA_HOME</code>环境变量</h2><p>打开存环境变量的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/environment</span><br></pre></td></tr></table></figure>

<p>在底部添加一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle&quot;</span><br></pre></td></tr></table></figure>

<p>应用环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/environment</span><br></pre></td></tr></table></figure>

<p>可以通过如下语句确认环境变量是否配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure>

<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>现在已经成功安装了 Oracle Java 8，尽情使用吧。</p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>用一个闲置域名尝试一下网站备案</title>
    <url>/post/a7600a1a.html</url>
    <content><![CDATA[<p>国内的各种服务都需要有一个被过案的域名才能使用，没有备案在国内环境下实在是有些不方便。我曾经也想过备案来着，但是看着备案的流程就头大，想着备过案后还要时刻提防着监管，防止触线，内心烦躁，还是没有去搞备案。现在我正好有几个闲置的域名，我拿出一个 <code>iszy.xyz</code> 的域名来尝试备个案，以后也能用这个域名来做点事。这篇文章就来记录一下我的备案流程。</p>
<span id="more"></span>

<h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><h3 id="购买国内空间"><a href="#购买国内空间" class="headerlink" title="购买国内空间"></a>购买国内空间</h3><p>我是不准备用这个域名建站的，所以说买国内主机就很不合算了，我的目标是国内便宜的静态虚拟主机。</p>
<p>于是我在<a href="https://www.west.cn/">西部数码</a>，买下了一个 48 元&#x2F;年的静态型虚拟主机，国内电信机房。这个价格我已经非常满意了，应该来说没有多少更便宜的了吧。</p>
<p>虚拟主机的参数如下，静态虚拟主机顾名思义，只能放静态网站。反正我也不准备建站，所以无所谓了。</p>
<p><img src="https://img.iszy.xyz/20190318211946.png"></p>
<h3 id="填写备案信息"><a href="#填写备案信息" class="headerlink" title="填写备案信息"></a>填写备案信息</h3><p>在西部数码的备案平台上点首次备案，然后开始填写备案信息。</p>
<p>由于主体为个人，主办单位或主办人资料、主办单位负责人资料、网站负责人资料就全是我的个人资料了。还要上传身份证正反照片，在这个网站上能够分别上传正反照片，它会自动帮你拼接成一个照片进行上传。</p>
<p>域名证书这东西属于中国特色，我在国外注册的域名所以不存在这种东西，在网上搜域名证书生成器会很方便地帮你生成，应该不成问题。</p>
<p>在提交管局之前还有最后一步，要上传核验照片和手写的核验单。照片背景必须是符合工信部规定的专用备案幕布，普通照片将会被管局直接拒绝，真的是很棒棒呢。我是不准备买这个幕布了，而且家里也没有打印机和扫描仪，无法完成这一步，我准备过两天去核验点完成这项工作。建个站还要像犯人一样站在专用的幕布前拍照片，可以说是非常人性化了呢。</p>
<h3 id="核验"><a href="#核验" class="headerlink" title="核验"></a>核验</h3><p>家附近就有一家核验点，感觉还挺方便，骑个小电瓶就去了。还是很方便的，按要求填了下核验单，然后用手机拍了下背后有专用幕布的核验照，又拍了下核验单就算是结了。对的，你没听错，就是用手机拍的。那个核验幕布就挂在人家办公室墙上，你往那一站，人家手机拍一下就完了。就是这么拍张照收 30 元也是蛮有意思，既然是规定的，我也就无所谓了。下次可以选择幕布寄到家，自己拍，反正也是 30 元。回家上传了照片，现在就进入到了接入商审核阶段。我看时间也就 1~2 天，那就等吧，助我好运。</p>
<h3 id="接入商审核被退回"><a href="#接入商审核被退回" class="headerlink" title="接入商审核被退回"></a>接入商审核被退回</h3><p>今天看到备案资料被接入商审核退回了，理由是“域名证书上无域名注册商公章，请重新提供加盖域名注册商公章的域名证书”。黑人问号脸，我 namecheap 上注册的域名哪里来的如此中国特色的东西，本来就是我在线生成的。以前看网上说能行，现在看来是不行了。国内的审核啊，就是那么千方百计地想让国内与世界脱节，中国果然不属于世界范畴。</p>
<p><img src="https://img.iszy.xyz/20190318212004.png"></p>
<p>大致是因为现在要求域名实名制了吧，国外注册的域名没办法也不可能搞什么实名认证。也就是说现在想要备案，不仅是空间要在国内，域名也得在国内，这也就意味着能够一键中止你的解析，你一点办法都没有。</p>
<p>话说这个备案也很有意思啊。域名备案不以域名为主体，反而以空间为主体就很反人类了，不同域名注册商还不通用，换个服务器就得更改备案，我还不能随便用服务了。现在嘛，域名实名制了，由于这一点就让需要备份的域名只能在国内注册，又有了实名，也就是出了问题，停止解析就完了，这个网站空间的备案要求留着还有啥用啊。</p>
<p>我先考虑一下吧，要不要继续备案。反正也是个闲置域名不准备建站，只是想在国内的对象存储套上自定义域名，迁回国内问题也不是很大吧，就是不太爽。</p>
<h3 id="将域名转入国内"><a href="#将域名转入国内" class="headerlink" title="将域名转入国内"></a>将域名转入国内</h3><p>由于需要注册满 60 天才能转移，我还是将我以前的一个闲置域名移到了西部数码。又要续费一年真是心痛。</p>
<p>namecheap 似乎不会来主动发确认邮件，还是西部数码真的到了第七天才发了请求？我在第七天才姗姗来迟地收到了 namecheap 地确认转移地邮件。过了一段时间转移成功了，中国特色的实名认证也已经完成了，看来域名的准备算是完成了。</p>
<h3 id="更改域名重新提交备案"><a href="#更改域名重新提交备案" class="headerlink" title="更改域名重新提交备案"></a>更改域名重新提交备案</h3><p>西部数码属于有备案资质的国内接入商，域名证书已经能够下载了。重新补充了域名证书，更改了需要备案的网站域名，我还 P 了下我的备案核验单照片，因为不想看到我的核验单上有修改的痕迹，不知道会不会有影响。</p>
<p>在这次提交过程中，我也因为个人疏忽的一些小错误，被接入商审核退回了几次。在这里提醒大家注意。</p>
<ul>
<li>核验单域名要和申请备案的域名一致（废话）</li>
<li>核验单需要原件扫描或拍照，不能打印</li>
<li>域名证书需要域名注册商公章（这是之前遇到的问题）</li>
<li>个人博客备案的网站名，必须是“XXX 的个人主页”，XXX 是你的姓名，不能随便乱写</li>
</ul>
<p>差不多就是这些问题。现在已经通过了接入商审核，正在等待管局审核。管局审核时间在 20 天左右，部分管局审核较快，在 3~5 天，慢慢等咯。</p>
<p><img src="https://img.iszy.xyz/20190318212050.png"></p>
<h3 id="审核通过"><a href="#审核通过" class="headerlink" title="审核通过"></a>审核通过</h3><p>审核通过啦，可喜可贺。我审核期间连解析都暂停了，也没拖多久就通过了，平均水平吧。至此备案完成，国内的各种对象存储的自定义域名都能用啦。emmm，我就是为了这个备案的。</p>
<p><img src="https://img.iszy.xyz/20190318212107.png"></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>备案</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>在VMware中安装&quot;开源版Windows&quot;——ReactOS</title>
    <url>/post/3a5e0c7c.html</url>
    <content><![CDATA[<p>ReactOS 是一个适用于 x86&#x2F;x64 平台的免费、开源的操作系统暨项目，旨在提供 Windows 平台下的程序与驱动的二进制兼容性，简直可以说是开源版的 Windows。借由逆向工程等手段，其以净室设计的方法进行开发。为确保操作系统没有任何一部分是看过泄漏出来的微软 Windows 源码的人所写，或者逆向工程的过程达不到净室设计标准，一个全盘的源码审查由 ReactOS 主要开发者下令展开。此审查目前已经结束。这篇文章将演示如何在 VMWare 虚拟机上体验 ReactOS。</p>
<span id="more"></span>

<h2 id="下载系统镜像"><a href="#下载系统镜像" class="headerlink" title="下载系统镜像"></a>下载系统镜像</h2><p>前往 ReactOS 官网<a href="https://www.reactos.org/download">下载系统镜像</a>。</p>
<p><img src="https://img.iszy.xyz/20190318215607.png"></p>
<p>将会得到一个 zip 压缩包，解压后是 ReactOS 的安装镜像。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先你要安装有 VMware Workstation Pro(或 Player 版)，这部分安装不再赘述。</p>
<h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><h4 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h4><p><img src="https://img.iszy.xyz/20190318215634.png"></p>
<h4 id="选择镜像"><a href="#选择镜像" class="headerlink" title="选择镜像"></a>选择镜像</h4><p><img src="https://img.iszy.xyz/20190318215652.png"></p>
<h4 id="系统类型设置"><a href="#系统类型设置" class="headerlink" title="系统类型设置"></a>系统类型设置</h4><p>全部选择其他</p>
<p><img src="https://img.iszy.xyz/20190318215707.png"></p>
<h4 id="选择虚拟机存储位置"><a href="#选择虚拟机存储位置" class="headerlink" title="选择虚拟机存储位置"></a>选择虚拟机存储位置</h4><p><img src="https://img.iszy.xyz/20190318215717.png"></p>
<h4 id="硬盘设置"><a href="#硬盘设置" class="headerlink" title="硬盘设置"></a>硬盘设置</h4><p>容量设置为 8G，不用太多</p>
<p><img src="https://img.iszy.xyz/20190318215728.png"></p>
<h4 id="其他参数设置"><a href="#其他参数设置" class="headerlink" title="其他参数设置"></a>其他参数设置</h4><p>内存建议至少 512M，如果想的话，可以开启加速 3D 图形</p>
<p><img src="https://img.iszy.xyz/20190318215740.png"></p>
<p>点击完成即可。</p>
<h3 id="安装-ReactOS"><a href="#安装-ReactOS" class="headerlink" title="安装 ReactOS"></a>安装 ReactOS</h3><p>首先启动虚拟机，进入安装进程。</p>
<h4 id="选择语言"><a href="#选择语言" class="headerlink" title="选择语言"></a>选择语言</h4><p>有许多语言可供选择，在这里我选择<code>Chinese (RPC)</code>，点击回车。</p>
<p><img src="https://img.iszy.xyz/20190318215752.png"></p>
<h4 id="调整屏幕分辨率"><a href="#调整屏幕分辨率" class="headerlink" title="调整屏幕分辨率"></a>调整屏幕分辨率</h4><p>一路回车到如下界面，可以调整屏幕分辨率，若不需要，回车即可。</p>
<p><img src="https://img.iszy.xyz/20190318215803.png"></p>
<p>在此，我调整了分辨率为<code>1280x1024x32</code>。</p>
<p><img src="https://img.iszy.xyz/20190318215814.png"></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>一路回车进行安装，到如下界面。在虚拟机右下角断开 CD 连接后回车重启。</p>
<p><img src="https://img.iszy.xyz/20190318215825.png"></p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>启动后直接回车进入第一个系统，后面都是类 Windows 的操作，比较简单，不用设置的地方下一步即可。</p>
<p><img src="https://img.iszy.xyz/20190318215850.png"></p>
<p>在此页面可以设置时区、输入语言和键盘，可惜似乎没有中文的输入法支持。</p>
<p><img src="https://img.iszy.xyz/20190318215901.png"></p>
<p>在此页面可以设置系统密码，我在此留空，不设密码。</p>
<p><img src="https://img.iszy.xyz/20190318215909.png"></p>
<p>时区选择北京，关闭夏令时。</p>
<p><img src="https://img.iszy.xyz/20190318215922.png"></p>
<p>一路下一步完成安装，重启后即可进入系统。自动安装驱动可以取消，反正也没有可以支持的内容。</p>
<p><img src="https://img.iszy.xyz/20190318215937.png"></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>ReactOS 完成度已经很高了，经网友测试已经可以兼容许多 Windows 下的程序，完全没有使用 Windows 的代码，可以说是非常了不起了。现在 ReactOS 仍在积极开发，提供了许多新的功能，看官大可以体验一下，说不定未来这个系统真的能够代理 Windows 呢。</p>
<p>在此我就体验了一下 ReactOS 自带的扫雷游戏，更多功能留给看官自行探索。</p>
<p><img src="https://img.iszy.xyz/20190318215950.png"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ReactOS</tag>
        <tag>开源</tag>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT 主题配置记录</title>
    <url>/post/fab9ad28.html</url>
    <content><![CDATA[<p>前段时间将博客模板更改为 NexT 主题了，在此记录一下配置的内容，按照配置文件顺序进行。留做备份，方便升级。很多以前的自定义添加的内容都整合进了主题，只需要在配置文件中简单启用即可。</p>
<span id="more"></span>

<p>这里只是记录了我主要的配置内容，并不是全部，后期也可能会修改。有什么配置上的问题，可以在评论里留言，我会尽量回答。</p>
<h2 id="启用-NexT-主题"><a href="#启用-NexT-主题" class="headerlink" title="启用 NexT 主题"></a>启用 NexT 主题</h2><p>默认已经新建了 hexo 站点，不再赘述。</p>
<h3 id="下载-NexT-主题"><a href="#下载-NexT-主题" class="headerlink" title="下载 NexT 主题"></a>下载 NexT 主题</h3><p>在这里选取 <code>v6.5.0</code> 版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone --branch v6.5.0 https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>

<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>在站点配置文件中将主题设置为 next。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-Hexo-data-files-配置主题"><a href="#使用-Hexo-data-files-配置主题" class="headerlink" title="使用 Hexo data files 配置主题"></a>使用 Hexo data files 配置主题</h2><p>为了使主题与配置分离，方便升级主题，采用 Hexo data files 进行配置。</p>
<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p>在站点文件夹创建 <code>source/_data/next.yml</code> 文件。</p>
<h3 id="复制配置"><a href="#复制配置" class="headerlink" title="复制配置"></a>复制配置</h3><p>将所有配置内容，包括站点和主题配置文件移入 <code>source/_data/next.yml</code> 文件。</p>
<h3 id="next-yml-文件中启用-override"><a href="#next-yml-文件中启用-override" class="headerlink" title="next.yml 文件中启用 override"></a><code>next.yml</code> 文件中启用 override</h3><p>修改以下内容。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">override:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>至此，配置文件与主题分离，不用再区分站点配置文件或是主题配置文件，后面的所有配置更改都将在此文件内进行。</p>
<h2 id="站点配置内容"><a href="#站点配置内容" class="headerlink" title="站点配置内容"></a>站点配置内容</h2><p>在此只列出改动的内容</p>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">随遇而安</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">在自由的空气中漂浮</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">孙梓洋的个人博客，主要用于生活吐槽和学习记录</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">your</span> <span class="string">keywords</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Sun</span> <span class="string">Ziyang</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://www.iszy.cc</span></span><br></pre></td></tr></table></figure>

<h3 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">your</span> <span class="string">git</span> <span class="string">repo</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h3 id="启用-AMP-选"><a href="#启用-AMP-选" class="headerlink" title="启用 AMP(选)"></a>启用 AMP(选)</h3><p>需要安装插件<code>hexo-generator-amp</code>，请确保你了解<strong>AMP</strong>，否则不要贸然进行这一步。</p>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-amp --save</span><br></pre></td></tr></table></figure>

<h4 id="添加配置文件内容"><a href="#添加配置文件内容" class="headerlink" title="添加配置文件内容"></a>添加配置文件内容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">generator_amp:</span><br><span class="line">  templateDir:  amp-template</span><br><span class="line">  assetDistDir: amp-dist</span><br><span class="line">  logo:</span><br><span class="line">    path:   sample/sample-logo.png</span><br><span class="line">    width:  384</span><br><span class="line">    height: 384</span><br><span class="line">  substituteTitleImage:</span><br><span class="line">    path:   sample/sample-substituteTitleImage.png</span><br><span class="line">    width:  640</span><br><span class="line">    height: 640</span><br><span class="line">  warningLog: false   # To display warning, please set true.</span><br><span class="line">  validateAMP: true   # To AMP HTML validate automatically, please set true.</span><br></pre></td></tr></table></figure>

<h4 id="修改模板"><a href="#修改模板" class="headerlink" title="修改模板"></a>修改模板</h4><p>打开<code>post</code>的模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi themes/next/layout/_macro/post.swig</span><br></pre></td></tr></table></figure>

<p>添加以下内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if is_post() and config.generator_amp %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;amphtml&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; post.permalink &#125;&#125;amp/&quot;</span> /&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主题配置内容"><a href="#主题配置内容" class="headerlink" title="主题配置内容"></a>主题配置内容</h2><h3 id="图标配置"><a href="#图标配置" class="headerlink" title="图标配置"></a>图标配置</h3><p>这些图标可以在 <a href="https://www.websiteplanet.com/zh-hans/webtools/favicon-generator/">网页图标生成器</a> 生成（感谢一位热心读者提供了这个更加好用的工具）。如果前面那个用不来，也可以尝试一下<a href="https://realfavicongenerator.net/">Favicon Generator</a>。图片存放路径与站点 source 文件夹中路径一致。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/safari-pinned-tab.svg</span></span><br><span class="line">  <span class="attr">android_manifest:</span> <span class="string">/images/manifest.json</span></span><br><span class="line">  <span class="attr">ms_browserconfig:</span> <span class="string">/images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>

<h3 id="RSS-订阅"><a href="#RSS-订阅" class="headerlink" title="RSS 订阅"></a>RSS 订阅</h3><p>安装插件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>保持此项配置不动。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rss:</span></span><br></pre></td></tr></table></figure>

<h3 id="关闭站点底部各种说明"><a href="#关闭站点底部各种说明" class="headerlink" title="关闭站点底部各种说明"></a>关闭站点底部各种说明</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">powered:</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line">  <span class="attr">version:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span></span><br><span class="line">  <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">  <span class="attr">version:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="备案信息"><a href="#备案信息" class="headerlink" title="备案信息"></a>备案信息</h3><p>国内网站需要添加备案信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">beian:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">icp:苏ICP备18000000号-1</span> <span class="comment">#请换成你自己的备案号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 打开SEO优化</span></span><br><span class="line"></span><br><span class="line"><span class="string">```yaml</span></span><br><span class="line"><span class="attr">seo:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<h3 id="选取主题样式"><a href="#选取主题样式" class="headerlink" title="选取主题样式"></a>选取主题样式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h3 id="配置社交"><a href="#配置社交" class="headerlink" title="配置社交"></a>配置社交</h3><p>可以自行添加，选择图标</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">Telegram:</span> <span class="string">https://t.me/sunziyang97</span> <span class="string">||</span> <span class="string">telegram</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:hi@iszy.xyz</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br></pre></td></tr></table></figure>

<h3 id="配置友链"><a href="#配置友链" class="headerlink" title="配置友链"></a>配置友链</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span></span><br><span class="line"><span class="comment">#links_layout: block</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">随遇而安:</span> <span class="string">https://www.iszy.cc</span></span><br><span class="line">  <span class="attr">name2:</span> <span class="string">https://example.com</span></span><br></pre></td></tr></table></figure>

<h3 id="侧边栏头像"><a href="#侧边栏头像" class="headerlink" title="侧边栏头像"></a>侧边栏头像</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.png</span> <span class="comment">#头像地址</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment">#是否圆形</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span> <span class="comment">#透明度</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span> <span class="comment">#鼠标指向是否转圈</span></span><br></pre></td></tr></table></figure>

<h3 id="文章浏览进度"><a href="#文章浏览进度" class="headerlink" title="文章浏览进度"></a>文章浏览进度</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">b2t:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">scroll_to_more:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">save_scroll:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure>

<h3 id="赞助"><a href="#赞助" class="headerlink" title="赞助"></a>赞助</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">您的支持将是对我最好的鼓励！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>

<h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Related popular posts</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/tea3/hexo-related-popular-posts</span></span><br><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="comment"># custom header, leave empty to use the default one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0</span></span><br><span class="line">    <span class="comment">#isDate: false</span></span><br><span class="line">    <span class="comment">#isImage: false</span></span><br><span class="line">    <span class="comment">#isExcerpt: false</span></span><br></pre></td></tr></table></figure>

<h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;</span> <span class="string">rel=&quot;external</span> <span class="string">nofollow&quot;</span> <span class="string">target=&quot;_blank&quot;&gt;CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span><span class="string">&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Valine-评论"><a href="#Valine-评论" class="headerlink" title="Valine 评论"></a>Valine 评论</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">your</span> <span class="string">appid</span> <span class="comment"># your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">your</span> <span class="string">appkey</span> <span class="comment"># your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">ヾﾉ≧∀≦)o快来评论一下吧!</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="comment"># gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure>

<h3 id="站长工具"><a href="#站长工具" class="headerlink" title="站长工具"></a>站长工具</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">google_site_verification:</span> <span class="string">ABCD...</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">UA-123456789-1</span></span><br><span class="line"><span class="attr">bing_site_verification:</span> <span class="string">10AA...</span></span><br></pre></td></tr></table></figure>

<h3 id="本地搜索-1"><a href="#本地搜索-1" class="headerlink" title="本地搜索"></a>本地搜索</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="关闭动画"><a href="#关闭动画" class="headerlink" title="关闭动画"></a>关闭动画</h3><p>为了加速我的网站，我关闭了站点的动画。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="配置静态文件-CDN"><a href="#配置静态文件-CDN" class="headerlink" title="配置静态文件 CDN"></a>配置静态文件 CDN</h3><p>配置 CDN 能够节省服务器流量。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Script Vendors.</span></span><br><span class="line"><span class="comment"># Set a CDN address for the vendor you want to customize.</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment">#    jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</span></span><br><span class="line"><span class="comment"># Be aware that you should use the same version as internal ones to avoid potential problems.</span></span><br><span class="line"><span class="comment"># Please use the https protocol of CDN files when you enable https on your site.</span></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># Internal path prefix. Please do not edit it.</span></span><br><span class="line">  <span class="attr">_internal:</span> <span class="string">lib</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 2.1.3</span></span><br><span class="line">  <span class="attr">jquery:</span> <span class="string">//cdn.bootcss.com/jquery/2.1.3/jquery.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 2.1.5</span></span><br><span class="line">  <span class="comment"># See: http://fancyapps.com/fancybox/</span></span><br><span class="line">  <span class="attr">fancybox:</span> <span class="string">//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js</span></span><br><span class="line">  <span class="attr">fancybox_css:</span> <span class="string">//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.6</span></span><br><span class="line">  <span class="comment"># See: https://github.com/ftlabs/fastclick</span></span><br><span class="line">  <span class="attr">fastclick:</span> <span class="string">//cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.9.7</span></span><br><span class="line">  <span class="comment"># See: https://github.com/tuupola/jquery_lazyload</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="string">//cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.2.1</span></span><br><span class="line">  <span class="comment"># See: http://VelocityJS.org</span></span><br><span class="line">  <span class="attr">velocity:</span> <span class="string">//cdn.bootcss.com/velocity/1.2.1/velocity.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.2.1</span></span><br><span class="line">  <span class="comment"># See: http://VelocityJS.org</span></span><br><span class="line">  <span class="attr">velocity_ui:</span> <span class="string">//cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 0.7.9</span></span><br><span class="line">  <span class="comment"># See: https://faisalman.github.io/ua-parser-js/</span></span><br><span class="line">  <span class="attr">ua_parser:</span> <span class="string">//cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 4.6.2</span></span><br><span class="line">  <span class="comment"># See: http://fontawesome.io/</span></span><br><span class="line">  <span class="attr">fontawesome:</span> <span class="string">//cdn.bootcss.com/font-awesome/4.6.2/css/font-awesome.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1</span></span><br><span class="line">  <span class="comment"># https://www.algolia.com</span></span><br><span class="line">  <span class="attr">algolia_instant_js:</span></span><br><span class="line">  <span class="attr">algolia_instant_css:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.2</span></span><br><span class="line">  <span class="comment"># See: https://github.com/HubSpot/pace</span></span><br><span class="line">  <span class="comment"># Or use direct links below:</span></span><br><span class="line">  <span class="comment"># pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js</span></span><br><span class="line">  <span class="comment"># pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span></span><br><span class="line">  <span class="attr">pace:</span> <span class="string">//cdn.bootcss.com/pace/1.0.2/pace.min.js</span></span><br><span class="line">  <span class="attr">pace_css:</span> <span class="string">//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># See: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line">  <span class="attr">canvas_nest:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js</span></span><br><span class="line">  <span class="attr">canvas_nest_nomobile:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># See: https://github.com/theme-next/theme-next-three</span></span><br><span class="line">  <span class="comment"># three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js</span></span><br><span class="line">  <span class="comment"># three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js</span></span><br><span class="line">  <span class="comment"># canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js</span></span><br><span class="line">  <span class="comment"># canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js</span></span><br><span class="line">  <span class="attr">three:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># https://github.com/zproo/canvas-ribbon</span></span><br><span class="line">  <span class="attr">canvas_ribbon:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 3.3.0</span></span><br><span class="line">  <span class="comment"># https://github.com/ethantw/Han</span></span><br><span class="line">  <span class="attr">Han:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 3.3.0</span></span><br><span class="line">  <span class="comment"># https://github.com/vinta/pangu.js</span></span><br><span class="line">  <span class="comment"># Example:</span></span><br><span class="line">  <span class="comment"># pangu: //cdn.jsdelivr.net/npm/pangu@3.3.0/dist/browser/pangu.min.js</span></span><br><span class="line">  <span class="comment"># pangu: //cdnjs.cloudflare.com/ajax/libs/pangu/3.3.0/pangu.min.js</span></span><br><span class="line">  <span class="attr">pangu:</span> <span class="string">//cdn.bootcss.com/pangu/3.3.0/pangu.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># needMoreShare2</span></span><br><span class="line">  <span class="comment"># https://github.com/revir/need-more-share2</span></span><br><span class="line">  <span class="comment"># Example:</span></span><br><span class="line">  <span class="comment"># needmoreshare2_js: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.js</span></span><br><span class="line">  <span class="comment"># needmoreshare2_css: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.css</span></span><br><span class="line">  <span class="attr">needmoreshare2_js:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.js</span></span><br><span class="line">  <span class="attr">needmoreshare2_css:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># bookmark</span></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># https://github.com/theme-next/theme-next-bookmark</span></span><br><span class="line">  <span class="comment"># Example:</span></span><br><span class="line">  <span class="comment"># bookmark: //cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@1.0.0/bookmark.min.js</span></span><br><span class="line">  <span class="attr">bookmark:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@1.0.0/bookmark.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># reading_progress</span></span><br><span class="line">  <span class="comment"># Internal version: 1.0</span></span><br><span class="line">  <span class="comment"># https://github.com/theme-next/theme-next-reading-progress</span></span><br><span class="line">  <span class="comment"># Example: https://cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1.1/reading_progress.min.js</span></span><br><span class="line">  <span class="attr">reading_progress:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1.1/reading_progress.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># valine comment</span></span><br><span class="line">  <span class="comment"># Example: https://cdn.jsdelivr.net/npm/valine@1.1.8/dist/Valine.min.js</span></span><br><span class="line">  <span class="attr">valine:</span> <span class="string">//cdn.jsdelivr.net/npm/valine@latest/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>dubbo获取注册中心的实例bean</title>
    <url>/post/7b5d2fb9.html</url>
    <content><![CDATA[<h2 id="开发日记-20180718"><a href="#开发日记-20180718" class="headerlink" title="开发日记 20180718"></a>开发日记 20180718</h2><h3 id="com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large"><a href="#com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large" class="headerlink" title="com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large"></a>com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large: 11557050, max payload: 8388608 java.io.IOException: Data length too large: 11557050, max payload: 838860</span><br></pre></td></tr></table></figure>

<p>在使用dubbo框架开发的时候，需要做一个导出csv文件的功能，查询大量的数据然后在提供者这边进行处理导出，其中数据达到过20万行以上，几十M的数据，抛出了这样一个异常。遇到服务提供者从数据库查询或者其他地方返回过大的对象，导致报错时，尽管有办法取消这个数据长度的限制，但是这并不符合程序开发的初衷。我们需要将对于数据的处理放在业务层，我在这里做了异步导出，给前端返回的仅仅是一个程序完成的状态，完美的解决了这个问题。</p>
<span id="more"></span>

<h3 id="在dubbo消费者服务中写aop方法拦截工具类中的方法"><a href="#在dubbo消费者服务中写aop方法拦截工具类中的方法" class="headerlink" title="在dubbo消费者服务中写aop方法拦截工具类中的方法"></a>在dubbo消费者服务中写aop方法拦截工具类中的方法</h3><p>尽管服务的提供者和消费者都引入的工具类模块的依赖，但是拦截器的实际拦截的还是那个实际本身所在模块的方法。如果工具类是在消费者service层被使用的，那么在上层模块的拦截器是无法拦截到这个方法的。</p>
<h3 id="在dubbo服务中手动获取注册的提供者的bean"><a href="#在dubbo服务中手动获取注册的提供者的bean" class="headerlink" title="在dubbo服务中手动获取注册的提供者的bean"></a>在dubbo服务中手动获取注册的提供者的bean</h3><p>在这里犯的错：以为通过SpringContextHolder.getBean()可以获取，是我傻逼了，dubbo中的服务怎么能用spring上下文获取呢。这里我使用dubbo的方式完成了这个功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取服务的代理对象</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static &lt;T&gt; T getReferenceConfig(String appName,String address,Class&lt;?&gt; interfaceClass) &#123;</span><br><span class="line">    String key  = interfaceClass.getName();</span><br><span class="line">    ReferenceConfig&lt;T&gt; referenceConfig =  (ReferenceConfig&lt;T&gt;)referenceCache.get(key);</span><br><span class="line">    if(referenceConfig == null)&#123;</span><br><span class="line">        referenceConfig = new ReferenceConfig&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">        referenceConfig.setApplication(application);</span><br><span class="line">        referenceConfig.setRegistry(getRegistryConfig(appName,address));</span><br><span class="line">        referenceConfig.setInterface(interfaceClass);</span><br><span class="line"></span><br><span class="line">        referenceCache.put(key,referenceConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return referenceConfig.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>dubbo</category>
      </categories>
      <tags>
        <tag>开发日记</tag>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS 使用 Caddy 快速搭建 Nextcloud 全过程</title>
    <url>/post/5a98ac2c.html</url>
    <content><![CDATA[<p>今天准备做一个完整的采用 Caddy Web Server 部署 NextCloud 的教程。本教程除 Web 服务器配置，部分参考橙叶博客文章——<a href="https://www.orgleaf.com/2203.html">VPS 快速完美部署 ownCloud&#x2F;Nextcloud 全过程</a>。有什么问题，欢迎在评论区留言或者联系我，我一定会及时回复的。</p>
<span id="more"></span>

<h2 id="VPS-及系统环境"><a href="#VPS-及系统环境" class="headerlink" title="VPS 及系统环境"></a>VPS 及系统环境</h2><ul>
<li>VPS：国内腾讯云的香港云主机</li>
<li>系统：Ubuntu 16.04</li>
</ul>
<p>我采用的 VPS 是国内腾讯云的香港云主机，全世界范围内 ping 值都很低，按流量计费最大能开到 200M 带宽。毕竟是腾讯的，国内访问速度出奇的快。</p>
<p>系统采用的是 Ubuntu 16.04，Debian 系的应该都能够一样实现吧。</p>
<h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><p>Caddy Web Server 会自动申请 ssl 证书，全站 https，但是需要提前将域名解析到所在 VPS，否则 Caddy 会启动失败。不需要 ssl 的或想要 IP 访问的请自行调整 Caddy 配置。</p>
<p><img src="https://img.iszy.xyz/20190318212135.png"></p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>ssh 登录 VPS 后，在 root 用户下继续执行下面的操作。</p>
<h3 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<h3 id="安装-Caddy"><a href="#安装-Caddy" class="headerlink" title="安装 Caddy"></a>安装 Caddy</h3><p>为节省时间，此处采用了 Toyo 大佬的一键脚本。详细页面参见：<a href="https://doub.io/shell-jc1/">『原创』Go 语言 跨平台支持的极简 HTTP Server —— Caddy 一键安装脚本</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://softs.loan/Bash/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.cgi,http.expires,http.filemanager,http.git,http.filter</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果上面这个脚本无法下载，尝试使用备用下载：</span></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.cgi,http.expires,http.filemanager,http.git,http.filter</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p><strong>启动：</strong>&#x2F;etc&#x2F;init.d&#x2F;caddy start</p>
<p><strong>停止：</strong>&#x2F;etc&#x2F;init.d&#x2F;caddy stop</p>
<p><strong>重启：</strong>&#x2F;etc&#x2F;init.d&#x2F;caddy restart</p>
<p><strong>查看状态：</strong>&#x2F;etc&#x2F;init.d&#x2F;caddy status</p>
<p><strong>查看 Caddy 启动日志：</strong> tail -f &#x2F;tmp&#x2F;caddy.log</p>
<p><strong>安装目录：</strong>&#x2F;usr&#x2F;local&#x2F;caddy</p>
<p><strong>Caddy 配置文件位置：</strong>&#x2F;usr&#x2F;local&#x2F;caddy&#x2F;Caddyfile</p>
<p><strong>Caddy 自动申请 SSL 证书位置：</strong>&#x2F;.caddy&#x2F;acme&#x2F;acme-v02.api.letsencrypt.org&#x2F;sites&#x2F;xxx.xxx(域名)&#x2F;</p>
</blockquote>
<h2 id="安装并配置-MySQL"><a href="#安装并配置-MySQL" class="headerlink" title="安装并配置 MySQL"></a>安装并配置 MySQL</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></table></figure>

<p>将会有图形界面用以设定 root 密码，根据提示进行操作即可。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这里采用 SQL 命令配置数据库</p>
<ol>
<li><p>登录数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建名为 nextcloud 的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE nextcloud;</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE nextcloud;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建名为 nextcloud 的用户，密码为 password (注意替换为自己的)，并赋予权限。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">All</span>  <span class="keyword">ON</span> nextcloud.<span class="operator">*</span> <span class="keyword">TO</span> nextcloud<span class="variable">@localhost</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>登出数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装-php7-0"><a href="#安装-php7-0" class="headerlink" title="安装 php7.0"></a>安装 php7.0</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install php7.0 php7.0-mbstring php7.0-zip php7.0-dom php7.0-xml php7.0-gd php7.0-curl php7.0-mysql -y</span><br></pre></td></tr></table></figure>

<p>打开 <code>/etc/php/7.0/fpm/pool.d/www.conf</code> 查看 <code>php7.0-fpm</code> 监听的地址，<strong>留作后用</strong>。不同系统可能位置不同，也可能配置在 <code>/etc/php7.0/fpm/php-fpm.conf</code> 中。</p>
<p>监听地址可能为以下两种：</p>
<ul>
<li>语句为 <code>listen = /run/php/php7.0-fpm.sock</code>，此时监听地址为 <code>/run/php/php7.0-fpm.sock</code></li>
<li>语句为 <code>listen = 127.0.0.1:9000</code>，此时 <code>php7.0-fpm</code> 绑定了 9000 端口，监听地址为 <code>127.0.0.1:9000</code></li>
</ul>
<p>监听地址可以自行修改。修改后运行以下内容应用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service php7.0-fpm reload</span><br></pre></td></tr></table></figure>

<h2 id="创建文件及网站目录"><a href="#创建文件及网站目录" class="headerlink" title="创建文件及网站目录"></a>创建文件及网站目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /</span><br><span class="line">mkdir /home &amp;&amp; cd /home</span><br><span class="line">mkdir wwwroot wwwdata &amp;&amp; cd wwwroot</span><br><span class="line">mkdir example.com &amp;&amp; cd example.com #文件夹名字及位置自定</span><br><span class="line">chown www-data:www-data /home/wwwdata -Rf</span><br><span class="line">chmod 770 /home/wwwdata -Rf</span><br><span class="line">chown www-data:www-data /home/wwwroot/example.com -Rf</span><br></pre></td></tr></table></figure>

<h2 id="安装-NextCloud"><a href="#安装-NextCloud" class="headerlink" title="安装 NextCloud"></a>安装 NextCloud</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/wwwroot/example.com</span><br><span class="line">wget https://download.nextcloud.com/server/releases/nextcloud-13.0.4.zip</span><br><span class="line">unzip nextcloud-13.0.4.zip</span><br><span class="line">rm nextcloud-13.0.4.zip</span><br><span class="line">mv nextcloud/* .</span><br><span class="line">mv nextcloud/.* .</span><br><span class="line">rm nextcloud -r</span><br></pre></td></tr></table></figure>

<h3 id="设置文件夹权限"><a href="#设置文件夹权限" class="headerlink" title="设置文件夹权限"></a>设置文件夹权限</h3><p>新建 <code>set.sh</code> 文件，添加如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将ocpath替换为自己的网站文件夹位置</span></span><br><span class="line">ocpath=&#x27;/home/wwwroot/example.com&#x27; #1</span><br><span class="line">htuser=&#x27;www-data&#x27;</span><br><span class="line">htgroup=&#x27;www-data&#x27;</span><br><span class="line">rootuser=&#x27;root&#x27;</span><br><span class="line"></span><br><span class="line">printf &quot;Creating possible missing Directories\n&quot;</span><br><span class="line">mkdir -p $ocpath/data</span><br><span class="line">mkdir -p $ocpath/assets</span><br><span class="line">mkdir -p $ocpath/updater</span><br><span class="line"></span><br><span class="line">printf &quot;chmod Files and Directories\n&quot;</span><br><span class="line">find $&#123;ocpath&#125;/ -type f -print0 | xargs -0 chmod 0640</span><br><span class="line">find $&#123;ocpath&#125;/ -type d -print0 | xargs -0 chmod 0750</span><br><span class="line"></span><br><span class="line">printf &quot;chown Directories\n&quot;</span><br><span class="line">chown -R $&#123;rootuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/apps/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/assets/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/config/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/data/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/themes/</span><br><span class="line">chown -R $&#123;htuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/updater/</span><br><span class="line"></span><br><span class="line">chmod +x $&#123;ocpath&#125;/occ</span><br><span class="line"></span><br><span class="line">printf &quot;chmod/chown .htaccess\n&quot;</span><br><span class="line">if [ -f $&#123;ocpath&#125;/.htaccess ]</span><br><span class="line">  then</span><br><span class="line">    chmod 0644 $&#123;ocpath&#125;/.htaccess</span><br><span class="line">    chown $&#123;rootuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/.htaccess</span><br><span class="line">fi</span><br><span class="line">if [ -f $&#123;ocpath&#125;/data/.htaccess ]</span><br><span class="line">  then</span><br><span class="line">    chmod 0644 $&#123;ocpath&#125;/data/.htaccess</span><br><span class="line">    chown $&#123;rootuser&#125;:$&#123;htgroup&#125; $&#123;ocpath&#125;/data/.htaccess</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>打开文件，将 “#1” 所在行的地址更改为你自己的网站文件地址，然后保存。</p>
<p>赋予权限并运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x set.sh</span><br><span class="line">./set.sh</span><br></pre></td></tr></table></figure>

<h2 id="挂载腾讯-COS-作为存储盘-选"><a href="#挂载腾讯-COS-作为存储盘-选" class="headerlink" title="挂载腾讯 COS 作为存储盘(选)"></a>挂载腾讯 COS 作为存储盘(选)</h2><p>这一步为选做，小硬盘 VPS 福音。</p>
<p>由于我用的是腾讯云主机，同地域 COS 内网流量免费，将文件存储到 COS 能极大地节省 VPS 的硬盘空间。在此处我默认你已经创建了腾讯云对象存储的 Bucket，不会的请谷歌解决。</p>
<h3 id="安装-COSFS-工具"><a href="#安装-COSFS-工具" class="headerlink" title="安装 COSFS 工具"></a>安装 COSFS 工具</h3><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install automake autotools-dev g++ git libcurl4-gnutls-dev libfuse-dev libssl-dev libxml2-dev make pkg-config fuse -y</span><br></pre></td></tr></table></figure>

<h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><p>使用 Github 原始地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tencentyun/cosfs /usr/cosfs</span><br></pre></td></tr></table></figure>

<p>如果国内主机速度过慢，可以使用我在 gitee 备份的库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/sunziyang97/cosfs.git /usr/cosfs</span><br></pre></td></tr></table></figure>

<h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/cosfs</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在  <code>/etc/passwd-cosfs</code> 文件中，配置您的存储桶的名称，以及该存储桶对应的 SecretId 和 SecretKey，相关概念参见  <a href="https://cloud.tencent.com/document/product/436/6225">对象存储基本概念</a>。使用冒号隔开，注意冒号为半角符号。 并为  <code>/etc/passwd-cosfs</code>  设置可读权限。命令格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &lt;bucketname&gt;:&lt;SecretId&gt;:&lt;SecretKey&gt; &gt; /etc/passwd-cosfs</span><br><span class="line">chmod 640 /etc/passwd-cosfs</span><br></pre></td></tr></table></figure>

<p>其中：<br><code>bucketname</code>&#x2F; <code>SecretId</code>&#x2F;<code>SecretKey</code> 需要替换为用户的真实信息。</p>
<p><code>bucketname</code> 形如 <code>bucketprefix-123456789</code>, 更多关于 <code>bucketname</code> 的命名规范，参见<a href="https://cloud.tencent.com/document/product/436/13312#.E5.AD.98.E5.82.A8.E6.A1.B6.E5.91.BD.E5.90.8D.E8.A7.84.E8.8C.83">存储桶命名规范</a>。</p>
<h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><h4 id="运行工具"><a href="#运行工具" class="headerlink" title="运行工具"></a>运行工具</h4><p>将配置好的存储桶挂载到指定目录，命令行如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cosfs nextcloud-123456789 /home/wwwdata -ourl=http://cos.ap-hongkong.myqcloud.com -ouid=33 -ogid=33 -o allow_other -o umask=007</span><br></pre></td></tr></table></figure>

<p>注意替换为自己的信息</p>
<h4 id="配置开机自动挂载"><a href="#配置开机自动挂载" class="headerlink" title="配置开机自动挂载"></a>配置开机自动挂载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo cosfs#nextcloud-1253146816 /home/wwwdata fuse _netdev,url=http://cos.ap-hongkong.myqcloud.com,uid=33,gid=33,allow_other,umask=007 0 0 &gt;&gt; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>

<p>注意替换为自己的信息</p>
<h2 id="编辑-Caddy-配置文件"><a href="#编辑-Caddy-配置文件" class="headerlink" title="编辑 Caddy 配置文件"></a>编辑 Caddy 配置文件</h2><p>打开配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<p>添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pan.iszy.me &#123;</span><br><span class="line"></span><br><span class="line">    root   /home/wwwroot/pan.iszy.me</span><br><span class="line">    log    /home/wwwlog/pan.iszy.me.log</span><br><span class="line">    errors /home/wwwlog/pan.iszy.me.errors.log</span><br><span class="line">    tls hi@iszy.me</span><br><span class="line"></span><br><span class="line">    # 1</span><br><span class="line">    fastcgi / /run/php/php7.0-fpm.sock php</span><br><span class="line"></span><br><span class="line">    # checks for images</span><br><span class="line">    rewrite &#123;</span><br><span class="line">        ext .svg .gif .png .html .ttf .woff .ico .jpg .jpeg</span><br><span class="line">        r ^/index.php/(.+)$</span><br><span class="line">        to /&#123;1&#125; /index.php?&#123;1&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/index.php/.*$</span><br><span class="line">        to /index.php?&#123;query&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # client support (e.g. os x calendar / contacts)</span><br><span class="line">    redir /.well-known/carddav /remote.php/carddav 301</span><br><span class="line">    redir /.well-known/caldav /remote.php/caldav 301</span><br><span class="line"></span><br><span class="line">    # remove trailing / as it causes errors with php-fpm</span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/remote.php/(webdav|caldav|carddav|dav)(\/?)(\/?)$</span><br><span class="line">        to /remote.php/&#123;1&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/remote.php/(webdav|caldav|carddav|dav)/(.+?)(\/?)(\/?)$</span><br><span class="line">        to /remote.php/&#123;1&#125;/&#123;2&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/public.php/(dav|webdav|caldav|carddav)(\/?)(\/?)$</span><br><span class="line">        to /public.php/&#123;1&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rewrite &#123;</span><br><span class="line">        r ^/public.php/(dav|webdav|caldav|carddav)/(.+)(\/?)(\/?)$</span><br><span class="line">        to /public.php/&#123;1&#125;/&#123;2&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # .htaccess / data / config / ... shouldn&#x27;t be accessible from outside</span><br><span class="line">    status 403 &#123;</span><br><span class="line">        /.htaccess</span><br><span class="line">        /data</span><br><span class="line">        /config</span><br><span class="line">        /db_structure</span><br><span class="line">        /.xml</span><br><span class="line">        /README</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    header / Strict-Transport-Security &quot;max-age=31536000;&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>#1</code> 处将地址替换为之前查看的 <code>php7.0-fpm</code> 监听的地址。</p>
<p>重启 Caddy。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service caddy restart</span><br></pre></td></tr></table></figure>

<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>访问 example.com (你自己的网站)，输入信息并安装。</p>
<p><strong>注意点：</strong></p>
<ul>
<li>数据目录填写绝对地址，本例中应使用 <code>/home/wwwdata</code>。</li>
<li>数据库用户名为之前创建的 <code>nextcloud</code>，密码为你设定的密码</li>
<li>数据库地址要加端口，如 <code>localhost:3306</code></li>
</ul>
<p>配图为我前一次<a href="https://www.iszy.cc/2017/12/18/NextCloud/">使用宝塔面板进行安装</a>时的截图。</p>
<p><img src="https://img.iszy.xyz/20190318212151.png"></p>
<h2 id="更多问题"><a href="#更多问题" class="headerlink" title="更多问题"></a>更多问题</h2><p>安装完成后登录，进入<code>设置</code>—<code>管理</code>—<code>基本设置</code>，还有一些问题需要解决。我们下篇文章继续说明。</p>
<p><strong>有什么问题，欢迎在评论区留言或者联系我，我一定会及时回复的。</strong></p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Nextcloud</tag>
        <tag>Caddy</tag>
        <tag>文件管理</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery 中 $.ajax 和 $.getJSON 的简单应用对比</title>
    <url>/post/29fb1fd9.html</url>
    <content><![CDATA[<p>在项目中使用到了 <code>$.ajax</code> 与 <code>$.getJSON</code> 两种从后台获取 json 的方式，在此进行简单的对比，用以记录学习。</p>
<span id="more"></span>

<h2 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h2><h3 id="ajax-方式"><a href="#ajax-方式" class="headerlink" title="$.ajax 方式"></a><code>$.ajax</code> 方式</h3><p>代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/example&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">key</span>: <span class="string">&quot;test&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title function_">somefunction</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="getJSON-方式"><a href="#getJSON-方式" class="headerlink" title="$.getJSON 方式"></a><code>$.getJSON</code> 方式</h3><p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.getJSON(&quot;/example&quot;,&#123;key: &quot;test&quot;&#125;,function(data)&#123;</span><br><span class="line">    somefunction();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>我能想到的一些区别:</p>
<ul>
<li><code>$.ajax</code> 功能更加强大，能够实现更多功能</li>
<li>在获取 <code>json</code> 的这一目标下，<code>$.getJSON</code> 代码更加简洁易懂</li>
</ul>
<p>在实际使用过程中，我觉得似乎差别不大，实在不知道还有什么区别。希望了解的大佬能够教我。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>关于IDEA再从git或者svn上导入项目时不能加载字模块的问题</title>
    <url>/post/3160863d.html</url>
    <content><![CDATA[<h3 id="关于IDEA再从git或者svn上导入项目时不能加载字模块的问题"><a href="#关于IDEA再从git或者svn上导入项目时不能加载字模块的问题" class="headerlink" title="关于IDEA再从git或者svn上导入项目时不能加载字模块的问题"></a>关于IDEA再从git或者svn上导入项目时不能加载字模块的问题</h3><blockquote>
<p>最近入职新公司，很多东西也都算是要从头学起。在之前公司用的都是eclipse，这边要求用IDEA，其实很早就知道这是一个非常强大的编译器，但平时没有机会使用，现在有机会用这个还是挺开心的。</p>
</blockquote>
<p>由于公司使用gitlab，在注册好账号导入代码的时候遇到一个情况，就是直接用IDEA的git工具导入的话会出现，maven项目的子模块无法被识别以及被管理的情况。事实上eclipse也有同样的问题。现在只说下使用IDEA遇到这个情况的解决办法。</p>
<span id="more"></span>

<h4 id="有两种解决方式。"><a href="#有两种解决方式。" class="headerlink" title="有两种解决方式。"></a>有两种解决方式。</h4><h5 id="1、手动将module添加到项目管理："><a href="#1、手动将module添加到项目管理：" class="headerlink" title="1、手动将module添加到项目管理："></a>1、手动将module添加到项目管理：</h5><ul>
<li>打开文件选项中的项目结构（快捷键ctrl+alt+shift+s）<br><a href="https://simimg.com/i/oLFwe"><img src="https://s1.ax2x.com/2018/07/08/oLFwe.png" alt="oLFwe.png"></a></li>
<li>选择 模块-加号-导入module，手动将自己需要的模块一一导入进去<br><a href="https://simimg.com/i/oLTGd"><img src="https://s1.ax2x.com/2018/07/08/oLTGd.png" alt="oLTGd.png"></a><h5 id="2、先将项目通过命令行导入到本机，然后通过IDEA的New-Project-from-Existing-Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了"><a href="#2、先将项目通过命令行导入到本机，然后通过IDEA的New-Project-from-Existing-Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了" class="headerlink" title="2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了"></a>2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了</h5><a href="https://simimg.com/i/oLXER"><img src="https://s1.ax2x.com/2018/07/08/oLXER.md.png" alt="oLXER.md.png"></a><br><a href="https://simimg.com/i/oLm7r"><img src="https://s1.ax2x.com/2018/07/08/oLm7r.md.png" alt="oLm7r.md.png"></a></li>
</ul>
<blockquote>
<p>从eclipse转到IDEA前几天是最艰难的，因为很多习惯不是说改就能改掉的，工具的使用总得需要一个学习的时间，但是等这段时间过去，后面一定会体会到IDEA的强大。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发日记</tag>
        <tag>IDEA</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)整合 Gmail 与 Mailgun 实现免费域名邮箱 — 香菇肥牛的博客</title>
    <url>/post/b037133b.html</url>
    <content><![CDATA[<blockquote>
<p>原文链接：<a href="https://qing.su/article/131.html">奇技淫巧——整合 Gmail 与 Mailgun 实现免费域名邮箱</a> —— 香菇肥牛</p>
</blockquote>
<p>曾今免费的 G Suite 现在已经不再免费了，老版本的 G Suite 已不能更换域名。至于其他的免费域名邮箱，Yandex 的发信经常被 Block, Zoho 收信延迟严重且服务器不稳定，国内各企业邮局更是垃圾得不能用。因此，免费且靠谱的域名邮箱显得格外稀缺。最近在处理邮件发送的时候发现了 Mailgun 这款神器；它和 Gmail 配合可以完美地实现免费域名邮箱。因此，在这里分享给大家。</p>
<span id="more"></span>

<h2 id="Mailgun"><a href="#Mailgun" class="headerlink" title="Mailgun"></a>Mailgun</h2><p>首先要说明一下，Mailgun 每个月发送 10000 封邮件以内是免费的。对于个人和小型团体来说，10000 封的月发送量绰绰有余了。</p>
<p>整个域名邮箱的实现如下面的示意图所示。可见，我们整合了 Mailgun 和 Gmail 实现了和 G Suite 一样的功能，曲线救国。下面我就来介绍一下具体怎样部署 GMail 和 Mailgun。</p>
<p><img src="https://img.iszy.xyz/20190318213136.png"></p>
<h3 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h3><p>首先，我们要去 mailgun.com 注册一个账号。注册账号并验证邮箱后，可以登录到后台，然后在 Domains 选项卡中点击 Add New Domain。</p>
<p><img src="https://img.iszy.xyz/20190318213148.png"></p>
<p>输入域名 (比如 example.com) 之后点击下一步，会提示修改 DNS 记录。请移步你的域名 DNS 解析商，添加好对应的 DNS 记录。相关的记录一共有 5 条，其中 2 条 TXT 记录，2 条 MX 记录，1 条 CNAME 记录。添加好后点击页面底部的 Continue to Domain Overview，进入管理控制台。</p>
<p><img src="https://img.iszy.xyz/20190318213158.png"></p>
<p>在控制台中，顶部有提示，DNS 需要 24~48 小时生效。如果确认自己更改的 DNS 已经生效了，就可以点击控制台中的 Check DNS Records Now，如上图。如果 DNS 设置无误，那么这个域名就可以开始使用了，我们可以看到此时域名的状态已经变成了绿色的 Active。</p>
<h3 id="配置域名转发"><a href="#配置域名转发" class="headerlink" title="配置域名转发"></a>配置域名转发</h3><p>现在，我们首先要给这个域名设置转发，使得我们的 Gmail 邮箱能够收取域名邮箱的所有信件。</p>
<p>点击顶部 Routes 选项卡，然后点击 Create Route，如下图所示。</p>
<p><img src="https://img.iszy.xyz/20190318213212.png"></p>
<p>在 Create New Route 界面中，Expression Type 选择 Catch All，Actions 勾选 Forward 并输入你的 GMail 邮箱地址，其他所有选项保持默认即可，最后点击下面的 Create Route。</p>
<p><img src="https://img.iszy.xyz/20190318213224.png"></p>
<p>这时，我们回到 Domains 列表中点击我们自己的域名，应该能看到如下图的页面，其中包含了 SMTP 服务器和密码，以及 API 等内容。我们只需要知道服务器密码即可。</p>
<p><img src="https://img.iszy.xyz/20190318213235.png"></p>
<p>至此，Mailgun 的设置完毕，我们需要登录 GMail，设置收发信。</p>
<h2 id="GMail"><a href="#GMail" class="headerlink" title="GMail"></a>GMail</h2><h3 id="在-GMail-中配置收发信"><a href="#在-GMail-中配置收发信" class="headerlink" title="在 GMail 中配置收发信"></a>在 GMail 中配置收发信</h3><p>登录你的个人 Gmail 后台，在 Settings 里面找到 Accounts and Import，点击 Add another email address，如下图。</p>
<p><img src="https://img.iszy.xyz/20190318213248.png"></p>
<p>在弹出的小窗口中，输入姓名和你要使用的域名邮箱，这里以 <a href="mailto:&#97;&#x64;&#109;&#x69;&#110;&#64;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#109;">&#97;&#x64;&#109;&#x69;&#110;&#64;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#109;</a> 为例。勾选 Treat as an alias, 然后点击 Next step。在服务器配置的页面输入我们刚才的服务器信息、SMTP 用户名和密码。端口为 587，加密方式选择 TLS，如下图所示。填好后点击 Add account。</p>
<p><img src="https://img.iszy.xyz/20190318213257.png"></p>
<p>如果用户名和密码输入无误，GMail 会向你的 <a href="mailto:&#97;&#x64;&#109;&#105;&#x6e;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;">&#97;&#x64;&#109;&#105;&#x6e;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;</a> 邮箱发送一封验证邮件，而此时，这封邮件已经被转发至你的 GMail 邮箱了，所以只要点击收到的邮件中的验证链接就大功告成了。</p>
<p><img src="https://img.iszy.xyz/20190318213309.png"></p>
<p>至此，我们完成了 GMail 和 Mailgun 的整合，以及免费域名邮箱的设置。所有发往 <a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#x6e;&#64;&#x65;&#x78;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;">&#x61;&#x64;&#x6d;&#x69;&#x6e;&#64;&#x65;&#x78;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;</a> 的邮件均会被 Mailgun 转递至你的 GMail 邮箱，而你的 GMail 邮箱可以直接以 <a href="mailto:&#x61;&#100;&#109;&#105;&#x6e;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;">&#x61;&#100;&#109;&#105;&#x6e;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;</a> 的名义发信，和普通的域名邮箱没有任何差别。收件人是无法知道你是用 GMail 发信还是用其他独立的域名邮箱发信的。如果需要添加多个域名邮箱或者别名，只需要重复执行上述 GMail 的配置即可。</p>
<p>如果大家在使用过程中遇到任何问题，欢迎在这里留言，我将及时回复。本文作者为香菇肥牛，原文地址为<a href="https://qing.su/article/131.html">https://qing.su/article/131.html</a>。转载需经过作者同意且需注明原文链接。谢谢！</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>Google</tag>
        <tag>Mailgun</tag>
        <tag>域名邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>纪念即将结束的第一份工作</title>
    <url>/post/10df5a8d.html</url>
    <content><![CDATA[<h2 id="纪念-即将-结束的第一份工作"><a href="#纪念-即将-结束的第一份工作" class="headerlink" title="纪念*即将* 结束的第一份工作"></a>纪念*<del>即将</del>* 结束的第一份工作</h2><ol>
<li><h4 id="我一直都不知道自己想要得到些什么东西"><a href="#我一直都不知道自己想要得到些什么东西" class="headerlink" title="我一直都不知道自己想要得到些什么东西"></a>我一直都不知道自己想要得到些什么东西</h4><blockquote>
<ul>
<li>记得高中的时候，身边不管是家人还是老师，总会时刻不停在耳边说着：你需要如何如何学习，考上一个怎样的大学，进入一个怎么样的专业，以后找一个怎样的工作。可是当我听到这些话时总是会很反感。也许是叛逆，也许是这些对于我当时都是些虚无缥缈，很遥远的东西，我没有办法理解自己得到这些东西有什么用。但是虽然忠言不入耳，我还是得按照他们说的做。还好，大学上了一个普通的理工科一本。</li>
</ul>
</blockquote>
</li>
</ol>
<ul>
<li>当上了大学之后，没有了老师家长在耳边“絮叨”，更不知道自己要干什么了。记得当时参加各种社团，觉得在社团里面干的风风火火很牛逼，甚至课程都不上几节，最严重的时候好几周都不上课。浑浑噩噩的度过了大学的第一年之后，突然因为一个给学校编程培训班试听课凑人数的机会，让自动化专业的我接触到了软件开发这个方向。依然记得当时上课的老师，老范！当他用C语言在电脑上输出一串笑脸字符的时候，我当时的眼睛都亮了，我对和自己一块去凑人数的舍友说，这个人一定以后对我有很大的帮助，我一定要报名他的课程。后来真的觉得我是幸运的，老范是一个很有人格魅力的中年程序员 :) 。也是他让我知道了程序员是做什么的，也是他让我非常期待自己能够成为一个真正的软件开发者。<span id="more"></span></li>
<li>就这样我跟着老范从计算机基础，学到数据结构与算法，学计算机网络，MySQL，学习设计模式，学C++，后来又在另一个班学Java。计算机硬件方向专业的我，学完了软件专业学生要学的所有课程。终于大三，我找到了西安三星电子研究所的一份实习，写了两个月shell脚本，学习了Linux相关的知识以及自动化测试的东西，后来又在组内用PHP写了个网站，提供给大家进行会议的预定与提醒。现在想想这一切经验都是我的宝贵的财富.</li>
<li>实习结束后，工作却找的不是很顺利，也许是自己的实习经历没有太多做Java开发的东西，导致自己没有什么实际的项目经验。后来，我来了同※※。</li>
</ul>
<ol start="2">
<li><h4 id="或许离开这里是我最正确的选择"><a href="#或许离开这里是我最正确的选择" class="headerlink" title="或许离开这里是我最正确的选择"></a>或许离开这里是我最正确的选择</h4><blockquote>
<ul>
<li>在拿到offer来到同※※之前，我觉得我来到了一个很好的大公司。事实上这里也没有很差，除了我所在的部门。同※※是国内最早做股票交易平台的软件公司，目前也有自己的大楼，装修的也很不错，很像一个一线的大型互联网公司。然而，只是很像而已。从一件很平常的事就看得出来：每天饭点，后勤部经理就站在食堂打饭窗口对打饭的员工喊，少打一点少打一点，他们吃不完！ … …</li>
</ul>
</blockquote>
</li>
</ol>
<ul>
<li>其实我刚来的时候觉得自己可以呆三年的，现在想想真的很抱歉，我得走了。并不是因为上面的“打饭”。我来到这里做的工作都是外包的，在B2B部门。我本来以为大公司的工作流程都很规范，没想到在这里刷新了我的三观哈哈。外包工作什么都得听客户的，乱改需求不说，自己公司的运维根本派不上用场，连tomcat的启动报错都不知道怎么解决，让我们作为开发的去同时做开发、测试、运维、项目经理、产品的活，想想就火大。项目经理把客户电话甩给你，自己沟通去，然后自己潇洒的下班。</li>
<li>唉ε&#x3D;(′ο｀*)))，不想再说太多了，显得自己好像太小气，都要走了还要diss前公司。但是，我觉得我是真的得走了，而且我还算是忍得时间长的。我们组，比我来得晚，比我走的早的人，超过了10个。才一年啊。作为一个刚毕业一年的程序员，真的心好累。</li>
</ul>
<ol start="3">
<li><h4 id="接下来的路少交点儿朋友，否则离开时会难受"><a href="#接下来的路少交点儿朋友，否则离开时会难受" class="headerlink" title="接下来的路少交点儿朋友，否则离开时会难受"></a>接下来的路少交点儿朋友，否则离开时会难受</h4><blockquote>
<ul>
<li>要走了要走了，却又感觉很难受。在这里，我接触过不少傻逼，但是也真的交到很多有趣的朋友。甚至有那种就算离职了，之后也不会断了联系的。在这个城市，原本独自一人的生活由他们，真的不会无聊。</li>
</ul>
</blockquote>
</li>
</ol>
<ul>
<li>天涯途上谁是客，散席时怎么分？ 也许有些人分开就不会再见，有些人想不见却总会出现在生活里。罢了，以后换到新的公司，不要再走心了。况且，真正值得走心的，也不会很多！</li>
</ul>
<h6 id="✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。-——《行歌》-·-陈鸿宇"><a href="#✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。-——《行歌》-·-陈鸿宇" class="headerlink" title="✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇"></a>✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇</h6>]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>利用钻井数据，计算地下矿体的储量练习</title>
    <url>/post/6635c47.html</url>
    <content><![CDATA[<p>利用 GIS 的空间分析、3D 显示和统计计算功能，采用示例数据，进行地下矿体资源的计算、制图、空间分布统计分析练习。下面是我的实验流程。</p>
<span id="more"></span>

<h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><ul>
<li>钻孔数据 (point shapefile)：包含钻孔处矿洞上下表面深度</li>
<li>地形数据 (DEM)</li>
<li>行政区划 (polygon shapefile)</li>
</ul>
<h2 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h2><h3 id="提取钻孔矿体上下表面高程"><a href="#提取钻孔矿体上下表面高程" class="headerlink" title="提取钻孔矿体上下表面高程"></a>提取钻孔矿体上下表面高程</h3><h4 id="使用“值提取至点”工具提取钻孔地面高程"><a href="#使用“值提取至点”工具提取钻孔地面高程" class="headerlink" title="使用“值提取至点”工具提取钻孔地面高程"></a>使用“值提取至点”工具提取钻孔地面高程</h4><p><img src="https://img.iszy.xyz/20190318214347.png"></p>
<h4 id="计算钻孔在矿洞上下表面的高程"><a href="#计算钻孔在矿洞上下表面的高程" class="headerlink" title="计算钻孔在矿洞上下表面的高程"></a>计算钻孔在矿洞上下表面的高程</h4><p><img src="https://img.iszy.xyz/20190318214356.png"></p>
<h3 id="地下矿体表面拟和生成矿体表面"><a href="#地下矿体表面拟和生成矿体表面" class="headerlink" title="地下矿体表面拟和生成矿体表面"></a>地下矿体表面拟和生成矿体表面</h3><h4 id="使用样条函数法进行插值，分别拟合矿体上下表面"><a href="#使用样条函数法进行插值，分别拟合矿体上下表面" class="headerlink" title="使用样条函数法进行插值，分别拟合矿体上下表面"></a>使用样条函数法进行插值，分别拟合矿体上下表面</h4><p>像元大小统一设为 10，样条函数类型选择 TENSION。</p>
<p><img src="https://img.iszy.xyz/20190318214411.png"></p>
<p>所得结果如下所示。</p>
<p><img src="https://img.iszy.xyz/20190318214428.png"></p>
<p>上表面 A</p>
<p><img src="https://img.iszy.xyz/20190318214440.png"></p>
<p>下表面 B</p>
<p>三维显示效果如下图所示。</p>
<p><img src="https://img.iszy.xyz/20190318214519.png"></p>
<h4 id="提取矿区范围"><a href="#提取矿区范围" class="headerlink" title="提取矿区范围"></a>提取矿区范围</h4><p>使用栅格计算器，提取矿区的范围。</p>
<p><img src="https://img.iszy.xyz/20190318214555.png"></p>
<p>结果如下。</p>
<p><img src="https://img.iszy.xyz/20190318214608.png"></p>
<p>重分类后，即是矿区的范围。</p>
<p><img src="https://img.iszy.xyz/20190318214618.png"></p>
<h3 id="使用掩模提取矿区的上下表面"><a href="#使用掩模提取矿区的上下表面" class="headerlink" title="使用掩模提取矿区的上下表面"></a>使用掩模提取矿区的上下表面</h3><p><img src="https://img.iszy.xyz/20190318214629.png"></p>
<p>结果如下图所示。</p>
<p><img src="https://img.iszy.xyz/20190318214645.png"></p>
<p>上表面 A</p>
<p><img src="https://img.iszy.xyz/20190318214659.png"></p>
<p>下表面 B</p>
<h3 id="矿产储量分析"><a href="#矿产储量分析" class="headerlink" title="矿产储量分析"></a>矿产储量分析</h3><h4 id="利用“填挖方”工具计算储量"><a href="#利用“填挖方”工具计算储量" class="headerlink" title="利用“填挖方”工具计算储量"></a>利用“填挖方”工具计算储量</h4><p><img src="https://img.iszy.xyz/20190318214710.png"></p>
<p>结果如下图所示，矿区面积为 60515200㎡，矿产储量体积 8225087860.089111 立方米。</p>
<p><img src="https://img.iszy.xyz/20190318214721.png"></p>
<h4 id="矿产储量分布"><a href="#矿产储量分布" class="headerlink" title="矿产储量分布"></a>矿产储量分布</h4><p><img src="https://img.iszy.xyz/20190318214735.png"></p>
<h4 id="按地区矿产储量分布"><a href="#按地区矿产储量分布" class="headerlink" title="按地区矿产储量分布"></a>按地区矿产储量分布</h4><h5 id="分区统计"><a href="#分区统计" class="headerlink" title="分区统计"></a>分区统计</h5><p>使用“Spatial Analyst 工具”-“区域分析”-“以表格显示分区统计”工具，对 county 每个分区的矿产储量进行统计。</p>
<p><img src="https://img.iszy.xyz/20190318214748.png"></p>
<p>结果如下。</p>
<p><img src="https://img.iszy.xyz/20190318214800.png"></p>
<h5 id="计算矿产储量并出图"><a href="#计算矿产储量并出图" class="headerlink" title="计算矿产储量并出图"></a>计算矿产储量并出图</h5><p>将统计结果与 county 要素关联，乘以像元面积即为矿产储量，导出数据。</p>
<p><img src="https://img.iszy.xyz/20190318214813.png"></p>
<p>最终出图如下。</p>
<p><img src="https://img.iszy.xyz/20190318214825.png"></p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><h3 id="总储量统计"><a href="#总储量统计" class="headerlink" title="总储量统计"></a>总储量统计</h3><p>矿区面积为 60515200㎡，矿产储量体积 8225087860.089111 立方米。</p>
<p><img src="https://img.iszy.xyz/20190318214836.png"></p>
<h3 id="矿产储量分布图"><a href="#矿产储量分布图" class="headerlink" title="矿产储量分布图"></a>矿产储量分布图</h3><p><img src="https://img.iszy.xyz/20190318214847.png"></p>
<h3 id="按地区矿产储量分布图"><a href="#按地区矿产储量分布图" class="headerlink" title="按地区矿产储量分布图"></a>按地区矿产储量分布图</h3><p><img src="https://img.iszy.xyz/20190318214856.png"></p>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>ArcGIS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于git pull 拉取不到最新记录</title>
    <url>/post/73df9381.html</url>
    <content><![CDATA[<p>&#x2F;&#x2F;<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~~~~~~~~<em>oo0oo</em><br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~~~~~~~o8888888o<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~~~~~~~88”<del>.</del>“88<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~~~~~~~(|<del>-_-</del>|)<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~~~~~~~0~<del>&#x3D;~~&#x2F;0<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~~~~~_<strong>&#x2F;&#96;—‘_</strong><br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~~~.’</del>\|~~~~~|&#x2F;&#x2F;<del>‘.<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~~&#x2F;</del>\|||<del>:</del>|||&#x2F;&#x2F;<del><br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~&#x2F;</del><em>|||||<del>-:-</del>|||||-<del><br>&#x2F;&#x2F;~~~~~~~~~~~~~~~|~~~|</del>\~<del>-~~&#x2F;&#x2F;&#x2F;</del>|~~~|<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~|<del>_|<del>‘’-–&#x2F;‘’</del>|_&#x2F;</del>|<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~<del>.-_<em><del>‘-‘</del></em>__&#x2F;-.</del>&#x2F;<br>&#x2F;&#x2F;~~~~~~~~~~~~~___’.<del>.’<del>&#x2F;–.–\</del>&#96;.</del>.’</em>__<br>&#x2F;&#x2F;~~~~~~~~~~.””<del>‘&lt;~~&#96;.<strong><em>_&lt;|&gt;</em>&#x2F;</strong>_.’</del>&gt;’<del>“”.<br>&#x2F;&#x2F;~~~~~~~~~|</del>|<del>:~~&#96;-</del>`.;<code>\~_~/</code>;.<code>/~-~</code><del>:</del>|<del>|<br>&#x2F;&#x2F;~~~~~~~~~~~\</del><code>_.~~~\_~__\~/__~_/~~~.-</code><del>&#x2F;~~&#x2F;<br>&#x2F;&#x2F;~~~~~&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<code>-.____</code>.___</del>__<em><strong>&#x2F;</strong></em>.-<code>___.-&#39;===== //~~~~~~~~~~~~~~~~~~~~~~~</code>&#x3D;—&#x3D;’<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;~~~~~~~~~~~~~~~佛祖保佑~~~~~~~~~永无BUG<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p>
<blockquote>
<p>使用<code>git pull</code> 获取不到最新的记录，判断应该是某些时候未pull先commit导致的，使用命令：<code>git pull origin master</code>即可解决</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>开发日记</tag>
      </tags>
  </entry>
  <entry>
    <title>Google 中国竟然在 B 站发视频了</title>
    <url>/post/3ebd4c26.html</url>
    <content><![CDATA[<p>今天，我在刷 B 站视频的时候偶然发现，<a href="https://space.bilibili.com/64169458/#/">Google 中国</a>居然有 B 站官方账号，而且还在今天发了第一个视频。不少人在视频下面发评论说：“这不仅是 404 的一小步，也是 b 站的一大步。”我已经进行了一波投币、收藏、分享素质三连了。</p>
<span id="more"></span>

<p><img src="https://img.iszy.xyz/20190318213338.png"></p>
<p>对我这个常年挂着代理，不知墙为何物的人来说，Google 就如家常便饭一般。用惯了 Google 的搜索，实在是无法再回到百度那个广告满天飞、首页垃圾文章一大堆、搜索竞价排名的糟糕搜索引擎了。虽说百度这些年已经有所改善（大概），但在搜索方面还是有着相当的距离，更不要说是尖端技术了。</p>
<p>在经历了 2010 年的谷歌退出中国大陆事件后，Google 慢慢淡出了大多数人的视野。毕竟大多数网民并不愿意费劲折腾去访问一个不是必须访问的网站，尤其是还有一个百度作为替代，可以提供还算不错的服务，Google 当时在中国也并没有达到一家独大的程度。简单提一下，谷歌退出中国大陆事件是指 2010 年 Google 公司因内容审查问题与中国政府交涉，并最终关闭中国版网页搜索服务，转用<a href="https://www.google.com.hk/">香港域名</a>及服务器为中国用户提供简体中文服务的事件。 香港谷歌也在 2014 年被全面封杀了。</p>
<p>Google 一直以来都是互联网自由的倡导者，我非常喜欢 Google 的这一点。即使进行内容审查，Google 也会明明白白地告诉你是因为什么原因删除了什么内容。不想国内的搜索引擎，只会写一个因为某法律法规删除了某些内容，却从来没有更具体的信息以及法律依据。我倒是无所谓了，只要不妨碍我就好，我也改变不了什么。</p>
<p>由于 Google 的超高的技术水平，很多东西都走在时代的前沿，国内的新闻上总是时不时的出现一些 Google 相关的信息。对于国内来说，全都是 404 网站嘛，真是令人尴尬。就有人笑称，某连网站都没法进去的 404 小公司，吃枣药丸 (〜￣ △ ￣)〜 ，真是因缺思厅。</p>
<p>最近老是传出 Google 要回归中国市场的传言，也不知道哪里来的依据。看政府的态度，基本上应该是不会放弃内容审查的了，即使 Google 回归，那也是一个阉割过后的 Google 了。但怎么说，真回归了，好歹也是在这方面做过努力了，正好也能给百度点压力，不要再搞得乱七八糟的了。</p>
<p>emmm，扯得有点远。今天嘛，我看到了这个 Google 中国在 B 站发的视频，还是有些高兴的。怎么说呢？这或许也是 Google 为回归中国做出的一些努力吧。着眼与年轻一代人，感觉算是走了一步好棋，年轻人是未来嘛。关于发的这个<a href="https://www.bilibili.com/video/av23862602">有关机器学习的系列教程</a>，我知道已经早就在 <a href="https://www.youtube.com/watch?v=HcqpanDadyQ&list=PLIivdWyY5sqJxnwJhe3etaK7utrBiPBQ2">Youtube</a> 上发过了，但是管他呢，毕竟是人家第一次发视频，总要有个试水的嘛。反正我是希望以后能在 B 站上多多看见 Google 的身影。</p>
<p>嘛，就这样吧，扯了一堆，就是发表一点点看法吧。</p>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>Bilibili</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Powershell 美化——oh-my-posh</title>
    <url>/post/2b5c0a78.html</url>
    <content><![CDATA[<p>为什么想到干这个事呢？这两天装了 WSL，但是 PowerShell 的配色实在让我无法忍受，有时候甚至到了看不清字的程度。经过一番谷歌，我发现 PowerShell 也是可以变得很好看的。下面我就记录一下我这次美化的过程。</p>
<span id="more"></span>

<h2 id="安装包管理器scoop"><a href="#安装包管理器scoop" class="headerlink" title="安装包管理器scoop"></a>安装包管理器<code>scoop</code></h2><p><code>scoop</code>是 Windows 中超级好用的一个包管理器，许多软件可以通过这个包管理器直接傻瓜式安装，连环境变量也会自动配置好。可以类比 Linux 中的<code>yum</code>或者<code>apt</code>，用习惯了会爱不释手的，非常推荐。</p>
<h3 id="更改脚本执行策略"><a href="#更改脚本执行策略" class="headerlink" title="更改脚本执行策略"></a>更改脚本执行策略</h3><p>如果你没有打开运行远程签名的脚本文件则会提示你输入下面的指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<h3 id="安装scoop"><a href="#安装scoop" class="headerlink" title="安装scoop"></a>安装<code>scoop</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">iex</span> (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="安装需要的软件"><a href="#安装需要的软件" class="headerlink" title="安装需要的软件"></a>安装需要的软件</h2><h3 id="安装concfg"><a href="#安装concfg" class="headerlink" title="安装concfg"></a>安装<code>concfg</code></h3><p><a href="https://github.com/lukesampson/concfg">lukesampson&#x2F;concfg</a>  可以用来导入和导出 Windows 控制台的设置。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install concfg</span><br></pre></td></tr></table></figure>

<p>如果需要卸载可以输入<code>scoop uninstall concfg</code>。</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装<code>git</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install git</span><br></pre></td></tr></table></figure>

<p>此时，<code>git</code>的环境变量是设置在当前用户下的。如果需要设置在系统下，可以通过以下语句安装。需要使用<code>sudo</code>来提升权限，是的，就是<code>Linux</code>中的那个<code>sudo</code>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install sudo</span><br><span class="line">sudo scoop install <span class="literal">-g</span> git</span><br></pre></td></tr></table></figure>

<h3 id="安装posh-git"><a href="#安装posh-git" class="headerlink" title="安装posh-git"></a>安装<code>posh-git</code></h3><p><code>posh-git</code> 是 <code>oh-my-posh</code> 的依赖，在<code>scoop</code>的<code>extras</code>包中。</p>
<p>先添加名为<code>extras</code>的<code>bucket</code>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br></pre></td></tr></table></figure>

<p>安装<code>posh-git</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install posh<span class="literal">-git</span></span><br></pre></td></tr></table></figure>

<h3 id="安装oh-my-posh"><a href="#安装oh-my-posh" class="headerlink" title="安装oh-my-posh"></a>安装<code>oh-my-posh</code></h3><p><code>oh-my-posh</code>在<code>scoop</code>的主包中，直接安装即可。这个软件能够让你的<code>PowerShell</code>有着接近<code>Linux</code>中<code>Oh-my-zsh</code>的效果。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install <span class="built_in">oh</span><span class="literal">-my-posh</span></span><br></pre></td></tr></table></figure>

<h2 id="添加字体"><a href="#添加字体" class="headerlink" title="添加字体"></a>添加字体</h2><h3 id="下载并安装字体"><a href="#下载并安装字体" class="headerlink" title="下载并安装字体"></a>下载并安装字体</h3><p>系统中默认的字体缺失了一些<code>oh-my-posh</code>需要用到的字符，所以需要安装一个可以支持的字体。</p>
<p>我选择 <strong>sarasa gothic</strong> 系列字体，可以在 <a href="https://github.com/be5invis/Sarasa-Gothic/releases"><strong>sarasa gothic</strong></a> 下载，然后右键安装字体即可。</p>
<h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><p>为了能够在配置里使用，还需要修改注册表。</p>
<p>按 <code>WIN+R</code> 打开运行，输入 <code>regedit</code> 打开注册表编辑器。</p>
<p>在 <code>HKEY_LOCAL_MACHINE &gt;&gt; SOFTWARE &gt;&gt; Microsoft &gt;&gt; Windows NT &gt;&gt; CurrentVersion &gt;&gt; Console &gt;&gt; TrueTypeFont</code> 路径下新增一个字符串项目，名称任意，内容为 <code>Sarasa Term SC</code>。</p>
<h2 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h2><p>新建一个 <code>1.json</code> 文件，键入如下内容，也可以根据自身需求自行修改。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;cursor_size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;small&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;command_history_length&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;num_history_buffers&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;command_history_no_duplication&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;quick_edit&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;insert_mode&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;load_console_IME&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;font_face&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sarasa Term SC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;font_true_type&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;font_size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x18&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;font_weight&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screen_buffer_size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;120x30000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;window_size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;120x30&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fullscreen&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;popup_colors&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cyan,white&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screen_colors&quot;</span><span class="punctuation">:</span> <span class="string">&quot;white,black&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#1E1E1E&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dark_blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#2472C8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dark_green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0DBC79&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dark_cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#11A8CD&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dark_red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CD3131&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dark_magenta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#BC3FBC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dark_yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E5E510&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gray&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E5E5E5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dark_gray&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#666666&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3B8EEA&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#23D18B&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#29B8DB&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F14C4C&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;magenta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D670D6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F5F543&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E5E5E5&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在所在文件夹处打开 <code>PowerShell</code>，输入 <code>concfg import 1.json -n</code> 后开启新 <code>PowerShell</code> 窗口可以看到显示效果已经改变。</p>
<p><strong>注：</strong>使用过程中发现，更新<code>git</code>后，字体会出现问题，不知道是什么原因。出现这个问题也不用担心，只需要重新执行一遍上面这个应用配置的过程即可。</p>
<h2 id="启用oh-my-posh"><a href="#启用oh-my-posh" class="headerlink" title="启用oh-my-posh"></a>启用<code>oh-my-posh</code></h2><p>启用<code>oh-my-posh</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span></span><br></pre></td></tr></table></figure>

<p>但这还只是手动启用，所以我们需要设置<code>profile</code>文件让它自动启用。</p>
<p>敲<code>$profile</code>可以让 PowerShell 告诉我们这个文件的路径是什么。</p>
<p>编辑该文件，如果不存在则手动创建，再其中输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span></span><br></pre></td></tr></table></figure>

<p>以后，都将会自动启用 <code>oh-my-posh</code>。</p>
<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>我选择了 <code>Agnoster</code> 主题。</p>
<p>输入如下命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-Theme</span> Agnoster</span><br></pre></td></tr></table></figure>

<p>显示效果如下，我认为是十分美观的。</p>
<p><img src="https://img.iszy.xyz/20190318211904.png"></p>
<p>其他可选主题有 <code>Agnoster</code>、<code>Avit</code>、<code>Darkblood</code>、<code>Fish</code>、<code>Honukai</code>、<code>Paradox</code>、<code>Sorin</code>、<code>tehrob</code>，可自行选择。</p>
<p>不知为何，这个主题设置并没有自动保存。</p>
<p>可以通过把<code>Set-Theme Agnoster</code>这样的命令添加到之前的<code>profile</code>最后来永久保留。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>至此，美化完成，相比之前的蓝底 PowerShell，我自认为已经好看了很多。我在 WSL 里也安装了 oh-my-zsh 可以说是完美衔接了。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Scoop</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>体验 Windows 10 内置 Linux 子系统</title>
    <url>/post/dba5d77e.html</url>
    <content><![CDATA[<p>有的工作在 Linux 环境中会比在 Windows 环境中更加方便，但我的主要使用环境还是 Windows，所以不能直接装 Linux 系统。我过去的解决方案是装了一个 Ubuntu 的虚拟机，但是这样还是不太方便，尤其是在文件访问上。现在 Win10 中有了 Linux 子系统，简称 WSL，很好地解决了我的问题。</p>
<span id="more"></span>

<h2 id="WSL-简介"><a href="#WSL-简介" class="headerlink" title="WSL 简介"></a>WSL 简介</h2><p><strong>适用于 Linux 的 Windows 子系统</strong>（英语：Windows Subsystem for Linux，简称<strong>WSL</strong>）是一个为在 Windows 10 上能够原生运行 Linux 二进制可执行文件（ELF 格式）的兼容层。它是由微软与 Canonical 公司合作开发，目标是使纯正的 Ubuntu 14.04 “Trusty Tahr” 映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>本文以 Ubuntu 子系统为例。</p>
<h3 id="开启开发人员模式"><a href="#开启开发人员模式" class="headerlink" title="开启开发人员模式"></a>开启开发人员模式</h3><p><img src="https://img.iszy.xyz/20190318221442.png"></p>
<h3 id="启用-WSL-功能"><a href="#启用-WSL-功能" class="headerlink" title="启用 WSL 功能"></a>启用 WSL 功能</h3><p><img src="https://img.iszy.xyz/20190318221451.png"></p>
<h3 id="在应用商店进行搜索"><a href="#在应用商店进行搜索" class="headerlink" title="在应用商店进行搜索"></a>在应用商店进行搜索</h3><p><img src="https://img.iszy.xyz/20190318221502.png"></p>
<p>可以搜到如下 5 个 Linux 子系统。</p>
<p><img src="https://img.iszy.xyz/20190318221511.png"></p>
<h3 id="安装-Ubuntu"><a href="#安装-Ubuntu" class="headerlink" title="安装 Ubuntu"></a>安装 Ubuntu</h3><p>在此，我选择安装我比较熟悉的 Ubuntu，如果对其他感兴趣的也可以安装。</p>
<p><img src="https://img.iszy.xyz/20190318221521.png"></p>
<p>系统显示安装完成后，打开 Ubuntu，将会进行进一步的安装，将需要等待一段时间。</p>
<p><img src="https://img.iszy.xyz/20190318221535.png"></p>
<p>接下来设定你在 Ubuntu 子系统中的用户名，可以任意指定。</p>
<p><img src="https://img.iszy.xyz/20190318221547.png"></p>
<p>接下来设定密码，这将会是你的 root 密码。用过 Linux 的应该知道，密码输入是不会显示的，这是正常现象，输入完密码回车即可。</p>
<p><img src="https://img.iszy.xyz/20190318221557.png"></p>
<p>当看到如下内容时，子系统已经安装完毕，可以使用了。</p>
<p><img src="https://img.iszy.xyz/20190318221608.png"></p>
<p>除了通过点击 Ubuntu 图标进入子系统，你同样可以通过在 cmd 或 PowerShell 中输入 ubuntu 进入，无需管理员权限。</p>
<p><img src="https://img.iszy.xyz/20190318221620.png"></p>
<h2 id="内核版本和发行版本号"><a href="#内核版本和发行版本号" class="headerlink" title="内核版本和发行版本号"></a>内核版本和发行版本号</h2><p><img src="https://img.iszy.xyz/20190318221636.png"></p>
<p>在这里我们可以看到内核版本为 4.4.0，发行版本为 Ubuntu 16.04.3 LTS。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>WSL 最初在 Win 10 Insider Preview build 14316 开始可用，现在正式版已经升级到 1803 版，内部版本号为 17134，功能已经完善了太多。除了受限于 Windows 文件系统，文件操作较慢，其他已经和原版 Ubuntu，不相上下，完全可以替代虚拟机，完成我的工作了，我感觉非常满意。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WSL</tag>
        <tag>Ubuntu</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04 更改软件源</title>
    <url>/post/9b215f42.html</url>
    <content><![CDATA[<p>由于国内的特殊环境，Linux 系统如果不更换软件源，软件的下载安装将会速度奇慢。总不能下载软件也全走代理吧，更换软件源才是正道。本文是在 Win10 子系统 Ubuntu 中完成的，在原版 Ubuntu 中同样适用。</p>
<span id="more"></span>

<h2 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h2><p>本文选择将软件源更换为阿里云的镜像以实现高速访问。</p>
<h3 id="备份官方软件源列表"><a href="#备份官方软件源列表" class="headerlink" title="备份官方软件源列表"></a>备份官方软件源列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>

<h3 id="修改软件源列表"><a href="#修改软件源列表" class="headerlink" title="修改软件源列表"></a>修改软件源列表</h3><h4 id="用熟悉的编辑器打开"><a href="#用熟悉的编辑器打开" class="headerlink" title="用熟悉的编辑器打开"></a>用熟悉的编辑器打开</h4><p>我在这里使用 vim 打开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h4 id="进行替换"><a href="#进行替换" class="headerlink" title="进行替换"></a>进行替换</h4><p>替换默认的<code>http://archive.ubuntu.com/</code>和<code>http://security.ubuntu.com/</code>为<code>https://mirrors.aliyun.com/</code></p>
<p><strong>注：</strong>vim 中的全局替换命令为 <code>:%s/源字符串/目的字符串/g</code></p>
<h4 id="保存并退出"><a href="#保存并退出" class="headerlink" title="保存并退出"></a>保存并退出</h4><p>输入<code>:wq</code>。</p>
<h3 id="更新源和软件"><a href="#更新源和软件" class="headerlink" title="更新源和软件"></a>更新源和软件</h3><ul>
<li>使用 <code>sudo apt-get update -y</code> 获取软件列表更新</li>
<li>使用 <code>sudo apt-get upgrade -y</code> 获取软件更新</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>软件源</tag>
      </tags>
  </entry>
  <entry>
    <title>更换手机套餐的一点感慨</title>
    <url>/post/f251c4a7.html</url>
    <content><![CDATA[<p>昨天换了个手机套餐，有些许感慨。</p>
<span id="more"></span>

<p>本来按道理讲，像 <strong>B 站卡</strong>这样的互联网套餐都是不支持直接更换为其他互联网套餐的，也没有为其他套餐用户提供转入的接口。但是，我看到网上说只要给客服打电话要求，就能轻松解决更换套餐的问题。</p>
<p>所以，我昨天就打了个电话给联通客服，帮我更换下手机套餐，把我原先使用的 <strong>B 站 33 卡</strong>套餐更换为<strong>新米粉卡</strong>套餐。一开始，客服跟我说是不能直接更换套餐，需要带身份证去营业厅办理吧啦吧啦。当我说我没空去营业厅后，便表示过段时间会再联系我。没过多久，就有一个联通客服联系我，确认我的要求后，就轻松地给我更换了套餐。前后总共没花几分钟时间，我就接到了退订 B 站卡套餐和开通新米粉卡套餐的短信通知。可以说是非常顺利的一次和运营商打交道的体验了。</p>
<p>关于运营商的服务，可以说是变化很大了。时代在变迁，三大垄断运营商也在改变。无所谓是顺应时代自己改变，还是应工信部要求进行改变，三大运营商都在很大程度上提升着自己的服务水平，虽然还有很大提升空间，但是已经和以前大不相同了。技术在提升，服务在变好，在处于垄断地位，没有国外运营商竞争的前提下让利于民，不得不说是做了件好事。以前一直感觉运营商是个特别坑爹的玩意，一对霸王条款，你也没得选择，感觉高高在上的，现在可以说是非常平易近人了。</p>
<p>当然尽善尽美确实不可能，离这个目标差距还很大呢。或许运营商还没有想好彻底改变吧，你看这个更换套餐的事情，明明技术上已经可以轻松解决的事情，还是需要你打一个电话找客服人工解决，其实大可不必的。但是运营商已经在逐步做的更好了，应该还是可以抱有希望的。</p>
<p>其实吧，说到底还是缺少竞争，看看香港，各路运营商相互竞争，用户可以自由选择。中国移动在香港提供的套餐，那可正是价格低到尘埃里了，放到国内简直不可想象，即使如此这还不是最实惠的运营商呢。嘛！我大清自有国情在啊，通讯领域关系到国家安全，不太可能自由放开的，至少现在的发展趋势还是很好的，这就可以了。</p>
<p>说到这个技术啊，我也不懂。据我所知，现在国内 4G 已是主流，据说 5G 也要争取在 2020 年这个神奇的年份商用呢。5G 的基础设施建设又将是一笔天价的花费呢，或许正是因为以前的基站建设花费太多，不愿意轻易抛弃，到现在安全性极低的 2G 网络还没有被弃用。电信那个坑爹的通话断网问题怕是还要好长时间才能解决，或许 5G 甚至 6G 普及的时候才能彻底采用 VoLTE 吧。国际上好像已经弃用电信的 CDMA2000 了吧，我的 MI6 想刷成国际版，发现竟然不能支持电信通话，也是非常的僵硬呢，国内想要赶上国际步伐还要加把力呢。</p>
<p>虽说技术在提升，网速越来越快，但是限制大家使用的一直以来都是流量的费用。流量成本高的情况下，你网速再快，一般人也不敢放开了用啊。你看 3G 时代说是鼓吹视频通话，其实也没有多少人用，资费承受不起啊。我还记得我那时候用的最多的就是用手机玩纯文字的 QQ 农场，刷得可起劲了。现在 4G 时代说可以在线观看超清视频，估计也就土豪才敢不连 Wi-Fi 的时候这么做。现在流量成本已经下降很多了，推出了大量不限流量套餐，虽说还不能算完全的不限流量，但也算是个进步了。像我现在这个米粉卡套餐，至少可以让我不连 Wi-Fi 放开了用流量了。</p>
<p>终究会越来越好吧，就这样吧，结束这篇胡言乱语。</p>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>手机套餐</tag>
      </tags>
  </entry>
  <entry>
    <title>【陈年风楼】VLOG-000001 一个普通的程序员的普通的一天</title>
    <url>/post/529e83b2.html</url>
    <content><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=22367659&cid=37047708&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 100%;height: 700px"> </iframe>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>配合 Valine 使用的 Valine-Admin</title>
    <url>/post/4fead5d7.html</url>
    <content><![CDATA[<p>在<a href="https://www.iszy.cc/2018/04/01/Valine/">上一篇文章</a>中，我讲了怎样安装 Valine 评论系统。Valine 评论系统现在自带的邮件通知功能有很大缺陷，这就要轮到我今天要讲的 Valine-Admin 了。由 <a href="https://ioliu.cn/">@云淡风轻</a> 大神开发的 Valine-Admin 实现了基于 leancloud 云引擎的邮件通知、垃圾评论识别和评论管理面板，<a href="http://www.zhaojun.im/hexo-valine-admin/">@赵俊</a>大佬修改优化了一波，能够提供良好的评论通知体验。</p>
<span id="more"></span>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文内容已弃用，本人的库针对我的个人需求做了一些修改，不再适用于一般用户。因为后续原始的 Valine-Admin 开始适配修改版的 Valine，所以建议使用<a href="http://www.zhaojun.im/hexo-valine-admin/">@赵俊</a>大佬的版本。</p>
<p>赵俊大神的原始链接：<a href="http://www.zhaojun.im/hexo-valine-admin/">Hexo 优化 — Valine 扩展之邮件通知</a></p>
<details>
  <summary>原始文章</summary>

<h2 id="问题与改动"><a href="#问题与改动" class="headerlink" title="问题与改动"></a>问题与改动</h2><p>由于 Valine 的更新，以前的一些功能已经无法继续使用。</p>
<ul>
<li>由于去除了 rid 字段，原本基于 rid 字段的“被@邮件通知”功能不再有效。我从评论内容中重新提取了 rid 字段，能够正常进行邮件通知了。</li>
<li>由于不再有 IP 字段，垃圾评论识别功能完全不起作用。emmm，我也不会搞，所以就删掉了。</li>
</ul>
<h2 id="云引擎部署"><a href="#云引擎部署" class="headerlink" title="云引擎部署"></a>云引擎部署</h2><blockquote>
<p>Deserts 大神的原始链接：<a href="https://panjunwen.com/diy-a-comment-system/">Valine: 独立博客评论系统</a></p>
</blockquote>
<p>由于我对项目做了一些改动，建议使用本文的库，即止到今日一直使用正常。</p>
<h3 id="源码部署"><a href="#源码部署" class="headerlink" title="源码部署"></a>源码部署</h3><p>进入博客应用的云引擎的设置，在代码库中填入以下内容并点击保存。已改用 zhaojun1998 的 Valine-Admin，与教程暂不符合，<strong>请勿继续使用以下教程</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ZvonimirSun/Valine-Admin.git</span><br></pre></td></tr></table></figure>

<p><img src="https://img.iszy.xyz/20190318221112.png"></p>
<p>接下来在云引擎的部署页，选择部署目标为<code>生产环境</code>，分支或版本号填入<code>master</code>，勾选平滑部署，点击部署。</p>
<p><img src="https://img.iszy.xyz/20190318221123.png"></p>
<h3 id="设置自定义环境变量"><a href="#设置自定义环境变量" class="headerlink" title="设置自定义环境变量"></a>设置自定义环境变量</h3><p>此外，还需要设置云引擎的环境变量以支持运行，如图所示。</p>
<p><img src="https://img.iszy.xyz/20190318221132.png"></p>
<p>SMTP 信息需要准确填写，用于发送通知邮件，部分邮箱如 QQ 邮箱需要使用授权码（密码）。注意我们使用 SSL 发件，所以端口别填错了。</p>
<h3 id="评论管理后台"><a href="#评论管理后台" class="headerlink" title="评论管理后台"></a>评论管理后台</h3><p><img src="https://img.iszy.xyz/20190318221144.png"></p>
<p>在云引擎的设置界面设置 Web 主机域名，便可以通过这个地址访问评论的管理界面。用 _User 表中的用户登录即可，注意要手动设置密码，才能登录，不能空密码。</p>
<p><img src="https://img.iszy.xyz/20190318221157.png"></p>
<p>至此已经可以顺利使用了。由于云引擎的免费实例有每天的强制休眠，可以用定时脚本唤醒，但是大多数人应该不需要用到 24 小时，所以影响不大。</p>
</details>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>评论系统</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>超好用极简评论系统 Valine 安装</title>
    <url>/post/950214fd.html</url>
    <content><![CDATA[<p>今天我来介绍一下，我现在正在使用的评论系统——<a href="https://valine.js.org/">Valine</a>，一个可以完全自主掌控数据的超好用无后端极简评论系统。我之前使用的评论系统是 Remarkbox，感兴趣的可以看一下我之前的文章，我会在文章末尾放上链接。</p>
<span id="more"></span>

<h2 id="Valine-评论系统简介"><a href="#Valine-评论系统简介" class="headerlink" title="Valine 评论系统简介"></a>Valine 评论系统简介</h2><p><img src="https://img.iszy.xyz/20190318221214.png"></p>
<p>如题目所说，Valine 是一个无后端的极简评论系统。由 <a href="https://ioliu.cn/">@云淡风轻</a> 大神开发，利用免费的 leancloud 作云数据库，实现了真正的无后端。Valine 有以下几点吸引我的地方：</p>
<ul>
<li>能够完全掌控评论数据</li>
<li>外观简约美观</li>
<li>评论支持 markdown 语法</li>
<li>能够邮件通知（不推荐使用）</li>
</ul>
<p><strong>备注：</strong>不推荐使用 Valine 自带的邮件推送，功能并不完善，我会再后文另外说明实现的方法。</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>Valine 官方文档：<a href="https://valine.js.org/quickstart/">文档</a></p>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><ol>
<li><a href="https://leancloud.cn/dashboard/login.html#/signup">点击这里登录或注册</a><code>Leancloud</code></li>
<li><a href="https://leancloud.cn/dashboard/applist.html#/newapp">点击这里创建应用</a>，应用名称随意。</li>
</ol>
<p><img src="https://img.iszy.xyz/20190318221231.png"></p>
<h3 id="获取-APP-ID-和-APP-KEY"><a href="#获取-APP-ID-和-APP-KEY" class="headerlink" title="获取 APP ID 和 APP KEY"></a>获取 <code>APP ID</code> 和 <code>APP KEY</code></h3><p>进入应用后，在此处获取该应用的 <code>APP ID</code> 和 <code>APP KEY</code>。</p>
<p><img src="https://img.iszy.xyz/20190318221242.png"></p>
<h3 id="设置安全域名"><a href="#设置安全域名" class="headerlink" title="设置安全域名"></a>设置安全域名</h3><p>为了数据安全，请务必在此处添加安全域名为你的博客地址。如在本地测试，可以先不添加安全域名。</p>
<p><img src="https://img.iszy.xyz/20190318221253.png"></p>
<h3 id="插入页面"><a href="#插入页面" class="headerlink" title="插入页面"></a>插入页面</h3><p>以本人博客为例，请将以下语句添加到博客的评论位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--评论显示区，请插入合适的位置--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!--<span class="title class_">Leancloud</span> 操作库:--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn1.lncld.net/static/js/3.6.1/av-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!--<span class="title class_">Valine</span> 的核心代码库--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/valine@1.1.9-beta9/dist/Valine.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>:<span class="string">&#x27;#comment&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">appId</span>: <span class="string">&#x27;Your App ID&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">appKey</span>: <span class="string">&#x27;Your App Key&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">placeholder</span>: <span class="string">&#x27;ヾﾉ≧∀≦)o快来评论一下吧!&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">avatar</span>:<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>在 Valine 核心代码库的部分可以自行选择版本，现在最新的稳定版为 1.1.8，将链接中的 <code>1.1.9-beta9</code> 换成 <code>1.1.8</code> 即可。beta 版可能存在 bug，但能更快使用新功能，风险自负。</p>
<h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><p>可自定义配置项较多，不在此一一列举，请参考官方文档。</p>
<h2 id="Valine-Admin"><a href="#Valine-Admin" class="headerlink" title="Valine-Admin"></a>Valine-Admin</h2><p>我之前说过，不推荐使用 Valine 提供的邮件通知功能。由于 leancloud 自身邮件系统的限制，无法传递足够的参数，所以通知邮件中的链接无法直接跳转到文章页，不能够满足使用。</p>
<p>大神 <a href="https://panjunwen.com/">@Deserts</a> 基于 leancloud 云引擎做了一个邮件通知功能，顺便还实现了评论管理面板，Github：<a href="https://github.com/panjunwen/Valine-Admin">Valine-Admin</a>。</p>
<p>由于 Valine 的版本更新，原本的功能除了管理面板已经基本不能使用了，包括邮件通知、垃圾评论识别。我对此进行了一点简单的改动，恢复了邮件通知的内容，垃圾评论识别不会搞，我就给删掉了，Github：<a href="https://github.com/ZvonimirSun/Valine-Admin">Valine-Admin</a>。</p>
<p><a href="https://www.iszy.cc/2018/04/01/Valine-Admin/">下一篇文章</a>，我将写一下这个 Valine-Admin 的配置。同样是十分简单的。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>评论系统</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>超强 Adobe 系列软件一键破解工具——amtemu</title>
    <url>/post/8dc0f9a1.html</url>
    <content><![CDATA[<p>我今天想在这里介绍一个超强大的适用于全部 adobe 系列软件的一键破解工具——amtemu。虽然这个软件已经出了很久了，但是不妨碍它强大啊，能够有效破解最新版 adobe 系列软件。</p>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AMT Emulator 是由俄罗斯技术论坛 Ru-Board 上的大神 Painter 制作的一款最新 Adobe 授权解除工具。简单易用，一键破解全部 Adobe 产品授权。该补丁实现通过了 Abobe 应用程序激活和解锁功能所有必要的类函数，基于本地 API 和最佳性能而优化，从而整个保护机制将被一个小巧的 dll 所替换，十分方便快捷！你甚至不需要断网，只需要正常安装软件，无论是否登录，用这个工具都能轻松解决授权问题。</p>
<h3 id="软件界面"><a href="#软件界面" class="headerlink" title="软件界面"></a>软件界面</h3><p><img src="https://img.iszy.xyz/18-7-18/5188889.jpg"></p>
<h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p>请点击下载链接下载。</p>
<p>链接：<a href="https://pan.baidu.com/s/1yPW0lnIL9397_zh5m5UxKA">百度网盘</a> 密码：6nz7</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>一般情况下，只要是软件中列出的软件版本，就只需要选择该软件版本，然后点击安装，将补丁保存到软件的 amtlib.dll 的所在位置，即可完成。Adobe 升级到 2018 新版本后，amtemu 同样能够正常破解，但由于软件中不包含现有配置，所以还需要进行一点配置。</p>
<p>配置清单如下，选用对应软件版本即可。Version 号可能会有变化，对应修改一下即可，大致是这样的。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Application Name: Adobe Acrobat DC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;AcrobatCont-18-Win-GM</span><br><span class="line">Version: 18.9.200</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Photoshop CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Photoshop-19-Win-GM</span><br><span class="line">Version: 19.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Illustrator CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Illustrator-22-Win-GM</span><br><span class="line">Version: 22.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe XD CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;XD-1-Win-GM</span><br><span class="line">Version: 1.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe After Effects CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;AfterEffects-15-Win-GM</span><br><span class="line">Version: 15.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Animate CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Animate-18-Win-GM</span><br><span class="line">Version: 18.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Audition CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Audition-11-Win-GM</span><br><span class="line">Version: 11.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Character Animator CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;CharacterAnimator-1-Win-GM</span><br><span class="line">Version: 1.1.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Dreamweaver CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Dreamweaver-18-Win-GM</span><br><span class="line">Version: 18.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe InDesign CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;InDesign-13-Win-GM</span><br><span class="line">Version: 13.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Muse CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;Muse-18-Win-GM</span><br><span class="line">Version: 18.0.0</span><br><span class="line"></span><br><span class="line">Application Name: Adobe Premier Pro CC 2018</span><br><span class="line">Application LEID: V7&#123;&#125;PremierPro-12-Win-GM</span><br><span class="line">Version: 12.0.0</span><br></pre></td></tr></table></figure>

<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>AMT Emulator 不仅有 Win 版，还有用于破解 Mac 上 Adobe 软件的 Mac 版。除了将 Application LEID 中的 Win 改成 Mac 以外，其余保持不变。</p>
<p><strong>参考来源：</strong><a href="https://www.reddit.com/r/Piracy/comments/7bpiq6/trick_to_activate_adobe_cc_2018_including_adobe_xd/">Trick to Activate Adobe CC 2018 (including Adobe XD)</a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Adobe</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 git hooks 自动编译 Jekyll</title>
    <url>/post/ef5b091.html</url>
    <content><![CDATA[<p>其实这项工作我已经完成了几天了，现在在此记录一下。主要就是整理一下在自己的服务器上配置 Jekyll 环境，并利用 git hooks 自动化编译的过程，配置好后就能实现和 Github Pages 上类似的环境。</p>
<span id="more"></span>

<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>首先来讲一下，我为什么想要折腾这个东西。</p>
<p>最开始，我的博客是放在 Github Pages 上的，但是由于 Github 屏蔽了百度的爬虫，所以挂在 Github Pages 上的博客并不能被百度搜索到，对于一个中文博客来说还是蛮蛋疼的。当然国内的 Coding Pages 也能提供类似的服务，但是最近开始插广告了，于是就不在我的考虑范围内了。</p>
<p>前段时间，我把网站挂在虚拟主机上，但是许多东西都不能自定义，不能完全按照我的心意来，我还是不太满意。后来，我找到了一家价格较为便宜的美西 VPS 服务商，用起来感觉还比较稳定，我记得好像是国人开的，有中文的界面，等我有空写篇推广。</p>
<p>用自己的 VPS 后，我仍然采用和虚拟主机一样的流程，利用免费的宝塔 Linux 面板来管理网站。写完文章后的一般流程就是，先用我本地的 Ubuntu 虚拟机编译网站，然后将生成的站点打包上传到我的服务器上解压出来。但是，我都已经有了自己的 VPS 了，同样是 Linux 系统，我何不直接在服务器上自动编译呢？这样就跟 Github Pages 差不多了，我认为还是相当不错的。正好还有 git hooks 这么有意思的东西，可以帮助我完成这件事情。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="配置-Jekyll-环境"><a href="#配置-Jekyll-环境" class="headerlink" title="配置 Jekyll 环境"></a>配置 Jekyll 环境</h3><h4 id="首先我使用-RVM-来安装-ruby。"><a href="#首先我使用-RVM-来安装-ruby。" class="headerlink" title="首先我使用 RVM 来安装 ruby。"></a>首先我使用 RVM 来安装 ruby。</h4><p><strong>安装 RVM</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>

<p><strong>安装最新的 ruby 2.4.1</strong></p>
<p>启动 rvm 环境，rvm 安装完成后会有说明。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile.d/rvm.sh</span><br><span class="line">rvm install ruby</span><br></pre></td></tr></table></figure>

<p><strong>安装 Jekyll</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install jekyll</span><br></pre></td></tr></table></figure>

<p><strong>关于其他插件</strong></p>
<p>我不想使用 bundler 来安装，反正只是我个人使用，所以我选择直接安装我的 Jekyll 模板所需的插件。你可以参考你模板中的 Gemfile 文件或 _config.yml 文件中的 plugins。</p>
<p>下面是我这个博客所需的插件，可以参考。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install github-pages</span><br><span class="line">gem install jekyll-github-metadata</span><br><span class="line">gem install rouge</span><br><span class="line">gem install jekyll-paginate</span><br><span class="line">gem install jekyll-sitemap</span><br><span class="line">gem install jekyll-feed</span><br><span class="line">gem install jemoji</span><br></pre></td></tr></table></figure>

<h3 id="配置-git-hooks"><a href="#配置-git-hooks" class="headerlink" title="配置 git hooks"></a>配置 git hooks</h3><p>进入根目录并新建 Git 裸仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> blog.git &amp;&amp; <span class="built_in">cd</span> blog.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure>

<p>进入 hooks 文件夹，配置 git hooks 脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hooks</span><br><span class="line">vi post-receive</span><br></pre></td></tr></table></figure>

<p>插入如下脚本(注意自行替换相应参数)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash -l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仓库路径</span></span><br><span class="line">GIT_REPO=<span class="variable">$HOME</span>/blog.git</span><br><span class="line"><span class="comment"># 代码暂存路径</span></span><br><span class="line">TMP_GIT_CLONE=<span class="variable">$HOME</span>/tmp/git/blog</span><br><span class="line"><span class="comment"># 生成好的静态博客存放路径(以我的网站地址为例)</span></span><br><span class="line">PUBLIC_WWW=/www/wwwroot/www.iszy.cc</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">jekyll build --<span class="built_in">source</span> <span class="variable">$TMP_GIT_CLONE</span> --destination <span class="variable">$PUBLIC_WWW</span> --incremental</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -Rf <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>保存后为文件添加可执行权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x post-receive</span><br></pre></td></tr></table></figure>

<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><p>接下来就是为本地的仓库添加远程仓库地址(默认你已经有了本地仓库)。注意更改相应参数，如<code>username</code>、<code>ip</code>、<code>port</code>以及后面的 git 路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add blog ssh://username@ip:port/root/blog.git</span><br></pre></td></tr></table></figure>

<p>将<code>commit</code>推送到远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push blog master</span><br></pre></td></tr></table></figure>

<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>其实吧，我觉得现在这个情况还不够令人满意，我还需要在本地编辑完了，进行推送。我的理想情况是这样，最好能在我的 VPS 上做一个 panel，能够在线编辑我服务器上的 markdown 文件，然后通过自动化脚本对 Jekyll 进行编译。暂时还不知道怎样实现这个方案，我觉得是可行的，未来如果实现了，我再来补充。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Jekyll</tag>
        <tag>Git</tag>
        <tag>Gem</tag>
      </tags>
  </entry>
  <entry>
    <title>更改网站域名</title>
    <url>/post/5b2ab204.html</url>
    <content><![CDATA[<p>今天我更换了网站的域名，从原来的的 sunziyang.com 改为了 iszy.me，我觉得新的域名比原本的好看一些，可惜我买不起 szy.com 或者 szy.me。网站更改域名算是一件比较大的事情，还是有一些必要的工作要做的，于是在此做一个记录。</p>
<span id="more"></span>

<h2 id="网站改版"><a href="#网站改版" class="headerlink" title="网站改版"></a>网站改版</h2><p>首先呢，我的网站是通过 jekyll 编译的，一些编译的内容和域名是关联在一起的。我也讲不清楚，就是如果域名不完全匹配，即使是 http 和 https 的区别，网站的一些图标就不能正常显示。所以我需要更改配置后，重新编译网站。其他的网站可能不会遇到我这个问题。</p>
<p>另外，由于我是全站 https 的，更换域名也就需要重新申请一个新域名的 ssl 证书。正好 Let’s Encrypt 的泛域名证书已经正式推出了，我也就顺势申请了泛域名证书，现在已经用上了。关于泛域名证书获取的过程可以看我的<a href="https://www.iszy.cc/2018/03/18/wild-card/">上一篇文章</a>。</p>
<h2 id="对旧网站做-301-跳转"><a href="#对旧网站做-301-跳转" class="headerlink" title="对旧网站做 301 跳转"></a>对旧网站做 301 跳转</h2><p>为了保证搜索引擎的正常抓取和索引，并尽量减少网站的正常改版过程中的流量损失，要对旧网站做 301 跳转。</p>
<p>网上的教程应该很多吧，无论是针对 Apache 的，还是 Nginx 的，连针对微软的 IIS 的教程都有。我还特别去看过，讲道理还挺简单的，在此我就不赘述了。如果真有人需要，在评论里说一声，我在这里做整理。</p>
<p>对于我来说就比较简单了，我的 VPS 上用的免费的宝塔面板，提供了简单的设置 301 跳转的功能。一般来说，这样子的控制面板应该都会提供这样的功能。</p>
<p><img src="https://img.iszy.xyz/20190318212214.png"></p>
<h2 id="搜索引擎内更改网站域名"><a href="#搜索引擎内更改网站域名" class="headerlink" title="搜索引擎内更改网站域名"></a>搜索引擎内更改网站域名</h2><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>我就在这里简单讲一下一般流程。</p>
<ol>
<li>首先在 Search Console 中<strong>添加你的新网站</strong>。</li>
<li>在你的旧网站的控制台中使用<strong>地址更改工具</strong>。</li>
<li>选择你需要迁移至的新地址，确认 301 重定向有效，检查验证方法仍然有效。</li>
<li>然后提交地址更改请求。</li>
</ol>
<p>接下来就交给 Google 来完成了，他会自动将你旧网站的索引迁移到新网站去，旧网站的索引将会作废，直到最终完成。</p>
<h3 id="Baidu"><a href="#Baidu" class="headerlink" title="Baidu"></a>Baidu</h3><ol>
<li>首先在百度站长工具中<strong>添加你的新站点</strong>。</li>
<li>进入你的旧网站的控制台，使用<strong>网站改版工具</strong>。</li>
<li>添加改版规则，针对全站域名更换的改版方式，应该选择第一个，<strong>站点改版</strong>。</li>
<li>然后选择刚刚添加的新站点名。</li>
<li>提交，百度会完成接下来的工作。</li>
</ol>
<h3 id="新网站管理"><a href="#新网站管理" class="headerlink" title="新网站管理"></a>新网站管理</h3><p>不多说，和你旧网站的管理一致，可能需要等到迁移完成。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>反正我网站的流量也不多，也不用来赚钱，域名换了也就换了。如果你的网站比较大的话，还是要慎重选择是否要进行网站的改版，会对网站造成很大的影响。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>301</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 acme.sh 申请 Let&#39;s Encrypt 免费泛域名证书</title>
    <url>/post/23f903c8.html</url>
    <content><![CDATA[<p>既然已经可以通过 Let’s encrypt 申请免费泛域名证书了，本着生命不息，折腾不止的态度，我自然是要试试的。可以看到本站已经用上了 Let’s encrypt 的泛域名证书，本文就对我这次申请过程做一个记录。</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关注 Let’s Encrypt 的免费泛域名证书也有一段时间了。毕竟像我这种穷学生使用不起高大上的付费 wildcard 的，之前一直是每个子域名申请一个 ssl 证书。但是由于我老是折腾，也没怎么注意备份证书，就老是在申请，可太麻烦了。这次申请 Let’s Encrypt 的免费泛域名证书，我特意备份好了，以后每个子域名都能用这个证书就方便多了。</p>
<p>Let’s Encrypt 推出 ACME V2 和泛域名证书的支持也是一波三折，一月多本来就要推出了，因为技术原因，数次推迟，终于在本月 14 号正式宣布上线。由于是刚刚发布，暂时还没有多少一键申请的支持。好在 acme.sh 已经可以支持，虽然由于 DNS API 的需要，仅支持有限的解析商，但已经足够方便了。</p>
<p>下面上官方公告的截取，让人十分激动。</p>
<blockquote>
<p>We’re pleased to announce that ACMEv2 and wildcard certificate support is live! With today’s new features we’re continuing to break down barriers for HTTPS adoption across the Web by making it even easier for every website to get and manage certificates.</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>首先你需要有一个域名</li>
<li>你要将你的域名在支持的解析商处解析。 - 可以点击<a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md">这里</a>查看支持的解析商，没有被列出来即不支持。 - 我注册域名所在的 Namecheap 就不在支持的列表内。</li>
<li>然后你需要有一台运行 Linux 系统的 VPS 来执行命令。虚拟机或许也行？没有试过。</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>本文以在 CloudXNS 解析的 iszy.me 为例，其他域名参考<a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md">这里</a>。我本次系统环境为 Ubuntu 16.04，其他系统可以类比完成。</p>
<h3 id="首先安装依赖环境"><a href="#首先安装依赖环境" class="headerlink" title="首先安装依赖环境"></a>首先安装依赖环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp;  apt-get install curl -y &amp;&amp; apt-get install cron -y &amp;&amp; apt-get install socat -y</span><br></pre></td></tr></table></figure>

<h3 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h3><h4 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<p>OR</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O -  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<h4 id="通过-git-安装"><a href="#通过-git-安装" class="headerlink" title="通过 git 安装"></a>通过 git 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Neilpang/acme.sh.git</span><br><span class="line"><span class="built_in">cd</span> ./acme.sh</span><br><span class="line">./acme.sh --install</span><br></pre></td></tr></table></figure>

<h3 id="查看-API-Key-和-Secret"><a href="#查看-API-Key-和-Secret" class="headerlink" title="查看 API Key 和 Secret"></a>查看 API Key 和 Secret</h3><p>在用户中心查看。</p>
<p><img src="https://img.iszy.xyz/20190318221329.png"></p>
<h3 id="输入环境参数"><a href="#输入环境参数" class="headerlink" title="输入环境参数"></a>输入环境参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CX_Key=<span class="string">&quot;your api key&quot;</span></span><br><span class="line"><span class="built_in">export</span> CX_Secret=<span class="string">&quot;your secret key&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --issue --dns dns_cx -d iszy.me -d *.iszy.me</span><br></pre></td></tr></table></figure>

<p>你的证书将会被保存在<code>~/.acme.sh/iszy.me/</code>路径下。包含文件<code>ca.cer</code>、<code>fullchain.cer</code>、<code>iszy.me.cer</code>、<code>iszy.me.conf</code>、<code>iszy.me.csr</code>、<code>iszy.me.csr.conf</code>、<code>iszy.me.key</code>，一般使用<code>fullchain.cer</code>和<code>iszy.me.key</code>就可以了。</p>
<p><strong>注意：</strong>第一个<code>-d</code>后面不能直接写泛域名，一定要写普通域名，像我这样，后面的<code>-d</code>就支持写泛域名了。</p>
<h3 id="续签"><a href="#续签" class="headerlink" title="续签"></a>续签</h3><p>由于 Let’s encrypt 的证书有效期为 3 个月，需要续签。我也不懂其他的，就直接用 Crontab 吧，简单直接。我暂时还没有弄，因为我其实是在我一台瞎折腾的服务器上申请的，续签的问题嘛，以后再说吧。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>acme.sh</tag>
        <tag>证书</tag>
        <tag>Let&#39;s Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>2017年终总结</title>
    <url>/post/7ebaab74.html</url>
    <content><![CDATA[<p>再过两天就是除夕了，新的一年即将到来。值此新春来临之际，我想对过去的一年进行一个简单的回顾，以后我也能回来翻看。</p>
<span id="more"></span>

<p><img src="https://img.iszy.xyz/20190318211304.png"></p>
<p>其实吧，2017 年已经过去两个多月了，各个国产 App 早就已经发完了各自的一年回顾，比如支付宝的一年账单啦，网易云的一年听歌历史什么的，忘记叫啥名了。但是无所谓啦，什么时候回顾都是一样的嘛。再说了，那个 1 月 1 日的新年到底是国外的新年，我们传统的新年才是真的新年嘛，真正的有了除旧迎新的感觉。</p>
<p>说起来，为啥我突然想回顾过去的一年呢？是这个样子的。我今天在 B 站看视频，欸，正好，我一直看的一个 B 站 Up 主上传了一个年终总结的视频，用于回顾一年干过的事情，发表一些感悟。看过之后，我觉得吧，做一个年终总结还挺好，总结一年得失，上一年的愿望目标有没有达成，对新的一年做出一些展望，立下新的 flag。其实吧，扯了半天，主要还是一时兴起，就想来做一下，23333。</p>
<p>2017 年，我都做了哪些事呢？在这一年里，我接触了许多新事物，有些是源于兴趣，有些是迫于需求。我来随便掰扯掰扯吧。</p>
<p>首先，我这个博客就是今年创建的。我其实从小就觉得有一个自己的网站是一件很酷的事情，当时觉得有个 QQ 空间很棒，还想着我要写点日志来充实一下我的页面呢。结果吧，到底我还是没有怎么写日志，空空荡荡，不咋好看，干脆就不看它了。现在我已经大学了，我还是很想搞自己的网站，选择博客自然是最正常不过的了。看国内的各种博客网站，总觉得哪里不顺眼，不尽如心意，还是自己建比较靠谱，于是，就有了这个博客。具体怎么建的在这里就不讲了，免得篇幅太长。</p>
<p>我原本的设想是，每周我都能写点东西，不论是想说的话，还是新学习点东西，做点记录。但是，也能看到，我的 post 总的来说，不怎么多，发的间隔也比较长。&#x3D;像我这种不善言辞，不擅长写作的人，能有时候发一发就不错了，其实大多是给我自己看的，一懒下来就不想写了。在新的一年里，说不定能多写点东西吧，立个 flag 在这。嘿嘿，明年我再过来看看。</p>
<p>除了博客以外，我这个 sunziyang.com 的域名好像也是今年注册的。我有一门课的老师跟我们讲，一个人应该有一个自己的域名，拥有一个自己的域名可以做很多有用的事情。我觉得很有道理啊，申请一个个性化的域名来代表我的身份，我拿来做什么都行啊，弄个网站，弄个域名邮箱什么的都很好玩。就算是放在那里备用也不错，万一什么时候我就用到了，毕竟我比较喜欢折腾。我这域名大概会一直续下去的吧。</p>
<p>2017 年初，我曾想过，这一年，在我看完正在追的网络小说以后，就不再看新的了，毕竟好多套路都差不多，也没什么意思，毫无营养。我有个 kindle 放在那里，我还买了些准备看的书下在里面，准备看完那些网络小说以后就拿 kindle 看看好书吧。转眼间一年就过去了，果然，我还是没能克制住，又继续追了作者大大的新作，kindle 又闲置了一年，真的是对不起了。新的一年，我继续立下这个 flag，我觉得这次我会付诸实施的（坚定脸）。</p>
<p>这一年，我在学校做项目，需要写网站，导师对我们的期望很高，希望能与另外一个项目的网站进行对接，那边需要框架的兼容，要求使用微软的 ASP.NET MVC5 框架。我当时是懵逼的，感觉很高大上嘛。我倒是学过 C#，可惜我完全没有接触过 html、css 和 JavaScript 等一系列写网站需要的东西，时间要求又比较紧张，没有办法细致地从头学起，真是让我很头疼。磕磕碰碰地直接从网页模板开始改，遇到啥问题就直接查解决方案，最后总算是搞出了一个粗糙的网站。各种东西都是一知半懂的状态，终究也不敢说是学会了，待我有空了，我再系统地学习一下这些技术吧。</p>
<p>暑假里，用着学校的无人机对学校进行了航拍。无人机这个东西吧，这几年越来越热门了，应用到了各种领域。当然啦，我也就体验一下也就满足了，我也没什么需求，关键是买不起。等有钱了，买个大疆的 Mavic 系列一定很不错。</p>
<p>在这一年中，我偶然间听人提起过 raspberry pi，说这是一个有趣的玩意，可以用来做不少事情，适合折腾。我这样一个喜欢折腾的人最喜欢这种小玩意了，我查了一下，偶哟都出到第三代了。对我这样一个穷学生来说，这个玩具还是挺贵的，我咬咬牙还是买了。最终似乎我也没有拿它来干很多有意义的事，就尝试了一些大佬们已经玩过的有趣花样。现在先摆在一边吧，等我想到拿它来做什么再说吧。</p>
<p>在这一年里，我学习了不少重要的专业课，这都是未来发展的重要基础，再此我就不多说了。</p>
<p>这一年中，我还养成了两个坑爹费钱的坏习惯，一个是买 VPS，一个是买游戏。仔细看了一下，其实两个差不多嘛，看见便宜的打折的就想买，然后吃灰（滑稽）。在 VPS 这方面，我还算及时收手，现阶段还有两个大流量 VPS 和一个大容量存储 VPS 在手，emmm，大概还不算多吧，我一定不会再剁手了。游戏嘛，我觉得我立 flag 也没用啊，收不住手啊，看见喜欢的游戏打折了，怎么能握得住钱包？每次翻看库存都有新发现，原来我还有这个游戏啊（滑稽）。</p>
<p>新的一年里，我希望我能多看点书，多学点东西；我想多省点钱，多减点肥。也不多说，我感觉这都完不成，新年暂时就先这点展望吧。</p>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>总结回顾</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot微服务搭建</title>
    <url>/post/be6d4cc3.html</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/qq_26627671/article/details/76563127">本人的csdn传送门</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>进行web开发的时候Java程序员们难免会碰到那种很小的服务，比如就提供一个生成订单号的接口，或者一个上传文件的服务。而这时我们再去使用SpringMVC这种体量稍大、配置繁琐的框架开发难免会加大工作量，而且是不必要的。这个时候我们就可以选择使用这个微服务框架——springboot进行开发。</p>
</blockquote>
<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p>
<span id="more"></span>

<hr>
<h3 id="springboot框架的搭建与简单的REST风格的MVC架构demo"><a href="#springboot框架的搭建与简单的REST风格的MVC架构demo" class="headerlink" title="springboot框架的搭建与简单的REST风格的MVC架构demo"></a>springboot框架的搭建与简单的REST风格的MVC架构demo</h3><h4 id="首先，建立一个新的maven工程，pom文件主要内容如下："><a href="#首先，建立一个新的maven工程，pom文件主要内容如下：" class="headerlink" title="首先，建立一个新的maven工程，pom文件主要内容如下："></a>首先，建立一个新的maven工程，pom文件主要内容如下：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中核心依赖是    <code>spring-boot-starter-web</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问静态资源文件可以加入模板：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="编写Application-java文件，存放于src-x2F-main-x2F-java这个目录下"><a href="#编写Application-java文件，存放于src-x2F-main-x2F-java这个目录下" class="headerlink" title="编写Application.java文件，存放于src&#x2F;main&#x2F;java这个目录下"></a>编写Application.java文件，存放于src&#x2F;main&#x2F;java这个目录下</h4><h5 id="这里是springboot的核心启动类"><a href="#这里是springboot的核心启动类" class="headerlink" title="这里是springboot的核心启动类"></a>这里是springboot的核心启动类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上，这个时候已经把框架搭建好了，运行以上main方法即可启动这个项目，但是我们现在看不到效果，接下来，就可以像SpringMVC一样加入MVC三层结构的代码了，目录结构如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3327380-fb0da321cb7b5abb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="REST风格的MVC架构demo项目目录结构"></p>
<p>其中各层代码如下：</p>
<h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang.controller;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> com.zhang.entity.Photo;</span><br><span class="line"><span class="keyword">import</span> com.zhang.service.mainService;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/photo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mainController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> mainService mainservice;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">(ModelAndView mav)</span>&#123;</span><br><span class="line">		mav.addObject(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;这是项目主页，访问根目录到达~~&quot;</span>);</span><br><span class="line">		mav.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> mav;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/getPhoto&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">doIt</span><span class="params">()</span>&#123;</span><br><span class="line">		Map&lt;String, Photo&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Photo&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;photo&quot;</span>, mainservice.getPhotoById(<span class="number">123</span>));</span><br><span class="line">		<span class="keyword">return</span> map;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="service实现类"><a href="#service实现类" class="headerlink" title="service实现类"></a>service实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhang.dao.mainDao;</span><br><span class="line"><span class="keyword">import</span> com.zhang.entity.Photo;</span><br><span class="line"><span class="keyword">import</span> com.zhang.service.mainService;</span><br><span class="line"><span class="meta">@Service(&quot;mainservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mainServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">mainService</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> mainDao maindao;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Photo <span class="title function_">getPhotoById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> maindao.getPhotoNameById(id);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="dao实现类"><a href="#dao实现类" class="headerlink" title="dao实现类"></a>dao实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhang.dao.mainDao;</span><br><span class="line"><span class="keyword">import</span> com.zhang.entity.Photo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;maindao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mainDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">mainDao</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Photo <span class="title function_">getPhotoNameById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">		<span class="type">Photo</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Photo</span>();</span><br><span class="line">		p.setId(<span class="number">123</span>);</span><br><span class="line">		p.setName(<span class="string">&quot;雪山行纪念照&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="实体类photo"><a href="#实体类photo" class="headerlink" title="实体类photo"></a>实体类photo</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang.entity;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Photo</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p><img src="http://upload-images.jianshu.io/upload_images/3327380-8ed38aa7e3e43e40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目启动日志"></p>
<h4 id="项目默认端口为8080，在浏览器中访问刚才的controller会看到："><a href="#项目默认端口为8080，在浏览器中访问刚才的controller会看到：" class="headerlink" title="项目默认端口为8080，在浏览器中访问刚才的controller会看到："></a>项目默认端口为8080，在浏览器中访问刚才的controller会看到：</h4><p><img src="http://upload-images.jianshu.io/upload_images/3327380-75812c968f3ff846?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="访问结果"></p>
<hr>
<h3 id="如上，一个REST风格的MVC架构的demo项目就搭建完成了。"><a href="#如上，一个REST风格的MVC架构的demo项目就搭建完成了。" class="headerlink" title="如上，一个REST风格的MVC架构的demo项目就搭建完成了。"></a>如上，一个REST风格的MVC架构的demo项目就搭建完成了。</h3>]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>平面多边形面积计算</title>
    <url>/post/a1326a67.html</url>
    <content><![CDATA[<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>在这里实现了对任意平面多边形的面积计算，不适用于有重叠或边互相交叉的情况。</p>
<span id="more"></span>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="窗体设计"><a href="#窗体设计" class="headerlink" title="窗体设计"></a>窗体设计</h3><p><img src="https://img.iszy.xyz/20190318213117.png"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">area</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Main</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Point&gt; list = <span class="keyword">new</span> List&lt;Point&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnAdd_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (txtX.Text != <span class="string">&quot;&quot;</span> &amp;&amp; txtY.Text != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//插入点</span></span><br><span class="line">                <span class="keyword">if</span> (Int32.TryParse(txtX.Text, <span class="keyword">out</span> <span class="built_in">int</span> x) &amp;&amp; Int32.TryParse(txtY.Text, <span class="keyword">out</span> <span class="built_in">int</span> y))</span><br><span class="line">                &#123;</span><br><span class="line">                    listPoint.BeginUpdate();</span><br><span class="line">                    Point point = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">                    list.Add(point);</span><br><span class="line">                    listPoint.Items.Add(point);</span><br><span class="line">                    listPoint.EndUpdate();</span><br><span class="line"></span><br><span class="line">                    txtX.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    txtY.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    txtX.Focus();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;请输入数字！&quot;</span>);</span><br><span class="line">                    txtX.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    txtY.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    txtX.Focus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCalcu_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (list.Count &gt;= <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将线首加入列表，保证多边形闭合</span></span><br><span class="line">                list.Add(list[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算面积</span></span><br><span class="line">                <span class="built_in">double</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//根据公式进行计算</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.Count - <span class="number">1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    area += (list[i].X +list[i+<span class="number">1</span>].X) * (list[i + <span class="number">1</span>].Y - list[i].Y);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//保证面积为正</span></span><br><span class="line">                area = Math.Abs(area / <span class="number">2</span>);</span><br><span class="line">                txtResult.Text = <span class="string">&quot;面积：&quot;</span> + area.ToString(<span class="string">&quot;0.0&quot;</span>);</span><br><span class="line">                btnAdd.Enabled = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;请添加至少3个点！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnClear_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//清空所有点</span></span><br><span class="line">            list.Clear();</span><br><span class="line">            listPoint.Items.Clear();</span><br><span class="line">            txtX.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            txtY.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            txtResult.Text = <span class="string">&quot;面积：&quot;</span>;</span><br><span class="line">            btnAdd.Enabled = <span class="literal">true</span>;</span><br><span class="line">            txtX.Focus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>GIS</tag>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio快捷键</title>
    <url>/post/e5acea05.html</url>
    <content><![CDATA[<p>在 VS 的日常使用中，一些快捷键的辅助会有效地提高你的效率，在这里，我总结一点我使用中使用的快捷键。（VS2017 中确认可以使用）</p>
<span id="more"></span>

<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>这里列举的只是我使用到的一部分。当我用到时，我将会在这里继续补充。</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">F5</td>
<td align="left">启动调试</td>
</tr>
<tr>
<td align="left">Ctrl-K + Ctrl-C</td>
<td align="left">注释一段选择代码</td>
</tr>
<tr>
<td align="left">Ctrl-K + Ctrl-U</td>
<td align="left">取消注释一段选择代码</td>
</tr>
<tr>
<td align="left">Ctrl-M + Ctrl-O</td>
<td align="left">折叠所有代码</td>
</tr>
<tr>
<td align="left">Ctrl-M + Ctrl-P</td>
<td align="left">展开所有代码</td>
</tr>
<tr>
<td align="left">Ctrl-M + Ctrl-M</td>
<td align="left">展开或折叠代码段</td>
</tr>
<tr>
<td align="left">Ctrl-K + Ctrl-F</td>
<td align="left">格式化整个块</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>从头开始搭建NextCloud私有云盘</title>
    <url>/post/bc38ae18.html</url>
    <content><![CDATA[<p>我想大家一定都知道国内网盘相继关闭，百度网盘的和谐、限速大法吧。我还有同步盘的需求，以前百度网盘是有的，现在要会员才能用吧，还要冒着可能被莫名和谐的风险，我还是手动再见。对我来说，网盘还是非常有用，国内的这些网盘用得我十分难受，网上又正好有现成的私有云盘可供我折腾，好吧，其实我就是想折腾。</p>
<span id="more"></span>

<p>我最先听到的其实是 owncloud 和 seafile 的。相对于 seafile，我更加喜欢 owncloud 的界面，我也装过 owncloud 试用来着，结果发现还有许多常用功能需要折腾额外的插件。在折腾的过程中，我发现了 nextcloud 这个和 owncloud 在很多方面都十分相像的私有云盘，原来是 owncloud 原班人马做的更新的版本啊。有新的不用怎么能行，你说是不是？于是我就开始试用 nextcloud 了。安装过程多有借鉴网上的教程，十分感谢网上的大佬。</p>
<h2 id="NextCloud-安装"><a href="#NextCloud-安装" class="headerlink" title="NextCloud 安装"></a>NextCloud 安装</h2><h3 id="VPS-选择"><a href="#VPS-选择" class="headerlink" title="VPS 选择"></a>VPS 选择</h3><p>在这方面我也没什么经验，就不便多说。就说几点，我认为比较重要的吧。</p>
<ol>
<li>你的 VPS 内存至少能有 512MB 吧，最好能有 1GB，太大我觉得也没必要。</li>
<li>你用来作私有云盘存储的，存储空间总不能太小，这个看你需要多大，因人而异。</li>
<li>你得保证你的 VPS 的 IP 在你所在的地区有一定的访问速度，能跑满速自然是最好的，一般 VPS 商应该都有测试数据让你测试速度的。</li>
<li>作为网盘，少不了上传下载，说不定还要离线下载、在线影院什么的，那么流量也不能少。不过这点一般不用担心，国外的 VPS 一般不怎么吝啬流量的。</li>
<li>其他的嘛，额，你可能最好能有个域名，这不是必须的（偏题了，不管了就在这提了）。</li>
<li>个人推荐 Time4VPS，我现在自用就是这个，这家的存储 VPS 算是最实惠了吧。</li>
</ol>
<h3 id="宝塔-Linux-面板安装"><a href="#宝塔-Linux-面板安装" class="headerlink" title="宝塔 Linux 面板安装"></a>宝塔 Linux 面板安装</h3><p>对于安装这种东西，对于 linux 小白来说，自然是越简单越好。于是我选择使用可视化面板<strong>宝塔 Linux 面板</strong>，在这上面可以一键部署环境，配置网站等等。</p>
<p>安装宝塔面板，我以 CentOS 7 为例。用 Xshell 或者 PuTTY 等无论什么软件通过 ssh 远程连接你的 VPS。输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>

<p>其他的系统，可以查看官方提供的<a href="https://www.bt.cn/bbs/thread-1186-1-1.html">安装命令页面</a>。</p>
<p>会让你确认安装，输入 y 回车即可。</p>
<p>等待安装完成，会告诉你宝塔面板的访问路径和用户名密码等，以后可以修改。就算密码忘记了只要你能登录你的 VPS 就能够通过官方的命令修改。</p>
<h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>首先登录宝塔面板，会让你一键安装套件，nextcloud 官方推荐使用 LAMP。LNMP 也是能装的，据说会有诡异的问题，我也没试过。</p>
<p><img src="https://img.iszy.xyz/20190318214938.png"></p>
<p>建议按照我的选择，点击一键安装，宝塔面板会帮你将所需环境安装完成。</p>
<p>在安装完成后，还有几个内容需要添加，后期将会用到。点击左侧导航栏的软件管理，再点击 PHP-7.1 右侧的设置。</p>
<p><img src="https://img.iszy.xyz/20190318214947.png"></p>
<p>这样将会弹出 php 的管理界面，点击左侧栏的安装扩展，安装如图所示的三个扩展。</p>
<p><img src="https://img.iszy.xyz/20190318214956.png"></p>
<h4 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h4><p>点击左侧栏的网站，然后点击添加站点。在域名框中添加你需要的域名，你需要在你域名的 DNS 处将这个子域名解析到你的 VPS 的 IP。</p>
<p><img src="https://img.iszy.xyz/20190318215015.png"></p>
<p>创建完成后，点击你的网站目录，删除如图所示的自动生成的文件，并将 nextcloud 的网站文件上传到这个目录。</p>
<p>打开 NextCloud 的<a href="https://nextcloud.com/install/#instructions-server">官网</a>下载最新的安装包。</p>
<p>在页面中选择 Get Nextcloud Server 栏目下的 Download 按钮点击它。出现如下图界面点击 Download Nextcloud 开始下载：</p>
<p><img src="https://img.iszy.xyz/20190318215030.png"></p>
<p>下下来的文件是个压缩包，你只需要把文件夹中的文件都上传到刚刚的网站目录即可。<strong>注意：只要文件夹中的文件，不要文件夹。</strong></p>
<h4 id="添加数据库"><a href="#添加数据库" class="headerlink" title="添加数据库"></a>添加数据库</h4><p>点击面板左侧栏的数据库，点击 phpMyAdmin，出现数据库的管理界面，通过 root 用户登录，root 密码可以通过刚刚页面的 root 密码按钮得到。</p>
<p>接下来新建一个供 nextcloud 使用的数据库。点击数据库，输入数据库名，再点击创建就完成了。</p>
<p><img src="https://img.iszy.xyz/20190318215042.png"></p>
<h4 id="创建管理员账户"><a href="#创建管理员账户" class="headerlink" title="创建管理员账户"></a>创建管理员账户</h4><p>现在你已经可以访问你的域名来访问 nextcloud 了，你将会看到如下所示的界面，你需要在这里创建管理员账户。</p>
<p><img src="https://img.iszy.xyz/20190318215100.png"></p>
<p>管理员账户的用户名密码，自定。点开存储&amp;数据库，在这里可以修改数据目录。配置数据库选择 MySQL&#x2F;MariaDB，然后填入刚刚你创建的数据库，最后点击安装完成。<strong>注意：localhost 后一定要写上端口 3306，如图所示</strong></p>
<p><img src="https://img.iszy.xyz/20190318215112.png"></p>
<p>现在你已经可以登录你的 nextcloud 了，尽情享用吧。</p>
]]></content>
      <categories>
        <category>应用部署</category>
      </categories>
      <tags>
        <tag>Nextcloud</tag>
        <tag>宝塔面板</tag>
        <tag>文件存储</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle PL/SQL BREAK-ON排列实例</title>
    <url>/post/389bc5ad.html</url>
    <content><![CDATA[<p>使用 BREAK ON 语句进行排列的实例</p>
<span id="more"></span>

<h2 id="BREAK-ON-语法"><a href="#BREAK-ON-语法" class="headerlink" title="BREAK ON 语法"></a>BREAK ON 语法</h2><ol>
<li><code>BRE[AK][ON report_element [action [action]]] ...</code></li>
</ol>
<ul>
<li><p>report_element 的语法为<code>&#123;column|expr|ROW|REPORT&#125;</code></p>
</li>
<li><p>action 的语法为<code>[SKI[P] n|[SKI[P]] PAGE][NODUP[LICATES]|DUP[LICATES]]</code></p>
</li>
</ul>
<ol start="2">
<li>指定报告中发生更改的位置以及要执行的格式化操作，比如：</li>
</ol>
<ul>
<li>抑制显示给定列的重复值。</li>
<li>每次给定列值更改时跳过一行。</li>
<li>每次给定列值发生变化或在报告结束时打印计算的数字。</li>
</ul>
<ol start="3">
<li><p>不带参数直接输入 BREAK 来查看当前的 BREAK 定义。</p>
</li>
<li><p>此语句经常和 Compute 命令配合使用。</p>
</li>
</ol>
<h3 id="英文原文"><a href="#英文原文" class="headerlink" title="英文原文"></a>英文原文</h3><p><code>BRE[AK][ON report_element [action [action]]] ...</code></p>
<p>where report_element has the syntax <code>&#123;column|expr|ROW|REPORT&#125;</code></p>
<p>and action has the syntax <code>[SKI[P] n|[SKI[P]] PAGE][NODUP[LICATES]|DUP[LICATES]]</code></p>
<p>Specifies where changes occur in a report and the formatting action to perform, such as:</p>
<ul>
<li><p>suppressing display of duplicate values for a given column</p>
</li>
<li><p>skipping a line each time a given column value changes</p>
</li>
<li><p>printing computed figures each time a given column value changes or at the end of the report.</p>
</li>
</ul>
<p>See the <a href="https://docs.oracle.com/cd/E11882_01/server.112/e16604/ch_twelve014.htm#i2697257">COMPUTE</a> command.</p>
<p>Enter BREAK with no clauses to list the current BREAK definition.</p>
<h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">clear breaks</td>
<td align="left">清除所有的 break 定义</td>
</tr>
<tr>
<td align="left">break on column</td>
<td align="left">在该列上中断</td>
</tr>
<tr>
<td align="left">break on row</td>
<td align="left">在每一行上中断</td>
</tr>
<tr>
<td align="left">break on Page</td>
<td align="left">在每一页上中断</td>
</tr>
<tr>
<td align="left">break on report</td>
<td align="left">在每一报告上中断</td>
</tr>
<tr>
<td align="left">skip n</td>
<td align="left">跳过 n 行</td>
</tr>
<tr>
<td align="left">skip page</td>
<td align="left">跳过未用完的页</td>
</tr>
</tbody></table>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>基于 Oracle 11g 下 hr 用户进行计算。</strong></p>
<p>显示所有部门的部门编号、名称、员工数和平均薪金，同时显示在每个部门中工作的员工的姓名、薪金和职务。</p>
<p><img src="https://img.iszy.xyz/20190318215229.png"></p>
<h3 id="答题"><a href="#答题" class="headerlink" title="答题"></a>答题</h3><ul>
<li>指定 break 参数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">break <span class="keyword">on</span> department_id <span class="keyword">on</span> department_name <span class="keyword">on</span> num <span class="keyword">on</span> avg <span class="keyword">skip</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进行查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.department_id,d.department_name,</span><br><span class="line"><span class="built_in">count</span>(e1.employee_id) num,</span><br><span class="line">nvl(to_char(<span class="built_in">avg</span>(e1.salary),<span class="string">&#x27;999999.99&#x27;</span>),<span class="string">&#x27;Null&#x27;</span>) avg,</span><br><span class="line">e2.last_name,e2.salary,e2.job_id</span><br><span class="line"><span class="keyword">from</span> departments d,employees e1,employees e2</span><br><span class="line"><span class="keyword">where</span> d.department_id<span class="operator">=</span>e1.department_id(<span class="operator">+</span>)</span><br><span class="line"><span class="keyword">and</span> d.department_id<span class="operator">=</span>e2.department_id(<span class="operator">+</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.department_id,d.department_name,e2.last_name,e2.salary,e2.job_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> d.department_id,num;</span><br></pre></td></tr></table></figure>

<ul>
<li>清除 break 定义</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">clear breaks</span><br></pre></td></tr></table></figure>

<h3 id="部分结果"><a href="#部分结果" class="headerlink" title="部分结果"></a>部分结果</h3><p><img src="https://img.iszy.xyz/20190318215243.png"></p>
<p><img src="https://img.iszy.xyz/20190318215256.png"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle PL/SQL while loop循环实例</title>
    <url>/post/8122f1b7.html</url>
    <content><![CDATA[<p>用 while loop 语句进行循环计算的一个实例。最近做题遇到，在此记录。</p>
<span id="more"></span>

<h2 id="WHILE-LOOP-语法"><a href="#WHILE-LOOP-语法" class="headerlink" title="WHILE-LOOP 语法"></a>WHILE-LOOP 语法</h2><p>当<strong>条件为真</strong>时，执行语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHILE <span class="keyword">condition</span> LOOP</span><br><span class="line">	some_statements;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出一个 Power 表(表 1)的数据如下：</p>
<p><img src="https://img.iszy.xyz/20190318215310.png"></p>
<ol>
<li>3 日的电费&#x3D;1 日+2 日</li>
<li>4 日的电费&#x3D;2 日+3 日</li>
</ol>
<p><strong>要求:</strong></p>
<p>编写 SQL 语句，最终显示出六月所有电费。</p>
<h3 id="答题"><a href="#答题" class="headerlink" title="答题"></a>答题</h3><h4 id="创建表，存入初始数据"><a href="#创建表，存入初始数据" class="headerlink" title="创建表，存入初始数据"></a>创建表，存入初始数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="built_in">power</span>(mon <span class="type">int</span>,<span class="keyword">day</span> <span class="type">int</span>,fee <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> power <span class="keyword">values</span>(<span class="number">6</span>,<span class="number">1</span>,<span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> power <span class="keyword">values</span>(<span class="number">6</span>,<span class="number">2</span>,<span class="number">34</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img.iszy.xyz/20190318215323.png"></p>
<h4 id="计算整月的电费"><a href="#计算整月的电费" class="headerlink" title="计算整月的电费"></a>计算整月的电费</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">	a number;</span><br><span class="line">	b number;</span><br><span class="line">	x number;</span><br><span class="line">	y number;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	a:<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">	b:<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">	while (b<span class="operator">&lt;=</span><span class="number">29</span>) loop</span><br><span class="line">		<span class="keyword">select</span> fee</span><br><span class="line">		<span class="keyword">into</span> x</span><br><span class="line">		<span class="keyword">from</span> power</span><br><span class="line">		<span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span>a;</span><br><span class="line">		<span class="keyword">select</span> fee</span><br><span class="line">		<span class="keyword">into</span> y</span><br><span class="line">		<span class="keyword">from</span> power</span><br><span class="line">		<span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span>b;</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> power <span class="keyword">values</span>(<span class="number">6</span>,a<span class="operator">+</span><span class="number">2</span>,x<span class="operator">+</span>y);</span><br><span class="line">		a:<span class="operator">=</span>a<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">		b:<span class="operator">=</span>b<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	<span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img.iszy.xyz/20190318215335.png"></p>
<h4 id="显示结果"><a href="#显示结果" class="headerlink" title="显示结果"></a>显示结果</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> power;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.iszy.xyz/20190318215348.png"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server数据库角色成员身份</title>
    <url>/post/acdd21d9.html</url>
    <content><![CDATA[<p>本文总结了 SQL Server 数据库的自带角色成员身份权限。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="left">数据库级别的角色名称</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">db_accessadmin</td>
<td align="left">db_accessadmin 固定数据库角色的成员可以为 Windows 登录名、Windows 组和 SQL Server 登录名添加或删除数据库访问权限。</td>
</tr>
<tr>
<td align="left">db_backupoperator</td>
<td align="left">db_backupoperator 固定数据库角色的成员可以备份数据库。</td>
</tr>
<tr>
<td align="left">db_datareader</td>
<td align="left">db_datareader 固定数据库角色的成员可以从所有用户表中读取所有数据。</td>
</tr>
<tr>
<td align="left">db_datawriter</td>
<td align="left">db_datawriter 固定数据库角色的成员可以在所有用户表中添加、删除或更改数据。</td>
</tr>
<tr>
<td align="left">db_ddladmin</td>
<td align="left">db_ddladmin 固定数据库角色的成员可以在数据库中运行任何数据定义语言(DDL)命令。</td>
</tr>
<tr>
<td align="left">db_denydatareader</td>
<td align="left">db_denydatareader 固定数据库角色的成员不能读取数据库内用户表中的任何数据。</td>
</tr>
<tr>
<td align="left">db_denydatawriter</td>
<td align="left">db_denydatawriter 固定数据库角色的成员不能添加、修改或删除数据库内用户表中的任何数据。</td>
</tr>
<tr>
<td align="left">db_owner</td>
<td align="left">db_owner 固定数据库角色的成员可以执行数据库的所有配置和维护活动，还可以删除数据库。</td>
</tr>
<tr>
<td align="left">db_securityadmin</td>
<td align="left">db_securityadmin 固定数据库角色的成员可以修改角色成员身份和管理权限。向此角色中添加主体可能会导致意外的权限升级。</td>
</tr>
<tr>
<td align="left">public</td>
<td align="left">授予 public 角色的权限由所有其他用户和角色继承，因为默认情况下，它们属于 public 角色。 仅为 public 角色授予您希望所有用户都具有的权限。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>配合GitHub的Git使用</title>
    <url>/post/f7b267f.html</url>
    <content><![CDATA[<p>一直以来我都觉得 GitHub 是一个对于程序员来说极为有助的一个平台。最近在学校老是在编程，我把代码都放在了 GitHub 上，Git 作为一个分布式版本控制软件，就成为了我的电脑和 GitHub 之间的桥梁。十分惭愧，我对 Git 和 GitHub 的使用还只会基本的操作，今天我就来讲一下这些基本操作。</p>
<span id="more"></span>

<h2 id="Git-简介"><a href="#Git-简介" class="headerlink" title="Git 简介"></a>Git 简介</h2><p>引用自维基百科-<a href="https://zh.wikipedia.org/wiki/Git">git 词条</a>：</p>
<blockquote>
<p>git（&#x2F;ɡɪt&#x2F;）是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于 2005 年以 GPL 发布。最初目的是为更好地管理 Linux 内核开发而设计。应注意的是，这与 GNU Interactive Tools（一个类似 Norton Commander 界面的文件管理器）有所不同。<br>git 最初的开发动力来自于 BitKeeper 和 Monotone。git 最初只是作为一个可以被其他前端（比如 Cogito 或 Stgit）包装的后端而开发的，但后来 git 内核已经成熟到可以独立地用作版本控制。很多著名的软件都使用 git 进行版本控制，其中包括 Linux 内核、X.Org 服务器和 OLPC 内核等项目的开发流程。</p>
</blockquote>
<h2 id="Git-下载地址"><a href="#Git-下载地址" class="headerlink" title="Git 下载地址"></a>Git 下载地址</h2><p><a href="https://git-scm.com/download">https://git-scm.com/download</a></p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol>
<li><p>既然我们的标题说了是要配合 GitHub 使用的，那么在 GitHub 上建一个库是有必要的。具体的建库过程在这里就不细说了，相信大家不会在这里被难住。</p>
</li>
<li><p>我们要通过 Git 和 GitHub 进行交互需要使用 ssh，我们需要在自己的电脑上生成 ssh-key 公钥，然后在 GitHub 上授权使用。</p>
<ol>
<li>在任意文件夹中，右键点击使用 Git Bash，弹出命令行窗口。</li>
<li>输入<code>ssh-keygen -t rsa -C &quot;你的GitHub账户邮箱&quot;</code>，回车。</li>
<li>接下来让你给密钥文件取名，可以直接回车跳过。</li>
<li>然后让你输入访问时的密码，直接回车跳过即可。</li>
<li>这样将会在当前文件夹生成文件或者<code>C:\Users\你的用户名\.ssh</code>路径下，如果在当前路径，请复制到后者。</li>
<li>打开生成的<code>id_rsa.pub</code>文件，里面就是你的公钥。</li>
<li>复制文件内容，打开 GitHub，点击<code>setting</code>。</li>
<li>在<code>Personal setting</code>中选择<code>SSH and GPG keys</code>菜单。</li>
<li>选择<code>New SSH keys</code>，添加 SSH 记录。Title 可以随便取，在 Key 框里将刚刚复制的文件内容复制进去。然后选择<code>Add SSH key</code>。</li>
<li>在刚刚的命令窗口中输入<code>ssh -T git@github.com</code>，中间有任何提醒，通过就好。等到窗口出现<code>Hi ***! You&#39;ve successfully authenticated...</code>字样，说明已经成功。</li>
</ol>
</li>
<li><p>接下来我们就要把我们创建的库复制到本地。</p>
<ol>
<li>打开到你的目标文件夹，右键点击使用 Git Bash。</li>
<li>输入<code>git clone git@github.com:ZvonimirSun/test.git</code>命令（<code>clone</code>后的库地址要换成你自己的）。</li>
<li>至此基本完成任务。</li>
</ol>
</li>
</ol>
<h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><p><img src="https://img.iszy.xyz/20190318220908.png"></p>
<h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Git 的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>

<h3 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>

<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>

<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>

<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><blockquote>
<p><a href="http://www.jianshu.com/p/3d33bcac54e7">基于 github 的 git 使用方法</a> &gt; <a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>道格拉斯—普克法</title>
    <url>/post/ef5e5855.html</url>
    <content><![CDATA[<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>道格拉斯-普克算法(Douglas–Peucker algorithm，亦称为拉默-道格拉斯-普克算法、迭代适应点算法、分裂与合并算法)是将曲线近似表示为一系列点，并减少点的数量的一种算法。它的优点是具有平移和旋转不变性，给定曲线与阈值后，抽样结果一定。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>首先，将一条曲线首末点连一条直线</li>
<li>求出其余各点到该直线的距离</li>
<li>选其最大者与规定的临界值相比较<ul>
<li>若大于临界值，则离该直线距离最大的点保留</li>
<li>否则将直线两端间各点全部舍去</li>
</ul>
</li>
</ul>
<p><img src="https://img.iszy.xyz/20190318212807.png"></p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol>
<li>根据道格拉斯一普克法，编写程序对经过兰勃特投影的中国版图数据进行抽稀处理 （不限语言）</li>
<li>屏幕绘图显示压缩前后的地图数据</li>
<li>数据压缩率为 50%</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Github 库地址:<a href="https://github.com/ZvonimirSun/DouglasPeucker">https://github.com/ZvonimirSun/DouglasPeucker</a></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 道格拉斯_普克法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">DouglasPeucker</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DouglasPeucker</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">struct</span> Point</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> x &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> y &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">bool</span> existance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 道格拉斯普拉格压缩算法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Compress</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> List&lt;Point[]&gt; lineList = <span class="keyword">new</span> List&lt;Point[]&gt;();</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">double</span> e;<span class="comment">// 误差限制</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 运行算法</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;filePath&quot;&gt;</span>文档路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;outPath&quot;&gt;</span>输出路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Compress</span>(<span class="params"><span class="built_in">string</span> filePath, <span class="built_in">string</span> outPath, <span class="built_in">double</span> e</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.e = e;</span><br><span class="line">                readFile(filePath);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; lineList.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    compressFile(<span class="number">1</span>, (<span class="built_in">int</span>)lineList[i][<span class="number">0</span>].x, i);</span><br><span class="line">                &#125;</span><br><span class="line">                writeFile(outPath);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 读取文档</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;P&quot;&gt;</span>文档所在路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">readFile</span>(<span class="params"><span class="built_in">string</span> P</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line">                    StreamReader sr = <span class="keyword">new</span> StreamReader(P);</span><br><span class="line">                    Point[] pointList = <span class="keyword">new</span> Point[<span class="number">1000</span>];</span><br><span class="line">                    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!sr.EndOfStream)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 按行读取文件</span></span><br><span class="line">                        <span class="built_in">string</span> line = sr.ReadLine();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 判断是否为线的开始</span></span><br><span class="line">                        <span class="built_in">int</span> temp;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">int</span>.TryParse(line, <span class="keyword">out</span> temp))</span><br><span class="line">                        &#123;</span><br><span class="line">                            pointList = <span class="keyword">new</span> Point[<span class="number">1000</span>];</span><br><span class="line">                            count = <span class="number">0</span>;</span><br><span class="line">                            flag = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 判断结尾</span></span><br><span class="line">                        <span class="keyword">if</span> (line == <span class="string">&quot;END&quot;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 线的结束</span></span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                pointList[<span class="number">0</span>].x = count;</span><br><span class="line"></span><br><span class="line">                                lineList.Add(pointList);</span><br><span class="line">                                flag = <span class="number">0</span>;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 如果不是开头或结尾，则读取点</span></span><br><span class="line">                        <span class="built_in">string</span>[] p = line.Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                        count++;</span><br><span class="line">                        pointList[count].x = <span class="built_in">double</span>.Parse(p[<span class="number">0</span>]);</span><br><span class="line">                        pointList[count].y = <span class="built_in">double</span>.Parse(p[<span class="number">1</span>]);</span><br><span class="line">                        pointList[count].existance = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 压缩算法</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FirstPoint&quot;&gt;</span>线的开始节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;LastPoint&quot;&gt;</span>线的结束节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span>线的索引<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">compressFile</span>(<span class="params"><span class="built_in">int</span> FirstPoint, <span class="built_in">int</span> LastPoint, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">double</span> max = <span class="number">0</span>;<span class="comment">// 记录最大距离</span></span><br><span class="line">                <span class="built_in">int</span> FarthestPoint = <span class="number">0</span>;<span class="comment">// 记录最远节点</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果只剩两个节点则退出</span></span><br><span class="line">                <span class="keyword">if</span> ((LastPoint - FirstPoint) &gt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 判断是否为环路</span></span><br><span class="line">                    <span class="keyword">if</span> (lineList[index][FirstPoint].x == lineList[index][LastPoint].x &amp;&amp; lineList[index][FirstPoint].y == lineList[index][LastPoint].y)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> mid = (<span class="built_in">int</span>)((FirstPoint + LastPoint) / <span class="number">2</span>);<span class="comment">// 拆分环路</span></span><br><span class="line">                        compressFile(FirstPoint, mid, index);</span><br><span class="line">                        compressFile(mid, LastPoint, index);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 寻找最大距离</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = FirstPoint + <span class="number">1</span>; i &lt; LastPoint; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">double</span> temp = pointToLineDistance(lineList[index][FirstPoint], lineList[index][LastPoint], lineList[index][i]);</span><br><span class="line">                        <span class="keyword">if</span> (temp &gt; max)</span><br><span class="line">                        &#123;</span><br><span class="line">                            max = temp;</span><br><span class="line">                            FarthestPoint = i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 根据界限判断是否压缩</span></span><br><span class="line">                    <span class="keyword">if</span> (max &lt;= e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> i = FirstPoint + <span class="number">1</span>; i &lt; LastPoint; i++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            lineList[index][i].existance = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        compressFile(FirstPoint, FarthestPoint, index);</span><br><span class="line">                        compressFile(FarthestPoint, LastPoint, index);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 输出压缩后的文件</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;P&quot;&gt;</span>输出路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">writeFile</span>(<span class="params"><span class="built_in">string</span> P</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    StreamWriter sw = <span class="keyword">new</span> StreamWriter(File.Open(P, FileMode.Create));</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; lineList.Count; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        sw.WriteLine(i + <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= lineList[i][<span class="number">0</span>].x; j++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (lineList[i][j].existance)</span><br><span class="line">                            &#123;</span><br><span class="line">                                sw.Write(<span class="string">&quot;&#123;0&#125;,&#123;1&#125;&quot;</span>, lineList[i][j].x, lineList[i][j].y);</span><br><span class="line">                                sw.WriteLine();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        sw.WriteLine(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sw.WriteLine(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">                    sw.Close();</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 计算点到线的距离</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;A&quot;&gt;</span>直线的一个端点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;B&quot;&gt;</span>直线的另一个端点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;P&quot;&gt;</span>需要计算距离的点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回距离<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">            <span class="function"><span class="built_in">double</span> <span class="title">pointToLineDistance</span>(<span class="params">Point A, Point B, Point P</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">double</span> normalLength = Math.Sqrt((B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y));</span><br><span class="line">                <span class="keyword">return</span> Math.Abs((P.x - A.x) * (B.y - A.y) - (P.y - A.y) * (B.x - A.x)) / normalLength;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 打开文件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnOpen_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (OpenFileDialog OpenFD = <span class="keyword">new</span> OpenFileDialog())     <span class="comment">//实例化一个 OpenFileDialog 的对象</span></span><br><span class="line">            &#123;</span><br><span class="line">                OpenFD.Filter = <span class="string">&quot;Generate Files (*.gen)|*.gen|&quot;</span> + <span class="string">&quot;All files (*.*)|*.*&quot;</span>;</span><br><span class="line">                <span class="comment">//定义打开的默认文件夹位置</span></span><br><span class="line">                OpenFD.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);</span><br><span class="line">                <span class="keyword">if</span> (OpenFD.ShowDialog() == DialogResult.OK)                            <span class="comment">//显示打开本地文件的窗体</span></span><br><span class="line">                &#123;</span><br><span class="line">                    txtFile.Text = OpenFD.FileName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 压缩文件并输出</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCompress_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (txtFile.Text != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (txtE.Text != <span class="string">&quot;&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">double</span> temp;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">double</span>.TryParse(txtE.Text, <span class="keyword">out</span> temp))</span><br><span class="line">                    &#123;</span><br><span class="line">                        SaveFileDialog sfd = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">                        sfd.Filter = <span class="string">&quot;Generate Files (*.gen)|*.gen|&quot;</span> + <span class="string">&quot;All files (*.*)|*.*&quot;</span>;</span><br><span class="line">                        sfd.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);</span><br><span class="line">                        <span class="keyword">if</span> (sfd.ShowDialog() == DialogResult.OK)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Compress c = <span class="keyword">new</span> Compress(txtFile.Text, sfd.FileName, temp);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        MessageBox.Show(<span class="string">&quot;请输入数字！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;请输入数字！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;请选择文件！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>代码如果存在问题，请一定帮我指正!大神，谢谢了!</strong></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>GIS</tag>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle SQLPLUS命令</title>
    <url>/post/3c8387b6.html</url>
    <content><![CDATA[<p>今天学习了 Oracle SQL*PLUS 的语句，就在这里总结一下。</p>
<span id="more"></span>

<h2 id="官方的-HELP-INDEX-截图"><a href="#官方的-HELP-INDEX-截图" class="headerlink" title="官方的 HELP INDEX 截图"></a>官方的 HELP INDEX 截图</h2><p><img src="https://img.iszy.xyz/20190318220212.png"></p>
<h2 id="语句总结"><a href="#语句总结" class="headerlink" title="语句总结"></a>语句总结</h2><table>
<thead>
<tr>
<th align="center">SQL 语句</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@</td>
<td align="center">运行指定脚本</td>
</tr>
<tr>
<td align="center">@@</td>
<td align="center">同@，运行 nest script 时使用</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">执行最近脚本</td>
</tr>
<tr>
<td align="center">Accept</td>
<td align="center">接受用户输入行存储到替代变量中</td>
</tr>
<tr>
<td align="center">Append</td>
<td align="center">向当前 SQL 行追加文本</td>
</tr>
<tr>
<td align="center">Archive log</td>
<td align="center">查看和管理归档信息</td>
</tr>
<tr>
<td align="center">attribute</td>
<td align="center">设置 object 类型 column 属性</td>
</tr>
<tr>
<td align="center">break</td>
<td align="center">分开重复列</td>
</tr>
<tr>
<td align="center">Btitle</td>
<td align="center">设置 report 尾</td>
</tr>
<tr>
<td align="center">change</td>
<td align="center">修改错误代码</td>
</tr>
<tr>
<td align="center">clear</td>
<td align="center">清楚</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">命令集</td>
</tr>
<tr>
<td align="center">Compute</td>
<td align="center">运算查询结果集</td>
</tr>
<tr>
<td align="center">Connect</td>
<td align="center">会话中切换连接命令</td>
</tr>
<tr>
<td align="center">Copy</td>
<td align="center">复制</td>
</tr>
<tr>
<td align="center">Define</td>
<td align="center">定义变量</td>
</tr>
<tr>
<td align="center">Del</td>
<td align="center">删除 SQL BUFFER 指定行</td>
</tr>
<tr>
<td align="center">Describe</td>
<td align="center">描述表、视图的列以及函数、程序的说明</td>
</tr>
<tr>
<td align="center">Disconnect</td>
<td align="center">断开连接</td>
</tr>
<tr>
<td align="center">Edit</td>
<td align="center">创建或编辑 sql 脚本</td>
</tr>
<tr>
<td align="center">Get</td>
<td align="center">将 sql 脚本从文件 load into sql buffer</td>
</tr>
<tr>
<td align="center">Help</td>
<td align="center">帮助</td>
</tr>
<tr>
<td align="center">Host</td>
<td align="center">sql 会话模式利用 host 命令调用 cmd 命令</td>
</tr>
<tr>
<td align="center">Input</td>
<td align="center">追加新行 enter a new line</td>
</tr>
<tr>
<td align="center">List</td>
<td align="center">列出 SQL BUFFER 中 sql 语句</td>
</tr>
<tr>
<td align="center">Password</td>
<td align="center">修改 current user 密码</td>
</tr>
<tr>
<td align="center">Pause</td>
<td align="center">暂停</td>
</tr>
<tr>
<td align="center">Print</td>
<td align="center">打印变量</td>
</tr>
<tr>
<td align="center">Prompt</td>
<td align="center">向 screen 发送消息</td>
</tr>
<tr>
<td align="center">Quit</td>
<td align="center">用法同 exit</td>
</tr>
<tr>
<td align="center">Recovery</td>
<td align="center">恢复数据库等操作</td>
</tr>
<tr>
<td align="center">Remark</td>
<td align="center">单行注释</td>
</tr>
<tr>
<td align="center">Repfooter</td>
<td align="center">放置 report 头（见 ttitle）</td>
</tr>
<tr>
<td align="center">Repheader</td>
<td align="center">放置 report 角</td>
</tr>
<tr>
<td align="center">Reserved words (SQL)</td>
<td align="center">SQL 保留字</td>
</tr>
<tr>
<td align="center">Reserved words (PL&#x2F;SQL)</td>
<td align="center">PL&#x2F;SQL 保留字</td>
</tr>
<tr>
<td align="center">Run</td>
<td align="center">列出 sql buffer 内容同时执行该内容</td>
</tr>
<tr>
<td align="center">Save</td>
<td align="center">保存缓冲区内容</td>
</tr>
<tr>
<td align="center">Set</td>
<td align="center">设置</td>
</tr>
<tr>
<td align="center">Show</td>
<td align="center">显示变量或参数值</td>
</tr>
<tr>
<td align="center">Shutdown</td>
<td align="center">关闭数据库（DBA 用户执行）</td>
</tr>
<tr>
<td align="center">Spool</td>
<td align="center">将屏幕显示保存到文件</td>
</tr>
<tr>
<td align="center">Sqlplus</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Start</td>
<td align="center">恢复 set 变量值</td>
</tr>
<tr>
<td align="center">Startup</td>
<td align="center">启动数据库（DBA 用户执行）</td>
</tr>
<tr>
<td align="center">Store</td>
<td align="center">存储 set 变量值</td>
</tr>
<tr>
<td align="center">Timing</td>
<td align="center">计时器</td>
</tr>
<tr>
<td align="center">Ttitle</td>
<td align="center">设置 report 抬头</td>
</tr>
<tr>
<td align="center">Undefined</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Variable</td>
<td align="center">声明绑定变量供 PLSQL 块引用</td>
</tr>
<tr>
<td align="center">Whenever oserror</td>
<td align="center">执行命令中遇到系统异常</td>
</tr>
<tr>
<td align="center">Whenerror sqlerror</td>
<td align="center">执行命令中遇到 SQL 异常</td>
</tr>
<tr>
<td align="center">Xquery</td>
<td align="center">运行 xquery 语句</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳工作序列算法</title>
    <url>/post/a596ff0f.html</url>
    <content><![CDATA[<p>有 N 件工作，输入每件工作的费时、最后完成的期限及工作的价值，试求可能的一个完成工作序列，使价值和最大。</p>
<span id="more"></span>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol>
<li>按照最后期限越短越先，其次价值越高越先，再次费时越短越先的标准对所有任务进行排序。</li>
<li>将综合排序最高的加入背包</li>
<li>计算是否超出期限</li>
<li>重复前面的步骤，知道所有任务完成</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Github 库地址：<a href="https://github.com/ZvonimirSun/JobSequenceProblem">https://github.com/ZvonimirSun/JobSequenceProblem</a></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program to find the maximum profit job sequence from a given array</span></span><br><span class="line"><span class="comment">// of jobs with deadlines and profits</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 最佳工作序列</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//任务结构</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">struct</span> Job</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> time &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> ddl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> profit &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Work</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//选出价值较大的</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">compare</span>(<span class="params">Job a, Job b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (a.profit &gt; b.profit);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//选出较小值</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">min</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &lt;= b)</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> b;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//选出较大值</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">max</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &gt;= b)</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> b;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//冒泡排序算法</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Sort</span>(<span class="params">Job[] arr</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.Length - <span class="number">1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr.Length - i - <span class="number">1</span>; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (compare(arr[j + <span class="number">1</span>], arr[j]))</span><br><span class="line">                        &#123;</span><br><span class="line">                            Job tem = arr[j];</span><br><span class="line">                            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                            arr[j + <span class="number">1</span>] = tem;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算最佳工作序列</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobScheduling</span>(<span class="params">Job[] arr, <span class="built_in">int</span> n</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//对所有工作进行排序</span></span><br><span class="line">                Sort(arr);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//统计最大期限</span></span><br><span class="line">                <span class="built_in">int</span> T = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    T = max(T, arr[i].ddl);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[n]; <span class="comment">//存储队列</span></span><br><span class="line">                <span class="built_in">int</span>[] slot = <span class="keyword">new</span> <span class="built_in">int</span>[T];  <span class="comment">//监控时间间隙</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> t = <span class="number">0</span>;<span class="comment">//工作序列耗时</span></span><br><span class="line">                <span class="built_in">int</span> worth = <span class="number">0</span>;<span class="comment">//工作序列总价值</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//初始化时间数组为-1</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; T; i++)</span><br><span class="line">                    slot[i] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算最佳序列</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//查找期限中是否有时间空位</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = arr[i].ddl - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//如果有空位，判断是否有足够费时的时长空隙</span></span><br><span class="line">                        <span class="keyword">if</span> (slot[j] == <span class="number">-1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//标记</span></span><br><span class="line">                            <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//如果空位少于费时，标记为1，并退出</span></span><br><span class="line">                            <span class="keyword">for</span> (<span class="built_in">int</span> k = j; k &gt;= j - arr[i].time + <span class="number">1</span>; k--)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span> (j - arr[i].time + <span class="number">1</span> &lt; <span class="number">0</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    flag = <span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (slot[k] != <span class="number">-1</span>) flag = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//当有足够时间，将时间数组命名为任务引导号</span></span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="built_in">int</span> k = j; k &gt;= j - arr[i].time + <span class="number">1</span>; k--)</span><br><span class="line">                                    slot[k] = i;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//录入结果</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    result[i] = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n &amp;&amp; j &lt; T; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (slot[j] != <span class="number">-1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            result[i] = arr[slot[j]].id;</span><br><span class="line">                            t += arr[slot[j]].time;</span><br><span class="line">                            worth += arr[slot[j]].profit;</span><br><span class="line">                            i++;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (slot[j] == <span class="number">-1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (slot[j] != slot[j - <span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        result[i] = slot[j];</span><br><span class="line">                        t += arr[slot[j]].time;</span><br><span class="line">                        worth += arr[slot[j]].profit;</span><br><span class="line">                        i++;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//打印结果</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result[i] != <span class="number">-1</span>)</span><br><span class="line">                        Console.Write(<span class="string">&quot;&#123;0&#125;&quot;</span>, arr[result[i]].id);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//打印时间序列</span></span><br><span class="line">                Console.Write(<span class="string">&quot;时间序列:&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;T;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (slot[i] == <span class="number">-1</span>)</span><br><span class="line">                        Console.Write(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        Console.Write(<span class="string">&quot;&#123;0&#125;&quot;</span>, arr[slot[i]].id);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine();</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;总耗时为:&#123;0&#125;&quot;</span>, t);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;总价值为:&#123;0&#125;&quot;</span>, worth);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Work work = <span class="keyword">new</span> Work();</span><br><span class="line">            Console.Write(<span class="string">&quot;请输入任务个数:&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> n = <span class="built_in">int</span>.Parse(Console.ReadLine());<span class="comment">//记录信息个数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//输入任务信息</span></span><br><span class="line">            Job[] arr = <span class="keyword">new</span> Job[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i].id = i + <span class="number">1</span>;</span><br><span class="line">                Console.Write(<span class="string">&quot;请输入任务&#123;0&#125;的费时:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                arr[i].time = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.Write(<span class="string">&quot;请输入任务&#123;0&#125;的最后期限:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                arr[i].ddl = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.Write(<span class="string">&quot;请输入任务&#123;0&#125;的价值:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                arr[i].profit = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打印任务表</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ID\t费时\t期限\t价值&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0&#125;\t&#123;1&#125;\t&#123;2&#125;\t&#123;3&#125;&quot;</span>, arr[i].id, arr[i].time, arr[i].ddl, arr[i].profit);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;下面即为最佳工作序列&quot;</span>);</span><br><span class="line">            work.printJobScheduling(arr, n);</span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="操作示意"><a href="#操作示意" class="headerlink" title="操作示意"></a>操作示意</h2><p><img src="https://img.iszy.xyz/20190318213542.png"></p>
<p><strong>代码如果存在问题，请一定帮我指正!大神，谢谢了!</strong></p>
<hr>
<p><strong>参考链接:</strong></p>
<ol>
<li><a href="http://www.geeksforgeeks.org/job-sequencing-problem-set-1-greedy-algorithm/">Job Sequencing Problem - Set 1 (Greedy Algorithm)</a></li>
<li><a href="http://www.geeksforgeeks.org/job-sequencing-using-disjoint-set-union/">Job Sequencing Problem - Set 2 (Using Disjoint Set)</a></li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>GIS</tag>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>跳马算法</title>
    <url>/post/83827f3c.html</url>
    <content><![CDATA[<p>有一 m * n 的棋盘(即棋盘由 m 行和 n 列)，一马放在棋盘中任意位置，马按中国象棋跳法，从初始位置起跳，跳至边界后返回，求所有能返回初始位置的周游路线。</p>
<span id="more"></span>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol>
<li>遍历棋盘</li>
<li>记录路径</li>
<li>到达目标后，打印路径</li>
<li>进行回溯，继续寻找路径</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Github 库地址：<a href="https://github.com/ZvonimirSun/HorseJump">https://github.com/ZvonimirSun/HorseJump</a></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 跳马</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Horse</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//记录路径数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> num &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> x0, y0, cx, cy;</span><br><span class="line">        <span class="built_in">int</span>[,] dir = &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">2</span>, <span class="number">1</span> &#125;, &#123; <span class="number">2</span>, <span class="number">-1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">-2</span> &#125;, &#123; <span class="number">-1</span>, <span class="number">-2</span> &#125;, &#123; <span class="number">-2</span>, <span class="number">-1</span> &#125;, &#123; <span class="number">-2</span>, <span class="number">1</span> &#125;, &#123; <span class="number">-1</span>, <span class="number">2</span> &#125; &#125;;           <span class="comment">//方位矩阵</span></span><br><span class="line">        <span class="built_in">int</span>[,] path = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">100</span>, <span class="number">2</span>];         <span class="comment">//记录路径</span></span><br><span class="line">        <span class="built_in">int</span>[,] result = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">20</span>, <span class="number">20</span>];          <span class="comment">//记录结果</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过构造函数获得初始位置，棋盘大小等信息，</span></span><br><span class="line">        <span class="comment">// 并运行计算</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Horse</span>(<span class="params"><span class="built_in">int</span> x0, <span class="built_in">int</span> y0, <span class="built_in">int</span> cx, <span class="built_in">int</span> cy</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            path[<span class="number">0</span>, <span class="number">0</span>] = <span class="keyword">this</span>.x0 = x0;</span><br><span class="line">            path[<span class="number">0</span>, <span class="number">1</span>] = <span class="keyword">this</span>.y0 = y0;</span><br><span class="line">            <span class="keyword">this</span>.cx = cx;</span><br><span class="line">            <span class="keyword">this</span>.cy = cy;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            Move(x0, y0, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算路径</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Move</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> m, <span class="built_in">int</span> step</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x1, y1;<span class="comment">//记录棋子当前位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = m; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> flag = <span class="number">0</span>;<span class="comment">//用作标记</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//朝某一方向前进一步</span></span><br><span class="line">                x1 = x + dir[i, <span class="number">0</span>];</span><br><span class="line">                y1 = y + dir[i, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果超出棋盘，回退</span></span><br><span class="line">                <span class="keyword">if</span> (x1 &lt; <span class="number">1</span> || x1 &gt; cx || y1 &lt; <span class="number">1</span> || y1 &gt; cy)</span><br><span class="line">                &#123;</span><br><span class="line">                    x1 -= dir[i, <span class="number">0</span>];</span><br><span class="line">                    y1 -= dir[i, <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断是否走过，走过回退</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= step; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x1 == path[j, <span class="number">0</span>] &amp;&amp; y1 == path[j, <span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    x1 -= dir[i, <span class="number">0</span>];</span><br><span class="line">                    y1 -= dir[i, <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//符合要求，计入路径</span></span><br><span class="line">                path[step, <span class="number">0</span>] = x1;</span><br><span class="line">                path[step, <span class="number">1</span>] = y1;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断是否回到原点</span></span><br><span class="line">                <span class="keyword">if</span> (x1 == x0 &amp;&amp; y1 == y0)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//如果回到原点，判断是否已经到达过棋盘边缘，初始不算</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= step; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (path[j, <span class="number">0</span>] == <span class="number">1</span> || path[j, <span class="number">0</span>] == cx || path[j, <span class="number">1</span>] == <span class="number">1</span> || path[j, <span class="number">1</span>] == cy)</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//如果到过棋盘边缘，说明路径符合要求，存入路径数组</span></span><br><span class="line">                    <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        num++;<span class="comment">//路径数加一</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//打印路径</span></span><br><span class="line">                        Console.Write(<span class="string">&quot;方案&#123;0&#125;：&quot;</span>, num);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt;= step; j++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Console.Write(<span class="string">&quot;(&#123;0&#125;,&#123;1&#125;)&quot;</span>, path[j, <span class="number">0</span>], path[j, <span class="number">1</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">                        path[step, <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                        path[step, <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//回退并继续寻找其他方案</span></span><br><span class="line">                        step--;</span><br><span class="line">                        i++;</span><br><span class="line"></span><br><span class="line">                        Move(path[step,<span class="number">0</span>], path[step,<span class="number">1</span>], i, step + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//未到过边缘，不符合要求，继续寻找路径</span></span><br><span class="line">                    Move(x1, y1, <span class="number">1</span>, step + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x0, y0, cx, cy;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取数据</span></span><br><span class="line">            Console.Write(<span class="string">&quot;请输入棋盘宽度(3≤cx≤20)：&quot;</span>);</span><br><span class="line">            cx = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            Console.Write(<span class="string">&quot;请输入棋盘长度(3≤cy≤20)：&quot;</span>);</span><br><span class="line">            cy = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            Console.Write(<span class="string">&quot;请输入起始位置(1≤x0≤cx)：&quot;</span>);</span><br><span class="line">            x0 = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            Console.Write(<span class="string">&quot;请输入起始位置(1≤y0≤cy)：&quot;</span>);</span><br><span class="line">            y0 = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//进行计算并打印</span></span><br><span class="line">            Horse horse = <span class="keyword">new</span> Horse(x0, y0, cx, cy);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;总方案数：&#123;0&#125;&quot;</span>, horse.num);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="操作示意"><a href="#操作示意" class="headerlink" title="操作示意"></a>操作示意</h2><p><img src="https://img.iszy.xyz/20190318213447.png"></p>
<p><strong>代码如果存在问题，请一定帮我指正!大神，谢谢了!</strong></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>GIS</tag>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>使用remarkbox评论插件</title>
    <url>/post/ea84b7a1.html</url>
    <content><![CDATA[<p>刚刚做博客，感觉还是需要个评论区的，虽然我也知道不会有谁来评论啦，估计也就我自己评论一下了。刚刚看到 Remarkbox，十分简洁，感觉很适合我。现已更换成<a href="https://www.iszy.cc/2018/04/01/Valine/">Valine 评论系统</a>，推荐一下。</p>
<span id="more"></span>

<h2 id="Remarkbox"><a href="#Remarkbox" class="headerlink" title="Remarkbox"></a>Remarkbox</h2><p>这是一个个人提供的评论系统，界面相当的简洁，很符合我的审美啊。大家可以在<a href="https://www.remarkbox.com/">官方网站</a>上进行试用。最为惊艳的地方在于，这个评论插件居然支持 markdown 语法，你可以用 markdown 语句发表格式工整的评论。在官网的试用评论区，还有人发代码的，真是因缺思厅。</p>
<p>官方网站可能访问速度不是很快，评论区加载的速度但是还不错。不知道这样好用的一个评论系统能够坚持多久，只能心怀美好的祝福了。</p>
<p>评论的具体效果，可以看本博客的评论区，感兴趣的可以去官网看看。</p>
<h2 id="其他评论插件"><a href="#其他评论插件" class="headerlink" title="其他评论插件"></a>其他评论插件</h2><p>我看到国内外有好几家知名的评论插件，我在此列举一下。</p>
<ol>
<li>多说</li>
<li>网易云跟帖</li>
<li>畅言</li>
<li>友言</li>
<li>Disqus</li>
<li>其他</li>
</ol>
<p>要说国内知名的就这些吧，国外的我就列一个 Disqus 了。</p>
<h3 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h3><p>首先是 _多说_。</p>
<p><em>多说</em> 是我第一次了解到的一个评论插件，在知乎大神的口中算是一个不错的选择。</p>
<p><em>多说</em> 可以使用社交账号登录，进行评论， 同时可以选择转发到社交平台，进行回复、标记喜欢、转发操作。跨平台的评论聚合效应，有利于有效提高回访流量。</p>
<p>嘛，我本来是想用这个插件的，支持 https ，好像还可以游客评论。可惜，才刚了解到这个插件就发现，已经在 2017 年 6 月 1 日正式关停服务了，什么鬼嘛。</p>
<h3 id="网易云跟帖"><a href="#网易云跟帖" class="headerlink" title="网易云跟帖"></a>网易云跟帖</h3><p>然后就是 <em>网易云跟帖</em> 了。</p>
<p>我一直在使用 _网易云音乐_，也玩网易代理的 _暴雪游戏_，对这个公司还是很有好感的。但是你评论就评论吧，非把人家网友的位置标示出来干什么嘛。当然，如果没有其他可用，这个网易云跟帖服务也不是不能一用。</p>
<p>可惜啊，<em>网易云跟帖</em> 也继 <em>多说</em> 关停之后，于 2017 年 8 月 1 日停止。</p>
<h3 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h3><p>其次，是 _畅言_。</p>
<p>2013 年 12 月 10 日，搜狐旗下社会化评论系统与聚合平台–<em>畅言</em> 宣布，通过 SDK 将社会化评论服务延伸至 APP 内，率先推出评论 SDK 和互动 SDK ，正式开启社会化评论系统进军移动端的进程。</p>
<p>在 <em>多说</em> 和 <em>网易云跟帖</em> 相继关停后，<em>畅言</em> 在国内快速铺开场面，在许多知名的大型网站接入后，<em>畅言</em> 在国内已经占据了霸主地位。</p>
<p>然而，我并不是多么喜欢这个插件。</p>
<p>在那些新闻网站上，我们经常能够看到 <em>畅言</em> 评论。<em>畅言</em> 的盖章功能总让我觉得评论区十分混乱，不够整洁。大概那些新闻网站就是需要这种热闹的感觉，可以营造出一种激烈讨论的氛围。但是这些激烈讨论的情况在我自己这个几乎不会有多少流量的小型个人博客来说，是不存在的。这样，畅言的评论插件就显得过于臃肿，会拖慢网站的速度。</p>
<p>除此之外，我也去注册过 _畅言_，想要试用一下来着，顺便看看博客插入评论插件是个什么样子。哇！在注册阶段我就被卡住了。什么？你居然要求备案号？！没有备案还只能用 15 天。嘛！我是没有动力为了个评论去备案我的网站。就为这个，我也不会使用 <em>畅言</em> 了。</p>
<h3 id="友言"><a href="#友言" class="headerlink" title="友言"></a>友言</h3><p>下面介绍一下 _友言_。</p>
<p>这个系统应该也有些名气了吧。<em>友言</em> 是国内最专业的第三方实时社会化评论系统，“完全社交化”可将评论一键同步到各大微博与社区（目前支持 10 个社交媒体），同时将评论的回复与跟帖同步至使用的网站上，让网站变得更具有活力和社交性，从而为网站带来更多的回访和流量，是一个简单而强大的社会化评论及聚合平台。</p>
<p>官方宣称是最好用的社会化评论系统，部署插件或添加两行代码即可使用。确实，代码的确十分的简洁，像我这样的懒人看着这样简洁的代码是相当的舒服呀，这么短的代码还是 pc-移动端 自适应的。我当时就心动了，立刻把这个系统插入到我的博客里。</p>
<p>emmm，这个使用效果啊，耐人寻味。不知道是我网络的问题还是什么情况，我在 pc 端访问我的博客，死活加载不出来，手机端倒是加载出来了。我在网上查这个问题，居然没搜索到，难道只有我遇到了这个问题？(对的只有你！只有你！)</p>
<p>诶，不管怎么样，还是不能用啊？哭出声，好不容易遇到个喜欢的还用不了。哦对了，<em>友言</em> 只支持 http，在 https 网页中加入 <em>友言</em> 会报错。当然，我的网站是挂在 github pages 上的，一般情况不用 https，就没什么影响了。</p>
<h3 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h3><p>再来看看这位大佬 _Disqus_。</p>
<p><em>Disqus</em> 那是很厉害啊。当前有 80 万家第三方网站在使用 <em>Disqus</em> 提供的第三方评论系统，其评论系统每月的独立用户访问量已接近 5 亿，这一数字较 2010 年增长了 500 %。包括 CNN、 NBC、 Fox News、 Engadget、 Time 等知名网站均使用了 <em>Disqus</em> 提供的社会化评论系统。WordPress、Blogger、Tumblr 等第三方博客平台均提供了 <em>Disqus</em> 第三方评论插件。</p>
<p>对我来说，这个插件默认样式不够简洁，虽说通过设置可以显示的更为简洁，但是总体不太符合我的审美。</p>
<p><del>最关键的是，这个插件被伟大的中国局域网挡在了墙外。</del>我是日常翻墙，几乎不受影响，但是不能要求读者也这样啊。也就是说，使用 <em>Disqus</em> 的话，我的评论区大概会一直处于加载不出来的状态，很无奈啊，只能弃用了。</p>
<h3 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h3><p>emmm，我知道国外还有一些其他的评论系统可用，我就不一一评述了。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>评论系统</tag>
      </tags>
  </entry>
  <entry>
    <title>校招面试【京东、顺丰科技、招银网络科技、去哪儿网】</title>
    <url>/post/f01c8ec5.html</url>
    <content><![CDATA[<ul>
<li>2017校招过的太惨了，还一度把原因怪罪在实习上，认为自己实习了4个月非Java研发的东西导致自己对于Java没有进行更加深入的学习。其实呢，还是应该怪自己不努力，怪不得其他。*<br>从三星离职之后就开始找一些公众号内推，我是来自非985、211院校的本科生，学的还是自动化专业，偏硬件，实习内容还不是Java开发之类的东西，不知道是由于这些公众号的原因（恶意吸引粉丝）还是自己的简历确实有问题，内推一直不顺利。烦得很。<br>之后又从9月开始海投Java软件开发岗，各种在线笔试。博主的基础（计算机网络操作系统等）本身就不强，C&#x2F;C++&#x2F;Java&#x2F;PHP等还有HTML&#x2F;CSS&#x2F;JS&#x2F;jQuery这些乱七八糟都学，算法和数据结构也学得不是很精，应付不来笔试编程题，感觉面试过的公司好少，妈的工作要找到十月了。</li>
</ul>
<span id="more"></span>


<p>** 首先说下招银电面：** 9月23号晚上八点正在理发染发呢电话就来了，都不预约一下。<br>1、在Java中进行数据库连接并操作数据的步骤？最后需要进行什么操作？<br>2、项目中使用jquery，那么on、bind、live、delegate这几个函数有什么区别？<br>3、一个http请求所包含的数据格式是什么？<br>4、一次http请求的详细处理过程？<br>5、一次struts处理请求从开始到看到页面数据之间都发生了什么，整个详细过程？<br>6、项目中都用到了什么框架？（spring+struts+mybatis）<br>7、在自己的项目中有没有用到并发？如果让你现在考虑给你的项目中考虑并发你会怎么做？你要控制（进行同步）的数据源是哪些？<br><em>还有几个吧，想不起来了，应该比较简单就没有印象。电面后预约28号下午再面试。</em></p>
<hr>
<p><strong>招银现场面</strong>&#x3D;&#x3D;&#x3D;该来的就这样来了<br><em>9月28号下午，不知道哪里来的自信感觉自己能够在一个半小时之内从长安赶到永宁门，坐地铁还把安远门当成了永宁门，到了安远门叫个优步，打电话让司机快一点，妈的竟然给我取消了，害我最后坐公交去，迟到了半个小时。心态爆炸！！！╮(╯▽╰)╭</em><br>1、去了在房间里等着，过会儿从酒店房间出来一个，叫我进去面试。先问我要了成绩单和一些证书，感觉招银对于成绩和证书很看重。面试官是三个人，3V1，很紧张有木有。中间坐着老大，然后一个问技术的，一个HR。<br>2、自我介绍<br>3、介绍一下自己的项目<br>4、项目中是使用servlet编写的后台代码，为什么不用开源框架？<br>5、如果要给项目中添加日志，该如何做？<br>6、一个struts请求从输入URL到显示在页面上都经过了哪些过程？<br>7、中间老大看我写着struts1，就问为什么使用struts1而不是struts2，有研究过两者的区别吗？<br>8、给一个string，问如何不使用任何库函数也不转化为数组，如何逆序？<br>就这么多问题，心态爆炸！怀疑人生！阿弥陀佛！</p>
<hr>
<p>** 京东一面：** 9月24日一早6点就爬起来了，昨晚一晚上都没睡好。做梦都在想着一些多线程常考的东西，果然第二天就问了。<br>1、了解哪些常用的集合（set、list、map）？说说他们各自的特点（ArrayList和LinkedList等）？<br>2、HashMap、HashTable的区别？HashMap扩容为什么是2倍？如何实现的？<br>3、说一说线程调度机制？对线程池有何理解？哪里会用到线程池？好处是？<br>4、JVM中如果有一个线程挂起了，用什么工具去查找这个线程？<br>5、Java在什么时候会内存溢出？持久代内存溢出是什么情况？<br>6、动态代理的实现？（从动态代理答到了springAOP）<br>7、装饰模式了解吗？它的特点是什么？<br>8、I&#x2F;O库中都用到了什么设计模式？<br>9、struts的一次请求是如何处理的？<br>10、网络编程？socket？<br>11、数据库索引了解吗？一个表中什么情况适合建立索引？如何去建立数据库索引？<br>12、快速排序的时间复杂度、原理？<br>13、java多态的实现原理？动态绑定底层虚拟机是如何实现的？<br>14、forward和redirect的区别？<br><em>同样。。。有很多问题没想起来，一面半个多小时，后天二面。。</em></p>
<hr>
<p>** 京东二面： ** 感觉一面回答的不好，全程面试官问什么我答什么，一点互动都没有，狠狠狠紧张！二面抱着无所谓的心态去的，倒还没有一面紧张。<br>1、了解那些算法和设计模式，说说你都用他们在什么地方？（贪心、回溯、分治、动态规划  ||  单例模式、工厂模式、动态代理、装饰模式、适配器模式等，说了说单例工厂动态代理等，再说到JDK动态代理和CGLIB代理的区别，一顿乱侃）<br>2、你的项目中那些都用到了多服务器？分布式了解吗？还问到了跨域请求。在实习的时候开发的网站也是单机吗？（从这儿开始问分布式集群服务器，高并发，这方面没怎么深入学习哎）<br>3、设计一个抢购商品的系统需要考虑到那些问题？<br>4、对于线程池有什么理解？<br>5、消息队列？<br>6、知道红黑树吗？平衡树？有什么区别？<br><em>算了不写了，想不起来了，估计二面跪了。。。</em></p>
<hr>
<p>** 顺丰技术面： ** 9月24日下午5点，就是京东一面的下午。。。（除了技术面就是HR）<br>1、简单的自我介绍一下。。。<br>2、介绍自己认为最能体现自己能力的项目，跟着项目引出很多题目，问了个透彻。。。<br>3、觉得自己还有那些方面的能力没有体现出来，可以说一说？（在这里傻逼了，我他喵说我暂时想不起来。因为可能自己的项目有点简单了，面试官还想要看看自己其他的能力，醉醉哒）<br>顺丰科技面试就这样，问了40多分钟，结果问完就让我走了，伤心，怪自己傻逼了。另一个西电的技术面玩就直接HR面了，让我回来等通知，4天了都没有通过不通过的通知，也是厉害。挂了也不让我安心挂！</p>
<hr>
<p>** 去哪儿网** 9月29号下午3点好像<br>感觉自己真的是，干什么事情完全不做任何准备的，很多看过的问题，在面试的时候就只能说有印象，答不详细，想抽死自己！<br>1、去哪儿在金沙国际酒店面试，一天内面完，对去哪儿抱了很大希望，因为听学长说这个面试不难，问的比较基础，妈的现在写这段话还是想扇自己。<br>2、刚见到面试官，他拿到简历就说，你是本科生啊？我说哦。。。然后就是自我介绍。。。<br>3、给我了一张纸，在纸上写出自己用过的所有的类名。。。然后他在一边电脑上敲着东西。突然让写自己用过的所有的类的类名，脑子有点儿蒙了。<br>4、说说mysql的引擎吧，说了myisam和innodb以及其区别，这个看过。<br>5、mysql的各种连接是怎么回事？<br>6、说说B树和B+树的区别吧。<br>7、哈希冲突的解决算法？<br>8、说说HashMap的实现原理？<br>9、有什么问题问我？<br>10、还有一些忘记了。。。<br>&#x2F;(ㄒoㄒ)&#x2F;~~。。。都是些很简单的问题，妈的就是答得不好不够详细。</p>
<hr>
<p>** 总结 ： ** 菜鸟的求职之路总是艰辛的，校招时间还长，十月份还有几家面试（觉得自己的脸火辣辣的疼。。。），看到人都拿到了很好的Offer，不服啊！哎，语言总是苍白的，只有安心敲代码！！！！！！！！！国庆七天奋发图强，多看看Java并发编程实战那书上的东西吧，问得太多了。</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>面试经历</tag>
      </tags>
  </entry>
  <entry>
    <title>一个菜鸟在三星实习的那点儿感受</title>
    <url>/post/db8b7028.html</url>
    <content><![CDATA[<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2016年暑假，在大学这片沃土上的第三个学期就这样结束了，回想大学这三年，为了自己的未来迷茫过，也为自己努力过，也为了不少事情烦恼过，不知道将来自己可以在什么地方过着怎样的生活。曾经以为自己将会平凡地与大部分人一样，每天上着不知老师所云的课程，浑浑噩噩地度过这大学四年的生活，然后找一个普普通通的工作，但是也算自己运气好吧，在大一第二学期遇到了一位让自己眼前一亮的老师，慢慢学习并了解程序员这个行业，最后决定走上学习Java开发的道路。</p>
<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;很早就听说，在大三暑假如果能够找到一个好的专业对口的暑期实习的话，那么在大学毕业以后找工作就方便许多。于是在2016年3月，我便一边努力学习着web开发的相关知识，一边在网上投简历找着实习，终于在一个学长的内推下，我进入了西安三星半导体有限公司，原西安三星电子研究所。</p>
<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;三星是一个气氛非常好的公司，直到现在我都觉得能够进入这个公司是我大学期间的很幸运的一件事。在这儿我遇到了对我很好的师傅们，和那些谦逊和善的同事们。</p>
<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一开始进入公司，我被派的任务是进行artik芯片的测试执行，输出测试执行报告并且开发相应的shell脚本进行自动化测试。因为之前没有过Linux开发经验，所以对于这项工作还是有很多畏惧，怕自己不能完成相应的任务。后来进过一个礼拜的熟悉以后，对于自动化测试的脚本开发和测试执行更加得心应手起来。Artik芯片包含许多模块如MQTT、wifi、TLS、ZigBee、BT&#x2F;BLE、Ethernet等，在进行这些模块的测试脚本的开发的时候，不仅要熟悉脚本开发的shell语言，还要对这些协议也有一定的学习。由于我之前没有接触过Linux，所以对于shell脚本的编写知识懂一丁点儿简单的命令，后来边工作边学习，对于一些常用的Linux命令也掌握的很熟悉了。</p>
<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其实作自动化测试这个工作不是我期望的工作，但是来到公司里，对于公司的安排还是要服从的，毕竟也是能够学习到很多东西的。而且有很多有常年工作经验的师傅们的带领，不管是技术方面还是工作习惯与工作流程的熟悉上我也学习了不少。由于自己在学校是主要学习WEB开发的，所以一直希望自己能够在实习时得到一些这方面的工作经验，在接下来的两个月，我便被leader调到web组进行一个公司内部的项目管理系统的开发。</p>
<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在做第二个项目之前，我不会想到这个项目的短短一个多月比我之前所有时间加起来都学到的多。因为这个项目几乎是由我独自完成前端与后台代码的编写，而且使用的是我之前没有任何经验的PHP语言进行开发。领导要求一个月内完成整个项目的开发，所以压力非常大。我一边在工作中学习，工作，一边再回到寝室后仍查资料学习希望能够把这个项目做到最好。前端方面我更加熟悉了jquery和bootstrap框架以及html&#x2F;css，后端方面我又掌握了新的技能–PHP。从数据库的设计到前端页面的设计，再到后台业务代码的编写，投入了自己非常大的精力。不管最后结果如何，这个项目经历的确使我对于web开发的相关技术知识增长不少。在经历了一个多月的边学边做，最后总算（不是很完美的）完成了这项工作。</p>
<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;9月，由于学校开学以及准备毕业找工作（想找Java开发的岗位），便不能继续在公司继续实习，对于这里很不舍，因为这儿是一个工作气氛非常舒服愉快的地方。在这里我遇到了很多和我一起在这里实习的小伙伴，也结识了很多已经毕业很多年工作近十年的朋友，我相信这些人和事在未来的日子里都是我最宝贵的财富，而这次的实习经历也希望将会是我走上成功的路上的一块踏板。希望自己的努力能够对得起自己的理想！</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
        <tag>实习</tag>
        <tag>三星</tag>
        <tag>shell自动化测试</tag>
      </tags>
  </entry>
</search>
